
STM32H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e078  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800e344  0800e344  0001e344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e3c8  0800e3c8  0001e3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e3d0  0800e3d0  0001e3d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e3d4  0800e3d4  0001e3d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800e3d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  0800e3e8  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  0800e448  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008fc  240000d0  0800e4a8  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240009cc  0800e4a8  000209cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040ab9  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ec9  00000000  00000000  00060bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024e0  00000000  00000000  00065a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002380  00000000  00000000  00067f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b9e5  00000000  00000000  0006a2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cc2e  00000000  00000000  000a5cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00189a6f  00000000  00000000  000d28f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0025c362  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a4a8  00000000  00000000  0025c3b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d0 	.word	0x240000d0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800e32c 	.word	0x0800e32c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000d4 	.word	0x240000d4
 8000308:	0800e32c 	.word	0x0800e32c

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96e 	b.w	8000600 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468c      	mov	ip, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	f040 8083 	bne.w	8000452 <__udivmoddi4+0x116>
 800034c:	428a      	cmp	r2, r1
 800034e:	4617      	mov	r7, r2
 8000350:	d947      	bls.n	80003e2 <__udivmoddi4+0xa6>
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	b142      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000358:	f1c2 0020 	rsb	r0, r2, #32
 800035c:	fa24 f000 	lsr.w	r0, r4, r0
 8000360:	4091      	lsls	r1, r2
 8000362:	4097      	lsls	r7, r2
 8000364:	ea40 0c01 	orr.w	ip, r0, r1
 8000368:	4094      	lsls	r4, r2
 800036a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800036e:	0c23      	lsrs	r3, r4, #16
 8000370:	fbbc f6f8 	udiv	r6, ip, r8
 8000374:	fa1f fe87 	uxth.w	lr, r7
 8000378:	fb08 c116 	mls	r1, r8, r6, ip
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f10e 	mul.w	r1, r6, lr
 8000384:	4299      	cmp	r1, r3
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x60>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 30ff 	add.w	r0, r6, #4294967295
 800038e:	f080 8119 	bcs.w	80005c4 <__udivmoddi4+0x288>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 8116 	bls.w	80005c4 <__udivmoddi4+0x288>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a4:	fb08 3310 	mls	r3, r8, r0, r3
 80003a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003ac:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x8c>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	f080 8105 	bcs.w	80005c8 <__udivmoddi4+0x28c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f240 8102 	bls.w	80005c8 <__udivmoddi4+0x28c>
 80003c4:	3802      	subs	r0, #2
 80003c6:	443c      	add	r4, r7
 80003c8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	2600      	movs	r6, #0
 80003d2:	b11d      	cbz	r5, 80003dc <__udivmoddi4+0xa0>
 80003d4:	40d4      	lsrs	r4, r2
 80003d6:	2300      	movs	r3, #0
 80003d8:	e9c5 4300 	strd	r4, r3, [r5]
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xaa>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f282 	clz	r2, r2
 80003ea:	2a00      	cmp	r2, #0
 80003ec:	d150      	bne.n	8000490 <__udivmoddi4+0x154>
 80003ee:	1bcb      	subs	r3, r1, r7
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f f887 	uxth.w	r8, r7
 80003f8:	2601      	movs	r6, #1
 80003fa:	fbb3 fcfe 	udiv	ip, r3, lr
 80003fe:	0c21      	lsrs	r1, r4, #16
 8000400:	fb0e 331c 	mls	r3, lr, ip, r3
 8000404:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000408:	fb08 f30c 	mul.w	r3, r8, ip
 800040c:	428b      	cmp	r3, r1
 800040e:	d907      	bls.n	8000420 <__udivmoddi4+0xe4>
 8000410:	1879      	adds	r1, r7, r1
 8000412:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0xe2>
 8000418:	428b      	cmp	r3, r1
 800041a:	f200 80e9 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 800041e:	4684      	mov	ip, r0
 8000420:	1ac9      	subs	r1, r1, r3
 8000422:	b2a3      	uxth	r3, r4
 8000424:	fbb1 f0fe 	udiv	r0, r1, lr
 8000428:	fb0e 1110 	mls	r1, lr, r0, r1
 800042c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000430:	fb08 f800 	mul.w	r8, r8, r0
 8000434:	45a0      	cmp	r8, r4
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x10c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x10a>
 8000440:	45a0      	cmp	r8, r4
 8000442:	f200 80d9 	bhi.w	80005f8 <__udivmoddi4+0x2bc>
 8000446:	4618      	mov	r0, r3
 8000448:	eba4 0408 	sub.w	r4, r4, r8
 800044c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000450:	e7bf      	b.n	80003d2 <__udivmoddi4+0x96>
 8000452:	428b      	cmp	r3, r1
 8000454:	d909      	bls.n	800046a <__udivmoddi4+0x12e>
 8000456:	2d00      	cmp	r5, #0
 8000458:	f000 80b1 	beq.w	80005be <__udivmoddi4+0x282>
 800045c:	2600      	movs	r6, #0
 800045e:	e9c5 0100 	strd	r0, r1, [r5]
 8000462:	4630      	mov	r0, r6
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	fab3 f683 	clz	r6, r3
 800046e:	2e00      	cmp	r6, #0
 8000470:	d14a      	bne.n	8000508 <__udivmoddi4+0x1cc>
 8000472:	428b      	cmp	r3, r1
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0x140>
 8000476:	4282      	cmp	r2, r0
 8000478:	f200 80b8 	bhi.w	80005ec <__udivmoddi4+0x2b0>
 800047c:	1a84      	subs	r4, r0, r2
 800047e:	eb61 0103 	sbc.w	r1, r1, r3
 8000482:	2001      	movs	r0, #1
 8000484:	468c      	mov	ip, r1
 8000486:	2d00      	cmp	r5, #0
 8000488:	d0a8      	beq.n	80003dc <__udivmoddi4+0xa0>
 800048a:	e9c5 4c00 	strd	r4, ip, [r5]
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0xa0>
 8000490:	f1c2 0320 	rsb	r3, r2, #32
 8000494:	fa20 f603 	lsr.w	r6, r0, r3
 8000498:	4097      	lsls	r7, r2
 800049a:	fa01 f002 	lsl.w	r0, r1, r2
 800049e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a2:	40d9      	lsrs	r1, r3
 80004a4:	4330      	orrs	r0, r6
 80004a6:	0c03      	lsrs	r3, r0, #16
 80004a8:	fbb1 f6fe 	udiv	r6, r1, lr
 80004ac:	fa1f f887 	uxth.w	r8, r7
 80004b0:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b8:	fb06 f108 	mul.w	r1, r6, r8
 80004bc:	4299      	cmp	r1, r3
 80004be:	fa04 f402 	lsl.w	r4, r4, r2
 80004c2:	d909      	bls.n	80004d8 <__udivmoddi4+0x19c>
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ca:	f080 808d 	bcs.w	80005e8 <__udivmoddi4+0x2ac>
 80004ce:	4299      	cmp	r1, r3
 80004d0:	f240 808a 	bls.w	80005e8 <__udivmoddi4+0x2ac>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	443b      	add	r3, r7
 80004d8:	1a5b      	subs	r3, r3, r1
 80004da:	b281      	uxth	r1, r0
 80004dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb00 f308 	mul.w	r3, r0, r8
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x1c4>
 80004f0:	1879      	adds	r1, r7, r1
 80004f2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004f6:	d273      	bcs.n	80005e0 <__udivmoddi4+0x2a4>
 80004f8:	428b      	cmp	r3, r1
 80004fa:	d971      	bls.n	80005e0 <__udivmoddi4+0x2a4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4439      	add	r1, r7
 8000500:	1acb      	subs	r3, r1, r3
 8000502:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000506:	e778      	b.n	80003fa <__udivmoddi4+0xbe>
 8000508:	f1c6 0c20 	rsb	ip, r6, #32
 800050c:	fa03 f406 	lsl.w	r4, r3, r6
 8000510:	fa22 f30c 	lsr.w	r3, r2, ip
 8000514:	431c      	orrs	r4, r3
 8000516:	fa20 f70c 	lsr.w	r7, r0, ip
 800051a:	fa01 f306 	lsl.w	r3, r1, r6
 800051e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000522:	fa21 f10c 	lsr.w	r1, r1, ip
 8000526:	431f      	orrs	r7, r3
 8000528:	0c3b      	lsrs	r3, r7, #16
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fa1f f884 	uxth.w	r8, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053a:	fb09 fa08 	mul.w	sl, r9, r8
 800053e:	458a      	cmp	sl, r1
 8000540:	fa02 f206 	lsl.w	r2, r2, r6
 8000544:	fa00 f306 	lsl.w	r3, r0, r6
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x220>
 800054a:	1861      	adds	r1, r4, r1
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	d248      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 8000552:	458a      	cmp	sl, r1
 8000554:	d946      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 8000556:	f1a9 0902 	sub.w	r9, r9, #2
 800055a:	4421      	add	r1, r4
 800055c:	eba1 010a 	sub.w	r1, r1, sl
 8000560:	b2bf      	uxth	r7, r7
 8000562:	fbb1 f0fe 	udiv	r0, r1, lr
 8000566:	fb0e 1110 	mls	r1, lr, r0, r1
 800056a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800056e:	fb00 f808 	mul.w	r8, r0, r8
 8000572:	45b8      	cmp	r8, r7
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x24a>
 8000576:	19e7      	adds	r7, r4, r7
 8000578:	f100 31ff 	add.w	r1, r0, #4294967295
 800057c:	d22e      	bcs.n	80005dc <__udivmoddi4+0x2a0>
 800057e:	45b8      	cmp	r8, r7
 8000580:	d92c      	bls.n	80005dc <__udivmoddi4+0x2a0>
 8000582:	3802      	subs	r0, #2
 8000584:	4427      	add	r7, r4
 8000586:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058a:	eba7 0708 	sub.w	r7, r7, r8
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	454f      	cmp	r7, r9
 8000594:	46c6      	mov	lr, r8
 8000596:	4649      	mov	r1, r9
 8000598:	d31a      	bcc.n	80005d0 <__udivmoddi4+0x294>
 800059a:	d017      	beq.n	80005cc <__udivmoddi4+0x290>
 800059c:	b15d      	cbz	r5, 80005b6 <__udivmoddi4+0x27a>
 800059e:	ebb3 020e 	subs.w	r2, r3, lr
 80005a2:	eb67 0701 	sbc.w	r7, r7, r1
 80005a6:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005aa:	40f2      	lsrs	r2, r6
 80005ac:	ea4c 0202 	orr.w	r2, ip, r2
 80005b0:	40f7      	lsrs	r7, r6
 80005b2:	e9c5 2700 	strd	r2, r7, [r5]
 80005b6:	2600      	movs	r6, #0
 80005b8:	4631      	mov	r1, r6
 80005ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005be:	462e      	mov	r6, r5
 80005c0:	4628      	mov	r0, r5
 80005c2:	e70b      	b.n	80003dc <__udivmoddi4+0xa0>
 80005c4:	4606      	mov	r6, r0
 80005c6:	e6e9      	b.n	800039c <__udivmoddi4+0x60>
 80005c8:	4618      	mov	r0, r3
 80005ca:	e6fd      	b.n	80003c8 <__udivmoddi4+0x8c>
 80005cc:	4543      	cmp	r3, r8
 80005ce:	d2e5      	bcs.n	800059c <__udivmoddi4+0x260>
 80005d0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d4:	eb69 0104 	sbc.w	r1, r9, r4
 80005d8:	3801      	subs	r0, #1
 80005da:	e7df      	b.n	800059c <__udivmoddi4+0x260>
 80005dc:	4608      	mov	r0, r1
 80005de:	e7d2      	b.n	8000586 <__udivmoddi4+0x24a>
 80005e0:	4660      	mov	r0, ip
 80005e2:	e78d      	b.n	8000500 <__udivmoddi4+0x1c4>
 80005e4:	4681      	mov	r9, r0
 80005e6:	e7b9      	b.n	800055c <__udivmoddi4+0x220>
 80005e8:	4666      	mov	r6, ip
 80005ea:	e775      	b.n	80004d8 <__udivmoddi4+0x19c>
 80005ec:	4630      	mov	r0, r6
 80005ee:	e74a      	b.n	8000486 <__udivmoddi4+0x14a>
 80005f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f4:	4439      	add	r1, r7
 80005f6:	e713      	b.n	8000420 <__udivmoddi4+0xe4>
 80005f8:	3802      	subs	r0, #2
 80005fa:	443c      	add	r4, r7
 80005fc:	e724      	b.n	8000448 <__udivmoddi4+0x10c>
 80005fe:	bf00      	nop

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f002 fc42 	bl	8002e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f834 	bl	8000678 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000610:	f000 f8ac 	bl	800076c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f001 f81e 	bl	8001654 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000618:	f000 f8d4 	bl	80007c4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800061c:	f000 f94a 	bl	80008b4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000620:	f000 f9aa 	bl	8000978 <MX_ADC3_Init>
  MX_DAC1_Init();
 8000624:	f000 fa16 	bl	8000a54 <MX_DAC1_Init>
  MX_ETH_Init();
 8000628:	f000 fa46 	bl	8000ab8 <MX_ETH_Init>
  MX_FDCAN1_Init();
 800062c:	f000 fa90 	bl	8000b50 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000630:	f000 faf2 	bl	8000c18 <MX_FDCAN2_Init>
  MX_I2C4_Init();
 8000634:	f000 fb54 	bl	8000ce0 <MX_I2C4_Init>
  MX_LTDC_Init();
 8000638:	f000 fb92 	bl	8000d60 <MX_LTDC_Init>
  MX_OCTOSPI1_Init();
 800063c:	f000 fc42 	bl	8000ec4 <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 8000640:	f000 fca8 	bl	8000f94 <MX_OCTOSPI2_Init>
  MX_SAI1_Init();
 8000644:	f000 fd2c 	bl	80010a0 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8000648:	f000 fde8 	bl	800121c <MX_SDMMC1_SD_Init>
  MX_TIM1_Init();
 800064c:	f000 fe0a 	bl	8001264 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000650:	f000 fe96 	bl	8001380 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000654:	f000 ff04 	bl	8001460 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8000658:	f000 ff5c 	bl	8001514 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800065c:	f000 ffa6 	bl	80015ac <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000660:	f000 fff0 	bl	8001644 <MX_USB_OTG_HS_USB_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, USER_LED2_Pin);
 8000664:	2104      	movs	r1, #4
 8000666:	4803      	ldr	r0, [pc, #12]	; (8000674 <main+0x70>)
 8000668:	f005 fbd5 	bl	8005e16 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800066c:	2064      	movs	r0, #100	; 0x64
 800066e:	f002 fca1 	bl	8002fb4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, USER_LED2_Pin);
 8000672:	e7f7      	b.n	8000664 <main+0x60>
 8000674:	58020800 	.word	0x58020800

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b09c      	sub	sp, #112	; 0x70
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000682:	224c      	movs	r2, #76	; 0x4c
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f00d fe48 	bl	800e31c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2220      	movs	r2, #32
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f00d fe42 	bl	800e31c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000698:	2004      	movs	r0, #4
 800069a:	f006 febb 	bl	8007414 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800069e:	2300      	movs	r3, #0
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	4b30      	ldr	r3, [pc, #192]	; (8000764 <SystemClock_Config+0xec>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	4a2f      	ldr	r2, [pc, #188]	; (8000764 <SystemClock_Config+0xec>)
 80006a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006ac:	6193      	str	r3, [r2, #24]
 80006ae:	4b2d      	ldr	r3, [pc, #180]	; (8000764 <SystemClock_Config+0xec>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006ba:	bf00      	nop
 80006bc:	4b29      	ldr	r3, [pc, #164]	; (8000764 <SystemClock_Config+0xec>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006c8:	d1f8      	bne.n	80006bc <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80006ca:	4b27      	ldr	r3, [pc, #156]	; (8000768 <SystemClock_Config+0xf0>)
 80006cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ce:	f023 0303 	bic.w	r3, r3, #3
 80006d2:	4a25      	ldr	r2, [pc, #148]	; (8000768 <SystemClock_Config+0xf0>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006da:	2321      	movs	r3, #33	; 0x21
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006e4:	2301      	movs	r3, #1
 80006e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	2302      	movs	r3, #2
 80006ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ec:	2302      	movs	r3, #2
 80006ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80006f0:	2305      	movs	r3, #5
 80006f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 110;
 80006f4:	236e      	movs	r3, #110	; 0x6e
 80006f6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000700:	2302      	movs	r3, #2
 8000702:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000704:	2308      	movs	r3, #8
 8000706:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000708:	2300      	movs	r3, #0
 800070a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000714:	4618      	mov	r0, r3
 8000716:	f006 fed7 	bl	80074c8 <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000720:	f001 f960 	bl	80019e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000724:	233f      	movs	r3, #63	; 0x3f
 8000726:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000728:	2303      	movs	r3, #3
 800072a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000730:	2308      	movs	r3, #8
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000734:	2340      	movs	r3, #64	; 0x40
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000738:	2340      	movs	r3, #64	; 0x40
 800073a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800073c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000740:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000742:	2340      	movs	r3, #64	; 0x40
 8000744:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2103      	movs	r1, #3
 800074a:	4618      	mov	r0, r3
 800074c:	f007 fa68 	bl	8007c20 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000756:	f001 f945 	bl	80019e4 <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3770      	adds	r7, #112	; 0x70
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	58024800 	.word	0x58024800
 8000768:	58024400 	.word	0x58024400

0800076c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b0ae      	sub	sp, #184	; 0xb8
 8000770:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	22b4      	movs	r2, #180	; 0xb4
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f00d fdcf 	bl	800e31c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800077e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000782:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8000784:	2305      	movs	r3, #5
 8000786:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8000788:	2350      	movs	r3, #80	; 0x50
 800078a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 800078c:	2305      	movs	r3, #5
 800078e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000790:	2302      	movs	r3, #2
 8000792:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000794:	2302      	movs	r3, #2
 8000796:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000798:	2380      	movs	r3, #128	; 0x80
 800079a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007a4:	2300      	movs	r3, #0
 80007a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	4618      	mov	r0, r3
 80007ae:	f007 fdc3 	bl	8008338 <HAL_RCCEx_PeriphCLKConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 80007b8:	f001 f914 	bl	80019e4 <Error_Handler>
  }
}
 80007bc:	bf00      	nop
 80007be:	37b8      	adds	r7, #184	; 0xb8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08c      	sub	sp, #48	; 0x30
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007d6:	463b      	mov	r3, r7
 80007d8:	2224      	movs	r2, #36	; 0x24
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f00d fd9d 	bl	800e31c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80007e2:	4b31      	ldr	r3, [pc, #196]	; (80008a8 <MX_ADC1_Init+0xe4>)
 80007e4:	4a31      	ldr	r2, [pc, #196]	; (80008ac <MX_ADC1_Init+0xe8>)
 80007e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007e8:	4b2f      	ldr	r3, [pc, #188]	; (80008a8 <MX_ADC1_Init+0xe4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007ee:	4b2e      	ldr	r3, [pc, #184]	; (80008a8 <MX_ADC1_Init+0xe4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007f4:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <MX_ADC1_Init+0xe4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007fa:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <MX_ADC1_Init+0xe4>)
 80007fc:	2204      	movs	r2, #4
 80007fe:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000800:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <MX_ADC1_Init+0xe4>)
 8000802:	2200      	movs	r2, #0
 8000804:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000806:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <MX_ADC1_Init+0xe4>)
 8000808:	2200      	movs	r2, #0
 800080a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800080c:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <MX_ADC1_Init+0xe4>)
 800080e:	2201      	movs	r2, #1
 8000810:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000812:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <MX_ADC1_Init+0xe4>)
 8000814:	2200      	movs	r2, #0
 8000816:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800081a:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <MX_ADC1_Init+0xe4>)
 800081c:	2200      	movs	r2, #0
 800081e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000820:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <MX_ADC1_Init+0xe4>)
 8000822:	2200      	movs	r2, #0
 8000824:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000826:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <MX_ADC1_Init+0xe4>)
 8000828:	2200      	movs	r2, #0
 800082a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <MX_ADC1_Init+0xe4>)
 800082e:	2200      	movs	r2, #0
 8000830:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_ADC1_Init+0xe4>)
 8000834:	2200      	movs	r2, #0
 8000836:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_ADC1_Init+0xe4>)
 800083a:	2200      	movs	r2, #0
 800083c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000840:	4819      	ldr	r0, [pc, #100]	; (80008a8 <MX_ADC1_Init+0xe4>)
 8000842:	f002 fe4b 	bl	80034dc <HAL_ADC_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800084c:	f001 f8ca 	bl	80019e4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000858:	4619      	mov	r1, r3
 800085a:	4813      	ldr	r0, [pc, #76]	; (80008a8 <MX_ADC1_Init+0xe4>)
 800085c:	f003 fe84 	bl	8004568 <HAL_ADCEx_MultiModeConfigChannel>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000866:	f001 f8bd 	bl	80019e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_ADC1_Init+0xec>)
 800086c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800086e:	2306      	movs	r3, #6
 8000870:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000876:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800087a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800087c:	2304      	movs	r3, #4
 800087e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800088a:	463b      	mov	r3, r7
 800088c:	4619      	mov	r1, r3
 800088e:	4806      	ldr	r0, [pc, #24]	; (80008a8 <MX_ADC1_Init+0xe4>)
 8000890:	f003 f82c 	bl	80038ec <HAL_ADC_ConfigChannel>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800089a:	f001 f8a3 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	3730      	adds	r7, #48	; 0x30
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	24000518 	.word	0x24000518
 80008ac:	40022000 	.word	0x40022000
 80008b0:	04300002 	.word	0x04300002

080008b4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2224      	movs	r2, #36	; 0x24
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f00d fd2b 	bl	800e31c <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80008c6:	4b2a      	ldr	r3, [pc, #168]	; (8000970 <MX_ADC2_Init+0xbc>)
 80008c8:	4a2a      	ldr	r2, [pc, #168]	; (8000974 <MX_ADC2_Init+0xc0>)
 80008ca:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008cc:	4b28      	ldr	r3, [pc, #160]	; (8000970 <MX_ADC2_Init+0xbc>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80008d2:	4b27      	ldr	r3, [pc, #156]	; (8000970 <MX_ADC2_Init+0xbc>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008d8:	4b25      	ldr	r3, [pc, #148]	; (8000970 <MX_ADC2_Init+0xbc>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008de:	4b24      	ldr	r3, [pc, #144]	; (8000970 <MX_ADC2_Init+0xbc>)
 80008e0:	2204      	movs	r2, #4
 80008e2:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008e4:	4b22      	ldr	r3, [pc, #136]	; (8000970 <MX_ADC2_Init+0xbc>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008ea:	4b21      	ldr	r3, [pc, #132]	; (8000970 <MX_ADC2_Init+0xbc>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80008f0:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <MX_ADC2_Init+0xbc>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008f6:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <MX_ADC2_Init+0xbc>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <MX_ADC2_Init+0xbc>)
 8000900:	2200      	movs	r2, #0
 8000902:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000904:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_ADC2_Init+0xbc>)
 8000906:	2200      	movs	r2, #0
 8000908:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <MX_ADC2_Init+0xbc>)
 800090c:	2200      	movs	r2, #0
 800090e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000910:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_ADC2_Init+0xbc>)
 8000912:	2200      	movs	r2, #0
 8000914:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <MX_ADC2_Init+0xbc>)
 8000918:	2200      	movs	r2, #0
 800091a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_ADC2_Init+0xbc>)
 800091e:	2200      	movs	r2, #0
 8000920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000924:	4812      	ldr	r0, [pc, #72]	; (8000970 <MX_ADC2_Init+0xbc>)
 8000926:	f002 fdd9 	bl	80034dc <HAL_ADC_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000930:	f001 f858 	bl	80019e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000934:	2301      	movs	r3, #1
 8000936:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000938:	2306      	movs	r3, #6
 800093a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000940:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000944:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000946:	2304      	movs	r3, #4
 8000948:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	4619      	mov	r1, r3
 8000958:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_ADC2_Init+0xbc>)
 800095a:	f002 ffc7 	bl	80038ec <HAL_ADC_ConfigChannel>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000964:	f001 f83e 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	3728      	adds	r7, #40	; 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	24000240 	.word	0x24000240
 8000974:	40022100 	.word	0x40022100

08000978 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2224      	movs	r2, #36	; 0x24
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f00d fcc9 	bl	800e31c <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 800098a:	4b30      	ldr	r3, [pc, #192]	; (8000a4c <MX_ADC3_Init+0xd4>)
 800098c:	4a30      	ldr	r2, [pc, #192]	; (8000a50 <MX_ADC3_Init+0xd8>)
 800098e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000990:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <MX_ADC3_Init+0xd4>)
 8000992:	2200      	movs	r2, #0
 8000994:	605a      	str	r2, [r3, #4]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000996:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <MX_ADC3_Init+0xd4>)
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800099c:	4b2b      	ldr	r3, [pc, #172]	; (8000a4c <MX_ADC3_Init+0xd4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009a2:	4b2a      	ldr	r3, [pc, #168]	; (8000a4c <MX_ADC3_Init+0xd4>)
 80009a4:	2204      	movs	r2, #4
 80009a6:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80009a8:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <MX_ADC3_Init+0xd4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80009ae:	4b27      	ldr	r3, [pc, #156]	; (8000a4c <MX_ADC3_Init+0xd4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80009b4:	4b25      	ldr	r3, [pc, #148]	; (8000a4c <MX_ADC3_Init+0xd4>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80009ba:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <MX_ADC3_Init+0xd4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009c2:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <MX_ADC3_Init+0xd4>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009c8:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <MX_ADC3_Init+0xd4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80009ce:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <MX_ADC3_Init+0xd4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <MX_ADC3_Init+0xd4>)
 80009d8:	2200      	movs	r2, #0
 80009da:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <MX_ADC3_Init+0xd4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_ADC3_Init+0xd4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_ADC3_Init+0xd4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_ADC3_Init+0xd4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009f6:	4815      	ldr	r0, [pc, #84]	; (8000a4c <MX_ADC3_Init+0xd4>)
 80009f8:	f002 fd70 	bl	80034dc <HAL_ADC_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000a02:	f000 ffef 	bl	80019e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a06:	2301      	movs	r3, #1
 8000a08:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a0a:	2306      	movs	r3, #6
 8000a0c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a12:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a16:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_ADC3_Init+0xd4>)
 8000a36:	f002 ff59 	bl	80038ec <HAL_ADC_ConfigChannel>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8000a40:	f000 ffd0 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	3728      	adds	r7, #40	; 0x28
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	24000588 	.word	0x24000588
 8000a50:	58026000 	.word	0x58026000

08000a54 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2224      	movs	r2, #36	; 0x24
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f00d fc5b 	bl	800e31c <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_DAC1_Init+0x5c>)
 8000a68:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <MX_DAC1_Init+0x60>)
 8000a6a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a6c:	4810      	ldr	r0, [pc, #64]	; (8000ab0 <MX_DAC1_Init+0x5c>)
 8000a6e:	f003 ff40 	bl	80048f2 <HAL_DAC_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000a78:	f000 ffb4 	bl	80019e4 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2210      	movs	r2, #16
 8000a94:	4619      	mov	r1, r3
 8000a96:	4806      	ldr	r0, [pc, #24]	; (8000ab0 <MX_DAC1_Init+0x5c>)
 8000a98:	f003 ff4e 	bl	8004938 <HAL_DAC_ConfigChannel>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000aa2:	f000 ff9f 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	; 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2400019c 	.word	0x2400019c
 8000ab4:	40007400 	.word	0x40007400

08000ab8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000abc:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <MX_ETH_Init+0x80>)
 8000abe:	4a1f      	ldr	r2, [pc, #124]	; (8000b3c <MX_ETH_Init+0x84>)
 8000ac0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <MX_ETH_Init+0x88>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <MX_ETH_Init+0x88>)
 8000aca:	2280      	movs	r2, #128	; 0x80
 8000acc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <MX_ETH_Init+0x88>)
 8000ad0:	22e1      	movs	r2, #225	; 0xe1
 8000ad2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ad4:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_ETH_Init+0x88>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000ada:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <MX_ETH_Init+0x88>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ae0:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <MX_ETH_Init+0x88>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <MX_ETH_Init+0x80>)
 8000ae8:	4a15      	ldr	r2, [pc, #84]	; (8000b40 <MX_ETH_Init+0x88>)
 8000aea:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_ETH_Init+0x80>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_ETH_Init+0x80>)
 8000af4:	4a13      	ldr	r2, [pc, #76]	; (8000b44 <MX_ETH_Init+0x8c>)
 8000af6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_ETH_Init+0x80>)
 8000afa:	4a13      	ldr	r2, [pc, #76]	; (8000b48 <MX_ETH_Init+0x90>)
 8000afc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_ETH_Init+0x80>)
 8000b00:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b04:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b06:	480c      	ldr	r0, [pc, #48]	; (8000b38 <MX_ETH_Init+0x80>)
 8000b08:	f004 f846 	bl	8004b98 <HAL_ETH_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000b12:	f000 ff67 	bl	80019e4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b16:	2234      	movs	r2, #52	; 0x34
 8000b18:	2100      	movs	r1, #0
 8000b1a:	480c      	ldr	r0, [pc, #48]	; (8000b4c <MX_ETH_Init+0x94>)
 8000b1c:	f00d fbfe 	bl	800e31c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b20:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <MX_ETH_Init+0x94>)
 8000b22:	2221      	movs	r2, #33	; 0x21
 8000b24:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_ETH_Init+0x94>)
 8000b28:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b2c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b2e:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <MX_ETH_Init+0x94>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	2400080c 	.word	0x2400080c
 8000b3c:	40028000 	.word	0x40028000
 8000b40:	240000ec 	.word	0x240000ec
 8000b44:	24000070 	.word	0x24000070
 8000b48:	24000010 	.word	0x24000010
 8000b4c:	24000894 	.word	0x24000894

08000b50 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000b54:	4b2e      	ldr	r3, [pc, #184]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000b56:	4a2f      	ldr	r2, [pc, #188]	; (8000c14 <MX_FDCAN1_Init+0xc4>)
 8000b58:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b5a:	4b2d      	ldr	r3, [pc, #180]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000b60:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000b66:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000b6c:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000b72:	4b27      	ldr	r3, [pc, #156]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000b78:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000b7e:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000b84:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000b86:	2202      	movs	r2, #2
 8000b88:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000b8a:	4b21      	ldr	r3, [pc, #132]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000b90:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000b96:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000ba8:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000bb4:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000bc2:	2204      	movs	r2, #4
 8000bc4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000bc6:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000bcc:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000bce:	2204      	movs	r2, #4
 8000bd0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000bda:	2204      	movs	r2, #4
 8000bdc:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000be4:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000bf8:	2204      	movs	r2, #4
 8000bfa:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000bfc:	4804      	ldr	r0, [pc, #16]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000bfe:	f004 fbe1 	bl	80053c4 <HAL_FDCAN_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000c08:	f000 feec 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	24000688 	.word	0x24000688
 8000c14:	4000a000 	.word	0x4000a000

08000c18 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000c1c:	4b2e      	ldr	r3, [pc, #184]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000c1e:	4a2f      	ldr	r2, [pc, #188]	; (8000cdc <MX_FDCAN2_Init+0xc4>)
 8000c20:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c22:	4b2d      	ldr	r3, [pc, #180]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000c28:	4b2b      	ldr	r3, [pc, #172]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000c3a:	4b27      	ldr	r3, [pc, #156]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000c40:	4b25      	ldr	r3, [pc, #148]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000c46:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000c4c:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000c4e:	2202      	movs	r2, #2
 8000c50:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000c52:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000c54:	2202      	movs	r2, #2
 8000c56:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000c58:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000c5e:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000c64:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000c70:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000c8a:	2204      	movs	r2, #4
 8000c8c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000c94:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000c96:	2204      	movs	r2, #4
 8000c98:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000ca2:	2204      	movs	r2, #4
 8000ca4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000cc0:	2204      	movs	r2, #4
 8000cc2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000cc4:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <MX_FDCAN2_Init+0xc0>)
 8000cc6:	f004 fb7d 	bl	80053c4 <HAL_FDCAN_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000cd0:	f000 fe88 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	240008c8 	.word	0x240008c8
 8000cdc:	4000a400 	.word	0x4000a400

08000ce0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <MX_I2C4_Init+0x74>)
 8000ce6:	4a1c      	ldr	r2, [pc, #112]	; (8000d58 <MX_I2C4_Init+0x78>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60404E72;
 8000cea:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <MX_I2C4_Init+0x74>)
 8000cec:	4a1b      	ldr	r2, [pc, #108]	; (8000d5c <MX_I2C4_Init+0x7c>)
 8000cee:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000cf0:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <MX_I2C4_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf6:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <MX_I2C4_Init+0x74>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cfc:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_I2C4_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000d02:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <MX_I2C4_Init+0x74>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <MX_I2C4_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_I2C4_Init+0x74>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <MX_I2C4_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000d1a:	480e      	ldr	r0, [pc, #56]	; (8000d54 <MX_I2C4_Init+0x74>)
 8000d1c:	f005 f896 	bl	8005e4c <HAL_I2C_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000d26:	f000 fe5d 	bl	80019e4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4809      	ldr	r0, [pc, #36]	; (8000d54 <MX_I2C4_Init+0x74>)
 8000d2e:	f005 f91d 	bl	8005f6c <HAL_I2CEx_ConfigAnalogFilter>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000d38:	f000 fe54 	bl	80019e4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_I2C4_Init+0x74>)
 8000d40:	f005 f95f 	bl	8006002 <HAL_I2CEx_ConfigDigitalFilter>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000d4a:	f000 fe4b 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	24000104 	.word	0x24000104
 8000d58:	58001c00 	.word	0x58001c00
 8000d5c:	60404e72 	.word	0x60404e72

08000d60 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b09a      	sub	sp, #104	; 0x68
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000d66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d6a:	2234      	movs	r2, #52	; 0x34
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f00d fad4 	bl	800e31c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000d74:	463b      	mov	r3, r7
 8000d76:	2234      	movs	r2, #52	; 0x34
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f00d face 	bl	800e31c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000d80:	4b4e      	ldr	r3, [pc, #312]	; (8000ebc <MX_LTDC_Init+0x15c>)
 8000d82:	4a4f      	ldr	r2, [pc, #316]	; (8000ec0 <MX_LTDC_Init+0x160>)
 8000d84:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000d86:	4b4d      	ldr	r3, [pc, #308]	; (8000ebc <MX_LTDC_Init+0x15c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000d8c:	4b4b      	ldr	r3, [pc, #300]	; (8000ebc <MX_LTDC_Init+0x15c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000d92:	4b4a      	ldr	r3, [pc, #296]	; (8000ebc <MX_LTDC_Init+0x15c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000d98:	4b48      	ldr	r3, [pc, #288]	; (8000ebc <MX_LTDC_Init+0x15c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000d9e:	4b47      	ldr	r3, [pc, #284]	; (8000ebc <MX_LTDC_Init+0x15c>)
 8000da0:	2207      	movs	r2, #7
 8000da2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000da4:	4b45      	ldr	r3, [pc, #276]	; (8000ebc <MX_LTDC_Init+0x15c>)
 8000da6:	2203      	movs	r2, #3
 8000da8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000daa:	4b44      	ldr	r3, [pc, #272]	; (8000ebc <MX_LTDC_Init+0x15c>)
 8000dac:	220e      	movs	r2, #14
 8000dae:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000db0:	4b42      	ldr	r3, [pc, #264]	; (8000ebc <MX_LTDC_Init+0x15c>)
 8000db2:	2205      	movs	r2, #5
 8000db4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000db6:	4b41      	ldr	r3, [pc, #260]	; (8000ebc <MX_LTDC_Init+0x15c>)
 8000db8:	f240 228e 	movw	r2, #654	; 0x28e
 8000dbc:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000dbe:	4b3f      	ldr	r3, [pc, #252]	; (8000ebc <MX_LTDC_Init+0x15c>)
 8000dc0:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000dc4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000dc6:	4b3d      	ldr	r3, [pc, #244]	; (8000ebc <MX_LTDC_Init+0x15c>)
 8000dc8:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000dcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000dce:	4b3b      	ldr	r3, [pc, #236]	; (8000ebc <MX_LTDC_Init+0x15c>)
 8000dd0:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000dd4:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000dd6:	4b39      	ldr	r3, [pc, #228]	; (8000ebc <MX_LTDC_Init+0x15c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000dde:	4b37      	ldr	r3, [pc, #220]	; (8000ebc <MX_LTDC_Init+0x15c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000de6:	4b35      	ldr	r3, [pc, #212]	; (8000ebc <MX_LTDC_Init+0x15c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000dee:	4833      	ldr	r0, [pc, #204]	; (8000ebc <MX_LTDC_Init+0x15c>)
 8000df0:	f005 f954 	bl	800609c <HAL_LTDC_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000dfa:	f000 fdf3 	bl	80019e4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e1e:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000e20:	2305      	movs	r3, #5
 8000e22:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000e42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e46:	2200      	movs	r2, #0
 8000e48:	4619      	mov	r1, r3
 8000e4a:	481c      	ldr	r0, [pc, #112]	; (8000ebc <MX_LTDC_Init+0x15c>)
 8000e4c:	f005 f9f6 	bl	800623c <HAL_LTDC_ConfigLayer>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000e56:	f000 fdc5 	bl	80019e4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e7a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000e7c:	2305      	movs	r3, #5
 8000e7e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_LTDC_Init+0x15c>)
 8000ea6:	f005 f9c9 	bl	800623c <HAL_LTDC_ConfigLayer>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000eb0:	f000 fd98 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	3768      	adds	r7, #104	; 0x68
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	240003d8 	.word	0x240003d8
 8000ec0:	50001000 	.word	0x50001000

08000ec4 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000eca:	463b      	mov	r3, r7
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
 8000ed8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000eda:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <MX_OCTOSPI1_Init+0xc4>)
 8000edc:	4a2b      	ldr	r2, [pc, #172]	; (8000f8c <MX_OCTOSPI1_Init+0xc8>)
 8000ede:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000ee0:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <MX_OCTOSPI1_Init+0xc4>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000ee6:	4b28      	ldr	r3, [pc, #160]	; (8000f88 <MX_OCTOSPI1_Init+0xc4>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000eec:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <MX_OCTOSPI1_Init+0xc4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000ef2:	4b25      	ldr	r3, [pc, #148]	; (8000f88 <MX_OCTOSPI1_Init+0xc4>)
 8000ef4:	2220      	movs	r2, #32
 8000ef6:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000ef8:	4b23      	ldr	r3, [pc, #140]	; (8000f88 <MX_OCTOSPI1_Init+0xc4>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000efe:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <MX_OCTOSPI1_Init+0xc4>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000f04:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <MX_OCTOSPI1_Init+0xc4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000f0a:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <MX_OCTOSPI1_Init+0xc4>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8000f10:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <MX_OCTOSPI1_Init+0xc4>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000f16:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <MX_OCTOSPI1_Init+0xc4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <MX_OCTOSPI1_Init+0xc4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <MX_OCTOSPI1_Init+0xc4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.ClkChipSelectHighTime = 0;
 8000f28:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <MX_OCTOSPI1_Init+0xc4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000f2e:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <MX_OCTOSPI1_Init+0xc4>)
 8000f30:	2208      	movs	r2, #8
 8000f32:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.MaxTran = 0;
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_OCTOSPI1_Init+0xc4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	63da      	str	r2, [r3, #60]	; 0x3c
  hospi1.Init.Refresh = 0;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <MX_OCTOSPI1_Init+0xc4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000f40:	4811      	ldr	r0, [pc, #68]	; (8000f88 <MX_OCTOSPI1_Init+0xc4>)
 8000f42:	f005 fb53 	bl	80065ec <HAL_OSPI_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_OCTOSPI1_Init+0x8c>
  {
    Error_Handler();
 8000f4c:	f000 fd4a 	bl	80019e4 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.DQSPort = 1;
 8000f54:	2301      	movs	r3, #1
 8000f56:	607b      	str	r3, [r7, #4]
  sOspiManagerCfg.NCSPort = 1;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000f5c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000f60:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <MX_OCTOSPI1_Init+0xcc>)
 8000f64:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f66:	463b      	mov	r3, r7
 8000f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <MX_OCTOSPI1_Init+0xc4>)
 8000f70:	f005 fc48 	bl	8006804 <HAL_OSPIM_Config>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_OCTOSPI1_Init+0xba>
  {
    Error_Handler();
 8000f7a:	f000 fd33 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	240002b0 	.word	0x240002b0
 8000f8c:	52005000 	.word	0x52005000
 8000f90:	01000001 	.word	0x01000001

08000f94 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000f9a:	f107 0310 	add.w	r3, r7, #16
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]
 8000faa:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8000fac:	463b      	mov	r3, r7
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8000fb8:	4b35      	ldr	r3, [pc, #212]	; (8001090 <MX_OCTOSPI2_Init+0xfc>)
 8000fba:	4a36      	ldr	r2, [pc, #216]	; (8001094 <MX_OCTOSPI2_Init+0x100>)
 8000fbc:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 8000fbe:	4b34      	ldr	r3, [pc, #208]	; (8001090 <MX_OCTOSPI2_Init+0xfc>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000fc4:	4b32      	ldr	r3, [pc, #200]	; (8001090 <MX_OCTOSPI2_Init+0xfc>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8000fca:	4b31      	ldr	r3, [pc, #196]	; (8001090 <MX_OCTOSPI2_Init+0xfc>)
 8000fcc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000fd0:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 8000fd2:	4b2f      	ldr	r3, [pc, #188]	; (8001090 <MX_OCTOSPI2_Init+0xfc>)
 8000fd4:	2220      	movs	r2, #32
 8000fd6:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 8000fd8:	4b2d      	ldr	r3, [pc, #180]	; (8001090 <MX_OCTOSPI2_Init+0xfc>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000fde:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <MX_OCTOSPI2_Init+0xfc>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000fe4:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <MX_OCTOSPI2_Init+0xfc>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000fea:	4b29      	ldr	r3, [pc, #164]	; (8001090 <MX_OCTOSPI2_Init+0xfc>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 1;
 8000ff0:	4b27      	ldr	r3, [pc, #156]	; (8001090 <MX_OCTOSPI2_Init+0xfc>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000ff6:	4b26      	ldr	r3, [pc, #152]	; (8001090 <MX_OCTOSPI2_Init+0xfc>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000ffc:	4b24      	ldr	r3, [pc, #144]	; (8001090 <MX_OCTOSPI2_Init+0xfc>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 8001002:	4b23      	ldr	r3, [pc, #140]	; (8001090 <MX_OCTOSPI2_Init+0xfc>)
 8001004:	2200      	movs	r2, #0
 8001006:	631a      	str	r2, [r3, #48]	; 0x30
  hospi2.Init.ClkChipSelectHighTime = 0;
 8001008:	4b21      	ldr	r3, [pc, #132]	; (8001090 <MX_OCTOSPI2_Init+0xfc>)
 800100a:	2200      	movs	r2, #0
 800100c:	635a      	str	r2, [r3, #52]	; 0x34
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800100e:	4b20      	ldr	r3, [pc, #128]	; (8001090 <MX_OCTOSPI2_Init+0xfc>)
 8001010:	2208      	movs	r2, #8
 8001012:	639a      	str	r2, [r3, #56]	; 0x38
  hospi2.Init.MaxTran = 0;
 8001014:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <MX_OCTOSPI2_Init+0xfc>)
 8001016:	2200      	movs	r2, #0
 8001018:	63da      	str	r2, [r3, #60]	; 0x3c
  hospi2.Init.Refresh = 0;
 800101a:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_OCTOSPI2_Init+0xfc>)
 800101c:	2200      	movs	r2, #0
 800101e:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8001020:	481b      	ldr	r0, [pc, #108]	; (8001090 <MX_OCTOSPI2_Init+0xfc>)
 8001022:	f005 fae3 	bl	80065ec <HAL_OSPI_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_OCTOSPI2_Init+0x9c>
  {
    Error_Handler();
 800102c:	f000 fcda 	bl	80019e4 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 8001030:	2302      	movs	r3, #2
 8001032:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.DQSPort = 2;
 8001034:	2302      	movs	r3, #2
 8001036:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.NCSPort = 2;
 8001038:	2302      	movs	r3, #2
 800103a:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 800103c:	4b16      	ldr	r3, [pc, #88]	; (8001098 <MX_OCTOSPI2_Init+0x104>)
 800103e:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8001040:	4b16      	ldr	r3, [pc, #88]	; (800109c <MX_OCTOSPI2_Init+0x108>)
 8001042:	623b      	str	r3, [r7, #32]
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	f241 3288 	movw	r2, #5000	; 0x1388
 800104c:	4619      	mov	r1, r3
 800104e:	4810      	ldr	r0, [pc, #64]	; (8001090 <MX_OCTOSPI2_Init+0xfc>)
 8001050:	f005 fbd8 	bl	8006804 <HAL_OSPIM_Config>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_OCTOSPI2_Init+0xca>
  {
    Error_Handler();
 800105a:	f000 fcc3 	bl	80019e4 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	603b      	str	r3, [r7, #0]
  sHyperBusCfg.AccessTime = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 8001066:	2302      	movs	r3, #2
 8001068:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800106e:	463b      	mov	r3, r7
 8001070:	f241 3288 	movw	r2, #5000	; 0x1388
 8001074:	4619      	mov	r1, r3
 8001076:	4806      	ldr	r0, [pc, #24]	; (8001090 <MX_OCTOSPI2_Init+0xfc>)
 8001078:	f005 fb76 	bl	8006768 <HAL_OSPI_HyperbusCfg>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_OCTOSPI2_Init+0xf2>
  {
    Error_Handler();
 8001082:	f000 fcaf 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	; 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	24000968 	.word	0x24000968
 8001094:	5200a000 	.word	0x5200a000
 8001098:	00010002 	.word	0x00010002
 800109c:	01000002 	.word	0x01000002

080010a0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80010a4:	4b58      	ldr	r3, [pc, #352]	; (8001208 <MX_SAI1_Init+0x168>)
 80010a6:	4a59      	ldr	r2, [pc, #356]	; (800120c <MX_SAI1_Init+0x16c>)
 80010a8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80010aa:	4b57      	ldr	r3, [pc, #348]	; (8001208 <MX_SAI1_Init+0x168>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODESLAVE_RX;
 80010b0:	4b55      	ldr	r3, [pc, #340]	; (8001208 <MX_SAI1_Init+0x168>)
 80010b2:	2203      	movs	r2, #3
 80010b4:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 80010b6:	4b54      	ldr	r3, [pc, #336]	; (8001208 <MX_SAI1_Init+0x168>)
 80010b8:	2240      	movs	r2, #64	; 0x40
 80010ba:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80010bc:	4b52      	ldr	r3, [pc, #328]	; (8001208 <MX_SAI1_Init+0x168>)
 80010be:	2200      	movs	r2, #0
 80010c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80010c2:	4b51      	ldr	r3, [pc, #324]	; (8001208 <MX_SAI1_Init+0x168>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_SYNCHRONOUS;
 80010c8:	4b4f      	ldr	r3, [pc, #316]	; (8001208 <MX_SAI1_Init+0x168>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80010ce:	4b4e      	ldr	r3, [pc, #312]	; (8001208 <MX_SAI1_Init+0x168>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80010d4:	4b4c      	ldr	r3, [pc, #304]	; (8001208 <MX_SAI1_Init+0x168>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80010da:	4b4b      	ldr	r3, [pc, #300]	; (8001208 <MX_SAI1_Init+0x168>)
 80010dc:	2200      	movs	r2, #0
 80010de:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80010e0:	4b49      	ldr	r3, [pc, #292]	; (8001208 <MX_SAI1_Init+0x168>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80010e6:	4b48      	ldr	r3, [pc, #288]	; (8001208 <MX_SAI1_Init+0x168>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80010ec:	4b46      	ldr	r3, [pc, #280]	; (8001208 <MX_SAI1_Init+0x168>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 80010f2:	4b45      	ldr	r3, [pc, #276]	; (8001208 <MX_SAI1_Init+0x168>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 80010fa:	4b43      	ldr	r3, [pc, #268]	; (8001208 <MX_SAI1_Init+0x168>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001100:	4b41      	ldr	r3, [pc, #260]	; (8001208 <MX_SAI1_Init+0x168>)
 8001102:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001106:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001108:	4b3f      	ldr	r3, [pc, #252]	; (8001208 <MX_SAI1_Init+0x168>)
 800110a:	2208      	movs	r2, #8
 800110c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800110e:	4b3e      	ldr	r3, [pc, #248]	; (8001208 <MX_SAI1_Init+0x168>)
 8001110:	2201      	movs	r2, #1
 8001112:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001114:	4b3c      	ldr	r3, [pc, #240]	; (8001208 <MX_SAI1_Init+0x168>)
 8001116:	2200      	movs	r2, #0
 8001118:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800111a:	4b3b      	ldr	r3, [pc, #236]	; (8001208 <MX_SAI1_Init+0x168>)
 800111c:	2200      	movs	r2, #0
 800111e:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001120:	4b39      	ldr	r3, [pc, #228]	; (8001208 <MX_SAI1_Init+0x168>)
 8001122:	2200      	movs	r2, #0
 8001124:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001126:	4b38      	ldr	r3, [pc, #224]	; (8001208 <MX_SAI1_Init+0x168>)
 8001128:	2200      	movs	r2, #0
 800112a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800112c:	4b36      	ldr	r3, [pc, #216]	; (8001208 <MX_SAI1_Init+0x168>)
 800112e:	2200      	movs	r2, #0
 8001130:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001132:	4b35      	ldr	r3, [pc, #212]	; (8001208 <MX_SAI1_Init+0x168>)
 8001134:	2201      	movs	r2, #1
 8001136:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001138:	4b33      	ldr	r3, [pc, #204]	; (8001208 <MX_SAI1_Init+0x168>)
 800113a:	2200      	movs	r2, #0
 800113c:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800113e:	4832      	ldr	r0, [pc, #200]	; (8001208 <MX_SAI1_Init+0x168>)
 8001140:	f009 f98c 	bl	800a45c <HAL_SAI_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_SAI1_Init+0xae>
  {
    Error_Handler();
 800114a:	f000 fc4b 	bl	80019e4 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 800114e:	4b30      	ldr	r3, [pc, #192]	; (8001210 <MX_SAI1_Init+0x170>)
 8001150:	4a30      	ldr	r2, [pc, #192]	; (8001214 <MX_SAI1_Init+0x174>)
 8001152:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001154:	4b2e      	ldr	r3, [pc, #184]	; (8001210 <MX_SAI1_Init+0x170>)
 8001156:	2200      	movs	r2, #0
 8001158:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 800115a:	4b2d      	ldr	r3, [pc, #180]	; (8001210 <MX_SAI1_Init+0x170>)
 800115c:	2200      	movs	r2, #0
 800115e:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8001160:	4b2b      	ldr	r3, [pc, #172]	; (8001210 <MX_SAI1_Init+0x170>)
 8001162:	2240      	movs	r2, #64	; 0x40
 8001164:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001166:	4b2a      	ldr	r3, [pc, #168]	; (8001210 <MX_SAI1_Init+0x170>)
 8001168:	2200      	movs	r2, #0
 800116a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800116c:	4b28      	ldr	r3, [pc, #160]	; (8001210 <MX_SAI1_Init+0x170>)
 800116e:	2200      	movs	r2, #0
 8001170:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001172:	4b27      	ldr	r3, [pc, #156]	; (8001210 <MX_SAI1_Init+0x170>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001178:	4b25      	ldr	r3, [pc, #148]	; (8001210 <MX_SAI1_Init+0x170>)
 800117a:	2200      	movs	r2, #0
 800117c:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800117e:	4b24      	ldr	r3, [pc, #144]	; (8001210 <MX_SAI1_Init+0x170>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001184:	4b22      	ldr	r3, [pc, #136]	; (8001210 <MX_SAI1_Init+0x170>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800118a:	4b21      	ldr	r3, [pc, #132]	; (8001210 <MX_SAI1_Init+0x170>)
 800118c:	4a22      	ldr	r2, [pc, #136]	; (8001218 <MX_SAI1_Init+0x178>)
 800118e:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001190:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <MX_SAI1_Init+0x170>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001196:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <MX_SAI1_Init+0x170>)
 8001198:	2200      	movs	r2, #0
 800119a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800119c:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <MX_SAI1_Init+0x170>)
 800119e:	2200      	movs	r2, #0
 80011a0:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <MX_SAI1_Init+0x170>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 80011a8:	4b19      	ldr	r3, [pc, #100]	; (8001210 <MX_SAI1_Init+0x170>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 80011b0:	4b17      	ldr	r3, [pc, #92]	; (8001210 <MX_SAI1_Init+0x170>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80011b6:	4b16      	ldr	r3, [pc, #88]	; (8001210 <MX_SAI1_Init+0x170>)
 80011b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011bc:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.FrameLength = 8;
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <MX_SAI1_Init+0x170>)
 80011c0:	2208      	movs	r2, #8
 80011c2:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_SAI1_Init+0x170>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_SAI1_Init+0x170>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_SAI1_Init+0x170>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_SAI1_Init+0x170>)
 80011d8:	2200      	movs	r2, #0
 80011da:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <MX_SAI1_Init+0x170>)
 80011de:	2200      	movs	r2, #0
 80011e0:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <MX_SAI1_Init+0x170>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_SAI1_Init+0x170>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <MX_SAI1_Init+0x170>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 80011f4:	4806      	ldr	r0, [pc, #24]	; (8001210 <MX_SAI1_Init+0x170>)
 80011f6:	f009 f931 	bl	800a45c <HAL_SAI_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_SAI1_Init+0x164>
  {
    Error_Handler();
 8001200:	f000 fbf0 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	24000774 	.word	0x24000774
 800120c:	40015804 	.word	0x40015804
 8001210:	24000480 	.word	0x24000480
 8001214:	40015824 	.word	0x40015824
 8001218:	0002ee00 	.word	0x0002ee00

0800121c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <MX_SDMMC1_SD_Init+0x40>)
 8001222:	4a0f      	ldr	r2, [pc, #60]	; (8001260 <MX_SDMMC1_SD_Init+0x44>)
 8001224:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001226:	4b0d      	ldr	r3, [pc, #52]	; (800125c <MX_SDMMC1_SD_Init+0x40>)
 8001228:	2200      	movs	r2, #0
 800122a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <MX_SDMMC1_SD_Init+0x40>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <MX_SDMMC1_SD_Init+0x40>)
 8001234:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001238:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <MX_SDMMC1_SD_Init+0x40>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <MX_SDMMC1_SD_Init+0x40>)
 8001242:	2200      	movs	r2, #0
 8001244:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_SDMMC1_SD_Init+0x40>)
 8001248:	f009 fb56 	bl	800a8f8 <HAL_SD_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8001252:	f000 fbc7 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	24000310 	.word	0x24000310
 8001260:	52007000 	.word	0x52007000

08001264 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b098      	sub	sp, #96	; 0x60
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001276:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]
 8001286:	615a      	str	r2, [r3, #20]
 8001288:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2234      	movs	r2, #52	; 0x34
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f00d f843 	bl	800e31c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001296:	4b38      	ldr	r3, [pc, #224]	; (8001378 <MX_TIM1_Init+0x114>)
 8001298:	4a38      	ldr	r2, [pc, #224]	; (800137c <MX_TIM1_Init+0x118>)
 800129a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800129c:	4b36      	ldr	r3, [pc, #216]	; (8001378 <MX_TIM1_Init+0x114>)
 800129e:	2200      	movs	r2, #0
 80012a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a2:	4b35      	ldr	r3, [pc, #212]	; (8001378 <MX_TIM1_Init+0x114>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012a8:	4b33      	ldr	r3, [pc, #204]	; (8001378 <MX_TIM1_Init+0x114>)
 80012aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b0:	4b31      	ldr	r3, [pc, #196]	; (8001378 <MX_TIM1_Init+0x114>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012b6:	4b30      	ldr	r3, [pc, #192]	; (8001378 <MX_TIM1_Init+0x114>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012bc:	4b2e      	ldr	r3, [pc, #184]	; (8001378 <MX_TIM1_Init+0x114>)
 80012be:	2200      	movs	r2, #0
 80012c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012c2:	482d      	ldr	r0, [pc, #180]	; (8001378 <MX_TIM1_Init+0x114>)
 80012c4:	f00a fb80 	bl	800b9c8 <HAL_TIM_PWM_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80012ce:	f000 fb89 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012e2:	4619      	mov	r1, r3
 80012e4:	4824      	ldr	r0, [pc, #144]	; (8001378 <MX_TIM1_Init+0x114>)
 80012e6:	f00b f857 	bl	800c398 <HAL_TIMEx_MasterConfigSynchronization>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012f0:	f000 fb78 	bl	80019e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f4:	2360      	movs	r3, #96	; 0x60
 80012f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fc:	2300      	movs	r3, #0
 80012fe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001304:	2300      	movs	r3, #0
 8001306:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001308:	2300      	movs	r3, #0
 800130a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800130c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001310:	220c      	movs	r2, #12
 8001312:	4619      	mov	r1, r3
 8001314:	4818      	ldr	r0, [pc, #96]	; (8001378 <MX_TIM1_Init+0x114>)
 8001316:	f00a fbaf 	bl	800ba78 <HAL_TIM_PWM_ConfigChannel>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001320:	f000 fb60 	bl	80019e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001338:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800133c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	4619      	mov	r1, r3
 8001358:	4807      	ldr	r0, [pc, #28]	; (8001378 <MX_TIM1_Init+0x114>)
 800135a:	f00b f8b9 	bl	800c4d0 <HAL_TIMEx_ConfigBreakDeadTime>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8001364:	f000 fb3e 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001368:	4803      	ldr	r0, [pc, #12]	; (8001378 <MX_TIM1_Init+0x114>)
 800136a:	f001 fac5 	bl	80028f8 <HAL_TIM_MspPostInit>

}
 800136e:	bf00      	nop
 8001370:	3760      	adds	r7, #96	; 0x60
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	24000728 	.word	0x24000728
 800137c:	40010000 	.word	0x40010000

08001380 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001386:	f107 031c 	add.w	r3, r7, #28
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001392:	463b      	mov	r3, r7
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
 80013a0:	615a      	str	r2, [r3, #20]
 80013a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013a4:	4b2c      	ldr	r3, [pc, #176]	; (8001458 <MX_TIM4_Init+0xd8>)
 80013a6:	4a2d      	ldr	r2, [pc, #180]	; (800145c <MX_TIM4_Init+0xdc>)
 80013a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80013aa:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <MX_TIM4_Init+0xd8>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b0:	4b29      	ldr	r3, [pc, #164]	; (8001458 <MX_TIM4_Init+0xd8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80013b6:	4b28      	ldr	r3, [pc, #160]	; (8001458 <MX_TIM4_Init+0xd8>)
 80013b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013be:	4b26      	ldr	r3, [pc, #152]	; (8001458 <MX_TIM4_Init+0xd8>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c4:	4b24      	ldr	r3, [pc, #144]	; (8001458 <MX_TIM4_Init+0xd8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013ca:	4823      	ldr	r0, [pc, #140]	; (8001458 <MX_TIM4_Init+0xd8>)
 80013cc:	f00a fafc 	bl	800b9c8 <HAL_TIM_PWM_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80013d6:	f000 fb05 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013de:	2300      	movs	r3, #0
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	4619      	mov	r1, r3
 80013e8:	481b      	ldr	r0, [pc, #108]	; (8001458 <MX_TIM4_Init+0xd8>)
 80013ea:	f00a ffd5 	bl	800c398 <HAL_TIMEx_MasterConfigSynchronization>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80013f4:	f000 faf6 	bl	80019e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f8:	2360      	movs	r3, #96	; 0x60
 80013fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001408:	463b      	mov	r3, r7
 800140a:	2204      	movs	r2, #4
 800140c:	4619      	mov	r1, r3
 800140e:	4812      	ldr	r0, [pc, #72]	; (8001458 <MX_TIM4_Init+0xd8>)
 8001410:	f00a fb32 	bl	800ba78 <HAL_TIM_PWM_ConfigChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800141a:	f000 fae3 	bl	80019e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800141e:	463b      	mov	r3, r7
 8001420:	2208      	movs	r2, #8
 8001422:	4619      	mov	r1, r3
 8001424:	480c      	ldr	r0, [pc, #48]	; (8001458 <MX_TIM4_Init+0xd8>)
 8001426:	f00a fb27 	bl	800ba78 <HAL_TIM_PWM_ConfigChannel>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001430:	f000 fad8 	bl	80019e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001434:	463b      	mov	r3, r7
 8001436:	220c      	movs	r2, #12
 8001438:	4619      	mov	r1, r3
 800143a:	4807      	ldr	r0, [pc, #28]	; (8001458 <MX_TIM4_Init+0xd8>)
 800143c:	f00a fb1c 	bl	800ba78 <HAL_TIM_PWM_ConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8001446:	f000 facd 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800144a:	4803      	ldr	r0, [pc, #12]	; (8001458 <MX_TIM4_Init+0xd8>)
 800144c:	f001 fa54 	bl	80028f8 <HAL_TIM_MspPostInit>

}
 8001450:	bf00      	nop
 8001452:	3728      	adds	r7, #40	; 0x28
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	24000150 	.word	0x24000150
 800145c:	40000800 	.word	0x40000800

08001460 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001466:	f107 031c 	add.w	r3, r7, #28
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001472:	463b      	mov	r3, r7
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
 8001480:	615a      	str	r2, [r3, #20]
 8001482:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001484:	4b21      	ldr	r3, [pc, #132]	; (800150c <MX_TIM5_Init+0xac>)
 8001486:	4a22      	ldr	r2, [pc, #136]	; (8001510 <MX_TIM5_Init+0xb0>)
 8001488:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800148a:	4b20      	ldr	r3, [pc, #128]	; (800150c <MX_TIM5_Init+0xac>)
 800148c:	2200      	movs	r2, #0
 800148e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001490:	4b1e      	ldr	r3, [pc, #120]	; (800150c <MX_TIM5_Init+0xac>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001496:	4b1d      	ldr	r3, [pc, #116]	; (800150c <MX_TIM5_Init+0xac>)
 8001498:	f04f 32ff 	mov.w	r2, #4294967295
 800149c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149e:	4b1b      	ldr	r3, [pc, #108]	; (800150c <MX_TIM5_Init+0xac>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a4:	4b19      	ldr	r3, [pc, #100]	; (800150c <MX_TIM5_Init+0xac>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80014aa:	4818      	ldr	r0, [pc, #96]	; (800150c <MX_TIM5_Init+0xac>)
 80014ac:	f00a fa8c 	bl	800b9c8 <HAL_TIM_PWM_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80014b6:	f000 fa95 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014c2:	f107 031c 	add.w	r3, r7, #28
 80014c6:	4619      	mov	r1, r3
 80014c8:	4810      	ldr	r0, [pc, #64]	; (800150c <MX_TIM5_Init+0xac>)
 80014ca:	f00a ff65 	bl	800c398 <HAL_TIMEx_MasterConfigSynchronization>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80014d4:	f000 fa86 	bl	80019e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d8:	2360      	movs	r3, #96	; 0x60
 80014da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014e8:	463b      	mov	r3, r7
 80014ea:	2200      	movs	r2, #0
 80014ec:	4619      	mov	r1, r3
 80014ee:	4807      	ldr	r0, [pc, #28]	; (800150c <MX_TIM5_Init+0xac>)
 80014f0:	f00a fac2 	bl	800ba78 <HAL_TIM_PWM_ConfigChannel>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80014fa:	f000 fa73 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80014fe:	4803      	ldr	r0, [pc, #12]	; (800150c <MX_TIM5_Init+0xac>)
 8001500:	f001 f9fa 	bl	80028f8 <HAL_TIM_MspPostInit>

}
 8001504:	bf00      	nop
 8001506:	3728      	adds	r7, #40	; 0x28
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	2400038c 	.word	0x2400038c
 8001510:	40000c00 	.word	0x40000c00

08001514 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001518:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <MX_USART1_UART_Init+0x90>)
 800151a:	4a23      	ldr	r2, [pc, #140]	; (80015a8 <MX_USART1_UART_Init+0x94>)
 800151c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800151e:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <MX_USART1_UART_Init+0x90>)
 8001520:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001524:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001526:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <MX_USART1_UART_Init+0x90>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800152c:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <MX_USART1_UART_Init+0x90>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <MX_USART1_UART_Init+0x90>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001538:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <MX_USART1_UART_Init+0x90>)
 800153a:	220c      	movs	r2, #12
 800153c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <MX_USART1_UART_Init+0x90>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001544:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <MX_USART1_UART_Init+0x90>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <MX_USART1_UART_Init+0x90>)
 800154c:	2200      	movs	r2, #0
 800154e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <MX_USART1_UART_Init+0x90>)
 8001552:	2200      	movs	r2, #0
 8001554:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <MX_USART1_UART_Init+0x90>)
 8001558:	2200      	movs	r2, #0
 800155a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800155c:	4811      	ldr	r0, [pc, #68]	; (80015a4 <MX_USART1_UART_Init+0x90>)
 800155e:	f00b f857 	bl	800c610 <HAL_UART_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001568:	f000 fa3c 	bl	80019e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800156c:	2100      	movs	r1, #0
 800156e:	480d      	ldr	r0, [pc, #52]	; (80015a4 <MX_USART1_UART_Init+0x90>)
 8001570:	f00c f8ea 	bl	800d748 <HAL_UARTEx_SetTxFifoThreshold>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800157a:	f000 fa33 	bl	80019e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800157e:	2100      	movs	r1, #0
 8001580:	4808      	ldr	r0, [pc, #32]	; (80015a4 <MX_USART1_UART_Init+0x90>)
 8001582:	f00c f91f 	bl	800d7c4 <HAL_UARTEx_SetRxFifoThreshold>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800158c:	f000 fa2a 	bl	80019e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001590:	4804      	ldr	r0, [pc, #16]	; (80015a4 <MX_USART1_UART_Init+0x90>)
 8001592:	f00c f8a0 	bl	800d6d6 <HAL_UARTEx_DisableFifoMode>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800159c:	f000 fa22 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	240005f8 	.word	0x240005f8
 80015a8:	40011000 	.word	0x40011000

080015ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015b0:	4b22      	ldr	r3, [pc, #136]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015b2:	4a23      	ldr	r2, [pc, #140]	; (8001640 <MX_USART3_UART_Init+0x94>)
 80015b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015b6:	4b21      	ldr	r3, [pc, #132]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015be:	4b1f      	ldr	r3, [pc, #124]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015c4:	4b1d      	ldr	r3, [pc, #116]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015ca:	4b1c      	ldr	r3, [pc, #112]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015d0:	4b1a      	ldr	r3, [pc, #104]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015d2:	220c      	movs	r2, #12
 80015d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d6:	4b19      	ldr	r3, [pc, #100]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015de:	2200      	movs	r2, #0
 80015e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015e2:	4b16      	ldr	r3, [pc, #88]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015f4:	4811      	ldr	r0, [pc, #68]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015f6:	f00b f80b 	bl	800c610 <HAL_UART_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001600:	f000 f9f0 	bl	80019e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001604:	2100      	movs	r1, #0
 8001606:	480d      	ldr	r0, [pc, #52]	; (800163c <MX_USART3_UART_Init+0x90>)
 8001608:	f00c f89e 	bl	800d748 <HAL_UARTEx_SetTxFifoThreshold>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001612:	f000 f9e7 	bl	80019e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001616:	2100      	movs	r1, #0
 8001618:	4808      	ldr	r0, [pc, #32]	; (800163c <MX_USART3_UART_Init+0x90>)
 800161a:	f00c f8d3 	bl	800d7c4 <HAL_UARTEx_SetRxFifoThreshold>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001624:	f000 f9de 	bl	80019e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001628:	4804      	ldr	r0, [pc, #16]	; (800163c <MX_USART3_UART_Init+0x90>)
 800162a:	f00c f854 	bl	800d6d6 <HAL_UARTEx_DisableFifoMode>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001634:	f000 f9d6 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	240001b0 	.word	0x240001b0
 8001640:	40004800 	.word	0x40004800

08001644 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b090      	sub	sp, #64	; 0x40
 8001658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166a:	4bc0      	ldr	r3, [pc, #768]	; (800196c <MX_GPIO_Init+0x318>)
 800166c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001670:	4abe      	ldr	r2, [pc, #760]	; (800196c <MX_GPIO_Init+0x318>)
 8001672:	f043 0302 	orr.w	r3, r3, #2
 8001676:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800167a:	4bbc      	ldr	r3, [pc, #752]	; (800196c <MX_GPIO_Init+0x318>)
 800167c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
 8001686:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001688:	4bb8      	ldr	r3, [pc, #736]	; (800196c <MX_GPIO_Init+0x318>)
 800168a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800168e:	4ab7      	ldr	r2, [pc, #732]	; (800196c <MX_GPIO_Init+0x318>)
 8001690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001694:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001698:	4bb4      	ldr	r3, [pc, #720]	; (800196c <MX_GPIO_Init+0x318>)
 800169a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800169e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a6:	4bb1      	ldr	r3, [pc, #708]	; (800196c <MX_GPIO_Init+0x318>)
 80016a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ac:	4aaf      	ldr	r2, [pc, #700]	; (800196c <MX_GPIO_Init+0x318>)
 80016ae:	f043 0308 	orr.w	r3, r3, #8
 80016b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016b6:	4bad      	ldr	r3, [pc, #692]	; (800196c <MX_GPIO_Init+0x318>)
 80016b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	623b      	str	r3, [r7, #32]
 80016c2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c4:	4ba9      	ldr	r3, [pc, #676]	; (800196c <MX_GPIO_Init+0x318>)
 80016c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ca:	4aa8      	ldr	r2, [pc, #672]	; (800196c <MX_GPIO_Init+0x318>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016d4:	4ba5      	ldr	r3, [pc, #660]	; (800196c <MX_GPIO_Init+0x318>)
 80016d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	61fb      	str	r3, [r7, #28]
 80016e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016e2:	4ba2      	ldr	r3, [pc, #648]	; (800196c <MX_GPIO_Init+0x318>)
 80016e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e8:	4aa0      	ldr	r2, [pc, #640]	; (800196c <MX_GPIO_Init+0x318>)
 80016ea:	f043 0310 	orr.w	r3, r3, #16
 80016ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016f2:	4b9e      	ldr	r3, [pc, #632]	; (800196c <MX_GPIO_Init+0x318>)
 80016f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f8:	f003 0310 	and.w	r3, r3, #16
 80016fc:	61bb      	str	r3, [r7, #24]
 80016fe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001700:	4b9a      	ldr	r3, [pc, #616]	; (800196c <MX_GPIO_Init+0x318>)
 8001702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001706:	4a99      	ldr	r2, [pc, #612]	; (800196c <MX_GPIO_Init+0x318>)
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001710:	4b96      	ldr	r3, [pc, #600]	; (800196c <MX_GPIO_Init+0x318>)
 8001712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800171e:	4b93      	ldr	r3, [pc, #588]	; (800196c <MX_GPIO_Init+0x318>)
 8001720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001724:	4a91      	ldr	r2, [pc, #580]	; (800196c <MX_GPIO_Init+0x318>)
 8001726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800172a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800172e:	4b8f      	ldr	r3, [pc, #572]	; (800196c <MX_GPIO_Init+0x318>)
 8001730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800173c:	4b8b      	ldr	r3, [pc, #556]	; (800196c <MX_GPIO_Init+0x318>)
 800173e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001742:	4a8a      	ldr	r2, [pc, #552]	; (800196c <MX_GPIO_Init+0x318>)
 8001744:	f043 0320 	orr.w	r3, r3, #32
 8001748:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800174c:	4b87      	ldr	r3, [pc, #540]	; (800196c <MX_GPIO_Init+0x318>)
 800174e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001752:	f003 0320 	and.w	r3, r3, #32
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800175a:	4b84      	ldr	r3, [pc, #528]	; (800196c <MX_GPIO_Init+0x318>)
 800175c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001760:	4a82      	ldr	r2, [pc, #520]	; (800196c <MX_GPIO_Init+0x318>)
 8001762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001766:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800176a:	4b80      	ldr	r3, [pc, #512]	; (800196c <MX_GPIO_Init+0x318>)
 800176c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001778:	4b7c      	ldr	r3, [pc, #496]	; (800196c <MX_GPIO_Init+0x318>)
 800177a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800177e:	4a7b      	ldr	r2, [pc, #492]	; (800196c <MX_GPIO_Init+0x318>)
 8001780:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001784:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001788:	4b78      	ldr	r3, [pc, #480]	; (800196c <MX_GPIO_Init+0x318>)
 800178a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800178e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Detectn_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	f240 4102 	movw	r1, #1026	; 0x402
 800179c:	4874      	ldr	r0, [pc, #464]	; (8001970 <MX_GPIO_Init+0x31c>)
 800179e:	f004 fb21 	bl	8005de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	f44f 61d1 	mov.w	r1, #1672	; 0x688
 80017a8:	4872      	ldr	r0, [pc, #456]	; (8001974 <MX_GPIO_Init+0x320>)
 80017aa:	f004 fb1b 	bl	8005de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin|ARD_D4_Pin
 80017ae:	2200      	movs	r2, #0
 80017b0:	f248 1138 	movw	r1, #33080	; 0x8138
 80017b4:	4870      	ldr	r0, [pc, #448]	; (8001978 <MX_GPIO_Init+0x324>)
 80017b6:	f004 fb15 	bl	8005de4 <HAL_GPIO_WritePin>
                          |ARD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USER_LED2_Pin|USER_LED1_Pin, GPIO_PIN_RESET);
 80017ba:	2200      	movs	r2, #0
 80017bc:	210c      	movs	r1, #12
 80017be:	486f      	ldr	r0, [pc, #444]	; (800197c <MX_GPIO_Init+0x328>)
 80017c0:	f004 fb10 	bl	8005de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STMOD_20_GPIO_Port, STMOD_20_Pin, GPIO_PIN_RESET);
 80017c4:	2200      	movs	r2, #0
 80017c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ca:	486d      	ldr	r0, [pc, #436]	; (8001980 <MX_GPIO_Init+0x32c>)
 80017cc:	f004 fb0a 	bl	8005de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LCD_RST_Pin|USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2160      	movs	r1, #96	; 0x60
 80017d4:	486b      	ldr	r0, [pc, #428]	; (8001984 <MX_GPIO_Init+0x330>)
 80017d6:	f004 fb05 	bl	8005de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Detectn_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = Detectn_Pin|LCD_DISP_Pin;
 80017da:	f240 4302 	movw	r3, #1026	; 0x402
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f0:	4619      	mov	r1, r3
 80017f2:	485f      	ldr	r0, [pc, #380]	; (8001970 <MX_GPIO_Init+0x31c>)
 80017f4:	f004 f94e 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI4_D2_Pin SAI4_CK2_Pin */
  GPIO_InitStruct.Pin = SAI4_D2_Pin|SAI4_CK2_Pin;
 80017f8:	2330      	movs	r3, #48	; 0x30
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001808:	230a      	movs	r3, #10
 800180a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800180c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001810:	4619      	mov	r1, r3
 8001812:	4858      	ldr	r0, [pc, #352]	; (8001974 <MX_GPIO_Init+0x320>)
 8001814:	f004 f93e 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin STMOD_17_Pin STMOD_19_Pin STMOD_18_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin;
 8001818:	f44f 63d1 	mov.w	r3, #1672	; 0x688
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181e:	2301      	movs	r3, #1
 8001820:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800182a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182e:	4619      	mov	r1, r3
 8001830:	4850      	ldr	r0, [pc, #320]	; (8001974 <MX_GPIO_Init+0x320>)
 8001832:	f004 f92f 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_OVCR_Pin CTP_INT_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin|CTP_INT_Pin;
 8001836:	f242 0304 	movw	r3, #8196	; 0x2004
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800183c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001840:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001846:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800184a:	4619      	mov	r1, r3
 800184c:	484a      	ldr	r0, [pc, #296]	; (8001978 <MX_GPIO_Init+0x324>)
 800184e:	f004 f921 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : Blue_button_B2_used_for_wakeup_Pin */
  GPIO_InitStruct.Pin = Blue_button_B2_used_for_wakeup_Pin;
 8001852:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001858:	2300      	movs	r3, #0
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Blue_button_B2_used_for_wakeup_GPIO_Port, &GPIO_InitStruct);
 8001860:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001864:	4619      	mov	r1, r3
 8001866:	4845      	ldr	r0, [pc, #276]	; (800197c <MX_GPIO_Init+0x328>)
 8001868:	f004 f914 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800186c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001870:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800187e:	230a      	movs	r3, #10
 8001880:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001882:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001886:	4619      	mov	r1, r3
 8001888:	483f      	ldr	r0, [pc, #252]	; (8001988 <MX_GPIO_Init+0x334>)
 800188a:	f004 f903 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_CTRL_Pin ARD_D7_Pin MEMS_LED_Pin ARD_D4_Pin
                           ARD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin|ARD_D4_Pin
 800188e:	f248 1338 	movw	r3, #33080	; 0x8138
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001894:	2301      	movs	r3, #1
 8001896:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a4:	4619      	mov	r1, r3
 80018a6:	4834      	ldr	r0, [pc, #208]	; (8001978 <MX_GPIO_Init+0x324>)
 80018a8:	f004 f8f4 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80018ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b2:	2300      	movs	r3, #0
 80018b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018be:	4619      	mov	r1, r3
 80018c0:	4831      	ldr	r0, [pc, #196]	; (8001988 <MX_GPIO_Init+0x334>)
 80018c2:	f004 f8e7 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80018c6:	2320      	movs	r3, #32
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80018d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d8:	4619      	mov	r1, r3
 80018da:	4829      	ldr	r0, [pc, #164]	; (8001980 <MX_GPIO_Init+0x32c>)
 80018dc:	f004 f8da 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED2_Pin USER_LED1_Pin */
  GPIO_InitStruct.Pin = USER_LED2_Pin|USER_LED1_Pin;
 80018e0:	230c      	movs	r3, #12
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f4:	4619      	mov	r1, r3
 80018f6:	4821      	ldr	r0, [pc, #132]	; (800197c <MX_GPIO_Init+0x328>)
 80018f8:	f004 f8cc 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI5_MISO_Pin */
  GPIO_InitStruct.Pin = SPI5_MISO_Pin;
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001908:	2300      	movs	r3, #0
 800190a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800190c:	2305      	movs	r3, #5
 800190e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI5_MISO_GPIO_Port, &GPIO_InitStruct);
 8001910:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001914:	4619      	mov	r1, r3
 8001916:	481b      	ldr	r0, [pc, #108]	; (8001984 <MX_GPIO_Init+0x330>)
 8001918:	f004 f8bc 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_MOSI_Pin;
 800191c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001920:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800192e:	2305      	movs	r3, #5
 8001930:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI5_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001932:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001936:	4619      	mov	r1, r3
 8001938:	4811      	ldr	r0, [pc, #68]	; (8001980 <MX_GPIO_Init+0x32c>)
 800193a:	f004 f8ab 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_Int_Pin */
  GPIO_InitStruct.Pin = Audio_Int_Pin;
 800193e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001944:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001948:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_Int_GPIO_Port, &GPIO_InitStruct);
 800194e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001952:	4619      	mov	r1, r3
 8001954:	4807      	ldr	r0, [pc, #28]	; (8001974 <MX_GPIO_Init+0x320>)
 8001956:	f004 f89d 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_20_Pin */
  GPIO_InitStruct.Pin = STMOD_20_Pin;
 800195a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	2301      	movs	r3, #1
 8001962:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	e00f      	b.n	800198c <MX_GPIO_Init+0x338>
 800196c:	58024400 	.word	0x58024400
 8001970:	58020c00 	.word	0x58020c00
 8001974:	58021000 	.word	0x58021000
 8001978:	58021800 	.word	0x58021800
 800197c:	58020800 	.word	0x58020800
 8001980:	58021400 	.word	0x58021400
 8001984:	58021c00 	.word	0x58021c00
 8001988:	58020000 	.word	0x58020000
 800198c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(STMOD_20_GPIO_Port, &GPIO_InitStruct);
 800198e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001992:	4619      	mov	r1, r3
 8001994:	4811      	ldr	r0, [pc, #68]	; (80019dc <MX_GPIO_Init+0x388>)
 8001996:	f004 f87d 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_11_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_11_INT_Pin;
 800199a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800199e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(STMOD_11_INT_GPIO_Port, &GPIO_InitStruct);
 80019aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ae:	4619      	mov	r1, r3
 80019b0:	480b      	ldr	r0, [pc, #44]	; (80019e0 <MX_GPIO_Init+0x38c>)
 80019b2:	f004 f86f 	bl	8005a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|USB_FS_PWR_EN_Pin;
 80019b6:	2360      	movs	r3, #96	; 0x60
 80019b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ba:	2301      	movs	r3, #1
 80019bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ca:	4619      	mov	r1, r3
 80019cc:	4804      	ldr	r0, [pc, #16]	; (80019e0 <MX_GPIO_Init+0x38c>)
 80019ce:	f004 f861 	bl	8005a94 <HAL_GPIO_Init>

}
 80019d2:	bf00      	nop
 80019d4:	3740      	adds	r7, #64	; 0x40
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	58021400 	.word	0x58021400
 80019e0:	58021c00 	.word	0x58021c00

080019e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e8:	b672      	cpsid	i
}
 80019ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ec:	e7fe      	b.n	80019ec <Error_Handler+0x8>
	...

080019f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <HAL_MspInit+0x30>)
 80019f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019fc:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <HAL_MspInit+0x30>)
 80019fe:	f043 0302 	orr.w	r3, r3, #2
 8001a02:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_MspInit+0x30>)
 8001a08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	58024400 	.word	0x58024400

08001a24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b090      	sub	sp, #64	; 0x40
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a6c      	ldr	r2, [pc, #432]	; (8001bf4 <HAL_ADC_MspInit+0x1d0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d14e      	bne.n	8001ae4 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a46:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <HAL_ADC_MspInit+0x1d4>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	4a6a      	ldr	r2, [pc, #424]	; (8001bf8 <HAL_ADC_MspInit+0x1d4>)
 8001a4e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a50:	4b69      	ldr	r3, [pc, #420]	; (8001bf8 <HAL_ADC_MspInit+0x1d4>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d10e      	bne.n	8001a76 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a58:	4b68      	ldr	r3, [pc, #416]	; (8001bfc <HAL_ADC_MspInit+0x1d8>)
 8001a5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a5e:	4a67      	ldr	r2, [pc, #412]	; (8001bfc <HAL_ADC_MspInit+0x1d8>)
 8001a60:	f043 0320 	orr.w	r3, r3, #32
 8001a64:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a68:	4b64      	ldr	r3, [pc, #400]	; (8001bfc <HAL_ADC_MspInit+0x1d8>)
 8001a6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a6e:	f003 0320 	and.w	r3, r3, #32
 8001a72:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a76:	4b61      	ldr	r3, [pc, #388]	; (8001bfc <HAL_ADC_MspInit+0x1d8>)
 8001a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a7c:	4a5f      	ldr	r2, [pc, #380]	; (8001bfc <HAL_ADC_MspInit+0x1d8>)
 8001a7e:	f043 0304 	orr.w	r3, r3, #4
 8001a82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a86:	4b5d      	ldr	r3, [pc, #372]	; (8001bfc <HAL_ADC_MspInit+0x1d8>)
 8001a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a94:	4b59      	ldr	r3, [pc, #356]	; (8001bfc <HAL_ADC_MspInit+0x1d8>)
 8001a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9a:	4a58      	ldr	r2, [pc, #352]	; (8001bfc <HAL_ADC_MspInit+0x1d8>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aa4:	4b55      	ldr	r3, [pc, #340]	; (8001bfc <HAL_ADC_MspInit+0x1d8>)
 8001aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	623b      	str	r3, [r7, #32]
 8001ab0:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA1_C     ------> ADC1_INP1
    PA0_C     ------> ADC1_INP0
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARD_A0_GPIO_Port, &GPIO_InitStruct);
 8001abe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	484e      	ldr	r0, [pc, #312]	; (8001c00 <HAL_ADC_MspInit+0x1dc>)
 8001ac6:	f003 ffe5 	bl	8005a94 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001aca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ace:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001ad2:	f001 faa7 	bl	8003024 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001ad6:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001ada:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001ade:	f001 faa1 	bl	8003024 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001ae2:	e082      	b.n	8001bea <HAL_ADC_MspInit+0x1c6>
  else if(hadc->Instance==ADC2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a46      	ldr	r2, [pc, #280]	; (8001c04 <HAL_ADC_MspInit+0x1e0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d133      	bne.n	8001b56 <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001aee:	4b42      	ldr	r3, [pc, #264]	; (8001bf8 <HAL_ADC_MspInit+0x1d4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	3301      	adds	r3, #1
 8001af4:	4a40      	ldr	r2, [pc, #256]	; (8001bf8 <HAL_ADC_MspInit+0x1d4>)
 8001af6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001af8:	4b3f      	ldr	r3, [pc, #252]	; (8001bf8 <HAL_ADC_MspInit+0x1d4>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d10e      	bne.n	8001b1e <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b00:	4b3e      	ldr	r3, [pc, #248]	; (8001bfc <HAL_ADC_MspInit+0x1d8>)
 8001b02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b06:	4a3d      	ldr	r2, [pc, #244]	; (8001bfc <HAL_ADC_MspInit+0x1d8>)
 8001b08:	f043 0320 	orr.w	r3, r3, #32
 8001b0c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b10:	4b3a      	ldr	r3, [pc, #232]	; (8001bfc <HAL_ADC_MspInit+0x1d8>)
 8001b12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b16:	f003 0320 	and.w	r3, r3, #32
 8001b1a:	61fb      	str	r3, [r7, #28]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	4b37      	ldr	r3, [pc, #220]	; (8001bfc <HAL_ADC_MspInit+0x1d8>)
 8001b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b24:	4a35      	ldr	r2, [pc, #212]	; (8001bfc <HAL_ADC_MspInit+0x1d8>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b2e:	4b33      	ldr	r3, [pc, #204]	; (8001bfc <HAL_ADC_MspInit+0x1d8>)
 8001b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	61bb      	str	r3, [r7, #24]
 8001b3a:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001b3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b40:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001b44:	f001 fa6e 	bl	8003024 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001b48:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001b4c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001b50:	f001 fa68 	bl	8003024 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001b54:	e049      	b.n	8001bea <HAL_ADC_MspInit+0x1c6>
  else if(hadc->Instance==ADC3)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a2b      	ldr	r2, [pc, #172]	; (8001c08 <HAL_ADC_MspInit+0x1e4>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d144      	bne.n	8001bea <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001b60:	4b26      	ldr	r3, [pc, #152]	; (8001bfc <HAL_ADC_MspInit+0x1d8>)
 8001b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b66:	4a25      	ldr	r2, [pc, #148]	; (8001bfc <HAL_ADC_MspInit+0x1d8>)
 8001b68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b70:	4b22      	ldr	r3, [pc, #136]	; (8001bfc <HAL_ADC_MspInit+0x1d8>)
 8001b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7e:	4b1f      	ldr	r3, [pc, #124]	; (8001bfc <HAL_ADC_MspInit+0x1d8>)
 8001b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b84:	4a1d      	ldr	r2, [pc, #116]	; (8001bfc <HAL_ADC_MspInit+0x1d8>)
 8001b86:	f043 0304 	orr.w	r3, r3, #4
 8001b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b8e:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <HAL_ADC_MspInit+0x1d8>)
 8001b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b9c:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <HAL_ADC_MspInit+0x1d8>)
 8001b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba2:	4a16      	ldr	r2, [pc, #88]	; (8001bfc <HAL_ADC_MspInit+0x1d8>)
 8001ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bac:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <HAL_ADC_MspInit+0x1d8>)
 8001bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001bba:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001bbe:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001bc2:	f001 fa2f 	bl	8003024 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001bc6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001bca:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001bce:	f001 fa29 	bl	8003024 <HAL_SYSCFG_AnalogSwitchConfig>
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8001bde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be2:	4619      	mov	r1, r3
 8001be4:	4809      	ldr	r0, [pc, #36]	; (8001c0c <HAL_ADC_MspInit+0x1e8>)
 8001be6:	f003 ff55 	bl	8005a94 <HAL_GPIO_Init>
}
 8001bea:	bf00      	nop
 8001bec:	3740      	adds	r7, #64	; 0x40
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40022000 	.word	0x40022000
 8001bf8:	240000f4 	.word	0x240000f4
 8001bfc:	58024400 	.word	0x58024400
 8001c00:	58020800 	.word	0x58020800
 8001c04:	40022100 	.word	0x40022100
 8001c08:	58026000 	.word	0x58026000
 8001c0c:	58021c00 	.word	0x58021c00

08001c10 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	; 0x28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a18      	ldr	r2, [pc, #96]	; (8001c90 <HAL_DAC_MspInit+0x80>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d129      	bne.n	8001c86 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001c32:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <HAL_DAC_MspInit+0x84>)
 8001c34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c38:	4a16      	ldr	r2, [pc, #88]	; (8001c94 <HAL_DAC_MspInit+0x84>)
 8001c3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c42:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <HAL_DAC_MspInit+0x84>)
 8001c44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c50:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <HAL_DAC_MspInit+0x84>)
 8001c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c56:	4a0f      	ldr	r2, [pc, #60]	; (8001c94 <HAL_DAC_MspInit+0x84>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <HAL_DAC_MspInit+0x84>)
 8001c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = DAC1_OUT2_Pin;
 8001c6e:	2320      	movs	r3, #32
 8001c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c72:	2303      	movs	r3, #3
 8001c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC1_OUT2_GPIO_Port, &GPIO_InitStruct);
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4805      	ldr	r0, [pc, #20]	; (8001c98 <HAL_DAC_MspInit+0x88>)
 8001c82:	f003 ff07 	bl	8005a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001c86:	bf00      	nop
 8001c88:	3728      	adds	r7, #40	; 0x28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40007400 	.word	0x40007400
 8001c94:	58024400 	.word	0x58024400
 8001c98:	58020000 	.word	0x58020000

08001c9c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08e      	sub	sp, #56	; 0x38
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a49      	ldr	r2, [pc, #292]	; (8001de0 <HAL_ETH_MspInit+0x144>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	f040 808b 	bne.w	8001dd6 <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001cc0:	4b48      	ldr	r3, [pc, #288]	; (8001de4 <HAL_ETH_MspInit+0x148>)
 8001cc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cc6:	4a47      	ldr	r2, [pc, #284]	; (8001de4 <HAL_ETH_MspInit+0x148>)
 8001cc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ccc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001cd0:	4b44      	ldr	r3, [pc, #272]	; (8001de4 <HAL_ETH_MspInit+0x148>)
 8001cd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cda:	623b      	str	r3, [r7, #32]
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001cde:	4b41      	ldr	r3, [pc, #260]	; (8001de4 <HAL_ETH_MspInit+0x148>)
 8001ce0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ce4:	4a3f      	ldr	r2, [pc, #252]	; (8001de4 <HAL_ETH_MspInit+0x148>)
 8001ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001cee:	4b3d      	ldr	r3, [pc, #244]	; (8001de4 <HAL_ETH_MspInit+0x148>)
 8001cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001cfc:	4b39      	ldr	r3, [pc, #228]	; (8001de4 <HAL_ETH_MspInit+0x148>)
 8001cfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d02:	4a38      	ldr	r2, [pc, #224]	; (8001de4 <HAL_ETH_MspInit+0x148>)
 8001d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d08:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d0c:	4b35      	ldr	r3, [pc, #212]	; (8001de4 <HAL_ETH_MspInit+0x148>)
 8001d0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	61bb      	str	r3, [r7, #24]
 8001d18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d1a:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <HAL_ETH_MspInit+0x148>)
 8001d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d20:	4a30      	ldr	r2, [pc, #192]	; (8001de4 <HAL_ETH_MspInit+0x148>)
 8001d22:	f043 0304 	orr.w	r3, r3, #4
 8001d26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d2a:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <HAL_ETH_MspInit+0x148>)
 8001d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d38:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <HAL_ETH_MspInit+0x148>)
 8001d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d3e:	4a29      	ldr	r2, [pc, #164]	; (8001de4 <HAL_ETH_MspInit+0x148>)
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d48:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <HAL_ETH_MspInit+0x148>)
 8001d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d56:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <HAL_ETH_MspInit+0x148>)
 8001d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d5c:	4a21      	ldr	r2, [pc, #132]	; (8001de4 <HAL_ETH_MspInit+0x148>)
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d66:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <HAL_ETH_MspInit+0x148>)
 8001d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PB11     ------> ETH_TX_EN
    PA2     ------> ETH_MDIO
    PC4     ------> ETH_RXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD1_Pin|RMII_RXD0_Pin;
 8001d74:	2332      	movs	r3, #50	; 0x32
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d80:	2300      	movs	r3, #0
 8001d82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d84:	230b      	movs	r3, #11
 8001d86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4816      	ldr	r0, [pc, #88]	; (8001de8 <HAL_ETH_MspInit+0x14c>)
 8001d90:	f003 fe80 	bl	8005a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_RX_ER_Pin|RMII_TX_EN_Pin;
 8001d94:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da2:	2300      	movs	r3, #0
 8001da4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001da6:	230b      	movs	r3, #11
 8001da8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dae:	4619      	mov	r1, r3
 8001db0:	480e      	ldr	r0, [pc, #56]	; (8001dec <HAL_ETH_MspInit+0x150>)
 8001db2:	f003 fe6f 	bl	8005a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_CRS_DV_Pin|RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8001db6:	2386      	movs	r3, #134	; 0x86
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dc6:	230b      	movs	r3, #11
 8001dc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4807      	ldr	r0, [pc, #28]	; (8001df0 <HAL_ETH_MspInit+0x154>)
 8001dd2:	f003 fe5f 	bl	8005a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001dd6:	bf00      	nop
 8001dd8:	3738      	adds	r7, #56	; 0x38
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40028000 	.word	0x40028000
 8001de4:	58024400 	.word	0x58024400
 8001de8:	58020800 	.word	0x58020800
 8001dec:	58020400 	.word	0x58020400
 8001df0:	58020000 	.word	0x58020000

08001df4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b0b8      	sub	sp, #224	; 0xe0
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e0c:	f107 0318 	add.w	r3, r7, #24
 8001e10:	22b4      	movs	r2, #180	; 0xb4
 8001e12:	2100      	movs	r1, #0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f00c fa81 	bl	800e31c <memset>
  if(hfdcan->Instance==FDCAN1)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a54      	ldr	r2, [pc, #336]	; (8001f70 <HAL_FDCAN_MspInit+0x17c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d14e      	bne.n	8001ec2 <HAL_FDCAN_MspInit+0xce>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001e24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e28:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001e2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001e2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e32:	f107 0318 	add.w	r3, r7, #24
 8001e36:	4618      	mov	r0, r3
 8001e38:	f006 fa7e 	bl	8008338 <HAL_RCCEx_PeriphCLKConfig>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8001e42:	f7ff fdcf 	bl	80019e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001e46:	4b4b      	ldr	r3, [pc, #300]	; (8001f74 <HAL_FDCAN_MspInit+0x180>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	4a49      	ldr	r2, [pc, #292]	; (8001f74 <HAL_FDCAN_MspInit+0x180>)
 8001e4e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001e50:	4b48      	ldr	r3, [pc, #288]	; (8001f74 <HAL_FDCAN_MspInit+0x180>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d10e      	bne.n	8001e76 <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e58:	4b47      	ldr	r3, [pc, #284]	; (8001f78 <HAL_FDCAN_MspInit+0x184>)
 8001e5a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e5e:	4a46      	ldr	r2, [pc, #280]	; (8001f78 <HAL_FDCAN_MspInit+0x184>)
 8001e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e64:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001e68:	4b43      	ldr	r3, [pc, #268]	; (8001f78 <HAL_FDCAN_MspInit+0x184>)
 8001e6a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e76:	4b40      	ldr	r3, [pc, #256]	; (8001f78 <HAL_FDCAN_MspInit+0x184>)
 8001e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e7c:	4a3e      	ldr	r2, [pc, #248]	; (8001f78 <HAL_FDCAN_MspInit+0x184>)
 8001e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e86:	4b3c      	ldr	r3, [pc, #240]	; (8001f78 <HAL_FDCAN_MspInit+0x184>)
 8001e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001e94:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001e98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001eae:	2309      	movs	r3, #9
 8001eb0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001eb4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4830      	ldr	r0, [pc, #192]	; (8001f7c <HAL_FDCAN_MspInit+0x188>)
 8001ebc:	f003 fdea 	bl	8005a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001ec0:	e051      	b.n	8001f66 <HAL_FDCAN_MspInit+0x172>
  else if(hfdcan->Instance==FDCAN2)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a2e      	ldr	r2, [pc, #184]	; (8001f80 <HAL_FDCAN_MspInit+0x18c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d14c      	bne.n	8001f66 <HAL_FDCAN_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001ecc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ed0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001ed2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001ed6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eda:	f107 0318 	add.w	r3, r7, #24
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f006 fa2a 	bl	8008338 <HAL_RCCEx_PeriphCLKConfig>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_FDCAN_MspInit+0xfa>
      Error_Handler();
 8001eea:	f7ff fd7b 	bl	80019e4 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001eee:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <HAL_FDCAN_MspInit+0x180>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	4a1f      	ldr	r2, [pc, #124]	; (8001f74 <HAL_FDCAN_MspInit+0x180>)
 8001ef6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001ef8:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <HAL_FDCAN_MspInit+0x180>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d10e      	bne.n	8001f1e <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f00:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <HAL_FDCAN_MspInit+0x184>)
 8001f02:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001f06:	4a1c      	ldr	r2, [pc, #112]	; (8001f78 <HAL_FDCAN_MspInit+0x184>)
 8001f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001f10:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <HAL_FDCAN_MspInit+0x184>)
 8001f12:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1e:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <HAL_FDCAN_MspInit+0x184>)
 8001f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f24:	4a14      	ldr	r2, [pc, #80]	; (8001f78 <HAL_FDCAN_MspInit+0x184>)
 8001f26:	f043 0302 	orr.w	r3, r3, #2
 8001f2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_FDCAN_MspInit+0x184>)
 8001f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_TX_Pin|FDCAN2_RX_Pin;
 8001f3c:	2360      	movs	r3, #96	; 0x60
 8001f3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f42:	2302      	movs	r3, #2
 8001f44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001f54:	2309      	movs	r3, #9
 8001f56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4808      	ldr	r0, [pc, #32]	; (8001f84 <HAL_FDCAN_MspInit+0x190>)
 8001f62:	f003 fd97 	bl	8005a94 <HAL_GPIO_Init>
}
 8001f66:	bf00      	nop
 8001f68:	37e0      	adds	r7, #224	; 0xe0
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	4000a000 	.word	0x4000a000
 8001f74:	240000f8 	.word	0x240000f8
 8001f78:	58024400 	.word	0x58024400
 8001f7c:	58021c00 	.word	0x58021c00
 8001f80:	4000a400 	.word	0x4000a400
 8001f84:	58020400 	.word	0x58020400

08001f88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b0b6      	sub	sp, #216	; 0xd8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fa0:	f107 0310 	add.w	r3, r7, #16
 8001fa4:	22b4      	movs	r2, #180	; 0xb4
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f00c f9b7 	bl	800e31c <memset>
  if(hi2c->Instance==I2C4)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a25      	ldr	r2, [pc, #148]	; (8002048 <HAL_I2C_MspInit+0xc0>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d142      	bne.n	800203e <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001fb8:	2310      	movs	r3, #16
 8001fba:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fc2:	f107 0310 	add.w	r3, r7, #16
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f006 f9b6 	bl	8008338 <HAL_RCCEx_PeriphCLKConfig>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001fd2:	f7ff fd07 	bl	80019e4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fd6:	4b1d      	ldr	r3, [pc, #116]	; (800204c <HAL_I2C_MspInit+0xc4>)
 8001fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fdc:	4a1b      	ldr	r2, [pc, #108]	; (800204c <HAL_I2C_MspInit+0xc4>)
 8001fde:	f043 0320 	orr.w	r3, r3, #32
 8001fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fe6:	4b19      	ldr	r3, [pc, #100]	; (800204c <HAL_I2C_MspInit+0xc4>)
 8001fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fec:	f003 0320 	and.w	r3, r3, #32
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF15     ------> I2C4_SDA
    PF14     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8001ff4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001ff8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ffc:	2312      	movs	r3, #18
 8001ffe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002002:	2301      	movs	r3, #1
 8002004:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002008:	2300      	movs	r3, #0
 800200a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800200e:	2304      	movs	r3, #4
 8002010:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002014:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002018:	4619      	mov	r1, r3
 800201a:	480d      	ldr	r0, [pc, #52]	; (8002050 <HAL_I2C_MspInit+0xc8>)
 800201c:	f003 fd3a 	bl	8005a94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002020:	4b0a      	ldr	r3, [pc, #40]	; (800204c <HAL_I2C_MspInit+0xc4>)
 8002022:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002026:	4a09      	ldr	r2, [pc, #36]	; (800204c <HAL_I2C_MspInit+0xc4>)
 8002028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800202c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_I2C_MspInit+0xc4>)
 8002032:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800203e:	bf00      	nop
 8002040:	37d8      	adds	r7, #216	; 0xd8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	58001c00 	.word	0x58001c00
 800204c:	58024400 	.word	0x58024400
 8002050:	58021400 	.word	0x58021400

08002054 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b0bc      	sub	sp, #240	; 0xf0
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800206c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002070:	22b4      	movs	r2, #180	; 0xb4
 8002072:	2100      	movs	r1, #0
 8002074:	4618      	mov	r0, r3
 8002076:	f00c f951 	bl	800e31c <memset>
  if(hltdc->Instance==LTDC)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4ab0      	ldr	r2, [pc, #704]	; (8002340 <HAL_LTDC_MspInit+0x2ec>)
 8002080:	4293      	cmp	r3, r2
 8002082:	f040 8158 	bne.w	8002336 <HAL_LTDC_MspInit+0x2e2>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002086:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800208a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 800208c:	2320      	movs	r3, #32
 800208e:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 8002090:	2381      	movs	r3, #129	; 0x81
 8002092:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002094:	2302      	movs	r3, #2
 8002096:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002098:	2302      	movs	r3, #2
 800209a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800209c:	2302      	movs	r3, #2
 800209e:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80020a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020a4:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	667b      	str	r3, [r7, #100]	; 0x64
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020b2:	4618      	mov	r0, r3
 80020b4:	f006 f940 	bl	8008338 <HAL_RCCEx_PeriphCLKConfig>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 80020be:	f7ff fc91 	bl	80019e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80020c2:	4ba0      	ldr	r3, [pc, #640]	; (8002344 <HAL_LTDC_MspInit+0x2f0>)
 80020c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80020c8:	4a9e      	ldr	r2, [pc, #632]	; (8002344 <HAL_LTDC_MspInit+0x2f0>)
 80020ca:	f043 0308 	orr.w	r3, r3, #8
 80020ce:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80020d2:	4b9c      	ldr	r3, [pc, #624]	; (8002344 <HAL_LTDC_MspInit+0x2f0>)
 80020d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e0:	4b98      	ldr	r3, [pc, #608]	; (8002344 <HAL_LTDC_MspInit+0x2f0>)
 80020e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e6:	4a97      	ldr	r2, [pc, #604]	; (8002344 <HAL_LTDC_MspInit+0x2f0>)
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020f0:	4b94      	ldr	r3, [pc, #592]	; (8002344 <HAL_LTDC_MspInit+0x2f0>)
 80020f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	623b      	str	r3, [r7, #32]
 80020fc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020fe:	4b91      	ldr	r3, [pc, #580]	; (8002344 <HAL_LTDC_MspInit+0x2f0>)
 8002100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002104:	4a8f      	ldr	r2, [pc, #572]	; (8002344 <HAL_LTDC_MspInit+0x2f0>)
 8002106:	f043 0308 	orr.w	r3, r3, #8
 800210a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800210e:	4b8d      	ldr	r3, [pc, #564]	; (8002344 <HAL_LTDC_MspInit+0x2f0>)
 8002110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	61fb      	str	r3, [r7, #28]
 800211a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800211c:	4b89      	ldr	r3, [pc, #548]	; (8002344 <HAL_LTDC_MspInit+0x2f0>)
 800211e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002122:	4a88      	ldr	r2, [pc, #544]	; (8002344 <HAL_LTDC_MspInit+0x2f0>)
 8002124:	f043 0310 	orr.w	r3, r3, #16
 8002128:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800212c:	4b85      	ldr	r3, [pc, #532]	; (8002344 <HAL_LTDC_MspInit+0x2f0>)
 800212e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002132:	f003 0310 	and.w	r3, r3, #16
 8002136:	61bb      	str	r3, [r7, #24]
 8002138:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213a:	4b82      	ldr	r3, [pc, #520]	; (8002344 <HAL_LTDC_MspInit+0x2f0>)
 800213c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002140:	4a80      	ldr	r2, [pc, #512]	; (8002344 <HAL_LTDC_MspInit+0x2f0>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800214a:	4b7e      	ldr	r3, [pc, #504]	; (8002344 <HAL_LTDC_MspInit+0x2f0>)
 800214c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002158:	4b7a      	ldr	r3, [pc, #488]	; (8002344 <HAL_LTDC_MspInit+0x2f0>)
 800215a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800215e:	4a79      	ldr	r2, [pc, #484]	; (8002344 <HAL_LTDC_MspInit+0x2f0>)
 8002160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002164:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002168:	4b76      	ldr	r3, [pc, #472]	; (8002344 <HAL_LTDC_MspInit+0x2f0>)
 800216a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800216e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002176:	4b73      	ldr	r3, [pc, #460]	; (8002344 <HAL_LTDC_MspInit+0x2f0>)
 8002178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800217c:	4a71      	ldr	r2, [pc, #452]	; (8002344 <HAL_LTDC_MspInit+0x2f0>)
 800217e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002182:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002186:	4b6f      	ldr	r3, [pc, #444]	; (8002344 <HAL_LTDC_MspInit+0x2f0>)
 8002188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800218c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002194:	4b6b      	ldr	r3, [pc, #428]	; (8002344 <HAL_LTDC_MspInit+0x2f0>)
 8002196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800219a:	4a6a      	ldr	r2, [pc, #424]	; (8002344 <HAL_LTDC_MspInit+0x2f0>)
 800219c:	f043 0304 	orr.w	r3, r3, #4
 80021a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021a4:	4b67      	ldr	r3, [pc, #412]	; (8002344 <HAL_LTDC_MspInit+0x2f0>)
 80021a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
    PH3     ------> LTDC_R1
    PA6     ------> LTDC_G2
    PB0     ------> LTDC_G1
    PE11     ------> LTDC_G3
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_G0_Pin|LCD_G1_Pin;
 80021b2:	f240 3303 	movw	r3, #771	; 0x303
 80021b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c6:	2300      	movs	r3, #0
 80021c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021cc:	230e      	movs	r3, #14
 80021ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021d6:	4619      	mov	r1, r3
 80021d8:	485b      	ldr	r0, [pc, #364]	; (8002348 <HAL_LTDC_MspInit+0x2f4>)
 80021da:	f003 fc5b 	bl	8005a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_G7_Pin|LCD_B1_Pin|LCD_B2_Pin;
 80021de:	2349      	movs	r3, #73	; 0x49
 80021e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e4:	2302      	movs	r3, #2
 80021e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f0:	2300      	movs	r3, #0
 80021f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021f6:	230e      	movs	r3, #14
 80021f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002200:	4619      	mov	r1, r3
 8002202:	4852      	ldr	r0, [pc, #328]	; (800234c <HAL_LTDC_MspInit+0x2f8>)
 8002204:	f003 fc46 	bl	8005a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_R0_Pin|LCD_R6_Pin|LCD_B4_Pin|LCD_DE_Pin
 8002208:	f64b 0303 	movw	r3, #47107	; 0xb803
 800220c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_R7_Pin|LCD_G3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002210:	2302      	movs	r3, #2
 8002212:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002222:	230e      	movs	r3, #14
 8002224:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002228:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800222c:	4619      	mov	r1, r3
 800222e:	4848      	ldr	r0, [pc, #288]	; (8002350 <HAL_LTDC_MspInit+0x2fc>)
 8002230:	f003 fc30 	bl	8005a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin;
 8002234:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002238:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223c:	2302      	movs	r3, #2
 800223e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 800224e:	230d      	movs	r3, #13
 8002250:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(LCD_B3_GPIO_Port, &GPIO_InitStruct);
 8002254:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002258:	4619      	mov	r1, r3
 800225a:	483e      	ldr	r0, [pc, #248]	; (8002354 <HAL_LTDC_MspInit+0x300>)
 800225c:	f003 fc1a 	bl	8005a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B0_Pin|LCD_CLK_Pin;
 8002260:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8002264:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002274:	2300      	movs	r3, #0
 8002276:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800227a:	230e      	movs	r3, #14
 800227c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002280:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002284:	4619      	mov	r1, r3
 8002286:	4834      	ldr	r0, [pc, #208]	; (8002358 <HAL_LTDC_MspInit+0x304>)
 8002288:	f003 fc04 	bl	8005a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_G4_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R2_Pin
 800228c:	f648 7308 	movw	r3, #36616	; 0x8f08
 8002290:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_R4_Pin|LCD_R1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022a6:	230e      	movs	r3, #14
 80022a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80022ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022b0:	4619      	mov	r1, r3
 80022b2:	482a      	ldr	r0, [pc, #168]	; (800235c <HAL_LTDC_MspInit+0x308>)
 80022b4:	f003 fbee 	bl	8005a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_G6_Pin|LCD_HSYNC_Pin;
 80022b8:	23c0      	movs	r3, #192	; 0xc0
 80022ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022be:	2302      	movs	r3, #2
 80022c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022d0:	230e      	movs	r3, #14
 80022d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022da:	4619      	mov	r1, r3
 80022dc:	4820      	ldr	r0, [pc, #128]	; (8002360 <HAL_LTDC_MspInit+0x30c>)
 80022de:	f003 fbd9 	bl	8005a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B5_Pin|LCD_VSYNC_Pin|LCD_G2_Pin;
 80022e2:	2358      	movs	r3, #88	; 0x58
 80022e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2302      	movs	r3, #2
 80022ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022fa:	230e      	movs	r3, #14
 80022fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002300:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002304:	4619      	mov	r1, r3
 8002306:	4813      	ldr	r0, [pc, #76]	; (8002354 <HAL_LTDC_MspInit+0x300>)
 8002308:	f003 fbc4 	bl	8005a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_G5_Pin;
 800230c:	2310      	movs	r3, #16
 800230e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231e:	2300      	movs	r3, #0
 8002320:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002324:	2309      	movs	r3, #9
 8002326:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(LCD_G5_GPIO_Port, &GPIO_InitStruct);
 800232a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800232e:	4619      	mov	r1, r3
 8002330:	480a      	ldr	r0, [pc, #40]	; (800235c <HAL_LTDC_MspInit+0x308>)
 8002332:	f003 fbaf 	bl	8005a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002336:	bf00      	nop
 8002338:	37f0      	adds	r7, #240	; 0xf0
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	50001000 	.word	0x50001000
 8002344:	58024400 	.word	0x58024400
 8002348:	58020400 	.word	0x58020400
 800234c:	58020c00 	.word	0x58020c00
 8002350:	58021000 	.word	0x58021000
 8002354:	58020000 	.word	0x58020000
 8002358:	58021800 	.word	0x58021800
 800235c:	58021c00 	.word	0x58021c00
 8002360:	58020800 	.word	0x58020800

08002364 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b0c0      	sub	sp, #256	; 0x100
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800237c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002380:	22b4      	movs	r2, #180	; 0xb4
 8002382:	2100      	movs	r1, #0
 8002384:	4618      	mov	r0, r3
 8002386:	f00b ffc9 	bl	800e31c <memset>
  if(hospi->Instance==OCTOSPI1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a8e      	ldr	r2, [pc, #568]	; (80025c8 <HAL_OSPI_MspInit+0x264>)
 8002390:	4293      	cmp	r3, r2
 8002392:	f040 8129 	bne.w	80025e8 <HAL_OSPI_MspInit+0x284>
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002396:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800239a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 800239c:	2300      	movs	r3, #0
 800239e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023a6:	4618      	mov	r0, r3
 80023a8:	f005 ffc6 	bl	8008338 <HAL_RCCEx_PeriphCLKConfig>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_OSPI_MspInit+0x52>
    {
      Error_Handler();
 80023b2:	f7ff fb17 	bl	80019e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 80023b6:	4b85      	ldr	r3, [pc, #532]	; (80025cc <HAL_OSPI_MspInit+0x268>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	3301      	adds	r3, #1
 80023bc:	4a83      	ldr	r2, [pc, #524]	; (80025cc <HAL_OSPI_MspInit+0x268>)
 80023be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 80023c0:	4b82      	ldr	r3, [pc, #520]	; (80025cc <HAL_OSPI_MspInit+0x268>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d10e      	bne.n	80023e6 <HAL_OSPI_MspInit+0x82>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80023c8:	4b81      	ldr	r3, [pc, #516]	; (80025d0 <HAL_OSPI_MspInit+0x26c>)
 80023ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80023ce:	4a80      	ldr	r2, [pc, #512]	; (80025d0 <HAL_OSPI_MspInit+0x26c>)
 80023d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023d4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80023d8:	4b7d      	ldr	r3, [pc, #500]	; (80025d0 <HAL_OSPI_MspInit+0x26c>)
 80023da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80023de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e2:	637b      	str	r3, [r7, #52]	; 0x34
 80023e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80023e6:	4b7a      	ldr	r3, [pc, #488]	; (80025d0 <HAL_OSPI_MspInit+0x26c>)
 80023e8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80023ec:	4a78      	ldr	r2, [pc, #480]	; (80025d0 <HAL_OSPI_MspInit+0x26c>)
 80023ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80023f6:	4b76      	ldr	r3, [pc, #472]	; (80025d0 <HAL_OSPI_MspInit+0x26c>)
 80023f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80023fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002400:	633b      	str	r3, [r7, #48]	; 0x30
 8002402:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002404:	4b72      	ldr	r3, [pc, #456]	; (80025d0 <HAL_OSPI_MspInit+0x26c>)
 8002406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800240a:	4a71      	ldr	r2, [pc, #452]	; (80025d0 <HAL_OSPI_MspInit+0x26c>)
 800240c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002410:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002414:	4b6e      	ldr	r3, [pc, #440]	; (80025d0 <HAL_OSPI_MspInit+0x26c>)
 8002416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800241a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002422:	4b6b      	ldr	r3, [pc, #428]	; (80025d0 <HAL_OSPI_MspInit+0x26c>)
 8002424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002428:	4a69      	ldr	r2, [pc, #420]	; (80025d0 <HAL_OSPI_MspInit+0x26c>)
 800242a:	f043 0308 	orr.w	r3, r3, #8
 800242e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002432:	4b67      	ldr	r3, [pc, #412]	; (80025d0 <HAL_OSPI_MspInit+0x26c>)
 8002434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002438:	f003 0308 	and.w	r3, r3, #8
 800243c:	62bb      	str	r3, [r7, #40]	; 0x28
 800243e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002440:	4b63      	ldr	r3, [pc, #396]	; (80025d0 <HAL_OSPI_MspInit+0x26c>)
 8002442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002446:	4a62      	ldr	r2, [pc, #392]	; (80025d0 <HAL_OSPI_MspInit+0x26c>)
 8002448:	f043 0310 	orr.w	r3, r3, #16
 800244c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002450:	4b5f      	ldr	r3, [pc, #380]	; (80025d0 <HAL_OSPI_MspInit+0x26c>)
 8002452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800245e:	4b5c      	ldr	r3, [pc, #368]	; (80025d0 <HAL_OSPI_MspInit+0x26c>)
 8002460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002464:	4a5a      	ldr	r2, [pc, #360]	; (80025d0 <HAL_OSPI_MspInit+0x26c>)
 8002466:	f043 0320 	orr.w	r3, r3, #32
 800246a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800246e:	4b58      	ldr	r3, [pc, #352]	; (80025d0 <HAL_OSPI_MspInit+0x26c>)
 8002470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	623b      	str	r3, [r7, #32]
 800247a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800247c:	4b54      	ldr	r3, [pc, #336]	; (80025d0 <HAL_OSPI_MspInit+0x26c>)
 800247e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002482:	4a53      	ldr	r2, [pc, #332]	; (80025d0 <HAL_OSPI_MspInit+0x26c>)
 8002484:	f043 0302 	orr.w	r3, r3, #2
 8002488:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800248c:	4b50      	ldr	r3, [pc, #320]	; (80025d0 <HAL_OSPI_MspInit+0x26c>)
 800248e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	61fb      	str	r3, [r7, #28]
 8002498:	69fb      	ldr	r3, [r7, #28]
    PD11     ------> OCTOSPIM_P1_IO0
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 800249a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800249e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a2:	2302      	movs	r3, #2
 80024a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ae:	2303      	movs	r3, #3
 80024b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80024b4:	2309      	movs	r3, #9
 80024b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 80024ba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80024be:	4619      	mov	r1, r3
 80024c0:	4844      	ldr	r0, [pc, #272]	; (80025d4 <HAL_OSPI_MspInit+0x270>)
 80024c2:	f003 fae7 	bl	8005a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO7_Pin|OCSPI1_IO5_Pin|OCSPI1_IO4_Pin;
 80024c6:	23b0      	movs	r3, #176	; 0xb0
 80024c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024cc:	2302      	movs	r3, #2
 80024ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d8:	2303      	movs	r3, #3
 80024da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80024de:	230a      	movs	r3, #10
 80024e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024e4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80024e8:	4619      	mov	r1, r3
 80024ea:	483b      	ldr	r0, [pc, #236]	; (80025d8 <HAL_OSPI_MspInit+0x274>)
 80024ec:	f003 fad2 	bl	8005a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO2_Pin;
 80024f0:	2304      	movs	r3, #4
 80024f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f6:	2302      	movs	r3, #2
 80024f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002502:	2303      	movs	r3, #3
 8002504:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8002508:	2309      	movs	r3, #9
 800250a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(OCSPI1_IO2_GPIO_Port, &GPIO_InitStruct);
 800250e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002512:	4619      	mov	r1, r3
 8002514:	4831      	ldr	r0, [pc, #196]	; (80025dc <HAL_OSPI_MspInit+0x278>)
 8002516:	f003 fabd 	bl	8005a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 800251a:	2340      	movs	r3, #64	; 0x40
 800251c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002520:	2302      	movs	r3, #2
 8002522:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252c:	2303      	movs	r3, #3
 800252e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002532:	230a      	movs	r3, #10
 8002534:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8002538:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800253c:	4619      	mov	r1, r3
 800253e:	4825      	ldr	r0, [pc, #148]	; (80025d4 <HAL_OSPI_MspInit+0x270>)
 8002540:	f003 faa8 	bl	8005a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO3_Pin|OCSPI1_IO0_Pin|OCSPI1_IO1_Pin;
 8002544:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002548:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254c:	2302      	movs	r3, #2
 800254e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002558:	2303      	movs	r3, #3
 800255a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800255e:	2309      	movs	r3, #9
 8002560:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002564:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002568:	4619      	mov	r1, r3
 800256a:	481b      	ldr	r0, [pc, #108]	; (80025d8 <HAL_OSPI_MspInit+0x274>)
 800256c:	f003 fa92 	bl	8005a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 8002570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002574:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002578:	2302      	movs	r3, #2
 800257a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002584:	2303      	movs	r3, #3
 8002586:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800258a:	2309      	movs	r3, #9
 800258c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 8002590:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002594:	4619      	mov	r1, r3
 8002596:	4812      	ldr	r0, [pc, #72]	; (80025e0 <HAL_OSPI_MspInit+0x27c>)
 8002598:	f003 fa7c 	bl	8005a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_DQS_Pin;
 800259c:	2304      	movs	r3, #4
 800259e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ae:	2303      	movs	r3, #3
 80025b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80025b4:	230a      	movs	r3, #10
 80025b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(OCSPI1_DQS_GPIO_Port, &GPIO_InitStruct);
 80025ba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80025be:	4619      	mov	r1, r3
 80025c0:	4808      	ldr	r0, [pc, #32]	; (80025e4 <HAL_OSPI_MspInit+0x280>)
 80025c2:	f003 fa67 	bl	8005a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 80025c6:	e0ac      	b.n	8002722 <HAL_OSPI_MspInit+0x3be>
 80025c8:	52005000 	.word	0x52005000
 80025cc:	240000fc 	.word	0x240000fc
 80025d0:	58024400 	.word	0x58024400
 80025d4:	58021800 	.word	0x58021800
 80025d8:	58020c00 	.word	0x58020c00
 80025dc:	58021000 	.word	0x58021000
 80025e0:	58021400 	.word	0x58021400
 80025e4:	58020400 	.word	0x58020400
  else if(hospi->Instance==OCTOSPI2)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a4f      	ldr	r2, [pc, #316]	; (800272c <HAL_OSPI_MspInit+0x3c8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	f040 8097 	bne.w	8002722 <HAL_OSPI_MspInit+0x3be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80025f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025f8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002600:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002604:	4618      	mov	r0, r3
 8002606:	f005 fe97 	bl	8008338 <HAL_RCCEx_PeriphCLKConfig>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_OSPI_MspInit+0x2b0>
      Error_Handler();
 8002610:	f7ff f9e8 	bl	80019e4 <Error_Handler>
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8002614:	4b46      	ldr	r3, [pc, #280]	; (8002730 <HAL_OSPI_MspInit+0x3cc>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	3301      	adds	r3, #1
 800261a:	4a45      	ldr	r2, [pc, #276]	; (8002730 <HAL_OSPI_MspInit+0x3cc>)
 800261c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 800261e:	4b44      	ldr	r3, [pc, #272]	; (8002730 <HAL_OSPI_MspInit+0x3cc>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d10e      	bne.n	8002644 <HAL_OSPI_MspInit+0x2e0>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8002626:	4b43      	ldr	r3, [pc, #268]	; (8002734 <HAL_OSPI_MspInit+0x3d0>)
 8002628:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800262c:	4a41      	ldr	r2, [pc, #260]	; (8002734 <HAL_OSPI_MspInit+0x3d0>)
 800262e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002632:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002636:	4b3f      	ldr	r3, [pc, #252]	; (8002734 <HAL_OSPI_MspInit+0x3d0>)
 8002638:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800263c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002640:	61bb      	str	r3, [r7, #24]
 8002642:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8002644:	4b3b      	ldr	r3, [pc, #236]	; (8002734 <HAL_OSPI_MspInit+0x3d0>)
 8002646:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800264a:	4a3a      	ldr	r2, [pc, #232]	; (8002734 <HAL_OSPI_MspInit+0x3d0>)
 800264c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002650:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002654:	4b37      	ldr	r3, [pc, #220]	; (8002734 <HAL_OSPI_MspInit+0x3d0>)
 8002656:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800265a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002662:	4b34      	ldr	r3, [pc, #208]	; (8002734 <HAL_OSPI_MspInit+0x3d0>)
 8002664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002668:	4a32      	ldr	r2, [pc, #200]	; (8002734 <HAL_OSPI_MspInit+0x3d0>)
 800266a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800266e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002672:	4b30      	ldr	r3, [pc, #192]	; (8002734 <HAL_OSPI_MspInit+0x3d0>)
 8002674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002680:	4b2c      	ldr	r3, [pc, #176]	; (8002734 <HAL_OSPI_MspInit+0x3d0>)
 8002682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002686:	4a2b      	ldr	r2, [pc, #172]	; (8002734 <HAL_OSPI_MspInit+0x3d0>)
 8002688:	f043 0320 	orr.w	r3, r3, #32
 800268c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002690:	4b28      	ldr	r3, [pc, #160]	; (8002734 <HAL_OSPI_MspInit+0x3d0>)
 8002692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002696:	f003 0320 	and.w	r3, r3, #32
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = OCSPI2_IO7_Pin|OCSPI2_IO5_Pin|OCSPI2_IO4_Pin;
 800269e:	f640 0303 	movw	r3, #2051	; 0x803
 80026a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b2:	2303      	movs	r3, #3
 80026b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 80026b8:	2309      	movs	r3, #9
 80026ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026be:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80026c2:	4619      	mov	r1, r3
 80026c4:	481c      	ldr	r0, [pc, #112]	; (8002738 <HAL_OSPI_MspInit+0x3d4>)
 80026c6:	f003 f9e5 	bl	8005a94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCSPI2_IO6_Pin|OCSPI2_NCS_Pin;
 80026ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80026ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026de:	2303      	movs	r3, #3
 80026e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 80026e4:	2303      	movs	r3, #3
 80026e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026ea:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80026ee:	4619      	mov	r1, r3
 80026f0:	4811      	ldr	r0, [pc, #68]	; (8002738 <HAL_OSPI_MspInit+0x3d4>)
 80026f2:	f003 f9cf 	bl	8005a94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCSPI2_IO1_Pin|OCSPI2_IO0_Pin|OCSPI2_IO2_Pin|OCSPI2_CLK_Pin
 80026f6:	f241 031f 	movw	r3, #4127	; 0x101f
 80026fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fe:	2302      	movs	r3, #2
 8002700:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270a:	2303      	movs	r3, #3
 800270c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8002710:	2309      	movs	r3, #9
 8002712:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002716:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800271a:	4619      	mov	r1, r3
 800271c:	4807      	ldr	r0, [pc, #28]	; (800273c <HAL_OSPI_MspInit+0x3d8>)
 800271e:	f003 f9b9 	bl	8005a94 <HAL_GPIO_Init>
}
 8002722:	bf00      	nop
 8002724:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	5200a000 	.word	0x5200a000
 8002730:	240000fc 	.word	0x240000fc
 8002734:	58024400 	.word	0x58024400
 8002738:	58021800 	.word	0x58021800
 800273c:	58021400 	.word	0x58021400

08002740 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b0b8      	sub	sp, #224	; 0xe0
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002748:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002758:	f107 0318 	add.w	r3, r7, #24
 800275c:	22b4      	movs	r2, #180	; 0xb4
 800275e:	2100      	movs	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f00b fddb 	bl	800e31c <memset>
  if(hsd->Instance==SDMMC1)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a37      	ldr	r2, [pc, #220]	; (8002848 <HAL_SD_MspInit+0x108>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d166      	bne.n	800283e <HAL_SD_MspInit+0xfe>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002774:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002776:	2300      	movs	r3, #0
 8002778:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800277a:	f107 0318 	add.w	r3, r7, #24
 800277e:	4618      	mov	r0, r3
 8002780:	f005 fdda 	bl	8008338 <HAL_RCCEx_PeriphCLKConfig>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 800278a:	f7ff f92b 	bl	80019e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800278e:	4b2f      	ldr	r3, [pc, #188]	; (800284c <HAL_SD_MspInit+0x10c>)
 8002790:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002794:	4a2d      	ldr	r2, [pc, #180]	; (800284c <HAL_SD_MspInit+0x10c>)
 8002796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800279e:	4b2b      	ldr	r3, [pc, #172]	; (800284c <HAL_SD_MspInit+0x10c>)
 80027a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80027a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ac:	4b27      	ldr	r3, [pc, #156]	; (800284c <HAL_SD_MspInit+0x10c>)
 80027ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027b2:	4a26      	ldr	r2, [pc, #152]	; (800284c <HAL_SD_MspInit+0x10c>)
 80027b4:	f043 0308 	orr.w	r3, r3, #8
 80027b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027bc:	4b23      	ldr	r3, [pc, #140]	; (800284c <HAL_SD_MspInit+0x10c>)
 80027be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ca:	4b20      	ldr	r3, [pc, #128]	; (800284c <HAL_SD_MspInit+0x10c>)
 80027cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027d0:	4a1e      	ldr	r2, [pc, #120]	; (800284c <HAL_SD_MspInit+0x10c>)
 80027d2:	f043 0304 	orr.w	r3, r3, #4
 80027d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027da:	4b1c      	ldr	r3, [pc, #112]	; (800284c <HAL_SD_MspInit+0x10c>)
 80027dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC10     ------> SDMMC1_D2
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 80027e8:	2304      	movs	r3, #4
 80027ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ee:	2302      	movs	r3, #2
 80027f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fa:	2303      	movs	r3, #3
 80027fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002800:	230c      	movs	r3, #12
 8002802:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8002806:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800280a:	4619      	mov	r1, r3
 800280c:	4810      	ldr	r0, [pc, #64]	; (8002850 <HAL_SD_MspInit+0x110>)
 800280e:	f003 f941 	bl	8005a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CK_Pin|SDIO1_D3_Pin|SDIO1_D2_Pin|SDIO1_D0_Pin
 8002812:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002816:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281a:	2302      	movs	r3, #2
 800281c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002826:	2303      	movs	r3, #3
 8002828:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800282c:	230c      	movs	r3, #12
 800282e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002832:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002836:	4619      	mov	r1, r3
 8002838:	4806      	ldr	r0, [pc, #24]	; (8002854 <HAL_SD_MspInit+0x114>)
 800283a:	f003 f92b 	bl	8005a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800283e:	bf00      	nop
 8002840:	37e0      	adds	r7, #224	; 0xe0
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	52007000 	.word	0x52007000
 800284c:	58024400 	.word	0x58024400
 8002850:	58020c00 	.word	0x58020c00
 8002854:	58020800 	.word	0x58020800

08002858 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a20      	ldr	r2, [pc, #128]	; (80028e8 <HAL_TIM_PWM_MspInit+0x90>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d10f      	bne.n	800288a <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800286a:	4b20      	ldr	r3, [pc, #128]	; (80028ec <HAL_TIM_PWM_MspInit+0x94>)
 800286c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002870:	4a1e      	ldr	r2, [pc, #120]	; (80028ec <HAL_TIM_PWM_MspInit+0x94>)
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800287a:	4b1c      	ldr	r3, [pc, #112]	; (80028ec <HAL_TIM_PWM_MspInit+0x94>)
 800287c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002888:	e028      	b.n	80028dc <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM4)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a18      	ldr	r2, [pc, #96]	; (80028f0 <HAL_TIM_PWM_MspInit+0x98>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d10f      	bne.n	80028b4 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002894:	4b15      	ldr	r3, [pc, #84]	; (80028ec <HAL_TIM_PWM_MspInit+0x94>)
 8002896:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800289a:	4a14      	ldr	r2, [pc, #80]	; (80028ec <HAL_TIM_PWM_MspInit+0x94>)
 800289c:	f043 0304 	orr.w	r3, r3, #4
 80028a0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80028a4:	4b11      	ldr	r3, [pc, #68]	; (80028ec <HAL_TIM_PWM_MspInit+0x94>)
 80028a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	693b      	ldr	r3, [r7, #16]
}
 80028b2:	e013      	b.n	80028dc <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM5)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a0e      	ldr	r2, [pc, #56]	; (80028f4 <HAL_TIM_PWM_MspInit+0x9c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d10e      	bne.n	80028dc <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80028be:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <HAL_TIM_PWM_MspInit+0x94>)
 80028c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028c4:	4a09      	ldr	r2, [pc, #36]	; (80028ec <HAL_TIM_PWM_MspInit+0x94>)
 80028c6:	f043 0308 	orr.w	r3, r3, #8
 80028ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80028ce:	4b07      	ldr	r3, [pc, #28]	; (80028ec <HAL_TIM_PWM_MspInit+0x94>)
 80028d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	68fb      	ldr	r3, [r7, #12]
}
 80028dc:	bf00      	nop
 80028de:	371c      	adds	r7, #28
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	40010000 	.word	0x40010000
 80028ec:	58024400 	.word	0x58024400
 80028f0:	40000800 	.word	0x40000800
 80028f4:	40000c00 	.word	0x40000c00

080028f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08c      	sub	sp, #48	; 0x30
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 031c 	add.w	r3, r7, #28
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a48      	ldr	r2, [pc, #288]	; (8002a38 <HAL_TIM_MspPostInit+0x140>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d120      	bne.n	800295c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800291a:	4b48      	ldr	r3, [pc, #288]	; (8002a3c <HAL_TIM_MspPostInit+0x144>)
 800291c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002920:	4a46      	ldr	r2, [pc, #280]	; (8002a3c <HAL_TIM_MspPostInit+0x144>)
 8002922:	f043 0310 	orr.w	r3, r3, #16
 8002926:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800292a:	4b44      	ldr	r3, [pc, #272]	; (8002a3c <HAL_TIM_MspPostInit+0x144>)
 800292c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	61bb      	str	r3, [r7, #24]
 8002936:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = ARD_D5_Pin;
 8002938:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800293c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293e:	2302      	movs	r3, #2
 8002940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002942:	2300      	movs	r3, #0
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002946:	2300      	movs	r3, #0
 8002948:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800294a:	2301      	movs	r3, #1
 800294c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 800294e:	f107 031c 	add.w	r3, r7, #28
 8002952:	4619      	mov	r1, r3
 8002954:	483a      	ldr	r0, [pc, #232]	; (8002a40 <HAL_TIM_MspPostInit+0x148>)
 8002956:	f003 f89d 	bl	8005a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800295a:	e068      	b.n	8002a2e <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a38      	ldr	r2, [pc, #224]	; (8002a44 <HAL_TIM_MspPostInit+0x14c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d13f      	bne.n	80029e6 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002966:	4b35      	ldr	r3, [pc, #212]	; (8002a3c <HAL_TIM_MspPostInit+0x144>)
 8002968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800296c:	4a33      	ldr	r2, [pc, #204]	; (8002a3c <HAL_TIM_MspPostInit+0x144>)
 800296e:	f043 0302 	orr.w	r3, r3, #2
 8002972:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002976:	4b31      	ldr	r3, [pc, #196]	; (8002a3c <HAL_TIM_MspPostInit+0x144>)
 8002978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002984:	4b2d      	ldr	r3, [pc, #180]	; (8002a3c <HAL_TIM_MspPostInit+0x144>)
 8002986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800298a:	4a2c      	ldr	r2, [pc, #176]	; (8002a3c <HAL_TIM_MspPostInit+0x144>)
 800298c:	f043 0308 	orr.w	r3, r3, #8
 8002990:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002994:	4b29      	ldr	r3, [pc, #164]	; (8002a3c <HAL_TIM_MspPostInit+0x144>)
 8002996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 80029a2:	2380      	movs	r3, #128	; 0x80
 80029a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a6:	2302      	movs	r3, #2
 80029a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ae:	2300      	movs	r3, #0
 80029b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029b2:	2302      	movs	r3, #2
 80029b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 80029b6:	f107 031c 	add.w	r3, r7, #28
 80029ba:	4619      	mov	r1, r3
 80029bc:	4822      	ldr	r0, [pc, #136]	; (8002a48 <HAL_TIM_MspPostInit+0x150>)
 80029be:	f003 f869 	bl	8005a94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_14_PWM_Pin|ARD_D6_Pin;
 80029c2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80029c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c8:	2302      	movs	r3, #2
 80029ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d0:	2300      	movs	r3, #0
 80029d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029d4:	2302      	movs	r3, #2
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029d8:	f107 031c 	add.w	r3, r7, #28
 80029dc:	4619      	mov	r1, r3
 80029de:	481b      	ldr	r0, [pc, #108]	; (8002a4c <HAL_TIM_MspPostInit+0x154>)
 80029e0:	f003 f858 	bl	8005a94 <HAL_GPIO_Init>
}
 80029e4:	e023      	b.n	8002a2e <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM5)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a19      	ldr	r2, [pc, #100]	; (8002a50 <HAL_TIM_MspPostInit+0x158>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d11e      	bne.n	8002a2e <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f0:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <HAL_TIM_MspPostInit+0x144>)
 80029f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f6:	4a11      	ldr	r2, [pc, #68]	; (8002a3c <HAL_TIM_MspPostInit+0x144>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a00:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <HAL_TIM_MspPostInit+0x144>)
 8002a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a12:	2302      	movs	r3, #2
 8002a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002a22:	f107 031c 	add.w	r3, r7, #28
 8002a26:	4619      	mov	r1, r3
 8002a28:	480a      	ldr	r0, [pc, #40]	; (8002a54 <HAL_TIM_MspPostInit+0x15c>)
 8002a2a:	f003 f833 	bl	8005a94 <HAL_GPIO_Init>
}
 8002a2e:	bf00      	nop
 8002a30:	3730      	adds	r7, #48	; 0x30
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40010000 	.word	0x40010000
 8002a3c:	58024400 	.word	0x58024400
 8002a40:	58021000 	.word	0x58021000
 8002a44:	40000800 	.word	0x40000800
 8002a48:	58020400 	.word	0x58020400
 8002a4c:	58020c00 	.word	0x58020c00
 8002a50:	40000c00 	.word	0x40000c00
 8002a54:	58020000 	.word	0x58020000

08002a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b0b8      	sub	sp, #224	; 0xe0
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a70:	f107 0318 	add.w	r3, r7, #24
 8002a74:	22b4      	movs	r2, #180	; 0xb4
 8002a76:	2100      	movs	r1, #0
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f00b fc4f 	bl	800e31c <memset>
  if(huart->Instance==USART1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a49      	ldr	r2, [pc, #292]	; (8002ba8 <HAL_UART_MspInit+0x150>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d143      	bne.n	8002b10 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a92:	f107 0318 	add.w	r3, r7, #24
 8002a96:	4618      	mov	r0, r3
 8002a98:	f005 fc4e 	bl	8008338 <HAL_RCCEx_PeriphCLKConfig>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002aa2:	f7fe ff9f 	bl	80019e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002aa6:	4b41      	ldr	r3, [pc, #260]	; (8002bac <HAL_UART_MspInit+0x154>)
 8002aa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002aac:	4a3f      	ldr	r2, [pc, #252]	; (8002bac <HAL_UART_MspInit+0x154>)
 8002aae:	f043 0310 	orr.w	r3, r3, #16
 8002ab2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002ab6:	4b3d      	ldr	r3, [pc, #244]	; (8002bac <HAL_UART_MspInit+0x154>)
 8002ab8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002abc:	f003 0310 	and.w	r3, r3, #16
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac4:	4b39      	ldr	r3, [pc, #228]	; (8002bac <HAL_UART_MspInit+0x154>)
 8002ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aca:	4a38      	ldr	r2, [pc, #224]	; (8002bac <HAL_UART_MspInit+0x154>)
 8002acc:	f043 0302 	orr.w	r3, r3, #2
 8002ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ad4:	4b35      	ldr	r3, [pc, #212]	; (8002bac <HAL_UART_MspInit+0x154>)
 8002ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB14     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8002ae2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002ae6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aea:	2302      	movs	r3, #2
 8002aec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af6:	2300      	movs	r3, #0
 8002af8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002afc:	2304      	movs	r3, #4
 8002afe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b02:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b06:	4619      	mov	r1, r3
 8002b08:	4829      	ldr	r0, [pc, #164]	; (8002bb0 <HAL_UART_MspInit+0x158>)
 8002b0a:	f002 ffc3 	bl	8005a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b0e:	e047      	b.n	8002ba0 <HAL_UART_MspInit+0x148>
  else if(huart->Instance==USART3)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a27      	ldr	r2, [pc, #156]	; (8002bb4 <HAL_UART_MspInit+0x15c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d142      	bne.n	8002ba0 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b24:	f107 0318 	add.w	r3, r7, #24
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f005 fc05 	bl	8008338 <HAL_RCCEx_PeriphCLKConfig>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002b34:	f7fe ff56 	bl	80019e4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b38:	4b1c      	ldr	r3, [pc, #112]	; (8002bac <HAL_UART_MspInit+0x154>)
 8002b3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b3e:	4a1b      	ldr	r2, [pc, #108]	; (8002bac <HAL_UART_MspInit+0x154>)
 8002b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b44:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b48:	4b18      	ldr	r3, [pc, #96]	; (8002bac <HAL_UART_MspInit+0x154>)
 8002b4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b56:	4b15      	ldr	r3, [pc, #84]	; (8002bac <HAL_UART_MspInit+0x154>)
 8002b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b5c:	4a13      	ldr	r2, [pc, #76]	; (8002bac <HAL_UART_MspInit+0x154>)
 8002b5e:	f043 0308 	orr.w	r3, r3, #8
 8002b62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b66:	4b11      	ldr	r3, [pc, #68]	; (8002bac <HAL_UART_MspInit+0x154>)
 8002b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8002b74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b8e:	2307      	movs	r3, #7
 8002b90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4807      	ldr	r0, [pc, #28]	; (8002bb8 <HAL_UART_MspInit+0x160>)
 8002b9c:	f002 ff7a 	bl	8005a94 <HAL_GPIO_Init>
}
 8002ba0:	bf00      	nop
 8002ba2:	37e0      	adds	r7, #224	; 0xe0
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40011000 	.word	0x40011000
 8002bac:	58024400 	.word	0x58024400
 8002bb0:	58020400 	.word	0x58020400
 8002bb4:	40004800 	.word	0x40004800
 8002bb8:	58020c00 	.word	0x58020c00

08002bbc <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b0b6      	sub	sp, #216	; 0xd8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bc4:	f107 0310 	add.w	r3, r7, #16
 8002bc8:	22b4      	movs	r2, #180	; 0xb4
 8002bca:	2100      	movs	r1, #0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f00b fba5 	bl	800e31c <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a42      	ldr	r2, [pc, #264]	; (8002ce0 <HAL_SAI_MspInit+0x124>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d13b      	bne.n	8002c54 <HAL_SAI_MspInit+0x98>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8002bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002be0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002be6:	f107 0310 	add.w	r3, r7, #16
 8002bea:	4618      	mov	r0, r3
 8002bec:	f005 fba4 	bl	8008338 <HAL_RCCEx_PeriphCLKConfig>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_SAI_MspInit+0x3e>
    {
      Error_Handler();
 8002bf6:	f7fe fef5 	bl	80019e4 <Error_Handler>
    }

    if (SAI1_client == 0)
 8002bfa:	4b3a      	ldr	r3, [pc, #232]	; (8002ce4 <HAL_SAI_MspInit+0x128>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10e      	bne.n	8002c20 <HAL_SAI_MspInit+0x64>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002c02:	4b39      	ldr	r3, [pc, #228]	; (8002ce8 <HAL_SAI_MspInit+0x12c>)
 8002c04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c08:	4a37      	ldr	r2, [pc, #220]	; (8002ce8 <HAL_SAI_MspInit+0x12c>)
 8002c0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c12:	4b35      	ldr	r3, [pc, #212]	; (8002ce8 <HAL_SAI_MspInit+0x12c>)
 8002c14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8002c20:	4b30      	ldr	r3, [pc, #192]	; (8002ce4 <HAL_SAI_MspInit+0x128>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	3301      	adds	r3, #1
 8002c26:	4a2f      	ldr	r2, [pc, #188]	; (8002ce4 <HAL_SAI_MspInit+0x128>)
 8002c28:	6013      	str	r3, [r2, #0]

    /**SAI1_A_Block_A GPIO Configuration
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = SAI1_SD_A_Pin;
 8002c2a:	2340      	movs	r3, #64	; 0x40
 8002c2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c30:	2302      	movs	r3, #2
 8002c32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002c42:	2306      	movs	r3, #6
 8002c44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(SAI1_SD_A_GPIO_Port, &GPIO_InitStruct);
 8002c48:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4827      	ldr	r0, [pc, #156]	; (8002cec <HAL_SAI_MspInit+0x130>)
 8002c50:	f002 ff20 	bl	8005a94 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a25      	ldr	r2, [pc, #148]	; (8002cf0 <HAL_SAI_MspInit+0x134>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d13c      	bne.n	8002cd8 <HAL_SAI_MspInit+0x11c>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8002c5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c62:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c68:	f107 0310 	add.w	r3, r7, #16
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f005 fb63 	bl	8008338 <HAL_RCCEx_PeriphCLKConfig>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_SAI_MspInit+0xc0>
    {
      Error_Handler();
 8002c78:	f7fe feb4 	bl	80019e4 <Error_Handler>
    }

      if (SAI1_client == 0)
 8002c7c:	4b19      	ldr	r3, [pc, #100]	; (8002ce4 <HAL_SAI_MspInit+0x128>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10e      	bne.n	8002ca2 <HAL_SAI_MspInit+0xe6>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002c84:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <HAL_SAI_MspInit+0x12c>)
 8002c86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c8a:	4a17      	ldr	r2, [pc, #92]	; (8002ce8 <HAL_SAI_MspInit+0x12c>)
 8002c8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c90:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c94:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <HAL_SAI_MspInit+0x12c>)
 8002c96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 8002ca2:	4b10      	ldr	r3, [pc, #64]	; (8002ce4 <HAL_SAI_MspInit+0x128>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	4a0e      	ldr	r2, [pc, #56]	; (8002ce4 <HAL_SAI_MspInit+0x128>)
 8002caa:	6013      	str	r3, [r2, #0]
    PF6     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF7     ------> SAI1_MCLK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin|SAI1_SCK_B_Pin|SAI1_MCLK_B_Pin|SAI1_FS_B_Pin;
 8002cac:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002cb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002cc6:	2306      	movs	r3, #6
 8002cc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ccc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4808      	ldr	r0, [pc, #32]	; (8002cf4 <HAL_SAI_MspInit+0x138>)
 8002cd4:	f002 fede 	bl	8005a94 <HAL_GPIO_Init>

    }
}
 8002cd8:	bf00      	nop
 8002cda:	37d8      	adds	r7, #216	; 0xd8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40015804 	.word	0x40015804
 8002ce4:	24000100 	.word	0x24000100
 8002ce8:	58024400 	.word	0x58024400
 8002cec:	58021000 	.word	0x58021000
 8002cf0:	40015824 	.word	0x40015824
 8002cf4:	58021400 	.word	0x58021400

08002cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cfc:	e7fe      	b.n	8002cfc <NMI_Handler+0x4>

08002cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d02:	e7fe      	b.n	8002d02 <HardFault_Handler+0x4>

08002d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d08:	e7fe      	b.n	8002d08 <MemManage_Handler+0x4>

08002d0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d0e:	e7fe      	b.n	8002d0e <BusFault_Handler+0x4>

08002d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d14:	e7fe      	b.n	8002d14 <UsageFault_Handler+0x4>

08002d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d16:	b480      	push	{r7}
 8002d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d28:	bf00      	nop
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d32:	b480      	push	{r7}
 8002d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d44:	f000 f916 	bl	8002f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d48:	bf00      	nop
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d50:	4b32      	ldr	r3, [pc, #200]	; (8002e1c <SystemInit+0xd0>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d56:	4a31      	ldr	r2, [pc, #196]	; (8002e1c <SystemInit+0xd0>)
 8002d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d60:	4b2f      	ldr	r3, [pc, #188]	; (8002e20 <SystemInit+0xd4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	2b06      	cmp	r3, #6
 8002d6a:	d807      	bhi.n	8002d7c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d6c:	4b2c      	ldr	r3, [pc, #176]	; (8002e20 <SystemInit+0xd4>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f023 030f 	bic.w	r3, r3, #15
 8002d74:	4a2a      	ldr	r2, [pc, #168]	; (8002e20 <SystemInit+0xd4>)
 8002d76:	f043 0307 	orr.w	r3, r3, #7
 8002d7a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002d7c:	4b29      	ldr	r3, [pc, #164]	; (8002e24 <SystemInit+0xd8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a28      	ldr	r2, [pc, #160]	; (8002e24 <SystemInit+0xd8>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d88:	4b26      	ldr	r3, [pc, #152]	; (8002e24 <SystemInit+0xd8>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002d8e:	4b25      	ldr	r3, [pc, #148]	; (8002e24 <SystemInit+0xd8>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	4924      	ldr	r1, [pc, #144]	; (8002e24 <SystemInit+0xd8>)
 8002d94:	4b24      	ldr	r3, [pc, #144]	; (8002e28 <SystemInit+0xdc>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d9a:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <SystemInit+0xd4>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d007      	beq.n	8002db6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002da6:	4b1e      	ldr	r3, [pc, #120]	; (8002e20 <SystemInit+0xd4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 030f 	bic.w	r3, r3, #15
 8002dae:	4a1c      	ldr	r2, [pc, #112]	; (8002e20 <SystemInit+0xd4>)
 8002db0:	f043 0307 	orr.w	r3, r3, #7
 8002db4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002db6:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <SystemInit+0xd8>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002dbc:	4b19      	ldr	r3, [pc, #100]	; (8002e24 <SystemInit+0xd8>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002dc2:	4b18      	ldr	r3, [pc, #96]	; (8002e24 <SystemInit+0xd8>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002dc8:	4b16      	ldr	r3, [pc, #88]	; (8002e24 <SystemInit+0xd8>)
 8002dca:	4a18      	ldr	r2, [pc, #96]	; (8002e2c <SystemInit+0xe0>)
 8002dcc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002dce:	4b15      	ldr	r3, [pc, #84]	; (8002e24 <SystemInit+0xd8>)
 8002dd0:	4a17      	ldr	r2, [pc, #92]	; (8002e30 <SystemInit+0xe4>)
 8002dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002dd4:	4b13      	ldr	r3, [pc, #76]	; (8002e24 <SystemInit+0xd8>)
 8002dd6:	4a17      	ldr	r2, [pc, #92]	; (8002e34 <SystemInit+0xe8>)
 8002dd8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002dda:	4b12      	ldr	r3, [pc, #72]	; (8002e24 <SystemInit+0xd8>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002de0:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <SystemInit+0xd8>)
 8002de2:	4a14      	ldr	r2, [pc, #80]	; (8002e34 <SystemInit+0xe8>)
 8002de4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002de6:	4b0f      	ldr	r3, [pc, #60]	; (8002e24 <SystemInit+0xd8>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002dec:	4b0d      	ldr	r3, [pc, #52]	; (8002e24 <SystemInit+0xd8>)
 8002dee:	4a11      	ldr	r2, [pc, #68]	; (8002e34 <SystemInit+0xe8>)
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002df2:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <SystemInit+0xd8>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002df8:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <SystemInit+0xd8>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a09      	ldr	r2, [pc, #36]	; (8002e24 <SystemInit+0xd8>)
 8002dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e04:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <SystemInit+0xd8>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <SystemInit+0xec>)
 8002e0c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002e10:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002e12:	bf00      	nop
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	e000ed00 	.word	0xe000ed00
 8002e20:	52002000 	.word	0x52002000
 8002e24:	58024400 	.word	0x58024400
 8002e28:	eaf6ed7f 	.word	0xeaf6ed7f
 8002e2c:	02020200 	.word	0x02020200
 8002e30:	01ff0000 	.word	0x01ff0000
 8002e34:	01010280 	.word	0x01010280
 8002e38:	52004000 	.word	0x52004000

08002e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002e3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e40:	f7ff ff84 	bl	8002d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e44:	480c      	ldr	r0, [pc, #48]	; (8002e78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e46:	490d      	ldr	r1, [pc, #52]	; (8002e7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e48:	4a0d      	ldr	r2, [pc, #52]	; (8002e80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e4c:	e002      	b.n	8002e54 <LoopCopyDataInit>

08002e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e52:	3304      	adds	r3, #4

08002e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e58:	d3f9      	bcc.n	8002e4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e5a:	4a0a      	ldr	r2, [pc, #40]	; (8002e84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e5c:	4c0a      	ldr	r4, [pc, #40]	; (8002e88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e60:	e001      	b.n	8002e66 <LoopFillZerobss>

08002e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e64:	3204      	adds	r2, #4

08002e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e68:	d3fb      	bcc.n	8002e62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e6a:	f00b fa25 	bl	800e2b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e6e:	f7fd fbc9 	bl	8000604 <main>
  bx  lr
 8002e72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e74:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002e78:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002e7c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8002e80:	0800e3d8 	.word	0x0800e3d8
  ldr r2, =_sbss
 8002e84:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8002e88:	240009cc 	.word	0x240009cc

08002e8c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e8c:	e7fe      	b.n	8002e8c <ADC3_IRQHandler>
	...

08002e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e96:	2003      	movs	r0, #3
 8002e98:	f001 fcfa 	bl	8004890 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e9c:	f005 f876 	bl	8007f8c <HAL_RCC_GetSysClockFreq>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <HAL_Init+0x68>)
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	0a1b      	lsrs	r3, r3, #8
 8002ea8:	f003 030f 	and.w	r3, r3, #15
 8002eac:	4913      	ldr	r1, [pc, #76]	; (8002efc <HAL_Init+0x6c>)
 8002eae:	5ccb      	ldrb	r3, [r1, r3]
 8002eb0:	f003 031f 	and.w	r3, r3, #31
 8002eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002eba:	4b0f      	ldr	r3, [pc, #60]	; (8002ef8 <HAL_Init+0x68>)
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	4a0e      	ldr	r2, [pc, #56]	; (8002efc <HAL_Init+0x6c>)
 8002ec4:	5cd3      	ldrb	r3, [r2, r3]
 8002ec6:	f003 031f 	and.w	r3, r3, #31
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed0:	4a0b      	ldr	r2, [pc, #44]	; (8002f00 <HAL_Init+0x70>)
 8002ed2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ed4:	4a0b      	ldr	r2, [pc, #44]	; (8002f04 <HAL_Init+0x74>)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002eda:	2000      	movs	r0, #0
 8002edc:	f000 f814 	bl	8002f08 <HAL_InitTick>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e002      	b.n	8002ef0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002eea:	f7fe fd81 	bl	80019f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	58024400 	.word	0x58024400
 8002efc:	0800e390 	.word	0x0800e390
 8002f00:	24000004 	.word	0x24000004
 8002f04:	24000000 	.word	0x24000000

08002f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002f10:	4b15      	ldr	r3, [pc, #84]	; (8002f68 <HAL_InitTick+0x60>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e021      	b.n	8002f60 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002f1c:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <HAL_InitTick+0x64>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <HAL_InitTick+0x60>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	4619      	mov	r1, r3
 8002f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f32:	4618      	mov	r0, r3
 8002f34:	f001 fcd1 	bl	80048da <HAL_SYSTICK_Config>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e00e      	b.n	8002f60 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b0f      	cmp	r3, #15
 8002f46:	d80a      	bhi.n	8002f5e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f48:	2200      	movs	r2, #0
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f50:	f001 fca9 	bl	80048a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f54:	4a06      	ldr	r2, [pc, #24]	; (8002f70 <HAL_InitTick+0x68>)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e000      	b.n	8002f60 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	2400000c 	.word	0x2400000c
 8002f6c:	24000000 	.word	0x24000000
 8002f70:	24000008 	.word	0x24000008

08002f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_IncTick+0x20>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <HAL_IncTick+0x24>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4413      	add	r3, r2
 8002f84:	4a04      	ldr	r2, [pc, #16]	; (8002f98 <HAL_IncTick+0x24>)
 8002f86:	6013      	str	r3, [r2, #0]
}
 8002f88:	bf00      	nop
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	2400000c 	.word	0x2400000c
 8002f98:	240009c8 	.word	0x240009c8

08002f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <HAL_GetTick+0x14>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	240009c8 	.word	0x240009c8

08002fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fbc:	f7ff ffee 	bl	8002f9c <HAL_GetTick>
 8002fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fcc:	d005      	beq.n	8002fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fce:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <HAL_Delay+0x44>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fda:	bf00      	nop
 8002fdc:	f7ff ffde 	bl	8002f9c <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d8f7      	bhi.n	8002fdc <HAL_Delay+0x28>
  {
  }
}
 8002fec:	bf00      	nop
 8002fee:	bf00      	nop
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	2400000c 	.word	0x2400000c

08002ffc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800300c:	4904      	ldr	r1, [pc, #16]	; (8003020 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4313      	orrs	r3, r2
 8003012:	604b      	str	r3, [r1, #4]
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	58000400 	.word	0x58000400

08003024 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800302e:	4b07      	ldr	r3, [pc, #28]	; (800304c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	43db      	mvns	r3, r3
 8003036:	401a      	ands	r2, r3
 8003038:	4904      	ldr	r1, [pc, #16]	; (800304c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	4313      	orrs	r3, r2
 800303e:	604b      	str	r3, [r1, #4]
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	58000400 	.word	0x58000400

08003050 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	609a      	str	r2, [r3, #8]
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	609a      	str	r2, [r3, #8]
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
 80030c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	3360      	adds	r3, #96	; 0x60
 80030ca:	461a      	mov	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4a10      	ldr	r2, [pc, #64]	; (8003118 <LL_ADC_SetOffset+0x60>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d10b      	bne.n	80030f4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80030f2:	e00b      	b.n	800310c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	430b      	orrs	r3, r1
 8003106:	431a      	orrs	r2, r3
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	601a      	str	r2, [r3, #0]
}
 800310c:	bf00      	nop
 800310e:	371c      	adds	r7, #28
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	58026000 	.word	0x58026000

0800311c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3360      	adds	r3, #96	; 0x60
 800312a:	461a      	mov	r2, r3
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800313c:	4618      	mov	r0, r3
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f003 031f 	and.w	r3, r3, #31
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	fa01 f303 	lsl.w	r3, r1, r3
 8003168:	431a      	orrs	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	611a      	str	r2, [r3, #16]
}
 800316e:	bf00      	nop
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
	...

0800317c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4a0c      	ldr	r2, [pc, #48]	; (80031bc <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d00e      	beq.n	80031ae <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	3360      	adds	r3, #96	; 0x60
 8003194:	461a      	mov	r2, r3
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	431a      	orrs	r2, r3
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	601a      	str	r2, [r3, #0]
  }
}
 80031ae:	bf00      	nop
 80031b0:	371c      	adds	r7, #28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	58026000 	.word	0x58026000

080031c0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4a0c      	ldr	r2, [pc, #48]	; (8003200 <LL_ADC_SetOffsetSaturation+0x40>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d10e      	bne.n	80031f2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	3360      	adds	r3, #96	; 0x60
 80031d8:	461a      	mov	r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	431a      	orrs	r2, r3
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80031f2:	bf00      	nop
 80031f4:	371c      	adds	r7, #28
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	58026000 	.word	0x58026000

08003204 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4a0c      	ldr	r2, [pc, #48]	; (8003244 <LL_ADC_SetOffsetSign+0x40>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d10e      	bne.n	8003236 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	3360      	adds	r3, #96	; 0x60
 800321c:	461a      	mov	r2, r3
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	431a      	orrs	r2, r3
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003236:	bf00      	nop
 8003238:	371c      	adds	r7, #28
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	58026000 	.word	0x58026000

08003248 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	3360      	adds	r3, #96	; 0x60
 8003258:	461a      	mov	r2, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4a0c      	ldr	r2, [pc, #48]	; (8003298 <LL_ADC_SetOffsetState+0x50>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d108      	bne.n	800327c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	431a      	orrs	r2, r3
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800327a:	e007      	b.n	800328c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	431a      	orrs	r2, r3
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	601a      	str	r2, [r3, #0]
}
 800328c:	bf00      	nop
 800328e:	371c      	adds	r7, #28
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	58026000 	.word	0x58026000

0800329c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800329c:	b480      	push	{r7}
 800329e:	b087      	sub	sp, #28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	3330      	adds	r3, #48	; 0x30
 80032ac:	461a      	mov	r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	f003 030c 	and.w	r3, r3, #12
 80032b8:	4413      	add	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f003 031f 	and.w	r3, r3, #31
 80032c6:	211f      	movs	r1, #31
 80032c8:	fa01 f303 	lsl.w	r3, r1, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	401a      	ands	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	0e9b      	lsrs	r3, r3, #26
 80032d4:	f003 011f 	and.w	r1, r3, #31
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f003 031f 	and.w	r3, r3, #31
 80032de:	fa01 f303 	lsl.w	r3, r1, r3
 80032e2:	431a      	orrs	r2, r3
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80032e8:	bf00      	nop
 80032ea:	371c      	adds	r7, #28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	3314      	adds	r3, #20
 8003304:	461a      	mov	r2, r3
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	0e5b      	lsrs	r3, r3, #25
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	4413      	add	r3, r2
 8003312:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	0d1b      	lsrs	r3, r3, #20
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	2107      	movs	r1, #7
 8003322:	fa01 f303 	lsl.w	r3, r1, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	401a      	ands	r2, r3
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	0d1b      	lsrs	r3, r3, #20
 800332e:	f003 031f 	and.w	r3, r3, #31
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	fa01 f303 	lsl.w	r3, r1, r3
 8003338:	431a      	orrs	r2, r3
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800333e:	bf00      	nop
 8003340:	371c      	adds	r7, #28
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4a1a      	ldr	r2, [pc, #104]	; (80033c4 <LL_ADC_SetChannelSingleDiff+0x78>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d115      	bne.n	800338c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800336c:	43db      	mvns	r3, r3
 800336e:	401a      	ands	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f003 0318 	and.w	r3, r3, #24
 8003376:	4914      	ldr	r1, [pc, #80]	; (80033c8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003378:	40d9      	lsrs	r1, r3
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	400b      	ands	r3, r1
 800337e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003382:	431a      	orrs	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800338a:	e014      	b.n	80033b6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003398:	43db      	mvns	r3, r3
 800339a:	401a      	ands	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f003 0318 	and.w	r3, r3, #24
 80033a2:	4909      	ldr	r1, [pc, #36]	; (80033c8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80033a4:	40d9      	lsrs	r1, r3
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	400b      	ands	r3, r1
 80033aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033ae:	431a      	orrs	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80033b6:	bf00      	nop
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	58026000 	.word	0x58026000
 80033c8:	000fffff 	.word	0x000fffff

080033cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	4b04      	ldr	r3, [pc, #16]	; (80033ec <LL_ADC_DisableDeepPowerDown+0x20>)
 80033da:	4013      	ands	r3, r2
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6093      	str	r3, [r2, #8]
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	5fffffc0 	.word	0x5fffffc0

080033f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003404:	d101      	bne.n	800340a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	4b05      	ldr	r3, [pc, #20]	; (800343c <LL_ADC_EnableInternalRegulator+0x24>)
 8003426:	4013      	ands	r3, r2
 8003428:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	6fffffc0 	.word	0x6fffffc0

08003440 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003450:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003454:	d101      	bne.n	800345a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <LL_ADC_IsEnabled+0x18>
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <LL_ADC_IsEnabled+0x1a>
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d101      	bne.n	80034a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d101      	bne.n	80034cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80034c8:	2301      	movs	r3, #1
 80034ca:	e000      	b.n	80034ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034dc:	b590      	push	{r4, r7, lr}
 80034de:	b089      	sub	sp, #36	; 0x24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e1ee      	b.n	80038d4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003500:	2b00      	cmp	r3, #0
 8003502:	d109      	bne.n	8003518 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7fe fa8d 	bl	8001a24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff ff67 	bl	80033f0 <LL_ADC_IsDeepPowerDownEnabled>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d004      	beq.n	8003532 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff ff4d 	bl	80033cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff ff82 	bl	8003440 <LL_ADC_IsInternalRegulatorEnabled>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d114      	bne.n	800356c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff ff66 	bl	8003418 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800354c:	4b8e      	ldr	r3, [pc, #568]	; (8003788 <HAL_ADC_Init+0x2ac>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	099b      	lsrs	r3, r3, #6
 8003552:	4a8e      	ldr	r2, [pc, #568]	; (800378c <HAL_ADC_Init+0x2b0>)
 8003554:	fba2 2303 	umull	r2, r3, r2, r3
 8003558:	099b      	lsrs	r3, r3, #6
 800355a:	3301      	adds	r3, #1
 800355c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800355e:	e002      	b.n	8003566 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	3b01      	subs	r3, #1
 8003564:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1f9      	bne.n	8003560 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff ff65 	bl	8003440 <LL_ADC_IsInternalRegulatorEnabled>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10d      	bne.n	8003598 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003580:	f043 0210 	orr.w	r2, r3, #16
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800358c:	f043 0201 	orr.w	r2, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff ff76 	bl	800348e <LL_ADC_REG_IsConversionOngoing>
 80035a2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a8:	f003 0310 	and.w	r3, r3, #16
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f040 8188 	bne.w	80038c2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f040 8184 	bne.w	80038c2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035be:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80035c2:	f043 0202 	orr.w	r2, r3, #2
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff ff4a 	bl	8003468 <LL_ADC_IsEnabled>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d136      	bne.n	8003648 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a6c      	ldr	r2, [pc, #432]	; (8003790 <HAL_ADC_Init+0x2b4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d004      	beq.n	80035ee <HAL_ADC_Init+0x112>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a6a      	ldr	r2, [pc, #424]	; (8003794 <HAL_ADC_Init+0x2b8>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d10e      	bne.n	800360c <HAL_ADC_Init+0x130>
 80035ee:	4868      	ldr	r0, [pc, #416]	; (8003790 <HAL_ADC_Init+0x2b4>)
 80035f0:	f7ff ff3a 	bl	8003468 <LL_ADC_IsEnabled>
 80035f4:	4604      	mov	r4, r0
 80035f6:	4867      	ldr	r0, [pc, #412]	; (8003794 <HAL_ADC_Init+0x2b8>)
 80035f8:	f7ff ff36 	bl	8003468 <LL_ADC_IsEnabled>
 80035fc:	4603      	mov	r3, r0
 80035fe:	4323      	orrs	r3, r4
 8003600:	2b00      	cmp	r3, #0
 8003602:	bf0c      	ite	eq
 8003604:	2301      	moveq	r3, #1
 8003606:	2300      	movne	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	e008      	b.n	800361e <HAL_ADC_Init+0x142>
 800360c:	4862      	ldr	r0, [pc, #392]	; (8003798 <HAL_ADC_Init+0x2bc>)
 800360e:	f7ff ff2b 	bl	8003468 <LL_ADC_IsEnabled>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	bf0c      	ite	eq
 8003618:	2301      	moveq	r3, #1
 800361a:	2300      	movne	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d012      	beq.n	8003648 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a5a      	ldr	r2, [pc, #360]	; (8003790 <HAL_ADC_Init+0x2b4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d004      	beq.n	8003636 <HAL_ADC_Init+0x15a>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a58      	ldr	r2, [pc, #352]	; (8003794 <HAL_ADC_Init+0x2b8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d101      	bne.n	800363a <HAL_ADC_Init+0x15e>
 8003636:	4a59      	ldr	r2, [pc, #356]	; (800379c <HAL_ADC_Init+0x2c0>)
 8003638:	e000      	b.n	800363c <HAL_ADC_Init+0x160>
 800363a:	4a59      	ldr	r2, [pc, #356]	; (80037a0 <HAL_ADC_Init+0x2c4>)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	4619      	mov	r1, r3
 8003642:	4610      	mov	r0, r2
 8003644:	f7ff fd04 	bl	8003050 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a52      	ldr	r2, [pc, #328]	; (8003798 <HAL_ADC_Init+0x2bc>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d129      	bne.n	80036a6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	7e5b      	ldrb	r3, [r3, #25]
 8003656:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800365c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003662:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	2b08      	cmp	r3, #8
 800366a:	d013      	beq.n	8003694 <HAL_ADC_Init+0x1b8>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2b0c      	cmp	r3, #12
 8003672:	d00d      	beq.n	8003690 <HAL_ADC_Init+0x1b4>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b1c      	cmp	r3, #28
 800367a:	d007      	beq.n	800368c <HAL_ADC_Init+0x1b0>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b18      	cmp	r3, #24
 8003682:	d101      	bne.n	8003688 <HAL_ADC_Init+0x1ac>
 8003684:	2318      	movs	r3, #24
 8003686:	e006      	b.n	8003696 <HAL_ADC_Init+0x1ba>
 8003688:	2300      	movs	r3, #0
 800368a:	e004      	b.n	8003696 <HAL_ADC_Init+0x1ba>
 800368c:	2310      	movs	r3, #16
 800368e:	e002      	b.n	8003696 <HAL_ADC_Init+0x1ba>
 8003690:	2308      	movs	r3, #8
 8003692:	e000      	b.n	8003696 <HAL_ADC_Init+0x1ba>
 8003694:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003696:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800369e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
 80036a4:	e00e      	b.n	80036c4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	7e5b      	ldrb	r3, [r3, #25]
 80036aa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036b0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80036b6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036be:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036c0:	4313      	orrs	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d106      	bne.n	80036dc <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	3b01      	subs	r3, #1
 80036d4:	045b      	lsls	r3, r3, #17
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4313      	orrs	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d009      	beq.n	80036f8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a26      	ldr	r2, [pc, #152]	; (8003798 <HAL_ADC_Init+0x2bc>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d115      	bne.n	800372e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	4b26      	ldr	r3, [pc, #152]	; (80037a4 <HAL_ADC_Init+0x2c8>)
 800370a:	4013      	ands	r3, r2
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	69b9      	ldr	r1, [r7, #24]
 8003712:	430b      	orrs	r3, r1
 8003714:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	611a      	str	r2, [r3, #16]
 800372c:	e009      	b.n	8003742 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	4b1c      	ldr	r3, [pc, #112]	; (80037a8 <HAL_ADC_Init+0x2cc>)
 8003736:	4013      	ands	r3, r2
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6812      	ldr	r2, [r2, #0]
 800373c:	69b9      	ldr	r1, [r7, #24]
 800373e:	430b      	orrs	r3, r1
 8003740:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff fea1 	bl	800348e <LL_ADC_REG_IsConversionOngoing>
 800374c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff feae 	bl	80034b4 <LL_ADC_INJ_IsConversionOngoing>
 8003758:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	2b00      	cmp	r3, #0
 800375e:	f040 808e 	bne.w	800387e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	f040 808a 	bne.w	800387e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a0a      	ldr	r2, [pc, #40]	; (8003798 <HAL_ADC_Init+0x2bc>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d11b      	bne.n	80037ac <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	7e1b      	ldrb	r3, [r3, #24]
 8003778:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003780:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003782:	4313      	orrs	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
 8003786:	e018      	b.n	80037ba <HAL_ADC_Init+0x2de>
 8003788:	24000000 	.word	0x24000000
 800378c:	053e2d63 	.word	0x053e2d63
 8003790:	40022000 	.word	0x40022000
 8003794:	40022100 	.word	0x40022100
 8003798:	58026000 	.word	0x58026000
 800379c:	40022300 	.word	0x40022300
 80037a0:	58026300 	.word	0x58026300
 80037a4:	fff04007 	.word	0xfff04007
 80037a8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	7e1b      	ldrb	r3, [r3, #24]
 80037b0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68da      	ldr	r2, [r3, #12]
 80037c0:	4b46      	ldr	r3, [pc, #280]	; (80038dc <HAL_ADC_Init+0x400>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	69b9      	ldr	r1, [r7, #24]
 80037ca:	430b      	orrs	r3, r1
 80037cc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d137      	bne.n	8003848 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037dc:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a3f      	ldr	r2, [pc, #252]	; (80038e0 <HAL_ADC_Init+0x404>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d116      	bne.n	8003816 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691a      	ldr	r2, [r3, #16]
 80037ee:	4b3d      	ldr	r3, [pc, #244]	; (80038e4 <HAL_ADC_Init+0x408>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80037fa:	4311      	orrs	r1, r2
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003800:	4311      	orrs	r1, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003806:	430a      	orrs	r2, r1
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0201 	orr.w	r2, r2, #1
 8003812:	611a      	str	r2, [r3, #16]
 8003814:	e020      	b.n	8003858 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	4b32      	ldr	r3, [pc, #200]	; (80038e8 <HAL_ADC_Init+0x40c>)
 800381e:	4013      	ands	r3, r2
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003824:	3a01      	subs	r2, #1
 8003826:	0411      	lsls	r1, r2, #16
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800382c:	4311      	orrs	r1, r2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003832:	4311      	orrs	r1, r2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003838:	430a      	orrs	r2, r1
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f042 0201 	orr.w	r2, r2, #1
 8003844:	611a      	str	r2, [r3, #16]
 8003846:	e007      	b.n	8003858 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691a      	ldr	r2, [r3, #16]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0201 	bic.w	r2, r2, #1
 8003856:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a1b      	ldr	r2, [pc, #108]	; (80038e0 <HAL_ADC_Init+0x404>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d002      	beq.n	800387e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 fd63 	bl	8004344 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d10c      	bne.n	80038a0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388c:	f023 010f 	bic.w	r1, r3, #15
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	1e5a      	subs	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	631a      	str	r2, [r3, #48]	; 0x30
 800389e:	e007      	b.n	80038b0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 020f 	bic.w	r2, r2, #15
 80038ae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b4:	f023 0303 	bic.w	r3, r3, #3
 80038b8:	f043 0201 	orr.w	r2, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	661a      	str	r2, [r3, #96]	; 0x60
 80038c0:	e007      	b.n	80038d2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c6:	f043 0210 	orr.w	r2, r3, #16
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80038d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3724      	adds	r7, #36	; 0x24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd90      	pop	{r4, r7, pc}
 80038dc:	ffffbffc 	.word	0xffffbffc
 80038e0:	58026000 	.word	0x58026000
 80038e4:	fc00f81f 	.word	0xfc00f81f
 80038e8:	fc00f81e 	.word	0xfc00f81e

080038ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80038ec:	b590      	push	{r4, r7, lr}
 80038ee:	b0b9      	sub	sp, #228	; 0xe4
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80038fc:	2300      	movs	r3, #0
 80038fe:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003906:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4ab3      	ldr	r2, [pc, #716]	; (8003bdc <HAL_ADC_ConfigChannel+0x2f0>)
 800390e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003916:	2b01      	cmp	r3, #1
 8003918:	d102      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x34>
 800391a:	2302      	movs	r3, #2
 800391c:	f000 bcfa 	b.w	8004314 <HAL_ADC_ConfigChannel+0xa28>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff fdae 	bl	800348e <LL_ADC_REG_IsConversionOngoing>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	f040 84de 	bne.w	80042f6 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4aa8      	ldr	r2, [pc, #672]	; (8003be0 <HAL_ADC_ConfigChannel+0x2f4>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d033      	beq.n	80039ac <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800394c:	2b00      	cmp	r3, #0
 800394e:	d108      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x76>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	0e9b      	lsrs	r3, r3, #26
 8003956:	f003 031f 	and.w	r3, r3, #31
 800395a:	2201      	movs	r2, #1
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	e01d      	b.n	800399e <HAL_ADC_ConfigChannel+0xb2>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800396e:	fa93 f3a3 	rbit	r3, r3
 8003972:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003976:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800397a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800397e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8003986:	2320      	movs	r3, #32
 8003988:	e004      	b.n	8003994 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800398a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800398e:	fab3 f383 	clz	r3, r3
 8003992:	b2db      	uxtb	r3, r3
 8003994:	f003 031f 	and.w	r3, r3, #31
 8003998:	2201      	movs	r2, #1
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6812      	ldr	r2, [r2, #0]
 80039a2:	69d1      	ldr	r1, [r2, #28]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	430b      	orrs	r3, r1
 80039aa:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6818      	ldr	r0, [r3, #0]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	6859      	ldr	r1, [r3, #4]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	461a      	mov	r2, r3
 80039ba:	f7ff fc6f 	bl	800329c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff fd63 	bl	800348e <LL_ADC_REG_IsConversionOngoing>
 80039c8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff fd6f 	bl	80034b4 <LL_ADC_INJ_IsConversionOngoing>
 80039d6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f040 8270 	bne.w	8003ec4 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f040 826b 	bne.w	8003ec4 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6818      	ldr	r0, [r3, #0]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	6819      	ldr	r1, [r3, #0]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	461a      	mov	r2, r3
 80039fc:	f7ff fc7a 	bl	80032f4 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a76      	ldr	r2, [pc, #472]	; (8003be0 <HAL_ADC_ConfigChannel+0x2f4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d10d      	bne.n	8003a26 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	695a      	ldr	r2, [r3, #20]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	08db      	lsrs	r3, r3, #3
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a24:	e032      	b.n	8003a8c <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a26:	4b6f      	ldr	r3, [pc, #444]	; (8003be4 <HAL_ADC_ConfigChannel+0x2f8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003a2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a32:	d10b      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x160>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	695a      	ldr	r2, [r3, #20]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	089b      	lsrs	r3, r3, #2
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	e01d      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x19c>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f003 0310 	and.w	r3, r3, #16
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10b      	bne.n	8003a72 <HAL_ADC_ConfigChannel+0x186>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	695a      	ldr	r2, [r3, #20]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	089b      	lsrs	r3, r3, #2
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	e00a      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x19c>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	089b      	lsrs	r3, r3, #2
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d048      	beq.n	8003b26 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6818      	ldr	r0, [r3, #0]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	6919      	ldr	r1, [r3, #16]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003aa4:	f7ff fb08 	bl	80030b8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a4c      	ldr	r2, [pc, #304]	; (8003be0 <HAL_ADC_ConfigChannel+0x2f4>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d119      	bne.n	8003ae6 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	6919      	ldr	r1, [r3, #16]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f7ff fba0 	bl	8003204 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6818      	ldr	r0, [r3, #0]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	6919      	ldr	r1, [r3, #16]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d102      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x1f0>
 8003ad6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ada:	e000      	b.n	8003ade <HAL_ADC_ConfigChannel+0x1f2>
 8003adc:	2300      	movs	r3, #0
 8003ade:	461a      	mov	r2, r3
 8003ae0:	f7ff fb6e 	bl	80031c0 <LL_ADC_SetOffsetSaturation>
 8003ae4:	e1ee      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	6919      	ldr	r1, [r3, #16]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d102      	bne.n	8003afe <HAL_ADC_ConfigChannel+0x212>
 8003af8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003afc:	e000      	b.n	8003b00 <HAL_ADC_ConfigChannel+0x214>
 8003afe:	2300      	movs	r3, #0
 8003b00:	461a      	mov	r2, r3
 8003b02:	f7ff fb3b 	bl	800317c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	6919      	ldr	r1, [r3, #16]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	7e1b      	ldrb	r3, [r3, #24]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d102      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x230>
 8003b16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b1a:	e000      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x232>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f7ff fb12 	bl	8003148 <LL_ADC_SetDataRightShift>
 8003b24:	e1ce      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a2d      	ldr	r2, [pc, #180]	; (8003be0 <HAL_ADC_ConfigChannel+0x2f4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	f040 8181 	bne.w	8003e34 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2100      	movs	r1, #0
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff faef 	bl	800311c <LL_ADC_GetOffsetChannel>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10a      	bne.n	8003b5e <HAL_ADC_ConfigChannel+0x272>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff fae4 	bl	800311c <LL_ADC_GetOffsetChannel>
 8003b54:	4603      	mov	r3, r0
 8003b56:	0e9b      	lsrs	r3, r3, #26
 8003b58:	f003 021f 	and.w	r2, r3, #31
 8003b5c:	e01e      	b.n	8003b9c <HAL_ADC_ConfigChannel+0x2b0>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2100      	movs	r1, #0
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff fad9 	bl	800311c <LL_ADC_GetOffsetChannel>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b74:	fa93 f3a3 	rbit	r3, r3
 8003b78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003b7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003b84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8003b8c:	2320      	movs	r3, #32
 8003b8e:	e004      	b.n	8003b9a <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8003b90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b94:	fab3 f383 	clz	r3, r3
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d105      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x2c8>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	0e9b      	lsrs	r3, r3, #26
 8003bae:	f003 031f 	and.w	r3, r3, #31
 8003bb2:	e01e      	b.n	8003bf2 <HAL_ADC_ConfigChannel+0x306>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bc0:	fa93 f3a3 	rbit	r3, r3
 8003bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003bc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003bd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d107      	bne.n	8003be8 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003bd8:	2320      	movs	r3, #32
 8003bda:	e00a      	b.n	8003bf2 <HAL_ADC_ConfigChannel+0x306>
 8003bdc:	47ff0000 	.word	0x47ff0000
 8003be0:	58026000 	.word	0x58026000
 8003be4:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8003be8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003bec:	fab3 f383 	clz	r3, r3
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d106      	bne.n	8003c04 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fb22 	bl	8003248 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2101      	movs	r1, #1
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff fa86 	bl	800311c <LL_ADC_GetOffsetChannel>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10a      	bne.n	8003c30 <HAL_ADC_ConfigChannel+0x344>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2101      	movs	r1, #1
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff fa7b 	bl	800311c <LL_ADC_GetOffsetChannel>
 8003c26:	4603      	mov	r3, r0
 8003c28:	0e9b      	lsrs	r3, r3, #26
 8003c2a:	f003 021f 	and.w	r2, r3, #31
 8003c2e:	e01e      	b.n	8003c6e <HAL_ADC_ConfigChannel+0x382>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2101      	movs	r1, #1
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff fa70 	bl	800311c <LL_ADC_GetOffsetChannel>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c46:	fa93 f3a3 	rbit	r3, r3
 8003c4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003c4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003c56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8003c5e:	2320      	movs	r3, #32
 8003c60:	e004      	b.n	8003c6c <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8003c62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c66:	fab3 f383 	clz	r3, r3
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d105      	bne.n	8003c86 <HAL_ADC_ConfigChannel+0x39a>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	0e9b      	lsrs	r3, r3, #26
 8003c80:	f003 031f 	and.w	r3, r3, #31
 8003c84:	e018      	b.n	8003cb8 <HAL_ADC_ConfigChannel+0x3cc>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003c92:	fa93 f3a3 	rbit	r3, r3
 8003c96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003c9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003ca2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8003caa:	2320      	movs	r3, #32
 8003cac:	e004      	b.n	8003cb8 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8003cae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cb2:	fab3 f383 	clz	r3, r3
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d106      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff fabf 	bl	8003248 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2102      	movs	r1, #2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff fa23 	bl	800311c <LL_ADC_GetOffsetChannel>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10a      	bne.n	8003cf6 <HAL_ADC_ConfigChannel+0x40a>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2102      	movs	r1, #2
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff fa18 	bl	800311c <LL_ADC_GetOffsetChannel>
 8003cec:	4603      	mov	r3, r0
 8003cee:	0e9b      	lsrs	r3, r3, #26
 8003cf0:	f003 021f 	and.w	r2, r3, #31
 8003cf4:	e01e      	b.n	8003d34 <HAL_ADC_ConfigChannel+0x448>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2102      	movs	r1, #2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff fa0d 	bl	800311c <LL_ADC_GetOffsetChannel>
 8003d02:	4603      	mov	r3, r0
 8003d04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d0c:	fa93 f3a3 	rbit	r3, r3
 8003d10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003d14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003d1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8003d24:	2320      	movs	r3, #32
 8003d26:	e004      	b.n	8003d32 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8003d28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d2c:	fab3 f383 	clz	r3, r3
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	461a      	mov	r2, r3
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d105      	bne.n	8003d4c <HAL_ADC_ConfigChannel+0x460>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	0e9b      	lsrs	r3, r3, #26
 8003d46:	f003 031f 	and.w	r3, r3, #31
 8003d4a:	e014      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x48a>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d54:	fa93 f3a3 	rbit	r3, r3
 8003d58:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003d5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003d60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003d68:	2320      	movs	r3, #32
 8003d6a:	e004      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8003d6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d70:	fab3 f383 	clz	r3, r3
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d106      	bne.n	8003d88 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	2102      	movs	r1, #2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff fa60 	bl	8003248 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2103      	movs	r1, #3
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff f9c4 	bl	800311c <LL_ADC_GetOffsetChannel>
 8003d94:	4603      	mov	r3, r0
 8003d96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10a      	bne.n	8003db4 <HAL_ADC_ConfigChannel+0x4c8>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2103      	movs	r1, #3
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff f9b9 	bl	800311c <LL_ADC_GetOffsetChannel>
 8003daa:	4603      	mov	r3, r0
 8003dac:	0e9b      	lsrs	r3, r3, #26
 8003dae:	f003 021f 	and.w	r2, r3, #31
 8003db2:	e017      	b.n	8003de4 <HAL_ADC_ConfigChannel+0x4f8>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2103      	movs	r1, #3
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff f9ae 	bl	800311c <LL_ADC_GetOffsetChannel>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dc6:	fa93 f3a3 	rbit	r3, r3
 8003dca:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dce:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003dd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003dd6:	2320      	movs	r3, #32
 8003dd8:	e003      	b.n	8003de2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ddc:	fab3 f383 	clz	r3, r3
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	461a      	mov	r2, r3
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d105      	bne.n	8003dfc <HAL_ADC_ConfigChannel+0x510>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	0e9b      	lsrs	r3, r3, #26
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	e011      	b.n	8003e20 <HAL_ADC_ConfigChannel+0x534>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e04:	fa93 f3a3 	rbit	r3, r3
 8003e08:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003e0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e0c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003e0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8003e14:	2320      	movs	r3, #32
 8003e16:	e003      	b.n	8003e20 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8003e18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e1a:	fab3 f383 	clz	r3, r3
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d14f      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	2103      	movs	r1, #3
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff fa0b 	bl	8003248 <LL_ADC_SetOffsetState>
 8003e32:	e047      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	069b      	lsls	r3, r3, #26
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d107      	bne.n	8003e58 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e56:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	069b      	lsls	r3, r3, #26
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d107      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e7a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	069b      	lsls	r3, r3, #26
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d107      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e9e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ea6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	069b      	lsls	r3, r3, #26
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d107      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ec2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff facd 	bl	8003468 <LL_ADC_IsEnabled>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f040 8219 	bne.w	8004308 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6818      	ldr	r0, [r3, #0]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	6819      	ldr	r1, [r3, #0]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	f7ff fa32 	bl	800334c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	4aa1      	ldr	r2, [pc, #644]	; (8004174 <HAL_ADC_ConfigChannel+0x888>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	f040 812e 	bne.w	8004150 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10b      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x630>
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	0e9b      	lsrs	r3, r3, #26
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	f003 031f 	and.w	r3, r3, #31
 8003f10:	2b09      	cmp	r3, #9
 8003f12:	bf94      	ite	ls
 8003f14:	2301      	movls	r3, #1
 8003f16:	2300      	movhi	r3, #0
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	e019      	b.n	8003f50 <HAL_ADC_ConfigChannel+0x664>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f24:	fa93 f3a3 	rbit	r3, r3
 8003f28:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8003f34:	2320      	movs	r3, #32
 8003f36:	e003      	b.n	8003f40 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8003f38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f3a:	fab3 f383 	clz	r3, r3
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	3301      	adds	r3, #1
 8003f42:	f003 031f 	and.w	r3, r3, #31
 8003f46:	2b09      	cmp	r3, #9
 8003f48:	bf94      	ite	ls
 8003f4a:	2301      	movls	r3, #1
 8003f4c:	2300      	movhi	r3, #0
 8003f4e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d079      	beq.n	8004048 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d107      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x684>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	0e9b      	lsrs	r3, r3, #26
 8003f66:	3301      	adds	r3, #1
 8003f68:	069b      	lsls	r3, r3, #26
 8003f6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f6e:	e015      	b.n	8003f9c <HAL_ADC_ConfigChannel+0x6b0>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f78:	fa93 f3a3 	rbit	r3, r3
 8003f7c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f80:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8003f88:	2320      	movs	r3, #32
 8003f8a:	e003      	b.n	8003f94 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8003f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f8e:	fab3 f383 	clz	r3, r3
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	3301      	adds	r3, #1
 8003f96:	069b      	lsls	r3, r3, #26
 8003f98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d109      	bne.n	8003fbc <HAL_ADC_ConfigChannel+0x6d0>
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	0e9b      	lsrs	r3, r3, #26
 8003fae:	3301      	adds	r3, #1
 8003fb0:	f003 031f 	and.w	r3, r3, #31
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fba:	e017      	b.n	8003fec <HAL_ADC_ConfigChannel+0x700>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fc4:	fa93 f3a3 	rbit	r3, r3
 8003fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fcc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8003fd4:	2320      	movs	r3, #32
 8003fd6:	e003      	b.n	8003fe0 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8003fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fda:	fab3 f383 	clz	r3, r3
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	f003 031f 	and.w	r3, r3, #31
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fec:	ea42 0103 	orr.w	r1, r2, r3
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10a      	bne.n	8004012 <HAL_ADC_ConfigChannel+0x726>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	0e9b      	lsrs	r3, r3, #26
 8004002:	3301      	adds	r3, #1
 8004004:	f003 021f 	and.w	r2, r3, #31
 8004008:	4613      	mov	r3, r2
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	4413      	add	r3, r2
 800400e:	051b      	lsls	r3, r3, #20
 8004010:	e018      	b.n	8004044 <HAL_ADC_ConfigChannel+0x758>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401a:	fa93 f3a3 	rbit	r3, r3
 800401e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004022:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800402a:	2320      	movs	r3, #32
 800402c:	e003      	b.n	8004036 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800402e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004030:	fab3 f383 	clz	r3, r3
 8004034:	b2db      	uxtb	r3, r3
 8004036:	3301      	adds	r3, #1
 8004038:	f003 021f 	and.w	r2, r3, #31
 800403c:	4613      	mov	r3, r2
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	4413      	add	r3, r2
 8004042:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004044:	430b      	orrs	r3, r1
 8004046:	e07e      	b.n	8004146 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004050:	2b00      	cmp	r3, #0
 8004052:	d107      	bne.n	8004064 <HAL_ADC_ConfigChannel+0x778>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	0e9b      	lsrs	r3, r3, #26
 800405a:	3301      	adds	r3, #1
 800405c:	069b      	lsls	r3, r3, #26
 800405e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004062:	e015      	b.n	8004090 <HAL_ADC_ConfigChannel+0x7a4>
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406c:	fa93 f3a3 	rbit	r3, r3
 8004070:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 800407c:	2320      	movs	r3, #32
 800407e:	e003      	b.n	8004088 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004082:	fab3 f383 	clz	r3, r3
 8004086:	b2db      	uxtb	r3, r3
 8004088:	3301      	adds	r3, #1
 800408a:	069b      	lsls	r3, r3, #26
 800408c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004098:	2b00      	cmp	r3, #0
 800409a:	d109      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x7c4>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	0e9b      	lsrs	r3, r3, #26
 80040a2:	3301      	adds	r3, #1
 80040a4:	f003 031f 	and.w	r3, r3, #31
 80040a8:	2101      	movs	r1, #1
 80040aa:	fa01 f303 	lsl.w	r3, r1, r3
 80040ae:	e017      	b.n	80040e0 <HAL_ADC_ConfigChannel+0x7f4>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	fa93 f3a3 	rbit	r3, r3
 80040bc:	61bb      	str	r3, [r7, #24]
  return result;
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80040c8:	2320      	movs	r3, #32
 80040ca:	e003      	b.n	80040d4 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	fab3 f383 	clz	r3, r3
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	3301      	adds	r3, #1
 80040d6:	f003 031f 	and.w	r3, r3, #31
 80040da:	2101      	movs	r1, #1
 80040dc:	fa01 f303 	lsl.w	r3, r1, r3
 80040e0:	ea42 0103 	orr.w	r1, r2, r3
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10d      	bne.n	800410c <HAL_ADC_ConfigChannel+0x820>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	0e9b      	lsrs	r3, r3, #26
 80040f6:	3301      	adds	r3, #1
 80040f8:	f003 021f 	and.w	r2, r3, #31
 80040fc:	4613      	mov	r3, r2
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	4413      	add	r3, r2
 8004102:	3b1e      	subs	r3, #30
 8004104:	051b      	lsls	r3, r3, #20
 8004106:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800410a:	e01b      	b.n	8004144 <HAL_ADC_ConfigChannel+0x858>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	fa93 f3a3 	rbit	r3, r3
 8004118:	60fb      	str	r3, [r7, #12]
  return result;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004124:	2320      	movs	r3, #32
 8004126:	e003      	b.n	8004130 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	fab3 f383 	clz	r3, r3
 800412e:	b2db      	uxtb	r3, r3
 8004130:	3301      	adds	r3, #1
 8004132:	f003 021f 	and.w	r2, r3, #31
 8004136:	4613      	mov	r3, r2
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	4413      	add	r3, r2
 800413c:	3b1e      	subs	r3, #30
 800413e:	051b      	lsls	r3, r3, #20
 8004140:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004144:	430b      	orrs	r3, r1
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	6892      	ldr	r2, [r2, #8]
 800414a:	4619      	mov	r1, r3
 800414c:	f7ff f8d2 	bl	80032f4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	f280 80d7 	bge.w	8004308 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a06      	ldr	r2, [pc, #24]	; (8004178 <HAL_ADC_ConfigChannel+0x88c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d004      	beq.n	800416e <HAL_ADC_ConfigChannel+0x882>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a04      	ldr	r2, [pc, #16]	; (800417c <HAL_ADC_ConfigChannel+0x890>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d10a      	bne.n	8004184 <HAL_ADC_ConfigChannel+0x898>
 800416e:	4b04      	ldr	r3, [pc, #16]	; (8004180 <HAL_ADC_ConfigChannel+0x894>)
 8004170:	e009      	b.n	8004186 <HAL_ADC_ConfigChannel+0x89a>
 8004172:	bf00      	nop
 8004174:	47ff0000 	.word	0x47ff0000
 8004178:	40022000 	.word	0x40022000
 800417c:	40022100 	.word	0x40022100
 8004180:	40022300 	.word	0x40022300
 8004184:	4b65      	ldr	r3, [pc, #404]	; (800431c <HAL_ADC_ConfigChannel+0xa30>)
 8004186:	4618      	mov	r0, r3
 8004188:	f7fe ff88 	bl	800309c <LL_ADC_GetCommonPathInternalCh>
 800418c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a62      	ldr	r2, [pc, #392]	; (8004320 <HAL_ADC_ConfigChannel+0xa34>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d004      	beq.n	80041a4 <HAL_ADC_ConfigChannel+0x8b8>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a61      	ldr	r2, [pc, #388]	; (8004324 <HAL_ADC_ConfigChannel+0xa38>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d10e      	bne.n	80041c2 <HAL_ADC_ConfigChannel+0x8d6>
 80041a4:	485e      	ldr	r0, [pc, #376]	; (8004320 <HAL_ADC_ConfigChannel+0xa34>)
 80041a6:	f7ff f95f 	bl	8003468 <LL_ADC_IsEnabled>
 80041aa:	4604      	mov	r4, r0
 80041ac:	485d      	ldr	r0, [pc, #372]	; (8004324 <HAL_ADC_ConfigChannel+0xa38>)
 80041ae:	f7ff f95b 	bl	8003468 <LL_ADC_IsEnabled>
 80041b2:	4603      	mov	r3, r0
 80041b4:	4323      	orrs	r3, r4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bf0c      	ite	eq
 80041ba:	2301      	moveq	r3, #1
 80041bc:	2300      	movne	r3, #0
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	e008      	b.n	80041d4 <HAL_ADC_ConfigChannel+0x8e8>
 80041c2:	4859      	ldr	r0, [pc, #356]	; (8004328 <HAL_ADC_ConfigChannel+0xa3c>)
 80041c4:	f7ff f950 	bl	8003468 <LL_ADC_IsEnabled>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	bf0c      	ite	eq
 80041ce:	2301      	moveq	r3, #1
 80041d0:	2300      	movne	r3, #0
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 8084 	beq.w	80042e2 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a53      	ldr	r2, [pc, #332]	; (800432c <HAL_ADC_ConfigChannel+0xa40>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d132      	bne.n	800424a <HAL_ADC_ConfigChannel+0x95e>
 80041e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80041e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d12c      	bne.n	800424a <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a4c      	ldr	r2, [pc, #304]	; (8004328 <HAL_ADC_ConfigChannel+0xa3c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	f040 8086 	bne.w	8004308 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a47      	ldr	r2, [pc, #284]	; (8004320 <HAL_ADC_ConfigChannel+0xa34>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d004      	beq.n	8004210 <HAL_ADC_ConfigChannel+0x924>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a46      	ldr	r2, [pc, #280]	; (8004324 <HAL_ADC_ConfigChannel+0xa38>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d101      	bne.n	8004214 <HAL_ADC_ConfigChannel+0x928>
 8004210:	4a47      	ldr	r2, [pc, #284]	; (8004330 <HAL_ADC_ConfigChannel+0xa44>)
 8004212:	e000      	b.n	8004216 <HAL_ADC_ConfigChannel+0x92a>
 8004214:	4a41      	ldr	r2, [pc, #260]	; (800431c <HAL_ADC_ConfigChannel+0xa30>)
 8004216:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800421a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800421e:	4619      	mov	r1, r3
 8004220:	4610      	mov	r0, r2
 8004222:	f7fe ff28 	bl	8003076 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004226:	4b43      	ldr	r3, [pc, #268]	; (8004334 <HAL_ADC_ConfigChannel+0xa48>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	099b      	lsrs	r3, r3, #6
 800422c:	4a42      	ldr	r2, [pc, #264]	; (8004338 <HAL_ADC_ConfigChannel+0xa4c>)
 800422e:	fba2 2303 	umull	r2, r3, r2, r3
 8004232:	099b      	lsrs	r3, r3, #6
 8004234:	3301      	adds	r3, #1
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800423a:	e002      	b.n	8004242 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	3b01      	subs	r3, #1
 8004240:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1f9      	bne.n	800423c <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004248:	e05e      	b.n	8004308 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a3b      	ldr	r2, [pc, #236]	; (800433c <HAL_ADC_ConfigChannel+0xa50>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d120      	bne.n	8004296 <HAL_ADC_ConfigChannel+0x9aa>
 8004254:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004258:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d11a      	bne.n	8004296 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a30      	ldr	r2, [pc, #192]	; (8004328 <HAL_ADC_ConfigChannel+0xa3c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d14e      	bne.n	8004308 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a2c      	ldr	r2, [pc, #176]	; (8004320 <HAL_ADC_ConfigChannel+0xa34>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d004      	beq.n	800427e <HAL_ADC_ConfigChannel+0x992>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a2a      	ldr	r2, [pc, #168]	; (8004324 <HAL_ADC_ConfigChannel+0xa38>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d101      	bne.n	8004282 <HAL_ADC_ConfigChannel+0x996>
 800427e:	4a2c      	ldr	r2, [pc, #176]	; (8004330 <HAL_ADC_ConfigChannel+0xa44>)
 8004280:	e000      	b.n	8004284 <HAL_ADC_ConfigChannel+0x998>
 8004282:	4a26      	ldr	r2, [pc, #152]	; (800431c <HAL_ADC_ConfigChannel+0xa30>)
 8004284:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004288:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800428c:	4619      	mov	r1, r3
 800428e:	4610      	mov	r0, r2
 8004290:	f7fe fef1 	bl	8003076 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004294:	e038      	b.n	8004308 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a29      	ldr	r2, [pc, #164]	; (8004340 <HAL_ADC_ConfigChannel+0xa54>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d133      	bne.n	8004308 <HAL_ADC_ConfigChannel+0xa1c>
 80042a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d12d      	bne.n	8004308 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a1d      	ldr	r2, [pc, #116]	; (8004328 <HAL_ADC_ConfigChannel+0xa3c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d128      	bne.n	8004308 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a19      	ldr	r2, [pc, #100]	; (8004320 <HAL_ADC_ConfigChannel+0xa34>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d004      	beq.n	80042ca <HAL_ADC_ConfigChannel+0x9de>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a17      	ldr	r2, [pc, #92]	; (8004324 <HAL_ADC_ConfigChannel+0xa38>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d101      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x9e2>
 80042ca:	4a19      	ldr	r2, [pc, #100]	; (8004330 <HAL_ADC_ConfigChannel+0xa44>)
 80042cc:	e000      	b.n	80042d0 <HAL_ADC_ConfigChannel+0x9e4>
 80042ce:	4a13      	ldr	r2, [pc, #76]	; (800431c <HAL_ADC_ConfigChannel+0xa30>)
 80042d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042d8:	4619      	mov	r1, r3
 80042da:	4610      	mov	r0, r2
 80042dc:	f7fe fecb 	bl	8003076 <LL_ADC_SetCommonPathInternalCh>
 80042e0:	e012      	b.n	8004308 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e6:	f043 0220 	orr.w	r2, r3, #32
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80042f4:	e008      	b.n	8004308 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042fa:	f043 0220 	orr.w	r2, r3, #32
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004310:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004314:	4618      	mov	r0, r3
 8004316:	37e4      	adds	r7, #228	; 0xe4
 8004318:	46bd      	mov	sp, r7
 800431a:	bd90      	pop	{r4, r7, pc}
 800431c:	58026300 	.word	0x58026300
 8004320:	40022000 	.word	0x40022000
 8004324:	40022100 	.word	0x40022100
 8004328:	58026000 	.word	0x58026000
 800432c:	c7520000 	.word	0xc7520000
 8004330:	40022300 	.word	0x40022300
 8004334:	24000000 	.word	0x24000000
 8004338:	053e2d63 	.word	0x053e2d63
 800433c:	c3210000 	.word	0xc3210000
 8004340:	cb840000 	.word	0xcb840000

08004344 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a6b      	ldr	r2, [pc, #428]	; (8004500 <ADC_ConfigureBoostMode+0x1bc>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d004      	beq.n	8004360 <ADC_ConfigureBoostMode+0x1c>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a6a      	ldr	r2, [pc, #424]	; (8004504 <ADC_ConfigureBoostMode+0x1c0>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d109      	bne.n	8004374 <ADC_ConfigureBoostMode+0x30>
 8004360:	4b69      	ldr	r3, [pc, #420]	; (8004508 <ADC_ConfigureBoostMode+0x1c4>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004368:	2b00      	cmp	r3, #0
 800436a:	bf14      	ite	ne
 800436c:	2301      	movne	r3, #1
 800436e:	2300      	moveq	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	e008      	b.n	8004386 <ADC_ConfigureBoostMode+0x42>
 8004374:	4b65      	ldr	r3, [pc, #404]	; (800450c <ADC_ConfigureBoostMode+0x1c8>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800437c:	2b00      	cmp	r3, #0
 800437e:	bf14      	ite	ne
 8004380:	2301      	movne	r3, #1
 8004382:	2300      	moveq	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d01c      	beq.n	80043c4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800438a:	f003 ff79 	bl	8008280 <HAL_RCC_GetHCLKFreq>
 800438e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004398:	d010      	beq.n	80043bc <ADC_ConfigureBoostMode+0x78>
 800439a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800439e:	d871      	bhi.n	8004484 <ADC_ConfigureBoostMode+0x140>
 80043a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a4:	d002      	beq.n	80043ac <ADC_ConfigureBoostMode+0x68>
 80043a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043aa:	d16b      	bne.n	8004484 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	0c1b      	lsrs	r3, r3, #16
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b8:	60fb      	str	r3, [r7, #12]
        break;
 80043ba:	e066      	b.n	800448a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	089b      	lsrs	r3, r3, #2
 80043c0:	60fb      	str	r3, [r7, #12]
        break;
 80043c2:	e062      	b.n	800448a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80043c4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80043c8:	f004 feb0 	bl	800912c <HAL_RCCEx_GetPeriphCLKFreq>
 80043cc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80043d6:	d051      	beq.n	800447c <ADC_ConfigureBoostMode+0x138>
 80043d8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80043dc:	d854      	bhi.n	8004488 <ADC_ConfigureBoostMode+0x144>
 80043de:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80043e2:	d047      	beq.n	8004474 <ADC_ConfigureBoostMode+0x130>
 80043e4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80043e8:	d84e      	bhi.n	8004488 <ADC_ConfigureBoostMode+0x144>
 80043ea:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80043ee:	d03d      	beq.n	800446c <ADC_ConfigureBoostMode+0x128>
 80043f0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80043f4:	d848      	bhi.n	8004488 <ADC_ConfigureBoostMode+0x144>
 80043f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043fa:	d033      	beq.n	8004464 <ADC_ConfigureBoostMode+0x120>
 80043fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004400:	d842      	bhi.n	8004488 <ADC_ConfigureBoostMode+0x144>
 8004402:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004406:	d029      	beq.n	800445c <ADC_ConfigureBoostMode+0x118>
 8004408:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800440c:	d83c      	bhi.n	8004488 <ADC_ConfigureBoostMode+0x144>
 800440e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004412:	d01a      	beq.n	800444a <ADC_ConfigureBoostMode+0x106>
 8004414:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004418:	d836      	bhi.n	8004488 <ADC_ConfigureBoostMode+0x144>
 800441a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800441e:	d014      	beq.n	800444a <ADC_ConfigureBoostMode+0x106>
 8004420:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004424:	d830      	bhi.n	8004488 <ADC_ConfigureBoostMode+0x144>
 8004426:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800442a:	d00e      	beq.n	800444a <ADC_ConfigureBoostMode+0x106>
 800442c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004430:	d82a      	bhi.n	8004488 <ADC_ConfigureBoostMode+0x144>
 8004432:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004436:	d008      	beq.n	800444a <ADC_ConfigureBoostMode+0x106>
 8004438:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800443c:	d824      	bhi.n	8004488 <ADC_ConfigureBoostMode+0x144>
 800443e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004442:	d002      	beq.n	800444a <ADC_ConfigureBoostMode+0x106>
 8004444:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004448:	d11e      	bne.n	8004488 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	0c9b      	lsrs	r3, r3, #18
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	fbb2 f3f3 	udiv	r3, r2, r3
 8004458:	60fb      	str	r3, [r7, #12]
        break;
 800445a:	e016      	b.n	800448a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	091b      	lsrs	r3, r3, #4
 8004460:	60fb      	str	r3, [r7, #12]
        break;
 8004462:	e012      	b.n	800448a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	60fb      	str	r3, [r7, #12]
        break;
 800446a:	e00e      	b.n	800448a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	099b      	lsrs	r3, r3, #6
 8004470:	60fb      	str	r3, [r7, #12]
        break;
 8004472:	e00a      	b.n	800448a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	09db      	lsrs	r3, r3, #7
 8004478:	60fb      	str	r3, [r7, #12]
        break;
 800447a:	e006      	b.n	800448a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	0a1b      	lsrs	r3, r3, #8
 8004480:	60fb      	str	r3, [r7, #12]
        break;
 8004482:	e002      	b.n	800448a <ADC_ConfigureBoostMode+0x146>
        break;
 8004484:	bf00      	nop
 8004486:	e000      	b.n	800448a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004488:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	085b      	lsrs	r3, r3, #1
 800448e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4a1f      	ldr	r2, [pc, #124]	; (8004510 <ADC_ConfigureBoostMode+0x1cc>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d808      	bhi.n	80044aa <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80044a6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80044a8:	e025      	b.n	80044f6 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4a19      	ldr	r2, [pc, #100]	; (8004514 <ADC_ConfigureBoostMode+0x1d0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d80a      	bhi.n	80044c8 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044c4:	609a      	str	r2, [r3, #8]
}
 80044c6:	e016      	b.n	80044f6 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4a13      	ldr	r2, [pc, #76]	; (8004518 <ADC_ConfigureBoostMode+0x1d4>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d80a      	bhi.n	80044e6 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e2:	609a      	str	r2, [r3, #8]
}
 80044e4:	e007      	b.n	80044f6 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80044f4:	609a      	str	r2, [r3, #8]
}
 80044f6:	bf00      	nop
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	40022000 	.word	0x40022000
 8004504:	40022100 	.word	0x40022100
 8004508:	40022300 	.word	0x40022300
 800450c:	58026300 	.word	0x58026300
 8004510:	005f5e10 	.word	0x005f5e10
 8004514:	00bebc20 	.word	0x00bebc20
 8004518:	017d7840 	.word	0x017d7840

0800451c <LL_ADC_IsEnabled>:
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b01      	cmp	r3, #1
 800452e:	d101      	bne.n	8004534 <LL_ADC_IsEnabled+0x18>
 8004530:	2301      	movs	r3, #1
 8004532:	e000      	b.n	8004536 <LL_ADC_IsEnabled+0x1a>
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <LL_ADC_REG_IsConversionOngoing>:
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b04      	cmp	r3, #4
 8004554:	d101      	bne.n	800455a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004556:	2301      	movs	r3, #1
 8004558:	e000      	b.n	800455c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004568:	b590      	push	{r4, r7, lr}
 800456a:	b0a3      	sub	sp, #140	; 0x8c
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004572:	2300      	movs	r3, #0
 8004574:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004582:	2302      	movs	r3, #2
 8004584:	e0c1      	b.n	800470a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800458e:	2300      	movs	r3, #0
 8004590:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004592:	2300      	movs	r3, #0
 8004594:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a5e      	ldr	r2, [pc, #376]	; (8004714 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d102      	bne.n	80045a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80045a0:	4b5d      	ldr	r3, [pc, #372]	; (8004718 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	e001      	b.n	80045aa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10b      	bne.n	80045c8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b4:	f043 0220 	orr.w	r2, r3, #32
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e0a0      	b.n	800470a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7ff ffb9 	bl	8004542 <LL_ADC_REG_IsConversionOngoing>
 80045d0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff ffb2 	bl	8004542 <LL_ADC_REG_IsConversionOngoing>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f040 8081 	bne.w	80046e8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80045e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d17c      	bne.n	80046e8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a48      	ldr	r2, [pc, #288]	; (8004714 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d004      	beq.n	8004602 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a46      	ldr	r2, [pc, #280]	; (8004718 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d101      	bne.n	8004606 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004602:	4b46      	ldr	r3, [pc, #280]	; (800471c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004604:	e000      	b.n	8004608 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004606:	4b46      	ldr	r3, [pc, #280]	; (8004720 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004608:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d039      	beq.n	8004686 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004612:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	431a      	orrs	r2, r3
 8004620:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004622:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a3a      	ldr	r2, [pc, #232]	; (8004714 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d004      	beq.n	8004638 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a39      	ldr	r2, [pc, #228]	; (8004718 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d10e      	bne.n	8004656 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004638:	4836      	ldr	r0, [pc, #216]	; (8004714 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800463a:	f7ff ff6f 	bl	800451c <LL_ADC_IsEnabled>
 800463e:	4604      	mov	r4, r0
 8004640:	4835      	ldr	r0, [pc, #212]	; (8004718 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004642:	f7ff ff6b 	bl	800451c <LL_ADC_IsEnabled>
 8004646:	4603      	mov	r3, r0
 8004648:	4323      	orrs	r3, r4
 800464a:	2b00      	cmp	r3, #0
 800464c:	bf0c      	ite	eq
 800464e:	2301      	moveq	r3, #1
 8004650:	2300      	movne	r3, #0
 8004652:	b2db      	uxtb	r3, r3
 8004654:	e008      	b.n	8004668 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004656:	4833      	ldr	r0, [pc, #204]	; (8004724 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004658:	f7ff ff60 	bl	800451c <LL_ADC_IsEnabled>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	bf0c      	ite	eq
 8004662:	2301      	moveq	r3, #1
 8004664:	2300      	movne	r3, #0
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d047      	beq.n	80046fc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800466c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	4b2d      	ldr	r3, [pc, #180]	; (8004728 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004672:	4013      	ands	r3, r2
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	6811      	ldr	r1, [r2, #0]
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	6892      	ldr	r2, [r2, #8]
 800467c:	430a      	orrs	r2, r1
 800467e:	431a      	orrs	r2, r3
 8004680:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004682:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004684:	e03a      	b.n	80046fc <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004686:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800468e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004690:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a1f      	ldr	r2, [pc, #124]	; (8004714 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d004      	beq.n	80046a6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a1d      	ldr	r2, [pc, #116]	; (8004718 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d10e      	bne.n	80046c4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80046a6:	481b      	ldr	r0, [pc, #108]	; (8004714 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80046a8:	f7ff ff38 	bl	800451c <LL_ADC_IsEnabled>
 80046ac:	4604      	mov	r4, r0
 80046ae:	481a      	ldr	r0, [pc, #104]	; (8004718 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80046b0:	f7ff ff34 	bl	800451c <LL_ADC_IsEnabled>
 80046b4:	4603      	mov	r3, r0
 80046b6:	4323      	orrs	r3, r4
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	bf0c      	ite	eq
 80046bc:	2301      	moveq	r3, #1
 80046be:	2300      	movne	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	e008      	b.n	80046d6 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80046c4:	4817      	ldr	r0, [pc, #92]	; (8004724 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80046c6:	f7ff ff29 	bl	800451c <LL_ADC_IsEnabled>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	bf0c      	ite	eq
 80046d0:	2301      	moveq	r3, #1
 80046d2:	2300      	movne	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d010      	beq.n	80046fc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80046da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	4b12      	ldr	r3, [pc, #72]	; (8004728 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80046e4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046e6:	e009      	b.n	80046fc <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ec:	f043 0220 	orr.w	r2, r3, #32
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80046fa:	e000      	b.n	80046fe <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004706:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800470a:	4618      	mov	r0, r3
 800470c:	378c      	adds	r7, #140	; 0x8c
 800470e:	46bd      	mov	sp, r7
 8004710:	bd90      	pop	{r4, r7, pc}
 8004712:	bf00      	nop
 8004714:	40022000 	.word	0x40022000
 8004718:	40022100 	.word	0x40022100
 800471c:	40022300 	.word	0x40022300
 8004720:	58026300 	.word	0x58026300
 8004724:	58026000 	.word	0x58026000
 8004728:	fffff0e0 	.word	0xfffff0e0

0800472c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800473c:	4b0b      	ldr	r3, [pc, #44]	; (800476c <__NVIC_SetPriorityGrouping+0x40>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004748:	4013      	ands	r3, r2
 800474a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004754:	4b06      	ldr	r3, [pc, #24]	; (8004770 <__NVIC_SetPriorityGrouping+0x44>)
 8004756:	4313      	orrs	r3, r2
 8004758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800475a:	4a04      	ldr	r2, [pc, #16]	; (800476c <__NVIC_SetPriorityGrouping+0x40>)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	60d3      	str	r3, [r2, #12]
}
 8004760:	bf00      	nop
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	e000ed00 	.word	0xe000ed00
 8004770:	05fa0000 	.word	0x05fa0000

08004774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004778:	4b04      	ldr	r3, [pc, #16]	; (800478c <__NVIC_GetPriorityGrouping+0x18>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	0a1b      	lsrs	r3, r3, #8
 800477e:	f003 0307 	and.w	r3, r3, #7
}
 8004782:	4618      	mov	r0, r3
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	e000ed00 	.word	0xe000ed00

08004790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	4603      	mov	r3, r0
 8004798:	6039      	str	r1, [r7, #0]
 800479a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800479c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	db0a      	blt.n	80047ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	490c      	ldr	r1, [pc, #48]	; (80047dc <__NVIC_SetPriority+0x4c>)
 80047aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047ae:	0112      	lsls	r2, r2, #4
 80047b0:	b2d2      	uxtb	r2, r2
 80047b2:	440b      	add	r3, r1
 80047b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047b8:	e00a      	b.n	80047d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	4908      	ldr	r1, [pc, #32]	; (80047e0 <__NVIC_SetPriority+0x50>)
 80047c0:	88fb      	ldrh	r3, [r7, #6]
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	3b04      	subs	r3, #4
 80047c8:	0112      	lsls	r2, r2, #4
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	440b      	add	r3, r1
 80047ce:	761a      	strb	r2, [r3, #24]
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	e000e100 	.word	0xe000e100
 80047e0:	e000ed00 	.word	0xe000ed00

080047e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b089      	sub	sp, #36	; 0x24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f003 0307 	and.w	r3, r3, #7
 80047f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	f1c3 0307 	rsb	r3, r3, #7
 80047fe:	2b04      	cmp	r3, #4
 8004800:	bf28      	it	cs
 8004802:	2304      	movcs	r3, #4
 8004804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	3304      	adds	r3, #4
 800480a:	2b06      	cmp	r3, #6
 800480c:	d902      	bls.n	8004814 <NVIC_EncodePriority+0x30>
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	3b03      	subs	r3, #3
 8004812:	e000      	b.n	8004816 <NVIC_EncodePriority+0x32>
 8004814:	2300      	movs	r3, #0
 8004816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004818:	f04f 32ff 	mov.w	r2, #4294967295
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	43da      	mvns	r2, r3
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	401a      	ands	r2, r3
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800482c:	f04f 31ff 	mov.w	r1, #4294967295
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	fa01 f303 	lsl.w	r3, r1, r3
 8004836:	43d9      	mvns	r1, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800483c:	4313      	orrs	r3, r2
         );
}
 800483e:	4618      	mov	r0, r3
 8004840:	3724      	adds	r7, #36	; 0x24
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
	...

0800484c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3b01      	subs	r3, #1
 8004858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800485c:	d301      	bcc.n	8004862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800485e:	2301      	movs	r3, #1
 8004860:	e00f      	b.n	8004882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004862:	4a0a      	ldr	r2, [pc, #40]	; (800488c <SysTick_Config+0x40>)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3b01      	subs	r3, #1
 8004868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800486a:	210f      	movs	r1, #15
 800486c:	f04f 30ff 	mov.w	r0, #4294967295
 8004870:	f7ff ff8e 	bl	8004790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004874:	4b05      	ldr	r3, [pc, #20]	; (800488c <SysTick_Config+0x40>)
 8004876:	2200      	movs	r2, #0
 8004878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800487a:	4b04      	ldr	r3, [pc, #16]	; (800488c <SysTick_Config+0x40>)
 800487c:	2207      	movs	r2, #7
 800487e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	e000e010 	.word	0xe000e010

08004890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7ff ff47 	bl	800472c <__NVIC_SetPriorityGrouping>
}
 800489e:	bf00      	nop
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b086      	sub	sp, #24
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	4603      	mov	r3, r0
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	607a      	str	r2, [r7, #4]
 80048b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048b4:	f7ff ff5e 	bl	8004774 <__NVIC_GetPriorityGrouping>
 80048b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	68b9      	ldr	r1, [r7, #8]
 80048be:	6978      	ldr	r0, [r7, #20]
 80048c0:	f7ff ff90 	bl	80047e4 <NVIC_EncodePriority>
 80048c4:	4602      	mov	r2, r0
 80048c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80048ca:	4611      	mov	r1, r2
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff ff5f 	bl	8004790 <__NVIC_SetPriority>
}
 80048d2:	bf00      	nop
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b082      	sub	sp, #8
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7ff ffb2 	bl	800484c <SysTick_Config>
 80048e8:	4603      	mov	r3, r0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b082      	sub	sp, #8
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e014      	b.n	800492e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	791b      	ldrb	r3, [r3, #4]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d105      	bne.n	800491a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7fd f97b 	bl	8001c10 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2202      	movs	r2, #2
 800491e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	795b      	ldrb	r3, [r3, #5]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_DAC_ConfigChannel+0x18>
 800494c:	2302      	movs	r3, #2
 800494e:	e11d      	b.n	8004b8c <HAL_DAC_ConfigChannel+0x254>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2201      	movs	r2, #1
 8004954:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2202      	movs	r2, #2
 800495a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b04      	cmp	r3, #4
 8004962:	d174      	bne.n	8004a4e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004964:	f7fe fb1a 	bl	8002f9c <HAL_GetTick>
 8004968:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d134      	bne.n	80049da <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004970:	e011      	b.n	8004996 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004972:	f7fe fb13 	bl	8002f9c <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b01      	cmp	r3, #1
 800497e:	d90a      	bls.n	8004996 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	f043 0208 	orr.w	r2, r3, #8
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2203      	movs	r2, #3
 8004990:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e0fa      	b.n	8004b8c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800499c:	4b7d      	ldr	r3, [pc, #500]	; (8004b94 <HAL_DAC_ConfigChannel+0x25c>)
 800499e:	4013      	ands	r3, r2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e6      	bne.n	8004972 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80049a4:	2001      	movs	r0, #1
 80049a6:	f7fe fb05 	bl	8002fb4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	6992      	ldr	r2, [r2, #24]
 80049b2:	641a      	str	r2, [r3, #64]	; 0x40
 80049b4:	e01e      	b.n	80049f4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80049b6:	f7fe faf1 	bl	8002f9c <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d90a      	bls.n	80049da <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	f043 0208 	orr.w	r2, r3, #8
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2203      	movs	r2, #3
 80049d4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e0d8      	b.n	8004b8c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	dbe8      	blt.n	80049b6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80049e4:	2001      	movs	r0, #1
 80049e6:	f7fe fae5 	bl	8002fb4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	6992      	ldr	r2, [r2, #24]
 80049f2:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f003 0310 	and.w	r3, r3, #16
 8004a00:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004a04:	fa01 f303 	lsl.w	r3, r1, r3
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	ea02 0103 	and.w	r1, r2, r3
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	69da      	ldr	r2, [r3, #28]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f003 0310 	and.w	r3, r3, #16
 8004a18:	409a      	lsls	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f003 0310 	and.w	r3, r3, #16
 8004a2e:	21ff      	movs	r1, #255	; 0xff
 8004a30:	fa01 f303 	lsl.w	r3, r1, r3
 8004a34:	43db      	mvns	r3, r3
 8004a36:	ea02 0103 	and.w	r1, r2, r3
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	6a1a      	ldr	r2, [r3, #32]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f003 0310 	and.w	r3, r3, #16
 8004a44:	409a      	lsls	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d11d      	bne.n	8004a92 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5c:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f003 0310 	and.w	r3, r3, #16
 8004a64:	221f      	movs	r2, #31
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	43db      	mvns	r3, r3
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f003 0310 	and.w	r3, r3, #16
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	fa02 f303 	lsl.w	r3, r2, r3
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a98:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f003 0310 	and.w	r3, r3, #16
 8004aa0:	2207      	movs	r2, #7
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	43db      	mvns	r3, r3
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d102      	bne.n	8004abc <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61fb      	str	r3, [r7, #28]
 8004aba:	e00f      	b.n	8004adc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d102      	bne.n	8004aca <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	61fb      	str	r3, [r7, #28]
 8004ac8:	e008      	b.n	8004adc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d102      	bne.n	8004ad8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	61fb      	str	r3, [r7, #28]
 8004ad6:	e001      	b.n	8004adc <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	69fa      	ldr	r2, [r7, #28]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f003 0310 	and.w	r3, r3, #16
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	fa02 f303 	lsl.w	r3, r2, r3
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6819      	ldr	r1, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f003 0310 	and.w	r3, r3, #16
 8004b12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b16:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1a:	43da      	mvns	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	400a      	ands	r2, r1
 8004b22:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f003 0310 	and.w	r3, r3, #16
 8004b32:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004b36:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f003 0310 	and.w	r3, r3, #16
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6819      	ldr	r1, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f003 0310 	and.w	r3, r3, #16
 8004b6e:	22c0      	movs	r2, #192	; 0xc0
 8004b70:	fa02 f303 	lsl.w	r3, r2, r3
 8004b74:	43da      	mvns	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	400a      	ands	r2, r1
 8004b7c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2201      	movs	r2, #1
 8004b82:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3720      	adds	r7, #32
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	20008000 	.word	0x20008000

08004b98 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e0c6      	b.n	8004d38 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d102      	bne.n	8004bb8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7fd f872 	bl	8001c9c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2223      	movs	r2, #35	; 0x23
 8004bbc:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bbe:	4b60      	ldr	r3, [pc, #384]	; (8004d40 <HAL_ETH_Init+0x1a8>)
 8004bc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004bc4:	4a5e      	ldr	r2, [pc, #376]	; (8004d40 <HAL_ETH_Init+0x1a8>)
 8004bc6:	f043 0302 	orr.w	r3, r3, #2
 8004bca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004bce:	4b5c      	ldr	r3, [pc, #368]	; (8004d40 <HAL_ETH_Init+0x1a8>)
 8004bd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	60bb      	str	r3, [r7, #8]
 8004bda:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	7a1b      	ldrb	r3, [r3, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d103      	bne.n	8004bec <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004be4:	2000      	movs	r0, #0
 8004be6:	f7fe fa09 	bl	8002ffc <HAL_SYSCFG_ETHInterfaceSelect>
 8004bea:	e003      	b.n	8004bf4 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004bec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004bf0:	f7fe fa04 	bl	8002ffc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0201 	orr.w	r2, r2, #1
 8004c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c0c:	f7fe f9c6 	bl	8002f9c <HAL_GetTick>
 8004c10:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004c12:	e00f      	b.n	8004c34 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8004c14:	f7fe f9c2 	bl	8002f9c <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c22:	d907      	bls.n	8004c34 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2204      	movs	r2, #4
 8004c28:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	22e0      	movs	r2, #224	; 0xe0
 8004c2e:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e081      	b.n	8004d38 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1e6      	bne.n	8004c14 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fac0 	bl	80051cc <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004c4c:	f003 fb18 	bl	8008280 <HAL_RCC_GetHCLKFreq>
 8004c50:	4603      	mov	r3, r0
 8004c52:	4a3c      	ldr	r2, [pc, #240]	; (8004d44 <HAL_ETH_Init+0x1ac>)
 8004c54:	fba2 2303 	umull	r2, r3, r2, r3
 8004c58:	0c9a      	lsrs	r2, r3, #18
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3a01      	subs	r2, #1
 8004c60:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fa13 	bl	8005090 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004c80:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004c84:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d007      	beq.n	8004ca2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	22e0      	movs	r2, #224	; 0xe0
 8004c9c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e04a      	b.n	8004d38 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	f241 1308 	movw	r3, #4360	; 0x1108
 8004caa:	4413      	add	r3, r2
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	4b26      	ldr	r3, [pc, #152]	; (8004d48 <HAL_ETH_Init+0x1b0>)
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6952      	ldr	r2, [r2, #20]
 8004cb6:	0052      	lsls	r2, r2, #1
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	6809      	ldr	r1, [r1, #0]
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	f241 1308 	movw	r3, #4360	; 0x1108
 8004cc2:	440b      	add	r3, r1
 8004cc4:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fad8 	bl	800527c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 fb1c 	bl	800530a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	3305      	adds	r3, #5
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	021a      	lsls	r2, r3, #8
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	3303      	adds	r3, #3
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	061a      	lsls	r2, r3, #24
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	3302      	adds	r3, #2
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	041b      	lsls	r3, r3, #16
 8004d04:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004d10:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004d1e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004d20:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2210      	movs	r2, #16
 8004d2e:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2210      	movs	r2, #16
 8004d34:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	58024400 	.word	0x58024400
 8004d44:	431bde83 	.word	0x431bde83
 8004d48:	ffff8001 	.word	0xffff8001

08004d4c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8004d5e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	791b      	ldrb	r3, [r3, #4]
 8004d64:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8004d66:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	7b1b      	ldrb	r3, [r3, #12]
 8004d6c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004d6e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	7b5b      	ldrb	r3, [r3, #13]
 8004d74:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004d76:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	7b9b      	ldrb	r3, [r3, #14]
 8004d7c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004d7e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	7bdb      	ldrb	r3, [r3, #15]
 8004d84:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004d86:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	7c12      	ldrb	r2, [r2, #16]
 8004d8c:	2a00      	cmp	r2, #0
 8004d8e:	d102      	bne.n	8004d96 <ETH_SetMACConfig+0x4a>
 8004d90:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004d94:	e000      	b.n	8004d98 <ETH_SetMACConfig+0x4c>
 8004d96:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004d98:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	7c52      	ldrb	r2, [r2, #17]
 8004d9e:	2a00      	cmp	r2, #0
 8004da0:	d102      	bne.n	8004da8 <ETH_SetMACConfig+0x5c>
 8004da2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004da6:	e000      	b.n	8004daa <ETH_SetMACConfig+0x5e>
 8004da8:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004daa:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	7c9b      	ldrb	r3, [r3, #18]
 8004db0:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004db2:	431a      	orrs	r2, r3
                                macconf->Speed |
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004db8:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8004dbe:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	7f1b      	ldrb	r3, [r3, #28]
 8004dc4:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8004dc6:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	7f5b      	ldrb	r3, [r3, #29]
 8004dcc:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004dce:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	7f92      	ldrb	r2, [r2, #30]
 8004dd4:	2a00      	cmp	r2, #0
 8004dd6:	d102      	bne.n	8004dde <ETH_SetMACConfig+0x92>
 8004dd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ddc:	e000      	b.n	8004de0 <ETH_SetMACConfig+0x94>
 8004dde:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004de0:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	7fdb      	ldrb	r3, [r3, #31]
 8004de6:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004de8:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004df0:	2a00      	cmp	r2, #0
 8004df2:	d102      	bne.n	8004dfa <ETH_SetMACConfig+0xae>
 8004df4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004df8:	e000      	b.n	8004dfc <ETH_SetMACConfig+0xb0>
 8004dfa:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004dfc:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004e02:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e0a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8004e0c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	4b56      	ldr	r3, [pc, #344]	; (8004f78 <ETH_SetMACConfig+0x22c>)
 8004e1e:	4013      	ands	r3, r2
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6812      	ldr	r2, [r2, #0]
 8004e24:	68f9      	ldr	r1, [r7, #12]
 8004e26:	430b      	orrs	r3, r1
 8004e28:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e36:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004e38:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e40:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004e42:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004e4a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004e4c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004e54:	2a00      	cmp	r2, #0
 8004e56:	d102      	bne.n	8004e5e <ETH_SetMACConfig+0x112>
 8004e58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004e5c:	e000      	b.n	8004e60 <ETH_SetMACConfig+0x114>
 8004e5e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004e60:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	4b42      	ldr	r3, [pc, #264]	; (8004f7c <ETH_SetMACConfig+0x230>)
 8004e72:	4013      	ands	r3, r2
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6812      	ldr	r2, [r2, #0]
 8004e78:	68f9      	ldr	r1, [r7, #12]
 8004e7a:	430b      	orrs	r3, r1
 8004e7c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e84:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	4b3a      	ldr	r3, [pc, #232]	; (8004f80 <ETH_SetMACConfig+0x234>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	68f9      	ldr	r1, [r7, #12]
 8004e9e:	430b      	orrs	r3, r1
 8004ea0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004ea8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004eae:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004eb6:	2a00      	cmp	r2, #0
 8004eb8:	d101      	bne.n	8004ebe <ETH_SetMACConfig+0x172>
 8004eba:	2280      	movs	r2, #128	; 0x80
 8004ebc:	e000      	b.n	8004ec0 <ETH_SetMACConfig+0x174>
 8004ebe:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004ec0:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ec6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ed2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	6812      	ldr	r2, [r2, #0]
 8004edc:	68f9      	ldr	r1, [r7, #12]
 8004ede:	430b      	orrs	r3, r1
 8004ee0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004ee8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004ef0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efe:	f023 0103 	bic.w	r1, r3, #3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004f16:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004f32:	2a00      	cmp	r2, #0
 8004f34:	d101      	bne.n	8004f3a <ETH_SetMACConfig+0x1ee>
 8004f36:	2240      	movs	r2, #64	; 0x40
 8004f38:	e000      	b.n	8004f3c <ETH_SetMACConfig+0x1f0>
 8004f3a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004f3c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004f44:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004f46:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004f4e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004f50:	4313      	orrs	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004f5c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004f6c:	bf00      	nop
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	00048083 	.word	0x00048083
 8004f7c:	c0f88000 	.word	0xc0f88000
 8004f80:	fffffef0 	.word	0xfffffef0

08004f84 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	4b38      	ldr	r3, [pc, #224]	; (800507c <ETH_SetDMAConfig+0xf8>)
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	6812      	ldr	r2, [r2, #0]
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	6809      	ldr	r1, [r1, #0]
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8004faa:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	791b      	ldrb	r3, [r3, #4]
 8004fb0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004fb6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	7b1b      	ldrb	r3, [r3, #12]
 8004fbc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	f241 0304 	movw	r3, #4100	; 0x1004
 8004fca:	4413      	add	r3, r2
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	4b2c      	ldr	r3, [pc, #176]	; (8005080 <ETH_SetDMAConfig+0xfc>)
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6811      	ldr	r1, [r2, #0]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	f241 0304 	movw	r3, #4100	; 0x1004
 8004fde:	440b      	add	r3, r1
 8004fe0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	7b5b      	ldrb	r3, [r3, #13]
 8004fe6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	4b22      	ldr	r3, [pc, #136]	; (8005084 <ETH_SetDMAConfig+0x100>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6811      	ldr	r1, [r2, #0]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	431a      	orrs	r2, r3
 8005006:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800500a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	7d1b      	ldrb	r3, [r3, #20]
 8005014:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005016:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	7f5b      	ldrb	r3, [r3, #29]
 800501c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	f241 1304 	movw	r3, #4356	; 0x1104
 800502a:	4413      	add	r3, r2
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	4b16      	ldr	r3, [pc, #88]	; (8005088 <ETH_SetDMAConfig+0x104>)
 8005030:	4013      	ands	r3, r2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6811      	ldr	r1, [r2, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	431a      	orrs	r2, r3
 800503a:	f241 1304 	movw	r3, #4356	; 0x1104
 800503e:	440b      	add	r3, r1
 8005040:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	7f1b      	ldrb	r3, [r3, #28]
 8005046:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	f241 1308 	movw	r3, #4360	; 0x1108
 8005058:	4413      	add	r3, r2
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	4b0b      	ldr	r3, [pc, #44]	; (800508c <ETH_SetDMAConfig+0x108>)
 800505e:	4013      	ands	r3, r2
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6811      	ldr	r1, [r2, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	431a      	orrs	r2, r3
 8005068:	f241 1308 	movw	r3, #4360	; 0x1108
 800506c:	440b      	add	r3, r1
 800506e:	601a      	str	r2, [r3, #0]
}
 8005070:	bf00      	nop
 8005072:	3714      	adds	r7, #20
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	ffff87fd 	.word	0xffff87fd
 8005080:	ffff2ffe 	.word	0xffff2ffe
 8005084:	fffec000 	.word	0xfffec000
 8005088:	ffc0efef 	.word	0xffc0efef
 800508c:	7fc0ffff 	.word	0x7fc0ffff

08005090 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b0a4      	sub	sp, #144	; 0x90
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005098:	2301      	movs	r3, #1
 800509a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800509e:	2300      	movs	r3, #0
 80050a0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80050a2:	2300      	movs	r3, #0
 80050a4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80050a8:	2300      	movs	r3, #0
 80050aa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80050ae:	2301      	movs	r3, #1
 80050b0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80050b4:	2301      	movs	r3, #1
 80050b6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80050ba:	2301      	movs	r3, #1
 80050bc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80050c0:	2300      	movs	r3, #0
 80050c2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80050c6:	2301      	movs	r3, #1
 80050c8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80050cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050d0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80050d2:	2300      	movs	r3, #0
 80050d4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80050d8:	2300      	movs	r3, #0
 80050da:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80050dc:	2300      	movs	r3, #0
 80050de:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80050e2:	2300      	movs	r3, #0
 80050e4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80050e8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80050ec:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80050ee:	2300      	movs	r3, #0
 80050f0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80050f4:	2300      	movs	r3, #0
 80050f6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80050f8:	2301      	movs	r3, #1
 80050fa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80050fe:	2300      	movs	r3, #0
 8005100:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005104:	2300      	movs	r3, #0
 8005106:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800510a:	2300      	movs	r3, #0
 800510c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800510e:	2300      	movs	r3, #0
 8005110:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005112:	2300      	movs	r3, #0
 8005114:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005116:	2300      	movs	r3, #0
 8005118:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800511c:	2300      	movs	r3, #0
 800511e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005122:	2301      	movs	r3, #1
 8005124:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005128:	2320      	movs	r3, #32
 800512a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800512e:	2301      	movs	r3, #1
 8005130:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005134:	2300      	movs	r3, #0
 8005136:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800513a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800513e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005140:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005144:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005146:	2300      	movs	r3, #0
 8005148:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800514c:	2302      	movs	r3, #2
 800514e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005152:	2300      	movs	r3, #0
 8005154:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005158:	2300      	movs	r3, #0
 800515a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800515e:	2300      	movs	r3, #0
 8005160:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005164:	2301      	movs	r3, #1
 8005166:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800516a:	2300      	movs	r3, #0
 800516c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800516e:	2301      	movs	r3, #1
 8005170:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005174:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005178:	4619      	mov	r1, r3
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7ff fde6 	bl	8004d4c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005180:	2301      	movs	r3, #1
 8005182:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005184:	2301      	movs	r3, #1
 8005186:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005188:	2300      	movs	r3, #0
 800518a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800518c:	2300      	movs	r3, #0
 800518e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005192:	2300      	movs	r3, #0
 8005194:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005196:	2300      	movs	r3, #0
 8005198:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800519a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800519e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80051a0:	2300      	movs	r3, #0
 80051a2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80051a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80051a8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80051aa:	2300      	movs	r3, #0
 80051ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80051b0:	f44f 7306 	mov.w	r3, #536	; 0x218
 80051b4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80051b6:	f107 0308 	add.w	r3, r7, #8
 80051ba:	4619      	mov	r1, r3
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f7ff fee1 	bl	8004f84 <ETH_SetDMAConfig>
}
 80051c2:	bf00      	nop
 80051c4:	3790      	adds	r7, #144	; 0x90
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
	...

080051cc <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80051dc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80051e4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80051e6:	f003 f84b 	bl	8008280 <HAL_RCC_GetHCLKFreq>
 80051ea:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4a1e      	ldr	r2, [pc, #120]	; (8005268 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d908      	bls.n	8005206 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4a1d      	ldr	r2, [pc, #116]	; (800526c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d804      	bhi.n	8005206 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	e027      	b.n	8005256 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	4a18      	ldr	r2, [pc, #96]	; (800526c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d908      	bls.n	8005220 <ETH_MAC_MDIO_ClkConfig+0x54>
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	4a17      	ldr	r2, [pc, #92]	; (8005270 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d204      	bcs.n	8005220 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800521c:	60fb      	str	r3, [r7, #12]
 800521e:	e01a      	b.n	8005256 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	4a13      	ldr	r2, [pc, #76]	; (8005270 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d303      	bcc.n	8005230 <ETH_MAC_MDIO_ClkConfig+0x64>
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	4a12      	ldr	r2, [pc, #72]	; (8005274 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d911      	bls.n	8005254 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4a10      	ldr	r2, [pc, #64]	; (8005274 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d908      	bls.n	800524a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	4a0f      	ldr	r2, [pc, #60]	; (8005278 <ETH_MAC_MDIO_ClkConfig+0xac>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d804      	bhi.n	800524a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	e005      	b.n	8005256 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	e000      	b.n	8005256 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005254:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005260:	bf00      	nop
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	01312cff 	.word	0x01312cff
 800526c:	02160ebf 	.word	0x02160ebf
 8005270:	03938700 	.word	0x03938700
 8005274:	05f5e0ff 	.word	0x05f5e0ff
 8005278:	08f0d17f 	.word	0x08f0d17f

0800527c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005284:	2300      	movs	r3, #0
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	e01d      	b.n	80052c6 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68d9      	ldr	r1, [r3, #12]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4613      	mov	r3, r2
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	4413      	add	r3, r2
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	440b      	add	r3, r1
 800529a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2200      	movs	r2, #0
 80052a6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2200      	movs	r2, #0
 80052ac:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2200      	movs	r2, #0
 80052b2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80052b4:	68b9      	ldr	r1, [r7, #8]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	3206      	adds	r2, #6
 80052bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	3301      	adds	r3, #1
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2b03      	cmp	r3, #3
 80052ca:	d9de      	bls.n	800528a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	f241 132c 	movw	r3, #4396	; 0x112c
 80052da:	4413      	add	r3, r2
 80052dc:	2203      	movs	r2, #3
 80052de:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68d9      	ldr	r1, [r3, #12]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	f241 1314 	movw	r3, #4372	; 0x1114
 80052ec:	4413      	add	r3, r2
 80052ee:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68da      	ldr	r2, [r3, #12]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80052fc:	601a      	str	r2, [r3, #0]
}
 80052fe:	bf00      	nop
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800530a:	b480      	push	{r7}
 800530c:	b085      	sub	sp, #20
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005312:	2300      	movs	r3, #0
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	e024      	b.n	8005362 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6919      	ldr	r1, [r3, #16]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	4613      	mov	r3, r2
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	4413      	add	r3, r2
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	440b      	add	r3, r1
 8005328:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	2200      	movs	r2, #0
 8005334:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2200      	movs	r2, #0
 800533a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2200      	movs	r2, #0
 8005340:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2200      	movs	r2, #0
 8005346:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2200      	movs	r2, #0
 800534c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	6879      	ldr	r1, [r7, #4]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	3310      	adds	r3, #16
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	440b      	add	r3, r1
 800535a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	3301      	adds	r3, #1
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2b03      	cmp	r3, #3
 8005366:	d9d7      	bls.n	8005318 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	f241 1330 	movw	r3, #4400	; 0x1130
 800538e:	4413      	add	r3, r2
 8005390:	2203      	movs	r2, #3
 8005392:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6919      	ldr	r1, [r3, #16]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	f241 131c 	movw	r3, #4380	; 0x111c
 80053a0:	4413      	add	r3, r2
 80053a2:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	f241 1328 	movw	r3, #4392	; 0x1128
 80053b4:	4413      	add	r3, r2
 80053b6:	6019      	str	r1, [r3, #0]
}
 80053b8:	bf00      	nop
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b098      	sub	sp, #96	; 0x60
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80053cc:	4a84      	ldr	r2, [pc, #528]	; (80055e0 <HAL_FDCAN_Init+0x21c>)
 80053ce:	f107 030c 	add.w	r3, r7, #12
 80053d2:	4611      	mov	r1, r2
 80053d4:	224c      	movs	r2, #76	; 0x4c
 80053d6:	4618      	mov	r0, r3
 80053d8:	f008 ff92 	bl	800e300 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e1ca      	b.n	800577c <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a7e      	ldr	r2, [pc, #504]	; (80055e4 <HAL_FDCAN_Init+0x220>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d106      	bne.n	80053fe <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80053f8:	461a      	mov	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d106      	bne.n	8005418 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f7fc fcee 	bl	8001df4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	699a      	ldr	r2, [r3, #24]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0210 	bic.w	r2, r2, #16
 8005426:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005428:	f7fd fdb8 	bl	8002f9c <HAL_GetTick>
 800542c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800542e:	e014      	b.n	800545a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005430:	f7fd fdb4 	bl	8002f9c <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b0a      	cmp	r3, #10
 800543c:	d90d      	bls.n	800545a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005444:	f043 0201 	orr.w	r2, r3, #1
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2203      	movs	r2, #3
 8005452:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e190      	b.n	800577c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	f003 0308 	and.w	r3, r3, #8
 8005464:	2b08      	cmp	r3, #8
 8005466:	d0e3      	beq.n	8005430 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699a      	ldr	r2, [r3, #24]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f042 0201 	orr.w	r2, r2, #1
 8005476:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005478:	f7fd fd90 	bl	8002f9c <HAL_GetTick>
 800547c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800547e:	e014      	b.n	80054aa <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005480:	f7fd fd8c 	bl	8002f9c <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b0a      	cmp	r3, #10
 800548c:	d90d      	bls.n	80054aa <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005494:	f043 0201 	orr.w	r2, r3, #1
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2203      	movs	r2, #3
 80054a2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e168      	b.n	800577c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0e3      	beq.n	8005480 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699a      	ldr	r2, [r3, #24]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0202 	orr.w	r2, r2, #2
 80054c6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	7c1b      	ldrb	r3, [r3, #16]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d108      	bne.n	80054e2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699a      	ldr	r2, [r3, #24]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054de:	619a      	str	r2, [r3, #24]
 80054e0:	e007      	b.n	80054f2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	699a      	ldr	r2, [r3, #24]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054f0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	7c5b      	ldrb	r3, [r3, #17]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d108      	bne.n	800550c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	699a      	ldr	r2, [r3, #24]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005508:	619a      	str	r2, [r3, #24]
 800550a:	e007      	b.n	800551c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699a      	ldr	r2, [r3, #24]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800551a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	7c9b      	ldrb	r3, [r3, #18]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d108      	bne.n	8005536 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	699a      	ldr	r2, [r3, #24]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005532:	619a      	str	r2, [r3, #24]
 8005534:	e007      	b.n	8005546 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	699a      	ldr	r2, [r3, #24]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005544:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	430a      	orrs	r2, r1
 800555a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699a      	ldr	r2, [r3, #24]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800556a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	691a      	ldr	r2, [r3, #16]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 0210 	bic.w	r2, r2, #16
 800557a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d108      	bne.n	8005596 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699a      	ldr	r2, [r3, #24]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0204 	orr.w	r2, r2, #4
 8005592:	619a      	str	r2, [r3, #24]
 8005594:	e030      	b.n	80055f8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d02c      	beq.n	80055f8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d020      	beq.n	80055e8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	699a      	ldr	r2, [r3, #24]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055b4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	691a      	ldr	r2, [r3, #16]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f042 0210 	orr.w	r2, r2, #16
 80055c4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d114      	bne.n	80055f8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	699a      	ldr	r2, [r3, #24]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f042 0220 	orr.w	r2, r2, #32
 80055dc:	619a      	str	r2, [r3, #24]
 80055de:	e00b      	b.n	80055f8 <HAL_FDCAN_Init+0x234>
 80055e0:	0800e344 	.word	0x0800e344
 80055e4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699a      	ldr	r2, [r3, #24]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 0220 	orr.w	r2, r2, #32
 80055f6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	3b01      	subs	r3, #1
 80055fe:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	3b01      	subs	r3, #1
 8005606:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005608:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005610:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	3b01      	subs	r3, #1
 800561a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005620:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005622:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800562c:	d115      	bne.n	800565a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005632:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005638:	3b01      	subs	r3, #1
 800563a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800563c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005642:	3b01      	subs	r3, #1
 8005644:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005646:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	3b01      	subs	r3, #1
 8005650:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005656:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005658:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00a      	beq.n	8005678 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005680:	4413      	add	r3, r2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d012      	beq.n	80056ac <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800568e:	f023 0107 	bic.w	r1, r3, #7
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800569c:	4413      	add	r3, r2
 800569e:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d012      	beq.n	80056da <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80056bc:	f023 0107 	bic.w	r1, r3, #7
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80056ca:	4413      	add	r3, r2
 80056cc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d013      	beq.n	800570a <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80056ea:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80056f8:	4413      	add	r3, r2
 80056fa:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80056fe:	011a      	lsls	r2, r3, #4
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800570e:	2b00      	cmp	r3, #0
 8005710:	d013      	beq.n	800573a <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800571a:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005728:	4413      	add	r3, r2
 800572a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800572e:	021a      	lsls	r2, r3, #8
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a11      	ldr	r2, [pc, #68]	; (8005784 <HAL_FDCAN_Init+0x3c0>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d107      	bne.n	8005754 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	689a      	ldr	r2, [r3, #8]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f022 0203 	bic.w	r2, r2, #3
 8005752:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f80b 	bl	8005788 <FDCAN_CalcultateRamBlockAddresses>
 8005772:	4603      	mov	r3, r0
 8005774:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005778:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800577c:	4618      	mov	r0, r3
 800577e:	3760      	adds	r7, #96	; 0x60
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	4000a000 	.word	0x4000a000

08005788 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005794:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800579e:	4ba7      	ldr	r3, [pc, #668]	; (8005a3c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80057a0:	4013      	ands	r3, r2
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	0091      	lsls	r1, r2, #2
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	6812      	ldr	r2, [r2, #0]
 80057aa:	430b      	orrs	r3, r1
 80057ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057b8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c0:	041a      	lsls	r2, r3, #16
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	4413      	add	r3, r2
 80057d4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80057de:	4b97      	ldr	r3, [pc, #604]	; (8005a3c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80057e0:	4013      	ands	r3, r2
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	0091      	lsls	r1, r2, #2
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	6812      	ldr	r2, [r2, #0]
 80057ea:	430b      	orrs	r3, r1
 80057ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f8:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005800:	041a      	lsls	r2, r3, #16
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	4413      	add	r3, r2
 8005816:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005820:	4b86      	ldr	r3, [pc, #536]	; (8005a3c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005822:	4013      	ands	r3, r2
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	0091      	lsls	r1, r2, #2
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6812      	ldr	r2, [r2, #0]
 800582c:	430b      	orrs	r3, r1
 800582e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800583a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	041a      	lsls	r2, r3, #16
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005856:	fb02 f303 	mul.w	r3, r2, r3
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	4413      	add	r3, r2
 800585e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005868:	4b74      	ldr	r3, [pc, #464]	; (8005a3c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800586a:	4013      	ands	r3, r2
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	0091      	lsls	r1, r2, #2
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6812      	ldr	r2, [r2, #0]
 8005874:	430b      	orrs	r3, r1
 8005876:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005882:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800588a:	041a      	lsls	r2, r3, #16
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800589e:	fb02 f303 	mul.w	r3, r2, r3
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	4413      	add	r3, r2
 80058a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80058b0:	4b62      	ldr	r3, [pc, #392]	; (8005a3c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80058b2:	4013      	ands	r3, r2
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	0091      	lsls	r1, r2, #2
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6812      	ldr	r2, [r2, #0]
 80058bc:	430b      	orrs	r3, r1
 80058be:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80058ca:	fb02 f303 	mul.w	r3, r2, r3
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	4413      	add	r3, r2
 80058d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80058dc:	4b57      	ldr	r3, [pc, #348]	; (8005a3c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80058de:	4013      	ands	r3, r2
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	0091      	lsls	r1, r2, #2
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6812      	ldr	r2, [r2, #0]
 80058e8:	430b      	orrs	r3, r1
 80058ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058f6:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058fe:	041a      	lsls	r2, r3, #16
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	430a      	orrs	r2, r1
 8005906:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	4413      	add	r3, r2
 8005914:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800591e:	4b47      	ldr	r3, [pc, #284]	; (8005a3c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005920:	4013      	ands	r3, r2
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	0091      	lsls	r1, r2, #2
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	6812      	ldr	r2, [r2, #0]
 800592a:	430b      	orrs	r3, r1
 800592c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005938:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005940:	041a      	lsls	r2, r3, #16
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005954:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800595c:	061a      	lsls	r2, r3, #24
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	430a      	orrs	r2, r1
 8005964:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800596c:	4b34      	ldr	r3, [pc, #208]	; (8005a40 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800596e:	4413      	add	r3, r2
 8005970:	009a      	lsls	r2, r3, #2
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	441a      	add	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	441a      	add	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	6879      	ldr	r1, [r7, #4]
 80059a0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80059a2:	fb01 f303 	mul.w	r3, r1, r3
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	441a      	add	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059b6:	6879      	ldr	r1, [r7, #4]
 80059b8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80059ba:	fb01 f303 	mul.w	r3, r1, r3
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	441a      	add	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ce:	6879      	ldr	r1, [r7, #4]
 80059d0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80059d2:	fb01 f303 	mul.w	r3, r1, r3
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	441a      	add	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	441a      	add	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005a02:	fb01 f303 	mul.w	r3, r1, r3
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	441a      	add	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005a1e:	fb01 f303 	mul.w	r3, r1, r3
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	441a      	add	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a32:	4a04      	ldr	r2, [pc, #16]	; (8005a44 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d915      	bls.n	8005a64 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005a38:	e006      	b.n	8005a48 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005a3a:	bf00      	nop
 8005a3c:	ffff0003 	.word	0xffff0003
 8005a40:	10002b00 	.word	0x10002b00
 8005a44:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a4e:	f043 0220 	orr.w	r2, r3, #32
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2203      	movs	r2, #3
 8005a5c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e010      	b.n	8005a86 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a68:	60fb      	str	r3, [r7, #12]
 8005a6a:	e005      	b.n	8005a78 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	3304      	adds	r3, #4
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d3f3      	bcc.n	8005a6c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop

08005a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b089      	sub	sp, #36	; 0x24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005aa2:	4b86      	ldr	r3, [pc, #536]	; (8005cbc <HAL_GPIO_Init+0x228>)
 8005aa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005aa6:	e18c      	b.n	8005dc2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	2101      	movs	r1, #1
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f000 817e 	beq.w	8005dbc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f003 0303 	and.w	r3, r3, #3
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d005      	beq.n	8005ad8 <HAL_GPIO_Init+0x44>
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f003 0303 	and.w	r3, r3, #3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d130      	bne.n	8005b3a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	2203      	movs	r2, #3
 8005ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	4013      	ands	r3, r2
 8005aee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	68da      	ldr	r2, [r3, #12]
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	005b      	lsls	r3, r3, #1
 8005af8:	fa02 f303 	lsl.w	r3, r2, r3
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b0e:	2201      	movs	r2, #1
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	fa02 f303 	lsl.w	r3, r2, r3
 8005b16:	43db      	mvns	r3, r3
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	091b      	lsrs	r3, r3, #4
 8005b24:	f003 0201 	and.w	r2, r3, #1
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f003 0303 	and.w	r3, r3, #3
 8005b42:	2b03      	cmp	r3, #3
 8005b44:	d017      	beq.n	8005b76 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	005b      	lsls	r3, r3, #1
 8005b50:	2203      	movs	r2, #3
 8005b52:	fa02 f303 	lsl.w	r3, r2, r3
 8005b56:	43db      	mvns	r3, r3
 8005b58:	69ba      	ldr	r2, [r7, #24]
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	689a      	ldr	r2, [r3, #8]
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f003 0303 	and.w	r3, r3, #3
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d123      	bne.n	8005bca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	08da      	lsrs	r2, r3, #3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	3208      	adds	r2, #8
 8005b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	f003 0307 	and.w	r3, r3, #7
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	220f      	movs	r2, #15
 8005b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9e:	43db      	mvns	r3, r3
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	691a      	ldr	r2, [r3, #16]
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	f003 0307 	and.w	r3, r3, #7
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	08da      	lsrs	r2, r3, #3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3208      	adds	r2, #8
 8005bc4:	69b9      	ldr	r1, [r7, #24]
 8005bc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	005b      	lsls	r3, r3, #1
 8005bd4:	2203      	movs	r2, #3
 8005bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bda:	43db      	mvns	r3, r3
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	4013      	ands	r3, r2
 8005be0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f003 0203 	and.w	r2, r3, #3
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f000 80d8 	beq.w	8005dbc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c0c:	4b2c      	ldr	r3, [pc, #176]	; (8005cc0 <HAL_GPIO_Init+0x22c>)
 8005c0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c12:	4a2b      	ldr	r2, [pc, #172]	; (8005cc0 <HAL_GPIO_Init+0x22c>)
 8005c14:	f043 0302 	orr.w	r3, r3, #2
 8005c18:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005c1c:	4b28      	ldr	r3, [pc, #160]	; (8005cc0 <HAL_GPIO_Init+0x22c>)
 8005c1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	60fb      	str	r3, [r7, #12]
 8005c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c2a:	4a26      	ldr	r2, [pc, #152]	; (8005cc4 <HAL_GPIO_Init+0x230>)
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	089b      	lsrs	r3, r3, #2
 8005c30:	3302      	adds	r3, #2
 8005c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	f003 0303 	and.w	r3, r3, #3
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	220f      	movs	r2, #15
 8005c42:	fa02 f303 	lsl.w	r3, r2, r3
 8005c46:	43db      	mvns	r3, r3
 8005c48:	69ba      	ldr	r2, [r7, #24]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a1d      	ldr	r2, [pc, #116]	; (8005cc8 <HAL_GPIO_Init+0x234>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d04a      	beq.n	8005cec <HAL_GPIO_Init+0x258>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a1c      	ldr	r2, [pc, #112]	; (8005ccc <HAL_GPIO_Init+0x238>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d02b      	beq.n	8005cb6 <HAL_GPIO_Init+0x222>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a1b      	ldr	r2, [pc, #108]	; (8005cd0 <HAL_GPIO_Init+0x23c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d025      	beq.n	8005cb2 <HAL_GPIO_Init+0x21e>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a1a      	ldr	r2, [pc, #104]	; (8005cd4 <HAL_GPIO_Init+0x240>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d01f      	beq.n	8005cae <HAL_GPIO_Init+0x21a>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a19      	ldr	r2, [pc, #100]	; (8005cd8 <HAL_GPIO_Init+0x244>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d019      	beq.n	8005caa <HAL_GPIO_Init+0x216>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a18      	ldr	r2, [pc, #96]	; (8005cdc <HAL_GPIO_Init+0x248>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d013      	beq.n	8005ca6 <HAL_GPIO_Init+0x212>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a17      	ldr	r2, [pc, #92]	; (8005ce0 <HAL_GPIO_Init+0x24c>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d00d      	beq.n	8005ca2 <HAL_GPIO_Init+0x20e>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a16      	ldr	r2, [pc, #88]	; (8005ce4 <HAL_GPIO_Init+0x250>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d007      	beq.n	8005c9e <HAL_GPIO_Init+0x20a>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a15      	ldr	r2, [pc, #84]	; (8005ce8 <HAL_GPIO_Init+0x254>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d101      	bne.n	8005c9a <HAL_GPIO_Init+0x206>
 8005c96:	2309      	movs	r3, #9
 8005c98:	e029      	b.n	8005cee <HAL_GPIO_Init+0x25a>
 8005c9a:	230a      	movs	r3, #10
 8005c9c:	e027      	b.n	8005cee <HAL_GPIO_Init+0x25a>
 8005c9e:	2307      	movs	r3, #7
 8005ca0:	e025      	b.n	8005cee <HAL_GPIO_Init+0x25a>
 8005ca2:	2306      	movs	r3, #6
 8005ca4:	e023      	b.n	8005cee <HAL_GPIO_Init+0x25a>
 8005ca6:	2305      	movs	r3, #5
 8005ca8:	e021      	b.n	8005cee <HAL_GPIO_Init+0x25a>
 8005caa:	2304      	movs	r3, #4
 8005cac:	e01f      	b.n	8005cee <HAL_GPIO_Init+0x25a>
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e01d      	b.n	8005cee <HAL_GPIO_Init+0x25a>
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	e01b      	b.n	8005cee <HAL_GPIO_Init+0x25a>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e019      	b.n	8005cee <HAL_GPIO_Init+0x25a>
 8005cba:	bf00      	nop
 8005cbc:	58000080 	.word	0x58000080
 8005cc0:	58024400 	.word	0x58024400
 8005cc4:	58000400 	.word	0x58000400
 8005cc8:	58020000 	.word	0x58020000
 8005ccc:	58020400 	.word	0x58020400
 8005cd0:	58020800 	.word	0x58020800
 8005cd4:	58020c00 	.word	0x58020c00
 8005cd8:	58021000 	.word	0x58021000
 8005cdc:	58021400 	.word	0x58021400
 8005ce0:	58021800 	.word	0x58021800
 8005ce4:	58021c00 	.word	0x58021c00
 8005ce8:	58022400 	.word	0x58022400
 8005cec:	2300      	movs	r3, #0
 8005cee:	69fa      	ldr	r2, [r7, #28]
 8005cf0:	f002 0203 	and.w	r2, r2, #3
 8005cf4:	0092      	lsls	r2, r2, #2
 8005cf6:	4093      	lsls	r3, r2
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005cfe:	4938      	ldr	r1, [pc, #224]	; (8005de0 <HAL_GPIO_Init+0x34c>)
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	089b      	lsrs	r3, r3, #2
 8005d04:	3302      	adds	r3, #2
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	43db      	mvns	r3, r3
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005d32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	43db      	mvns	r3, r3
 8005d46:	69ba      	ldr	r2, [r7, #24]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d003      	beq.n	8005d60 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005d60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	43db      	mvns	r3, r3
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	4013      	ands	r3, r2
 8005d76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d003      	beq.n	8005d8c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	43db      	mvns	r3, r3
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	4013      	ands	r3, r2
 8005da0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005dae:	69ba      	ldr	r2, [r7, #24]
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f47f ae6b 	bne.w	8005aa8 <HAL_GPIO_Init+0x14>
  }
}
 8005dd2:	bf00      	nop
 8005dd4:	bf00      	nop
 8005dd6:	3724      	adds	r7, #36	; 0x24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	58000400 	.word	0x58000400

08005de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	460b      	mov	r3, r1
 8005dee:	807b      	strh	r3, [r7, #2]
 8005df0:	4613      	mov	r3, r2
 8005df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005df4:	787b      	ldrb	r3, [r7, #1]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005dfa:	887a      	ldrh	r2, [r7, #2]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005e00:	e003      	b.n	8005e0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005e02:	887b      	ldrh	r3, [r7, #2]
 8005e04:	041a      	lsls	r2, r3, #16
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	619a      	str	r2, [r3, #24]
}
 8005e0a:	bf00      	nop
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b085      	sub	sp, #20
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	460b      	mov	r3, r1
 8005e20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005e28:	887a      	ldrh	r2, [r7, #2]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	041a      	lsls	r2, r3, #16
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	43d9      	mvns	r1, r3
 8005e34:	887b      	ldrh	r3, [r7, #2]
 8005e36:	400b      	ands	r3, r1
 8005e38:	431a      	orrs	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	619a      	str	r2, [r3, #24]
}
 8005e3e:	bf00      	nop
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
	...

08005e4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e07f      	b.n	8005f5e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d106      	bne.n	8005e78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7fc f888 	bl	8001f88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2224      	movs	r2, #36	; 0x24
 8005e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 0201 	bic.w	r2, r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005e9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	689a      	ldr	r2, [r3, #8]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005eac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d107      	bne.n	8005ec6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ec2:	609a      	str	r2, [r3, #8]
 8005ec4:	e006      	b.n	8005ed4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005ed2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d104      	bne.n	8005ee6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ee4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6859      	ldr	r1, [r3, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	4b1d      	ldr	r3, [pc, #116]	; (8005f68 <HAL_I2C_Init+0x11c>)
 8005ef2:	430b      	orrs	r3, r1
 8005ef4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68da      	ldr	r2, [r3, #12]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	691a      	ldr	r2, [r3, #16]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	69d9      	ldr	r1, [r3, #28]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a1a      	ldr	r2, [r3, #32]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0201 	orr.w	r2, r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2220      	movs	r2, #32
 8005f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	02008000 	.word	0x02008000

08005f6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b20      	cmp	r3, #32
 8005f80:	d138      	bne.n	8005ff4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d101      	bne.n	8005f90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	e032      	b.n	8005ff6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2224      	movs	r2, #36	; 0x24
 8005f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0201 	bic.w	r2, r2, #1
 8005fae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005fbe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6819      	ldr	r1, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f042 0201 	orr.w	r2, r2, #1
 8005fde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2220      	movs	r2, #32
 8005fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	e000      	b.n	8005ff6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ff4:	2302      	movs	r3, #2
  }
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006002:	b480      	push	{r7}
 8006004:	b085      	sub	sp, #20
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
 800600a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b20      	cmp	r3, #32
 8006016:	d139      	bne.n	800608c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800601e:	2b01      	cmp	r3, #1
 8006020:	d101      	bne.n	8006026 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006022:	2302      	movs	r3, #2
 8006024:	e033      	b.n	800608e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2224      	movs	r2, #36	; 0x24
 8006032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 0201 	bic.w	r2, r2, #1
 8006044:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006054:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	021b      	lsls	r3, r3, #8
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	4313      	orrs	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f042 0201 	orr.w	r2, r2, #1
 8006076:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006088:	2300      	movs	r3, #0
 800608a:	e000      	b.n	800608e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800608c:	2302      	movs	r3, #2
  }
}
 800608e:	4618      	mov	r0, r3
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
	...

0800609c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e0bf      	b.n	800622e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d106      	bne.n	80060c8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7fb ffc6 	bl	8002054 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2202      	movs	r2, #2
 80060cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	699a      	ldr	r2, [r3, #24]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80060de:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6999      	ldr	r1, [r3, #24]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80060f4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6899      	ldr	r1, [r3, #8]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	4b4a      	ldr	r3, [pc, #296]	; (8006238 <HAL_LTDC_Init+0x19c>)
 8006110:	400b      	ands	r3, r1
 8006112:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	041b      	lsls	r3, r3, #16
 800611a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6899      	ldr	r1, [r3, #8]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	699a      	ldr	r2, [r3, #24]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	431a      	orrs	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68d9      	ldr	r1, [r3, #12]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	4b3e      	ldr	r3, [pc, #248]	; (8006238 <HAL_LTDC_Init+0x19c>)
 800613e:	400b      	ands	r3, r1
 8006140:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	69db      	ldr	r3, [r3, #28]
 8006146:	041b      	lsls	r3, r3, #16
 8006148:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68d9      	ldr	r1, [r3, #12]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a1a      	ldr	r2, [r3, #32]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	431a      	orrs	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	430a      	orrs	r2, r1
 800615e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6919      	ldr	r1, [r3, #16]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	4b33      	ldr	r3, [pc, #204]	; (8006238 <HAL_LTDC_Init+0x19c>)
 800616c:	400b      	ands	r3, r1
 800616e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006174:	041b      	lsls	r3, r3, #16
 8006176:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6919      	ldr	r1, [r3, #16]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	431a      	orrs	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6959      	ldr	r1, [r3, #20]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	4b27      	ldr	r3, [pc, #156]	; (8006238 <HAL_LTDC_Init+0x19c>)
 800619a:	400b      	ands	r3, r1
 800619c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a2:	041b      	lsls	r3, r3, #16
 80061a4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6959      	ldr	r1, [r3, #20]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	430a      	orrs	r2, r1
 80061ba:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061c2:	021b      	lsls	r3, r3, #8
 80061c4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80061cc:	041b      	lsls	r3, r3, #16
 80061ce:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80061de:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80061f2:	431a      	orrs	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f042 0206 	orr.w	r2, r2, #6
 800620a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	699a      	ldr	r2, [r3, #24]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f042 0201 	orr.w	r2, r2, #1
 800621a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	f000f800 	.word	0xf000f800

0800623c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800623c:	b5b0      	push	{r4, r5, r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800624e:	2b01      	cmp	r3, #1
 8006250:	d101      	bne.n	8006256 <HAL_LTDC_ConfigLayer+0x1a>
 8006252:	2302      	movs	r3, #2
 8006254:	e02c      	b.n	80062b0 <HAL_LTDC_ConfigLayer+0x74>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2202      	movs	r2, #2
 8006262:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2134      	movs	r1, #52	; 0x34
 800626c:	fb01 f303 	mul.w	r3, r1, r3
 8006270:	4413      	add	r3, r2
 8006272:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	4614      	mov	r4, r2
 800627a:	461d      	mov	r5, r3
 800627c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800627e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006288:	682b      	ldr	r3, [r5, #0]
 800628a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	68b9      	ldr	r1, [r7, #8]
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 f811 	bl	80062b8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2201      	movs	r2, #1
 800629c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bdb0      	pop	{r4, r5, r7, pc}

080062b8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b089      	sub	sp, #36	; 0x24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	0c1b      	lsrs	r3, r3, #16
 80062d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062d4:	4413      	add	r3, r2
 80062d6:	041b      	lsls	r3, r3, #16
 80062d8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	461a      	mov	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	01db      	lsls	r3, r3, #7
 80062e4:	4413      	add	r3, r2
 80062e6:	3384      	adds	r3, #132	; 0x84
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	6812      	ldr	r2, [r2, #0]
 80062ee:	4611      	mov	r1, r2
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	01d2      	lsls	r2, r2, #7
 80062f4:	440a      	add	r2, r1
 80062f6:	3284      	adds	r2, #132	; 0x84
 80062f8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80062fc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	0c1b      	lsrs	r3, r3, #16
 800630a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800630e:	4413      	add	r3, r2
 8006310:	1c5a      	adds	r2, r3, #1
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4619      	mov	r1, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	01db      	lsls	r3, r3, #7
 800631c:	440b      	add	r3, r1
 800631e:	3384      	adds	r3, #132	; 0x84
 8006320:	4619      	mov	r1, r3
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	4313      	orrs	r3, r2
 8006326:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	68da      	ldr	r2, [r3, #12]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006336:	4413      	add	r3, r2
 8006338:	041b      	lsls	r3, r3, #16
 800633a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	461a      	mov	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	01db      	lsls	r3, r3, #7
 8006346:	4413      	add	r3, r2
 8006348:	3384      	adds	r3, #132	; 0x84
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	6812      	ldr	r2, [r2, #0]
 8006350:	4611      	mov	r1, r2
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	01d2      	lsls	r2, r2, #7
 8006356:	440a      	add	r2, r1
 8006358:	3284      	adds	r2, #132	; 0x84
 800635a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800635e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800636e:	4413      	add	r3, r2
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4619      	mov	r1, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	01db      	lsls	r3, r3, #7
 800637c:	440b      	add	r3, r1
 800637e:	3384      	adds	r3, #132	; 0x84
 8006380:	4619      	mov	r1, r3
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	4313      	orrs	r3, r2
 8006386:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	461a      	mov	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	01db      	lsls	r3, r3, #7
 8006392:	4413      	add	r3, r2
 8006394:	3384      	adds	r3, #132	; 0x84
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	6812      	ldr	r2, [r2, #0]
 800639c:	4611      	mov	r1, r2
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	01d2      	lsls	r2, r2, #7
 80063a2:	440a      	add	r2, r1
 80063a4:	3284      	adds	r2, #132	; 0x84
 80063a6:	f023 0307 	bic.w	r3, r3, #7
 80063aa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	461a      	mov	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	01db      	lsls	r3, r3, #7
 80063b6:	4413      	add	r3, r2
 80063b8:	3384      	adds	r3, #132	; 0x84
 80063ba:	461a      	mov	r2, r3
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80063c8:	021b      	lsls	r3, r3, #8
 80063ca:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80063d2:	041b      	lsls	r3, r3, #16
 80063d4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	061b      	lsls	r3, r3, #24
 80063dc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	461a      	mov	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	01db      	lsls	r3, r3, #7
 80063e8:	4413      	add	r3, r2
 80063ea:	3384      	adds	r3, #132	; 0x84
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	461a      	mov	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	01db      	lsls	r3, r3, #7
 80063f8:	4413      	add	r3, r2
 80063fa:	3384      	adds	r3, #132	; 0x84
 80063fc:	461a      	mov	r2, r3
 80063fe:	2300      	movs	r3, #0
 8006400:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006408:	461a      	mov	r2, r3
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	431a      	orrs	r2, r3
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	431a      	orrs	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4619      	mov	r1, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	01db      	lsls	r3, r3, #7
 800641c:	440b      	add	r3, r1
 800641e:	3384      	adds	r3, #132	; 0x84
 8006420:	4619      	mov	r1, r3
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	4313      	orrs	r3, r2
 8006426:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	461a      	mov	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	01db      	lsls	r3, r3, #7
 8006432:	4413      	add	r3, r2
 8006434:	3384      	adds	r3, #132	; 0x84
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	6812      	ldr	r2, [r2, #0]
 800643c:	4611      	mov	r1, r2
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	01d2      	lsls	r2, r2, #7
 8006442:	440a      	add	r2, r1
 8006444:	3284      	adds	r2, #132	; 0x84
 8006446:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800644a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	461a      	mov	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	01db      	lsls	r3, r3, #7
 8006456:	4413      	add	r3, r2
 8006458:	3384      	adds	r3, #132	; 0x84
 800645a:	461a      	mov	r2, r3
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	461a      	mov	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	01db      	lsls	r3, r3, #7
 800646c:	4413      	add	r3, r2
 800646e:	3384      	adds	r3, #132	; 0x84
 8006470:	69da      	ldr	r2, [r3, #28]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4619      	mov	r1, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	01db      	lsls	r3, r3, #7
 800647c:	440b      	add	r3, r1
 800647e:	3384      	adds	r3, #132	; 0x84
 8006480:	4619      	mov	r1, r3
 8006482:	4b58      	ldr	r3, [pc, #352]	; (80065e4 <LTDC_SetConfig+0x32c>)
 8006484:	4013      	ands	r3, r2
 8006486:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	69da      	ldr	r2, [r3, #28]
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	68f9      	ldr	r1, [r7, #12]
 8006492:	6809      	ldr	r1, [r1, #0]
 8006494:	4608      	mov	r0, r1
 8006496:	6879      	ldr	r1, [r7, #4]
 8006498:	01c9      	lsls	r1, r1, #7
 800649a:	4401      	add	r1, r0
 800649c:	3184      	adds	r1, #132	; 0x84
 800649e:	4313      	orrs	r3, r2
 80064a0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	461a      	mov	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	01db      	lsls	r3, r3, #7
 80064ac:	4413      	add	r3, r2
 80064ae:	3384      	adds	r3, #132	; 0x84
 80064b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	461a      	mov	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	01db      	lsls	r3, r3, #7
 80064bc:	4413      	add	r3, r2
 80064be:	3384      	adds	r3, #132	; 0x84
 80064c0:	461a      	mov	r2, r3
 80064c2:	2300      	movs	r3, #0
 80064c4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	461a      	mov	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	01db      	lsls	r3, r3, #7
 80064d0:	4413      	add	r3, r2
 80064d2:	3384      	adds	r3, #132	; 0x84
 80064d4:	461a      	mov	r2, r3
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064da:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d102      	bne.n	80064ea <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80064e4:	2304      	movs	r3, #4
 80064e6:	61fb      	str	r3, [r7, #28]
 80064e8:	e01b      	b.n	8006522 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d102      	bne.n	80064f8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80064f2:	2303      	movs	r3, #3
 80064f4:	61fb      	str	r3, [r7, #28]
 80064f6:	e014      	b.n	8006522 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d00b      	beq.n	8006518 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006504:	2b02      	cmp	r3, #2
 8006506:	d007      	beq.n	8006518 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800650c:	2b03      	cmp	r3, #3
 800650e:	d003      	beq.n	8006518 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006514:	2b07      	cmp	r3, #7
 8006516:	d102      	bne.n	800651e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006518:	2302      	movs	r3, #2
 800651a:	61fb      	str	r3, [r7, #28]
 800651c:	e001      	b.n	8006522 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800651e:	2301      	movs	r3, #1
 8006520:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	461a      	mov	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	01db      	lsls	r3, r3, #7
 800652c:	4413      	add	r3, r2
 800652e:	3384      	adds	r3, #132	; 0x84
 8006530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	6812      	ldr	r2, [r2, #0]
 8006536:	4611      	mov	r1, r2
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	01d2      	lsls	r2, r2, #7
 800653c:	440a      	add	r2, r1
 800653e:	3284      	adds	r2, #132	; 0x84
 8006540:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006544:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654a:	69fa      	ldr	r2, [r7, #28]
 800654c:	fb02 f303 	mul.w	r3, r2, r3
 8006550:	041a      	lsls	r2, r3, #16
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	6859      	ldr	r1, [r3, #4]
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	1acb      	subs	r3, r1, r3
 800655c:	69f9      	ldr	r1, [r7, #28]
 800655e:	fb01 f303 	mul.w	r3, r1, r3
 8006562:	3307      	adds	r3, #7
 8006564:	68f9      	ldr	r1, [r7, #12]
 8006566:	6809      	ldr	r1, [r1, #0]
 8006568:	4608      	mov	r0, r1
 800656a:	6879      	ldr	r1, [r7, #4]
 800656c:	01c9      	lsls	r1, r1, #7
 800656e:	4401      	add	r1, r0
 8006570:	3184      	adds	r1, #132	; 0x84
 8006572:	4313      	orrs	r3, r2
 8006574:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	461a      	mov	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	01db      	lsls	r3, r3, #7
 8006580:	4413      	add	r3, r2
 8006582:	3384      	adds	r3, #132	; 0x84
 8006584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4619      	mov	r1, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	01db      	lsls	r3, r3, #7
 8006590:	440b      	add	r3, r1
 8006592:	3384      	adds	r3, #132	; 0x84
 8006594:	4619      	mov	r1, r3
 8006596:	4b14      	ldr	r3, [pc, #80]	; (80065e8 <LTDC_SetConfig+0x330>)
 8006598:	4013      	ands	r3, r2
 800659a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	461a      	mov	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	01db      	lsls	r3, r3, #7
 80065a6:	4413      	add	r3, r2
 80065a8:	3384      	adds	r3, #132	; 0x84
 80065aa:	461a      	mov	r2, r3
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	01db      	lsls	r3, r3, #7
 80065bc:	4413      	add	r3, r2
 80065be:	3384      	adds	r3, #132	; 0x84
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	6812      	ldr	r2, [r2, #0]
 80065c6:	4611      	mov	r1, r2
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	01d2      	lsls	r2, r2, #7
 80065cc:	440a      	add	r2, r1
 80065ce:	3284      	adds	r2, #132	; 0x84
 80065d0:	f043 0301 	orr.w	r3, r3, #1
 80065d4:	6013      	str	r3, [r2, #0]
}
 80065d6:	bf00      	nop
 80065d8:	3724      	adds	r7, #36	; 0x24
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	fffff8f8 	.word	0xfffff8f8
 80065e8:	fffff800 	.word	0xfffff800

080065ec <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af02      	add	r7, sp, #8
 80065f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80065f8:	f7fc fcd0 	bl	8002f9c <HAL_GetTick>
 80065fc:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d102      	bne.n	800660a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	73fb      	strb	r3, [r7, #15]
 8006608:	e0a6      	b.n	8006758 <HAL_OSPI_Init+0x16c>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_CKCSHT         (hospi->Init.ClkChipSelectHighTime));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006614:	2b00      	cmp	r3, #0
 8006616:	f040 809f 	bne.w	8006758 <HAL_OSPI_Init+0x16c>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7fb fea2 	bl	8002364 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8006620:	f241 3188 	movw	r1, #5000	; 0x1388
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f8de 	bl	80067e6 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, clocked chip select high time, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	4b4c      	ldr	r3, [pc, #304]	; (8006764 <HAL_OSPI_Init+0x178>)
 8006632:	4013      	ands	r3, r2
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	68d1      	ldr	r1, [r2, #12]
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	6912      	ldr	r2, [r2, #16]
 800663c:	3a01      	subs	r2, #1
 800663e:	0412      	lsls	r2, r2, #16
 8006640:	4311      	orrs	r1, r2
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	6952      	ldr	r2, [r2, #20]
 8006646:	3a01      	subs	r2, #1
 8006648:	0212      	lsls	r2, r2, #8
 800664a:	4311      	orrs	r1, r2
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006650:	0112      	lsls	r2, r2, #4
 8006652:	4311      	orrs	r1, r2
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	69d2      	ldr	r2, [r2, #28]
 8006658:	4311      	orrs	r1, r2
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	6812      	ldr	r2, [r2, #0]
 800665e:	430b      	orrs	r3, r1
 8006660:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  (hospi->Init.ClkChipSelectHighTime << OCTOSPI_DCR1_CKCSHT_Pos) | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a1a      	ldr	r2, [r3, #32]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	430a      	orrs	r2, r1
 8006676:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667c:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6bda      	ldr	r2, [r3, #60]	; 0x3c
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006692:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	3b01      	subs	r3, #1
 80066a4:	021a      	lsls	r2, r3, #8
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2200      	movs	r2, #0
 80066b8:	2120      	movs	r1, #32
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 fdb8 	bl	8007230 <OSPI_WaitFlagStateUntilTimeout>
 80066c0:	4603      	mov	r3, r0
 80066c2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d146      	bne.n	8006758 <HAL_OSPI_Init+0x16c>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d8:	1e5a      	subs	r2, r3, #1
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	689a      	ldr	r2, [r3, #8]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006700:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670c:	431a      	orrs	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f042 0201 	orr.w	r2, r2, #1
 8006726:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	2b02      	cmp	r3, #2
 800672e:	d107      	bne.n	8006740 <HAL_OSPI_Init+0x154>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	689a      	ldr	r2, [r3, #8]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f042 0202 	orr.w	r2, r2, #2
 800673e:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006748:	d103      	bne.n	8006752 <HAL_OSPI_Init+0x166>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	655a      	str	r2, [r3, #84]	; 0x54
 8006750:	e002      	b.n	8006758 <HAL_OSPI_Init+0x16c>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2202      	movs	r2, #2
 8006756:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Return function status */
  return status;
 8006758:	7bfb      	ldrb	r3, [r7, #15]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	f8e0f88c 	.word	0xf8e0f88c

08006768 <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b08a      	sub	sp, #40	; 0x28
 800676c:	af02      	add	r7, sp, #8
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8006774:	f7fc fc12 	bl	8002f9c <HAL_GetTick>
 8006778:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME       (cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE      (cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677e:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d002      	beq.n	800678c <HAL_OSPI_HyperbusCfg+0x24>
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2b02      	cmp	r3, #2
 800678a:	d122      	bne.n	80067d2 <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	2200      	movs	r2, #0
 8006794:	2120      	movs	r1, #32
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f000 fd4a 	bl	8007230 <OSPI_WaitFlagStateUntilTimeout>
 800679c:	4603      	mov	r3, r0
 800679e:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80067a0:	7ffb      	ldrb	r3, [r7, #31]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d11a      	bne.n	80067dc <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	041a      	lsls	r2, r3, #16
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	021b      	lsls	r3, r3, #8
 80067b2:	431a      	orrs	r2, r3
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	ea42 0103 	orr.w	r1, r2, r3
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	68da      	ldr	r2, [r3, #12]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	430a      	orrs	r2, r1
 80067c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2202      	movs	r2, #2
 80067ce:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80067d0:	e004      	b.n	80067dc <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2210      	movs	r2, #16
 80067da:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Return function status */
  return status;
 80067dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3720      	adds	r7, #32
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b083      	sub	sp, #12
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	65da      	str	r2, [r3, #92]	; 0x5c
  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b094      	sub	sp, #80	; 0x50
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006810:	2300      	movs	r3, #0
 8006812:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8006816:	2300      	movs	r3, #0
 8006818:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4aa3      	ldr	r2, [pc, #652]	; (8006ab0 <HAL_OSPIM_Config+0x2ac>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d105      	bne.n	8006832 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8006826:	2300      	movs	r3, #0
 8006828:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 800682a:	2301      	movs	r3, #1
 800682c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8006830:	e004      	b.n	800683c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8006832:	2301      	movs	r3, #1
 8006834:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8006836:	2300      	movs	r3, #0
 8006838:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800683c:	2300      	movs	r3, #0
 800683e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006842:	e01d      	b.n	8006880 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8006844:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006848:	3301      	adds	r3, #1
 800684a:	b2d8      	uxtb	r0, r3
 800684c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8006850:	f107 0114 	add.w	r1, r7, #20
 8006854:	4613      	mov	r3, r2
 8006856:	005b      	lsls	r3, r3, #1
 8006858:	4413      	add	r3, r2
 800685a:	00db      	lsls	r3, r3, #3
 800685c:	440b      	add	r3, r1
 800685e:	4619      	mov	r1, r3
 8006860:	f000 fd1e 	bl	80072a0 <OSPIM_GetConfig>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d005      	beq.n	8006876 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2208      	movs	r2, #8
 8006874:	659a      	str	r2, [r3, #88]	; 0x58
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006876:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800687a:	3301      	adds	r3, #1
 800687c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006880:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006884:	2b01      	cmp	r3, #1
 8006886:	d9dd      	bls.n	8006844 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8006888:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800688c:	2b00      	cmp	r3, #0
 800688e:	f040 84c3 	bne.w	8007218 <HAL_OSPIM_Config+0xa14>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8006892:	4b87      	ldr	r3, [pc, #540]	; (8006ab0 <HAL_OSPIM_Config+0x2ac>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00b      	beq.n	80068b6 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800689e:	4b84      	ldr	r3, [pc, #528]	; (8006ab0 <HAL_OSPIM_Config+0x2ac>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a83      	ldr	r2, [pc, #524]	; (8006ab0 <HAL_OSPIM_Config+0x2ac>)
 80068a4:	f023 0301 	bic.w	r3, r3, #1
 80068a8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80068aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80068ae:	f043 0301 	orr.w	r3, r3, #1
 80068b2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80068b6:	4b7f      	ldr	r3, [pc, #508]	; (8006ab4 <HAL_OSPIM_Config+0x2b0>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00b      	beq.n	80068da <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80068c2:	4b7c      	ldr	r3, [pc, #496]	; (8006ab4 <HAL_OSPIM_Config+0x2b0>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a7b      	ldr	r2, [pc, #492]	; (8006ab4 <HAL_OSPIM_Config+0x2b0>)
 80068c8:	f023 0301 	bic.w	r3, r3, #1
 80068cc:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80068ce:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80068d2:	f043 0302 	orr.w	r3, r3, #2
 80068d6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80068da:	4977      	ldr	r1, [pc, #476]	; (8006ab8 <HAL_OSPIM_Config+0x2b4>)
 80068dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068de:	4613      	mov	r3, r2
 80068e0:	005b      	lsls	r3, r3, #1
 80068e2:	4413      	add	r3, r2
 80068e4:	00db      	lsls	r3, r3, #3
 80068e6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80068ea:	4413      	add	r3, r2
 80068ec:	3b34      	subs	r3, #52	; 0x34
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3b01      	subs	r3, #1
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	440b      	add	r3, r1
 80068f6:	6859      	ldr	r1, [r3, #4]
 80068f8:	486f      	ldr	r0, [pc, #444]	; (8006ab8 <HAL_OSPIM_Config+0x2b4>)
 80068fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068fc:	4613      	mov	r3, r2
 80068fe:	005b      	lsls	r3, r3, #1
 8006900:	4413      	add	r3, r2
 8006902:	00db      	lsls	r3, r3, #3
 8006904:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006908:	4413      	add	r3, r2
 800690a:	3b34      	subs	r3, #52	; 0x34
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	3b01      	subs	r3, #1
 8006910:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4403      	add	r3, r0
 8006918:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800691a:	4b67      	ldr	r3, [pc, #412]	; (8006ab8 <HAL_OSPIM_Config+0x2b4>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 80ca 	beq.w	8006abc <HAL_OSPIM_Config+0x2b8>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006928:	4b63      	ldr	r3, [pc, #396]	; (8006ab8 <HAL_OSPIM_Config+0x2b4>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a62      	ldr	r2, [pc, #392]	; (8006ab8 <HAL_OSPIM_Config+0x2b4>)
 800692e:	f023 0301 	bic.w	r3, r3, #1
 8006932:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8006934:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006938:	2b01      	cmp	r3, #1
 800693a:	f040 8178 	bne.w	8006c2e <HAL_OSPIM_Config+0x42a>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 800693e:	495e      	ldr	r1, [pc, #376]	; (8006ab8 <HAL_OSPIM_Config+0x2b4>)
 8006940:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006944:	4613      	mov	r3, r2
 8006946:	005b      	lsls	r3, r3, #1
 8006948:	4413      	add	r3, r2
 800694a:	00db      	lsls	r3, r3, #3
 800694c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006950:	4413      	add	r3, r2
 8006952:	3b3c      	subs	r3, #60	; 0x3c
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	3b01      	subs	r3, #1
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	440b      	add	r3, r1
 800695c:	6859      	ldr	r1, [r3, #4]
 800695e:	4856      	ldr	r0, [pc, #344]	; (8006ab8 <HAL_OSPIM_Config+0x2b4>)
 8006960:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006964:	4613      	mov	r3, r2
 8006966:	005b      	lsls	r3, r3, #1
 8006968:	4413      	add	r3, r2
 800696a:	00db      	lsls	r3, r3, #3
 800696c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006970:	4413      	add	r3, r2
 8006972:	3b3c      	subs	r3, #60	; 0x3c
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3b01      	subs	r3, #1
 8006978:	f041 0202 	orr.w	r2, r1, #2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4403      	add	r3, r0
 8006980:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006982:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006986:	4613      	mov	r3, r2
 8006988:	005b      	lsls	r3, r3, #1
 800698a:	4413      	add	r3, r2
 800698c:	00db      	lsls	r3, r3, #3
 800698e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006992:	4413      	add	r3, r2
 8006994:	3b38      	subs	r3, #56	; 0x38
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d021      	beq.n	80069e0 <HAL_OSPIM_Config+0x1dc>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 800699c:	4946      	ldr	r1, [pc, #280]	; (8006ab8 <HAL_OSPIM_Config+0x2b4>)
 800699e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80069a2:	4613      	mov	r3, r2
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	4413      	add	r3, r2
 80069a8:	00db      	lsls	r3, r3, #3
 80069aa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80069ae:	4413      	add	r3, r2
 80069b0:	3b38      	subs	r3, #56	; 0x38
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3b01      	subs	r3, #1
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	440b      	add	r3, r1
 80069ba:	6859      	ldr	r1, [r3, #4]
 80069bc:	483e      	ldr	r0, [pc, #248]	; (8006ab8 <HAL_OSPIM_Config+0x2b4>)
 80069be:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80069c2:	4613      	mov	r3, r2
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	4413      	add	r3, r2
 80069c8:	00db      	lsls	r3, r3, #3
 80069ca:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80069ce:	4413      	add	r3, r2
 80069d0:	3b38      	subs	r3, #56	; 0x38
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	3b01      	subs	r3, #1
 80069d6:	f041 0220 	orr.w	r2, r1, #32
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4403      	add	r3, r0
 80069de:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80069e0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80069e4:	4613      	mov	r3, r2
 80069e6:	005b      	lsls	r3, r3, #1
 80069e8:	4413      	add	r3, r2
 80069ea:	00db      	lsls	r3, r3, #3
 80069ec:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80069f0:	4413      	add	r3, r2
 80069f2:	3b30      	subs	r3, #48	; 0x30
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d025      	beq.n	8006a46 <HAL_OSPIM_Config+0x242>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 80069fa:	492f      	ldr	r1, [pc, #188]	; (8006ab8 <HAL_OSPIM_Config+0x2b4>)
 80069fc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006a00:	4613      	mov	r3, r2
 8006a02:	005b      	lsls	r3, r3, #1
 8006a04:	4413      	add	r3, r2
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006a0c:	4413      	add	r3, r2
 8006a0e:	3b30      	subs	r3, #48	; 0x30
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	440b      	add	r3, r1
 8006a1c:	6859      	ldr	r1, [r3, #4]
 8006a1e:	4826      	ldr	r0, [pc, #152]	; (8006ab8 <HAL_OSPIM_Config+0x2b4>)
 8006a20:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006a24:	4613      	mov	r3, r2
 8006a26:	005b      	lsls	r3, r3, #1
 8006a28:	4413      	add	r3, r2
 8006a2a:	00db      	lsls	r3, r3, #3
 8006a2c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006a30:	4413      	add	r3, r2
 8006a32:	3b30      	subs	r3, #48	; 0x30
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	3b01      	subs	r3, #1
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4403      	add	r3, r0
 8006a44:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006a46:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	005b      	lsls	r3, r3, #1
 8006a4e:	4413      	add	r3, r2
 8006a50:	00db      	lsls	r3, r3, #3
 8006a52:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006a56:	4413      	add	r3, r2
 8006a58:	3b2c      	subs	r3, #44	; 0x2c
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 80e6 	beq.w	8006c2e <HAL_OSPIM_Config+0x42a>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 8006a62:	4915      	ldr	r1, [pc, #84]	; (8006ab8 <HAL_OSPIM_Config+0x2b4>)
 8006a64:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006a68:	4613      	mov	r3, r2
 8006a6a:	005b      	lsls	r3, r3, #1
 8006a6c:	4413      	add	r3, r2
 8006a6e:	00db      	lsls	r3, r3, #3
 8006a70:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006a74:	4413      	add	r3, r2
 8006a76:	3b2c      	subs	r3, #44	; 0x2c
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	f003 0301 	and.w	r3, r3, #1
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	440b      	add	r3, r1
 8006a84:	6859      	ldr	r1, [r3, #4]
 8006a86:	480c      	ldr	r0, [pc, #48]	; (8006ab8 <HAL_OSPIM_Config+0x2b4>)
 8006a88:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	4413      	add	r3, r2
 8006a92:	00db      	lsls	r3, r3, #3
 8006a94:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006a98:	4413      	add	r3, r2
 8006a9a:	3b2c      	subs	r3, #44	; 0x2c
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4403      	add	r3, r0
 8006aac:	605a      	str	r2, [r3, #4]
 8006aae:	e0be      	b.n	8006c2e <HAL_OSPIM_Config+0x42a>
 8006ab0:	52005000 	.word	0x52005000
 8006ab4:	5200a000 	.word	0x5200a000
 8006ab8:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8006abc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006abe:	4613      	mov	r3, r2
 8006ac0:	005b      	lsls	r3, r3, #1
 8006ac2:	4413      	add	r3, r2
 8006ac4:	00db      	lsls	r3, r3, #3
 8006ac6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006aca:	4413      	add	r3, r2
 8006acc:	3b3c      	subs	r3, #60	; 0x3c
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 80ac 	beq.w	8006c2e <HAL_OSPIM_Config+0x42a>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8006ad6:	499d      	ldr	r1, [pc, #628]	; (8006d4c <HAL_OSPIM_Config+0x548>)
 8006ad8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ada:	4613      	mov	r3, r2
 8006adc:	005b      	lsls	r3, r3, #1
 8006ade:	4413      	add	r3, r2
 8006ae0:	00db      	lsls	r3, r3, #3
 8006ae2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006ae6:	4413      	add	r3, r2
 8006ae8:	3b3c      	subs	r3, #60	; 0x3c
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3b01      	subs	r3, #1
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	440b      	add	r3, r1
 8006af2:	6859      	ldr	r1, [r3, #4]
 8006af4:	4895      	ldr	r0, [pc, #596]	; (8006d4c <HAL_OSPIM_Config+0x548>)
 8006af6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006af8:	4613      	mov	r3, r2
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	4413      	add	r3, r2
 8006afe:	00db      	lsls	r3, r3, #3
 8006b00:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006b04:	4413      	add	r3, r2
 8006b06:	3b3c      	subs	r3, #60	; 0x3c
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	f021 0201 	bic.w	r2, r1, #1
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4403      	add	r3, r0
 8006b14:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8006b16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b18:	4613      	mov	r3, r2
 8006b1a:	005b      	lsls	r3, r3, #1
 8006b1c:	4413      	add	r3, r2
 8006b1e:	00db      	lsls	r3, r3, #3
 8006b20:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006b24:	4413      	add	r3, r2
 8006b26:	3b38      	subs	r3, #56	; 0x38
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d01f      	beq.n	8006b6e <HAL_OSPIM_Config+0x36a>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8006b2e:	4987      	ldr	r1, [pc, #540]	; (8006d4c <HAL_OSPIM_Config+0x548>)
 8006b30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b32:	4613      	mov	r3, r2
 8006b34:	005b      	lsls	r3, r3, #1
 8006b36:	4413      	add	r3, r2
 8006b38:	00db      	lsls	r3, r3, #3
 8006b3a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006b3e:	4413      	add	r3, r2
 8006b40:	3b38      	subs	r3, #56	; 0x38
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3b01      	subs	r3, #1
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	440b      	add	r3, r1
 8006b4a:	6859      	ldr	r1, [r3, #4]
 8006b4c:	487f      	ldr	r0, [pc, #508]	; (8006d4c <HAL_OSPIM_Config+0x548>)
 8006b4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b50:	4613      	mov	r3, r2
 8006b52:	005b      	lsls	r3, r3, #1
 8006b54:	4413      	add	r3, r2
 8006b56:	00db      	lsls	r3, r3, #3
 8006b58:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006b5c:	4413      	add	r3, r2
 8006b5e:	3b38      	subs	r3, #56	; 0x38
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	3b01      	subs	r3, #1
 8006b64:	f021 0210 	bic.w	r2, r1, #16
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4403      	add	r3, r0
 8006b6c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006b6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b70:	4613      	mov	r3, r2
 8006b72:	005b      	lsls	r3, r3, #1
 8006b74:	4413      	add	r3, r2
 8006b76:	00db      	lsls	r3, r3, #3
 8006b78:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006b7c:	4413      	add	r3, r2
 8006b7e:	3b30      	subs	r3, #48	; 0x30
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d023      	beq.n	8006bce <HAL_OSPIM_Config+0x3ca>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8006b86:	4971      	ldr	r1, [pc, #452]	; (8006d4c <HAL_OSPIM_Config+0x548>)
 8006b88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	005b      	lsls	r3, r3, #1
 8006b8e:	4413      	add	r3, r2
 8006b90:	00db      	lsls	r3, r3, #3
 8006b92:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006b96:	4413      	add	r3, r2
 8006b98:	3b30      	subs	r3, #48	; 0x30
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	440b      	add	r3, r1
 8006ba6:	6859      	ldr	r1, [r3, #4]
 8006ba8:	4868      	ldr	r0, [pc, #416]	; (8006d4c <HAL_OSPIM_Config+0x548>)
 8006baa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bac:	4613      	mov	r3, r2
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	4413      	add	r3, r2
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006bb8:	4413      	add	r3, r2
 8006bba:	3b30      	subs	r3, #48	; 0x30
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4403      	add	r3, r0
 8006bcc:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006bce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	005b      	lsls	r3, r3, #1
 8006bd4:	4413      	add	r3, r2
 8006bd6:	00db      	lsls	r3, r3, #3
 8006bd8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006bdc:	4413      	add	r3, r2
 8006bde:	3b2c      	subs	r3, #44	; 0x2c
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d023      	beq.n	8006c2e <HAL_OSPIM_Config+0x42a>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006be6:	4959      	ldr	r1, [pc, #356]	; (8006d4c <HAL_OSPIM_Config+0x548>)
 8006be8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bea:	4613      	mov	r3, r2
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	4413      	add	r3, r2
 8006bf0:	00db      	lsls	r3, r3, #3
 8006bf2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006bf6:	4413      	add	r3, r2
 8006bf8:	3b2c      	subs	r3, #44	; 0x2c
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	440b      	add	r3, r1
 8006c06:	6859      	ldr	r1, [r3, #4]
 8006c08:	4850      	ldr	r0, [pc, #320]	; (8006d4c <HAL_OSPIM_Config+0x548>)
 8006c0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	005b      	lsls	r3, r3, #1
 8006c10:	4413      	add	r3, r2
 8006c12:	00db      	lsls	r3, r3, #3
 8006c14:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006c18:	4413      	add	r3, r2
 8006c1a:	3b2c      	subs	r3, #44	; 0x2c
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4403      	add	r3, r0
 8006c2c:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	6819      	ldr	r1, [r3, #0]
 8006c32:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006c36:	4613      	mov	r3, r2
 8006c38:	005b      	lsls	r3, r3, #1
 8006c3a:	4413      	add	r3, r2
 8006c3c:	00db      	lsls	r3, r3, #3
 8006c3e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006c42:	4413      	add	r3, r2
 8006c44:	3b3c      	subs	r3, #60	; 0x3c
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4299      	cmp	r1, r3
 8006c4a:	d03c      	beq.n	8006cc6 <HAL_OSPIM_Config+0x4c2>
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	6859      	ldr	r1, [r3, #4]
 8006c50:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006c54:	4613      	mov	r3, r2
 8006c56:	005b      	lsls	r3, r3, #1
 8006c58:	4413      	add	r3, r2
 8006c5a:	00db      	lsls	r3, r3, #3
 8006c5c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006c60:	4413      	add	r3, r2
 8006c62:	3b38      	subs	r3, #56	; 0x38
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4299      	cmp	r1, r3
 8006c68:	d02d      	beq.n	8006cc6 <HAL_OSPIM_Config+0x4c2>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	6899      	ldr	r1, [r3, #8]
 8006c6e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006c72:	4613      	mov	r3, r2
 8006c74:	005b      	lsls	r3, r3, #1
 8006c76:	4413      	add	r3, r2
 8006c78:	00db      	lsls	r3, r3, #3
 8006c7a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006c7e:	4413      	add	r3, r2
 8006c80:	3b34      	subs	r3, #52	; 0x34
 8006c82:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006c84:	4299      	cmp	r1, r3
 8006c86:	d01e      	beq.n	8006cc6 <HAL_OSPIM_Config+0x4c2>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	68d9      	ldr	r1, [r3, #12]
 8006c8c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006c90:	4613      	mov	r3, r2
 8006c92:	005b      	lsls	r3, r3, #1
 8006c94:	4413      	add	r3, r2
 8006c96:	00db      	lsls	r3, r3, #3
 8006c98:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006c9c:	4413      	add	r3, r2
 8006c9e:	3b30      	subs	r3, #48	; 0x30
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4299      	cmp	r1, r3
 8006ca4:	d00f      	beq.n	8006cc6 <HAL_OSPIM_Config+0x4c2>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	6919      	ldr	r1, [r3, #16]
 8006caa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006cae:	4613      	mov	r3, r2
 8006cb0:	005b      	lsls	r3, r3, #1
 8006cb2:	4413      	add	r3, r2
 8006cb4:	00db      	lsls	r3, r3, #3
 8006cb6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006cba:	4413      	add	r3, r2
 8006cbc:	3b2c      	subs	r3, #44	; 0x2c
 8006cbe:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006cc0:	4299      	cmp	r1, r3
 8006cc2:	f040 811e 	bne.w	8006f02 <HAL_OSPIM_Config+0x6fe>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	6819      	ldr	r1, [r3, #0]
 8006cca:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006cce:	4613      	mov	r3, r2
 8006cd0:	005b      	lsls	r3, r3, #1
 8006cd2:	4413      	add	r3, r2
 8006cd4:	00db      	lsls	r3, r3, #3
 8006cd6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006cda:	4413      	add	r3, r2
 8006cdc:	3b3c      	subs	r3, #60	; 0x3c
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4299      	cmp	r1, r3
 8006ce2:	d135      	bne.n	8006d50 <HAL_OSPIM_Config+0x54c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	6859      	ldr	r1, [r3, #4]
 8006ce8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006cec:	4613      	mov	r3, r2
 8006cee:	005b      	lsls	r3, r3, #1
 8006cf0:	4413      	add	r3, r2
 8006cf2:	00db      	lsls	r3, r3, #3
 8006cf4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006cf8:	4413      	add	r3, r2
 8006cfa:	3b38      	subs	r3, #56	; 0x38
 8006cfc:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8006cfe:	4299      	cmp	r1, r3
 8006d00:	d126      	bne.n	8006d50 <HAL_OSPIM_Config+0x54c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	68d9      	ldr	r1, [r3, #12]
 8006d06:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	005b      	lsls	r3, r3, #1
 8006d0e:	4413      	add	r3, r2
 8006d10:	00db      	lsls	r3, r3, #3
 8006d12:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006d16:	4413      	add	r3, r2
 8006d18:	3b30      	subs	r3, #48	; 0x30
 8006d1a:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8006d1c:	4299      	cmp	r1, r3
 8006d1e:	d117      	bne.n	8006d50 <HAL_OSPIM_Config+0x54c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	6919      	ldr	r1, [r3, #16]
 8006d24:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006d28:	4613      	mov	r3, r2
 8006d2a:	005b      	lsls	r3, r3, #1
 8006d2c:	4413      	add	r3, r2
 8006d2e:	00db      	lsls	r3, r3, #3
 8006d30:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006d34:	4413      	add	r3, r2
 8006d36:	3b2c      	subs	r3, #44	; 0x2c
 8006d38:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8006d3a:	4299      	cmp	r1, r3
 8006d3c:	d108      	bne.n	8006d50 <HAL_OSPIM_Config+0x54c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006d3e:	4b03      	ldr	r3, [pc, #12]	; (8006d4c <HAL_OSPIM_Config+0x548>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a02      	ldr	r2, [pc, #8]	; (8006d4c <HAL_OSPIM_Config+0x548>)
 8006d44:	f043 0301 	orr.w	r3, r3, #1
 8006d48:	6013      	str	r3, [r2, #0]
 8006d4a:	e0da      	b.n	8006f02 <HAL_OSPIM_Config+0x6fe>
 8006d4c:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8006d50:	49c2      	ldr	r1, [pc, #776]	; (800705c <HAL_OSPIM_Config+0x858>)
 8006d52:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006d56:	4613      	mov	r3, r2
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	4413      	add	r3, r2
 8006d5c:	00db      	lsls	r3, r3, #3
 8006d5e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006d62:	4413      	add	r3, r2
 8006d64:	3b3c      	subs	r3, #60	; 0x3c
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	440b      	add	r3, r1
 8006d6e:	6859      	ldr	r1, [r3, #4]
 8006d70:	48ba      	ldr	r0, [pc, #744]	; (800705c <HAL_OSPIM_Config+0x858>)
 8006d72:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006d76:	4613      	mov	r3, r2
 8006d78:	005b      	lsls	r3, r3, #1
 8006d7a:	4413      	add	r3, r2
 8006d7c:	00db      	lsls	r3, r3, #3
 8006d7e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006d82:	4413      	add	r3, r2
 8006d84:	3b3c      	subs	r3, #60	; 0x3c
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	f021 0201 	bic.w	r2, r1, #1
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4403      	add	r3, r0
 8006d92:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006d94:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006d98:	4613      	mov	r3, r2
 8006d9a:	005b      	lsls	r3, r3, #1
 8006d9c:	4413      	add	r3, r2
 8006d9e:	00db      	lsls	r3, r3, #3
 8006da0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006da4:	4413      	add	r3, r2
 8006da6:	3b38      	subs	r3, #56	; 0x38
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d021      	beq.n	8006df2 <HAL_OSPIM_Config+0x5ee>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8006dae:	49ab      	ldr	r1, [pc, #684]	; (800705c <HAL_OSPIM_Config+0x858>)
 8006db0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006db4:	4613      	mov	r3, r2
 8006db6:	005b      	lsls	r3, r3, #1
 8006db8:	4413      	add	r3, r2
 8006dba:	00db      	lsls	r3, r3, #3
 8006dbc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006dc0:	4413      	add	r3, r2
 8006dc2:	3b38      	subs	r3, #56	; 0x38
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	440b      	add	r3, r1
 8006dcc:	6859      	ldr	r1, [r3, #4]
 8006dce:	48a3      	ldr	r0, [pc, #652]	; (800705c <HAL_OSPIM_Config+0x858>)
 8006dd0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	005b      	lsls	r3, r3, #1
 8006dd8:	4413      	add	r3, r2
 8006dda:	00db      	lsls	r3, r3, #3
 8006ddc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006de0:	4413      	add	r3, r2
 8006de2:	3b38      	subs	r3, #56	; 0x38
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3b01      	subs	r3, #1
 8006de8:	f021 0210 	bic.w	r2, r1, #16
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4403      	add	r3, r0
 8006df0:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8006df2:	499a      	ldr	r1, [pc, #616]	; (800705c <HAL_OSPIM_Config+0x858>)
 8006df4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006df8:	4613      	mov	r3, r2
 8006dfa:	005b      	lsls	r3, r3, #1
 8006dfc:	4413      	add	r3, r2
 8006dfe:	00db      	lsls	r3, r3, #3
 8006e00:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006e04:	4413      	add	r3, r2
 8006e06:	3b34      	subs	r3, #52	; 0x34
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	440b      	add	r3, r1
 8006e10:	6859      	ldr	r1, [r3, #4]
 8006e12:	4892      	ldr	r0, [pc, #584]	; (800705c <HAL_OSPIM_Config+0x858>)
 8006e14:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006e18:	4613      	mov	r3, r2
 8006e1a:	005b      	lsls	r3, r3, #1
 8006e1c:	4413      	add	r3, r2
 8006e1e:	00db      	lsls	r3, r3, #3
 8006e20:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006e24:	4413      	add	r3, r2
 8006e26:	3b34      	subs	r3, #52	; 0x34
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4403      	add	r3, r0
 8006e34:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006e36:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	005b      	lsls	r3, r3, #1
 8006e3e:	4413      	add	r3, r2
 8006e40:	00db      	lsls	r3, r3, #3
 8006e42:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006e46:	4413      	add	r3, r2
 8006e48:	3b30      	subs	r3, #48	; 0x30
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d025      	beq.n	8006e9c <HAL_OSPIM_Config+0x698>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8006e50:	4982      	ldr	r1, [pc, #520]	; (800705c <HAL_OSPIM_Config+0x858>)
 8006e52:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006e56:	4613      	mov	r3, r2
 8006e58:	005b      	lsls	r3, r3, #1
 8006e5a:	4413      	add	r3, r2
 8006e5c:	00db      	lsls	r3, r3, #3
 8006e5e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006e62:	4413      	add	r3, r2
 8006e64:	3b30      	subs	r3, #48	; 0x30
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	f003 0301 	and.w	r3, r3, #1
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	440b      	add	r3, r1
 8006e72:	6859      	ldr	r1, [r3, #4]
 8006e74:	4879      	ldr	r0, [pc, #484]	; (800705c <HAL_OSPIM_Config+0x858>)
 8006e76:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	005b      	lsls	r3, r3, #1
 8006e7e:	4413      	add	r3, r2
 8006e80:	00db      	lsls	r3, r3, #3
 8006e82:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006e86:	4413      	add	r3, r2
 8006e88:	3b30      	subs	r3, #48	; 0x30
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4403      	add	r3, r0
 8006e9a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006e9c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	005b      	lsls	r3, r3, #1
 8006ea4:	4413      	add	r3, r2
 8006ea6:	00db      	lsls	r3, r3, #3
 8006ea8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006eac:	4413      	add	r3, r2
 8006eae:	3b2c      	subs	r3, #44	; 0x2c
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d025      	beq.n	8006f02 <HAL_OSPIM_Config+0x6fe>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8006eb6:	4969      	ldr	r1, [pc, #420]	; (800705c <HAL_OSPIM_Config+0x858>)
 8006eb8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	4413      	add	r3, r2
 8006ec2:	00db      	lsls	r3, r3, #3
 8006ec4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006ec8:	4413      	add	r3, r2
 8006eca:	3b2c      	subs	r3, #44	; 0x2c
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	f003 0301 	and.w	r3, r3, #1
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	440b      	add	r3, r1
 8006ed8:	6859      	ldr	r1, [r3, #4]
 8006eda:	4860      	ldr	r0, [pc, #384]	; (800705c <HAL_OSPIM_Config+0x858>)
 8006edc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	005b      	lsls	r3, r3, #1
 8006ee4:	4413      	add	r3, r2
 8006ee6:	00db      	lsls	r3, r3, #3
 8006ee8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006eec:	4413      	add	r3, r2
 8006eee:	3b2c      	subs	r3, #44	; 0x2c
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4403      	add	r3, r0
 8006f00:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8006f02:	4a56      	ldr	r2, [pc, #344]	; (800705c <HAL_OSPIM_Config+0x858>)
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f16:	025b      	lsls	r3, r3, #9
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	4950      	ldr	r1, [pc, #320]	; (800705c <HAL_OSPIM_Config+0x858>)
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	3b01      	subs	r3, #1
 8006f22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	440b      	add	r3, r1
 8006f2a:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	1e5a      	subs	r2, r3, #1
 8006f32:	4b4a      	ldr	r3, [pc, #296]	; (800705c <HAL_OSPIM_Config+0x858>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	0c1b      	lsrs	r3, r3, #16
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d90a      	bls.n	8006f54 <HAL_OSPIM_Config+0x750>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8006f3e:	4b47      	ldr	r3, [pc, #284]	; (800705c <HAL_OSPIM_Config+0x858>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	041b      	lsls	r3, r3, #16
 8006f4e:	4943      	ldr	r1, [pc, #268]	; (800705c <HAL_OSPIM_Config+0x858>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006f54:	4b41      	ldr	r3, [pc, #260]	; (800705c <HAL_OSPIM_Config+0x858>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f000 809b 	beq.w	8007098 <HAL_OSPIM_Config+0x894>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8006f62:	4a3e      	ldr	r2, [pc, #248]	; (800705c <HAL_OSPIM_Config+0x858>)
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f023 0203 	bic.w	r2, r3, #3
 8006f74:	4939      	ldr	r1, [pc, #228]	; (800705c <HAL_OSPIM_Config+0x858>)
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	f042 0201 	orr.w	r2, r2, #1
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	440b      	add	r3, r1
 8006f84:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d011      	beq.n	8006fb2 <HAL_OSPIM_Config+0x7ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8006f8e:	4a33      	ldr	r2, [pc, #204]	; (800705c <HAL_OSPIM_Config+0x858>)
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	3b01      	subs	r3, #1
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006fa0:	492e      	ldr	r1, [pc, #184]	; (800705c <HAL_OSPIM_Config+0x858>)
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	f042 0210 	orr.w	r2, r2, #16
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	440b      	add	r3, r1
 8006fb0:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d016      	beq.n	8006fec <HAL_OSPIM_Config+0x7e8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8006fbe:	4a27      	ldr	r2, [pc, #156]	; (800705c <HAL_OSPIM_Config+0x858>)
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4413      	add	r3, r2
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006fd4:	4921      	ldr	r1, [pc, #132]	; (800705c <HAL_OSPIM_Config+0x858>)
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	440b      	add	r3, r1
 8006fe8:	605a      	str	r2, [r3, #4]
 8006fea:	e019      	b.n	8007020 <HAL_OSPIM_Config+0x81c>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d015      	beq.n	8007020 <HAL_OSPIM_Config+0x81c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8006ff4:	4a19      	ldr	r2, [pc, #100]	; (800705c <HAL_OSPIM_Config+0x858>)
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800700a:	4914      	ldr	r1, [pc, #80]	; (800705c <HAL_OSPIM_Config+0x858>)
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	3b01      	subs	r3, #1
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	440b      	add	r3, r1
 800701e:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d019      	beq.n	8007060 <HAL_OSPIM_Config+0x85c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800702c:	4a0b      	ldr	r2, [pc, #44]	; (800705c <HAL_OSPIM_Config+0x858>)
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	3b01      	subs	r3, #1
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007042:	4906      	ldr	r1, [pc, #24]	; (800705c <HAL_OSPIM_Config+0x858>)
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	3b01      	subs	r3, #1
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	440b      	add	r3, r1
 8007056:	605a      	str	r2, [r3, #4]
 8007058:	e0c6      	b.n	80071e8 <HAL_OSPIM_Config+0x9e4>
 800705a:	bf00      	nop
 800705c:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	2b00      	cmp	r3, #0
 8007066:	f000 80bf 	beq.w	80071e8 <HAL_OSPIM_Config+0x9e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800706a:	4a6e      	ldr	r2, [pc, #440]	; (8007224 <HAL_OSPIM_Config+0xa20>)
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	3b01      	subs	r3, #1
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007080:	4968      	ldr	r1, [pc, #416]	; (8007224 <HAL_OSPIM_Config+0xa20>)
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	3b01      	subs	r3, #1
 8007088:	f003 0301 	and.w	r3, r3, #1
 800708c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	440b      	add	r3, r1
 8007094:	605a      	str	r2, [r3, #4]
 8007096:	e0a7      	b.n	80071e8 <HAL_OSPIM_Config+0x9e4>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8007098:	4a62      	ldr	r2, [pc, #392]	; (8007224 <HAL_OSPIM_Config+0xa20>)
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	3b01      	subs	r3, #1
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4413      	add	r3, r2
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f023 0203 	bic.w	r2, r3, #3
 80070aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070ac:	005b      	lsls	r3, r3, #1
 80070ae:	431a      	orrs	r2, r3
 80070b0:	495c      	ldr	r1, [pc, #368]	; (8007224 <HAL_OSPIM_Config+0xa20>)
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	3b01      	subs	r3, #1
 80070b8:	f042 0201 	orr.w	r2, r2, #1
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	440b      	add	r3, r1
 80070c0:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d014      	beq.n	80070f4 <HAL_OSPIM_Config+0x8f0>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80070ca:	4a56      	ldr	r2, [pc, #344]	; (8007224 <HAL_OSPIM_Config+0xa20>)
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	3b01      	subs	r3, #1
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80070dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070de:	015b      	lsls	r3, r3, #5
 80070e0:	431a      	orrs	r2, r3
 80070e2:	4950      	ldr	r1, [pc, #320]	; (8007224 <HAL_OSPIM_Config+0xa20>)
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	3b01      	subs	r3, #1
 80070ea:	f042 0210 	orr.w	r2, r2, #16
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	440b      	add	r3, r1
 80070f2:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d019      	beq.n	8007134 <HAL_OSPIM_Config+0x930>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8007100:	4a48      	ldr	r2, [pc, #288]	; (8007224 <HAL_OSPIM_Config+0xa20>)
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	3b01      	subs	r3, #1
 8007108:	f003 0301 	and.w	r3, r3, #1
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007118:	049b      	lsls	r3, r3, #18
 800711a:	431a      	orrs	r2, r3
 800711c:	4941      	ldr	r1, [pc, #260]	; (8007224 <HAL_OSPIM_Config+0xa20>)
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	3b01      	subs	r3, #1
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	440b      	add	r3, r1
 8007130:	605a      	str	r2, [r3, #4]
 8007132:	e01c      	b.n	800716e <HAL_OSPIM_Config+0x96a>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d018      	beq.n	800716e <HAL_OSPIM_Config+0x96a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800713c:	4a39      	ldr	r2, [pc, #228]	; (8007224 <HAL_OSPIM_Config+0xa20>)
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	3b01      	subs	r3, #1
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007154:	069b      	lsls	r3, r3, #26
 8007156:	431a      	orrs	r2, r3
 8007158:	4932      	ldr	r1, [pc, #200]	; (8007224 <HAL_OSPIM_Config+0xa20>)
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	3b01      	subs	r3, #1
 8007160:	f003 0301 	and.w	r3, r3, #1
 8007164:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	440b      	add	r3, r1
 800716c:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d019      	beq.n	80071ae <HAL_OSPIM_Config+0x9aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800717a:	4a2a      	ldr	r2, [pc, #168]	; (8007224 <HAL_OSPIM_Config+0xa20>)
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	3b01      	subs	r3, #1
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4413      	add	r3, r2
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007192:	049b      	lsls	r3, r3, #18
 8007194:	431a      	orrs	r2, r3
 8007196:	4923      	ldr	r1, [pc, #140]	; (8007224 <HAL_OSPIM_Config+0xa20>)
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	3b01      	subs	r3, #1
 800719e:	f003 0301 	and.w	r3, r3, #1
 80071a2:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	440b      	add	r3, r1
 80071aa:	605a      	str	r2, [r3, #4]
 80071ac:	e01c      	b.n	80071e8 <HAL_OSPIM_Config+0x9e4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d018      	beq.n	80071e8 <HAL_OSPIM_Config+0x9e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80071b6:	4a1b      	ldr	r2, [pc, #108]	; (8007224 <HAL_OSPIM_Config+0xa20>)
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	3b01      	subs	r3, #1
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4413      	add	r3, r2
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80071cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ce:	069b      	lsls	r3, r3, #26
 80071d0:	431a      	orrs	r2, r3
 80071d2:	4914      	ldr	r1, [pc, #80]	; (8007224 <HAL_OSPIM_Config+0xa20>)
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	3b01      	subs	r3, #1
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	440b      	add	r3, r1
 80071e6:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80071e8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80071ec:	f003 0301 	and.w	r3, r3, #1
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d005      	beq.n	8007200 <HAL_OSPIM_Config+0x9fc>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80071f4:	4b0c      	ldr	r3, [pc, #48]	; (8007228 <HAL_OSPIM_Config+0xa24>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a0b      	ldr	r2, [pc, #44]	; (8007228 <HAL_OSPIM_Config+0xa24>)
 80071fa:	f043 0301 	orr.w	r3, r3, #1
 80071fe:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8007200:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007204:	f003 0302 	and.w	r3, r3, #2
 8007208:	2b00      	cmp	r3, #0
 800720a:	d005      	beq.n	8007218 <HAL_OSPIM_Config+0xa14>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800720c:	4b07      	ldr	r3, [pc, #28]	; (800722c <HAL_OSPIM_Config+0xa28>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a06      	ldr	r2, [pc, #24]	; (800722c <HAL_OSPIM_Config+0xa28>)
 8007212:	f043 0301 	orr.w	r3, r3, #1
 8007216:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8007218:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800721c:	4618      	mov	r0, r3
 800721e:	3750      	adds	r7, #80	; 0x50
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	5200b400 	.word	0x5200b400
 8007228:	52005000 	.word	0x52005000
 800722c:	5200a000 	.word	0x5200a000

08007230 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	603b      	str	r3, [r7, #0]
 800723c:	4613      	mov	r3, r2
 800723e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007240:	e01a      	b.n	8007278 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007248:	d016      	beq.n	8007278 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800724a:	f7fb fea7 	bl	8002f9c <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	429a      	cmp	r2, r3
 8007258:	d302      	bcc.n	8007260 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10b      	bne.n	8007278 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007266:	655a      	str	r2, [r3, #84]	; 0x54
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800726c:	f043 0201 	orr.w	r2, r3, #1
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e00e      	b.n	8007296 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	6a1a      	ldr	r2, [r3, #32]
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	4013      	ands	r3, r2
 8007282:	2b00      	cmp	r3, #0
 8007284:	bf14      	ite	ne
 8007286:	2301      	movne	r3, #1
 8007288:	2300      	moveq	r3, #0
 800728a:	b2db      	uxtb	r3, r3
 800728c:	461a      	mov	r2, r3
 800728e:	79fb      	ldrb	r3, [r7, #7]
 8007290:	429a      	cmp	r2, r3
 8007292:	d1d6      	bne.n	8007242 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
	...

080072a0 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b087      	sub	sp, #28
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	4603      	mov	r3, r0
 80072a8:	6039      	str	r1, [r7, #0]
 80072aa:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80072ac:	2300      	movs	r3, #0
 80072ae:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80072b0:	2300      	movs	r3, #0
 80072b2:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80072b4:	79fb      	ldrb	r3, [r7, #7]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d005      	beq.n	80072c6 <OSPIM_GetConfig+0x26>
 80072ba:	79fb      	ldrb	r3, [r7, #7]
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d802      	bhi.n	80072c6 <OSPIM_GetConfig+0x26>
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d102      	bne.n	80072cc <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	75fb      	strb	r3, [r7, #23]
 80072ca:	e098      	b.n	80073fe <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	2200      	movs	r2, #0
 80072d0:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2200      	movs	r2, #0
 80072d6:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	2200      	movs	r2, #0
 80072dc:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	2200      	movs	r2, #0
 80072e2:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	2200      	movs	r2, #0
 80072e8:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80072ea:	79fb      	ldrb	r3, [r7, #7]
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d10b      	bne.n	8007308 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 80072f0:	4b46      	ldr	r3, [pc, #280]	; (800740c <OSPIM_GetConfig+0x16c>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0301 	and.w	r3, r3, #1
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d102      	bne.n	8007302 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80072fc:	4b44      	ldr	r3, [pc, #272]	; (8007410 <OSPIM_GetConfig+0x170>)
 80072fe:	613b      	str	r3, [r7, #16]
 8007300:	e002      	b.n	8007308 <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8007302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007306:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007308:	2300      	movs	r3, #0
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	e074      	b.n	80073f8 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800730e:	4a3f      	ldr	r2, [pc, #252]	; (800740c <OSPIM_GetConfig+0x16c>)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	f003 0301 	and.w	r3, r3, #1
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00a      	beq.n	800733a <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	4053      	eors	r3, r2
 800732a:	f003 0302 	and.w	r3, r3, #2
 800732e:	2b00      	cmp	r3, #0
 8007330:	d103      	bne.n	800733a <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	1c5a      	adds	r2, r3, #1
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	f003 0310 	and.w	r3, r3, #16
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00a      	beq.n	800735a <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	4053      	eors	r3, r2
 800734a:	f003 0320 	and.w	r3, r3, #32
 800734e:	2b00      	cmp	r3, #0
 8007350:	d103      	bne.n	800735a <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	1c5a      	adds	r2, r3, #1
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00a      	beq.n	800737a <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	4053      	eors	r3, r2
 800736a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800736e:	2b00      	cmp	r3, #0
 8007370:	d103      	bne.n	800737a <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	1c5a      	adds	r2, r3, #1
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d018      	beq.n	80073b6 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	4053      	eors	r3, r2
 800738a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d111      	bne.n	80073b6 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d106      	bne.n	80073aa <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	3301      	adds	r3, #1
 80073a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	60da      	str	r2, [r3, #12]
 80073a8:	e005      	b.n	80073b6 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	3301      	adds	r3, #1
 80073ae:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d018      	beq.n	80073f2 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	4053      	eors	r3, r2
 80073c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d111      	bne.n	80073f2 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d106      	bne.n	80073e6 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	3301      	adds	r3, #1
 80073dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	611a      	str	r2, [r3, #16]
 80073e4:	e005      	b.n	80073f2 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	3301      	adds	r3, #1
 80073ea:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	3301      	adds	r3, #1
 80073f6:	60fb      	str	r3, [r7, #12]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d987      	bls.n	800730e <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 80073fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007400:	4618      	mov	r0, r3
 8007402:	371c      	adds	r7, #28
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	5200b400 	.word	0x5200b400
 8007410:	04040222 	.word	0x04040222

08007414 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800741c:	4b29      	ldr	r3, [pc, #164]	; (80074c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	f003 0307 	and.w	r3, r3, #7
 8007424:	2b06      	cmp	r3, #6
 8007426:	d00a      	beq.n	800743e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007428:	4b26      	ldr	r3, [pc, #152]	; (80074c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	429a      	cmp	r2, r3
 8007434:	d001      	beq.n	800743a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e03f      	b.n	80074ba <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	e03d      	b.n	80074ba <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800743e:	4b21      	ldr	r3, [pc, #132]	; (80074c4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8007446:	491f      	ldr	r1, [pc, #124]	; (80074c4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4313      	orrs	r3, r2
 800744c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800744e:	f7fb fda5 	bl	8002f9c <HAL_GetTick>
 8007452:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007454:	e009      	b.n	800746a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007456:	f7fb fda1 	bl	8002f9c <HAL_GetTick>
 800745a:	4602      	mov	r2, r0
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007464:	d901      	bls.n	800746a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e027      	b.n	80074ba <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800746a:	4b16      	ldr	r3, [pc, #88]	; (80074c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007476:	d1ee      	bne.n	8007456 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b1e      	cmp	r3, #30
 800747c:	d008      	beq.n	8007490 <HAL_PWREx_ConfigSupply+0x7c>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2b2e      	cmp	r3, #46	; 0x2e
 8007482:	d005      	beq.n	8007490 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b1d      	cmp	r3, #29
 8007488:	d002      	beq.n	8007490 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b2d      	cmp	r3, #45	; 0x2d
 800748e:	d113      	bne.n	80074b8 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007490:	f7fb fd84 	bl	8002f9c <HAL_GetTick>
 8007494:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007496:	e009      	b.n	80074ac <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007498:	f7fb fd80 	bl	8002f9c <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074a6:	d901      	bls.n	80074ac <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e006      	b.n	80074ba <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80074ac:	4b05      	ldr	r3, [pc, #20]	; (80074c4 <HAL_PWREx_ConfigSupply+0xb0>)
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	f003 0311 	and.w	r3, r3, #17
 80074b4:	2b11      	cmp	r3, #17
 80074b6:	d1ef      	bne.n	8007498 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	58024800 	.word	0x58024800

080074c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b08c      	sub	sp, #48	; 0x30
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d101      	bne.n	80074da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e397      	b.n	8007c0a <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f000 8087 	beq.w	80075f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074e8:	4b9e      	ldr	r3, [pc, #632]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80074f2:	4b9c      	ldr	r3, [pc, #624]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 80074f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80074f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fa:	2b10      	cmp	r3, #16
 80074fc:	d007      	beq.n	800750e <HAL_RCC_OscConfig+0x46>
 80074fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007500:	2b18      	cmp	r3, #24
 8007502:	d110      	bne.n	8007526 <HAL_RCC_OscConfig+0x5e>
 8007504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007506:	f003 0303 	and.w	r3, r3, #3
 800750a:	2b02      	cmp	r3, #2
 800750c:	d10b      	bne.n	8007526 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800750e:	4b95      	ldr	r3, [pc, #596]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d06c      	beq.n	80075f4 <HAL_RCC_OscConfig+0x12c>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d168      	bne.n	80075f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e371      	b.n	8007c0a <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800752e:	d106      	bne.n	800753e <HAL_RCC_OscConfig+0x76>
 8007530:	4b8c      	ldr	r3, [pc, #560]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a8b      	ldr	r2, [pc, #556]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 8007536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800753a:	6013      	str	r3, [r2, #0]
 800753c:	e02e      	b.n	800759c <HAL_RCC_OscConfig+0xd4>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10c      	bne.n	8007560 <HAL_RCC_OscConfig+0x98>
 8007546:	4b87      	ldr	r3, [pc, #540]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a86      	ldr	r2, [pc, #536]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 800754c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007550:	6013      	str	r3, [r2, #0]
 8007552:	4b84      	ldr	r3, [pc, #528]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a83      	ldr	r2, [pc, #524]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 8007558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800755c:	6013      	str	r3, [r2, #0]
 800755e:	e01d      	b.n	800759c <HAL_RCC_OscConfig+0xd4>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007568:	d10c      	bne.n	8007584 <HAL_RCC_OscConfig+0xbc>
 800756a:	4b7e      	ldr	r3, [pc, #504]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a7d      	ldr	r2, [pc, #500]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 8007570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007574:	6013      	str	r3, [r2, #0]
 8007576:	4b7b      	ldr	r3, [pc, #492]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a7a      	ldr	r2, [pc, #488]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 800757c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007580:	6013      	str	r3, [r2, #0]
 8007582:	e00b      	b.n	800759c <HAL_RCC_OscConfig+0xd4>
 8007584:	4b77      	ldr	r3, [pc, #476]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a76      	ldr	r2, [pc, #472]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 800758a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800758e:	6013      	str	r3, [r2, #0]
 8007590:	4b74      	ldr	r3, [pc, #464]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a73      	ldr	r2, [pc, #460]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 8007596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800759a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d013      	beq.n	80075cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075a4:	f7fb fcfa 	bl	8002f9c <HAL_GetTick>
 80075a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80075aa:	e008      	b.n	80075be <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075ac:	f7fb fcf6 	bl	8002f9c <HAL_GetTick>
 80075b0:	4602      	mov	r2, r0
 80075b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	2b64      	cmp	r3, #100	; 0x64
 80075b8:	d901      	bls.n	80075be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e325      	b.n	8007c0a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80075be:	4b69      	ldr	r3, [pc, #420]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d0f0      	beq.n	80075ac <HAL_RCC_OscConfig+0xe4>
 80075ca:	e014      	b.n	80075f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075cc:	f7fb fce6 	bl	8002f9c <HAL_GetTick>
 80075d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80075d2:	e008      	b.n	80075e6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075d4:	f7fb fce2 	bl	8002f9c <HAL_GetTick>
 80075d8:	4602      	mov	r2, r0
 80075da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	2b64      	cmp	r3, #100	; 0x64
 80075e0:	d901      	bls.n	80075e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e311      	b.n	8007c0a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80075e6:	4b5f      	ldr	r3, [pc, #380]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1f0      	bne.n	80075d4 <HAL_RCC_OscConfig+0x10c>
 80075f2:	e000      	b.n	80075f6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0302 	and.w	r3, r3, #2
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f000 808a 	beq.w	8007718 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007604:	4b57      	ldr	r3, [pc, #348]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800760c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800760e:	4b55      	ldr	r3, [pc, #340]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 8007610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007612:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d007      	beq.n	800762a <HAL_RCC_OscConfig+0x162>
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	2b18      	cmp	r3, #24
 800761e:	d137      	bne.n	8007690 <HAL_RCC_OscConfig+0x1c8>
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	f003 0303 	and.w	r3, r3, #3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d132      	bne.n	8007690 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800762a:	4b4e      	ldr	r3, [pc, #312]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0304 	and.w	r3, r3, #4
 8007632:	2b00      	cmp	r3, #0
 8007634:	d005      	beq.n	8007642 <HAL_RCC_OscConfig+0x17a>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d101      	bne.n	8007642 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e2e3      	b.n	8007c0a <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007642:	4b48      	ldr	r3, [pc, #288]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f023 0219 	bic.w	r2, r3, #25
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	4945      	ldr	r1, [pc, #276]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 8007650:	4313      	orrs	r3, r2
 8007652:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007654:	f7fb fca2 	bl	8002f9c <HAL_GetTick>
 8007658:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800765a:	e008      	b.n	800766e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800765c:	f7fb fc9e 	bl	8002f9c <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b02      	cmp	r3, #2
 8007668:	d901      	bls.n	800766e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e2cd      	b.n	8007c0a <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800766e:	4b3d      	ldr	r3, [pc, #244]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0304 	and.w	r3, r3, #4
 8007676:	2b00      	cmp	r3, #0
 8007678:	d0f0      	beq.n	800765c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800767a:	4b3a      	ldr	r3, [pc, #232]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	061b      	lsls	r3, r3, #24
 8007688:	4936      	ldr	r1, [pc, #216]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 800768a:	4313      	orrs	r3, r2
 800768c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800768e:	e043      	b.n	8007718 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d026      	beq.n	80076e6 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007698:	4b32      	ldr	r3, [pc, #200]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f023 0219 	bic.w	r2, r3, #25
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	492f      	ldr	r1, [pc, #188]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076aa:	f7fb fc77 	bl	8002f9c <HAL_GetTick>
 80076ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076b0:	e008      	b.n	80076c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076b2:	f7fb fc73 	bl	8002f9c <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d901      	bls.n	80076c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e2a2      	b.n	8007c0a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076c4:	4b27      	ldr	r3, [pc, #156]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0304 	and.w	r3, r3, #4
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d0f0      	beq.n	80076b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076d0:	4b24      	ldr	r3, [pc, #144]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	061b      	lsls	r3, r3, #24
 80076de:	4921      	ldr	r1, [pc, #132]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	604b      	str	r3, [r1, #4]
 80076e4:	e018      	b.n	8007718 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076e6:	4b1f      	ldr	r3, [pc, #124]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a1e      	ldr	r2, [pc, #120]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 80076ec:	f023 0301 	bic.w	r3, r3, #1
 80076f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076f2:	f7fb fc53 	bl	8002f9c <HAL_GetTick>
 80076f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80076f8:	e008      	b.n	800770c <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076fa:	f7fb fc4f 	bl	8002f9c <HAL_GetTick>
 80076fe:	4602      	mov	r2, r0
 8007700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	2b02      	cmp	r3, #2
 8007706:	d901      	bls.n	800770c <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8007708:	2303      	movs	r3, #3
 800770a:	e27e      	b.n	8007c0a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800770c:	4b15      	ldr	r3, [pc, #84]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0304 	and.w	r3, r3, #4
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1f0      	bne.n	80076fa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0310 	and.w	r3, r3, #16
 8007720:	2b00      	cmp	r3, #0
 8007722:	d06d      	beq.n	8007800 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007724:	4b0f      	ldr	r3, [pc, #60]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800772c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800772e:	4b0d      	ldr	r3, [pc, #52]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 8007730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007732:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	2b08      	cmp	r3, #8
 8007738:	d007      	beq.n	800774a <HAL_RCC_OscConfig+0x282>
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	2b18      	cmp	r3, #24
 800773e:	d11e      	bne.n	800777e <HAL_RCC_OscConfig+0x2b6>
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	f003 0303 	and.w	r3, r3, #3
 8007746:	2b01      	cmp	r3, #1
 8007748:	d119      	bne.n	800777e <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800774a:	4b06      	ldr	r3, [pc, #24]	; (8007764 <HAL_RCC_OscConfig+0x29c>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007752:	2b00      	cmp	r3, #0
 8007754:	d008      	beq.n	8007768 <HAL_RCC_OscConfig+0x2a0>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	69db      	ldr	r3, [r3, #28]
 800775a:	2b80      	cmp	r3, #128	; 0x80
 800775c:	d004      	beq.n	8007768 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e253      	b.n	8007c0a <HAL_RCC_OscConfig+0x742>
 8007762:	bf00      	nop
 8007764:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007768:	4ba3      	ldr	r3, [pc, #652]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a1b      	ldr	r3, [r3, #32]
 8007774:	061b      	lsls	r3, r3, #24
 8007776:	49a0      	ldr	r1, [pc, #640]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 8007778:	4313      	orrs	r3, r2
 800777a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800777c:	e040      	b.n	8007800 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d023      	beq.n	80077ce <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007786:	4b9c      	ldr	r3, [pc, #624]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a9b      	ldr	r2, [pc, #620]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 800778c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007792:	f7fb fc03 	bl	8002f9c <HAL_GetTick>
 8007796:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007798:	e008      	b.n	80077ac <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800779a:	f7fb fbff 	bl	8002f9c <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d901      	bls.n	80077ac <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e22e      	b.n	8007c0a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80077ac:	4b92      	ldr	r3, [pc, #584]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d0f0      	beq.n	800779a <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80077b8:	4b8f      	ldr	r3, [pc, #572]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a1b      	ldr	r3, [r3, #32]
 80077c4:	061b      	lsls	r3, r3, #24
 80077c6:	498c      	ldr	r1, [pc, #560]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	60cb      	str	r3, [r1, #12]
 80077cc:	e018      	b.n	8007800 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80077ce:	4b8a      	ldr	r3, [pc, #552]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a89      	ldr	r2, [pc, #548]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 80077d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077da:	f7fb fbdf 	bl	8002f9c <HAL_GetTick>
 80077de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80077e0:	e008      	b.n	80077f4 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80077e2:	f7fb fbdb 	bl	8002f9c <HAL_GetTick>
 80077e6:	4602      	mov	r2, r0
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d901      	bls.n	80077f4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e20a      	b.n	8007c0a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80077f4:	4b80      	ldr	r3, [pc, #512]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1f0      	bne.n	80077e2 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0308 	and.w	r3, r3, #8
 8007808:	2b00      	cmp	r3, #0
 800780a:	d036      	beq.n	800787a <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d019      	beq.n	8007848 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007814:	4b78      	ldr	r3, [pc, #480]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 8007816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007818:	4a77      	ldr	r2, [pc, #476]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 800781a:	f043 0301 	orr.w	r3, r3, #1
 800781e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007820:	f7fb fbbc 	bl	8002f9c <HAL_GetTick>
 8007824:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007826:	e008      	b.n	800783a <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007828:	f7fb fbb8 	bl	8002f9c <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	2b02      	cmp	r3, #2
 8007834:	d901      	bls.n	800783a <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e1e7      	b.n	8007c0a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800783a:	4b6f      	ldr	r3, [pc, #444]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 800783c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d0f0      	beq.n	8007828 <HAL_RCC_OscConfig+0x360>
 8007846:	e018      	b.n	800787a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007848:	4b6b      	ldr	r3, [pc, #428]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 800784a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800784c:	4a6a      	ldr	r2, [pc, #424]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 800784e:	f023 0301 	bic.w	r3, r3, #1
 8007852:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007854:	f7fb fba2 	bl	8002f9c <HAL_GetTick>
 8007858:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800785a:	e008      	b.n	800786e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800785c:	f7fb fb9e 	bl	8002f9c <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	2b02      	cmp	r3, #2
 8007868:	d901      	bls.n	800786e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e1cd      	b.n	8007c0a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800786e:	4b62      	ldr	r3, [pc, #392]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 8007870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007872:	f003 0302 	and.w	r3, r3, #2
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1f0      	bne.n	800785c <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0320 	and.w	r3, r3, #32
 8007882:	2b00      	cmp	r3, #0
 8007884:	d036      	beq.n	80078f4 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d019      	beq.n	80078c2 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800788e:	4b5a      	ldr	r3, [pc, #360]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a59      	ldr	r2, [pc, #356]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 8007894:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007898:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800789a:	f7fb fb7f 	bl	8002f9c <HAL_GetTick>
 800789e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80078a0:	e008      	b.n	80078b4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80078a2:	f7fb fb7b 	bl	8002f9c <HAL_GetTick>
 80078a6:	4602      	mov	r2, r0
 80078a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d901      	bls.n	80078b4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e1aa      	b.n	8007c0a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80078b4:	4b50      	ldr	r3, [pc, #320]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d0f0      	beq.n	80078a2 <HAL_RCC_OscConfig+0x3da>
 80078c0:	e018      	b.n	80078f4 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80078c2:	4b4d      	ldr	r3, [pc, #308]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a4c      	ldr	r2, [pc, #304]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 80078c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80078ce:	f7fb fb65 	bl	8002f9c <HAL_GetTick>
 80078d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80078d4:	e008      	b.n	80078e8 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80078d6:	f7fb fb61 	bl	8002f9c <HAL_GetTick>
 80078da:	4602      	mov	r2, r0
 80078dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d901      	bls.n	80078e8 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e190      	b.n	8007c0a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80078e8:	4b43      	ldr	r3, [pc, #268]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1f0      	bne.n	80078d6 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0304 	and.w	r3, r3, #4
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 8085 	beq.w	8007a0c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007902:	4b3e      	ldr	r3, [pc, #248]	; (80079fc <HAL_RCC_OscConfig+0x534>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a3d      	ldr	r2, [pc, #244]	; (80079fc <HAL_RCC_OscConfig+0x534>)
 8007908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800790c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800790e:	f7fb fb45 	bl	8002f9c <HAL_GetTick>
 8007912:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007914:	e008      	b.n	8007928 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007916:	f7fb fb41 	bl	8002f9c <HAL_GetTick>
 800791a:	4602      	mov	r2, r0
 800791c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	2b64      	cmp	r3, #100	; 0x64
 8007922:	d901      	bls.n	8007928 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8007924:	2303      	movs	r3, #3
 8007926:	e170      	b.n	8007c0a <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007928:	4b34      	ldr	r3, [pc, #208]	; (80079fc <HAL_RCC_OscConfig+0x534>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007930:	2b00      	cmp	r3, #0
 8007932:	d0f0      	beq.n	8007916 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d106      	bne.n	800794a <HAL_RCC_OscConfig+0x482>
 800793c:	4b2e      	ldr	r3, [pc, #184]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 800793e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007940:	4a2d      	ldr	r2, [pc, #180]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 8007942:	f043 0301 	orr.w	r3, r3, #1
 8007946:	6713      	str	r3, [r2, #112]	; 0x70
 8007948:	e02d      	b.n	80079a6 <HAL_RCC_OscConfig+0x4de>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10c      	bne.n	800796c <HAL_RCC_OscConfig+0x4a4>
 8007952:	4b29      	ldr	r3, [pc, #164]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 8007954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007956:	4a28      	ldr	r2, [pc, #160]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 8007958:	f023 0301 	bic.w	r3, r3, #1
 800795c:	6713      	str	r3, [r2, #112]	; 0x70
 800795e:	4b26      	ldr	r3, [pc, #152]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 8007960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007962:	4a25      	ldr	r2, [pc, #148]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 8007964:	f023 0304 	bic.w	r3, r3, #4
 8007968:	6713      	str	r3, [r2, #112]	; 0x70
 800796a:	e01c      	b.n	80079a6 <HAL_RCC_OscConfig+0x4de>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	2b05      	cmp	r3, #5
 8007972:	d10c      	bne.n	800798e <HAL_RCC_OscConfig+0x4c6>
 8007974:	4b20      	ldr	r3, [pc, #128]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 8007976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007978:	4a1f      	ldr	r2, [pc, #124]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 800797a:	f043 0304 	orr.w	r3, r3, #4
 800797e:	6713      	str	r3, [r2, #112]	; 0x70
 8007980:	4b1d      	ldr	r3, [pc, #116]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 8007982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007984:	4a1c      	ldr	r2, [pc, #112]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 8007986:	f043 0301 	orr.w	r3, r3, #1
 800798a:	6713      	str	r3, [r2, #112]	; 0x70
 800798c:	e00b      	b.n	80079a6 <HAL_RCC_OscConfig+0x4de>
 800798e:	4b1a      	ldr	r3, [pc, #104]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 8007990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007992:	4a19      	ldr	r2, [pc, #100]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 8007994:	f023 0301 	bic.w	r3, r3, #1
 8007998:	6713      	str	r3, [r2, #112]	; 0x70
 800799a:	4b17      	ldr	r3, [pc, #92]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 800799c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800799e:	4a16      	ldr	r2, [pc, #88]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 80079a0:	f023 0304 	bic.w	r3, r3, #4
 80079a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d015      	beq.n	80079da <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079ae:	f7fb faf5 	bl	8002f9c <HAL_GetTick>
 80079b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079b4:	e00a      	b.n	80079cc <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079b6:	f7fb faf1 	bl	8002f9c <HAL_GetTick>
 80079ba:	4602      	mov	r2, r0
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d901      	bls.n	80079cc <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e11e      	b.n	8007c0a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079cc:	4b0a      	ldr	r3, [pc, #40]	; (80079f8 <HAL_RCC_OscConfig+0x530>)
 80079ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d0:	f003 0302 	and.w	r3, r3, #2
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d0ee      	beq.n	80079b6 <HAL_RCC_OscConfig+0x4ee>
 80079d8:	e018      	b.n	8007a0c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079da:	f7fb fadf 	bl	8002f9c <HAL_GetTick>
 80079de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80079e0:	e00e      	b.n	8007a00 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079e2:	f7fb fadb 	bl	8002f9c <HAL_GetTick>
 80079e6:	4602      	mov	r2, r0
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d905      	bls.n	8007a00 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e108      	b.n	8007c0a <HAL_RCC_OscConfig+0x742>
 80079f8:	58024400 	.word	0x58024400
 80079fc:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007a00:	4b84      	ldr	r3, [pc, #528]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a04:	f003 0302 	and.w	r3, r3, #2
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1ea      	bne.n	80079e2 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f000 80f9 	beq.w	8007c08 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007a16:	4b7f      	ldr	r3, [pc, #508]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a1e:	2b18      	cmp	r3, #24
 8007a20:	f000 80b4 	beq.w	8007b8c <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	f040 8095 	bne.w	8007b58 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a2e:	4b79      	ldr	r3, [pc, #484]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a78      	ldr	r2, [pc, #480]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007a34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a3a:	f7fb faaf 	bl	8002f9c <HAL_GetTick>
 8007a3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a40:	e008      	b.n	8007a54 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a42:	f7fb faab 	bl	8002f9c <HAL_GetTick>
 8007a46:	4602      	mov	r2, r0
 8007a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4a:	1ad3      	subs	r3, r2, r3
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d901      	bls.n	8007a54 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e0da      	b.n	8007c0a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a54:	4b6f      	ldr	r3, [pc, #444]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1f0      	bne.n	8007a42 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a60:	4b6c      	ldr	r3, [pc, #432]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007a62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a64:	4b6c      	ldr	r3, [pc, #432]	; (8007c18 <HAL_RCC_OscConfig+0x750>)
 8007a66:	4013      	ands	r3, r2
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007a70:	0112      	lsls	r2, r2, #4
 8007a72:	430a      	orrs	r2, r1
 8007a74:	4967      	ldr	r1, [pc, #412]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	628b      	str	r3, [r1, #40]	; 0x28
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	025b      	lsls	r3, r3, #9
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	431a      	orrs	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a94:	3b01      	subs	r3, #1
 8007a96:	041b      	lsls	r3, r3, #16
 8007a98:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007a9c:	431a      	orrs	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	061b      	lsls	r3, r3, #24
 8007aa6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007aaa:	495a      	ldr	r1, [pc, #360]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007aac:	4313      	orrs	r3, r2
 8007aae:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007ab0:	4b58      	ldr	r3, [pc, #352]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab4:	4a57      	ldr	r2, [pc, #348]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007ab6:	f023 0301 	bic.w	r3, r3, #1
 8007aba:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007abc:	4b55      	ldr	r3, [pc, #340]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007abe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ac0:	4b56      	ldr	r3, [pc, #344]	; (8007c1c <HAL_RCC_OscConfig+0x754>)
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007ac8:	00d2      	lsls	r2, r2, #3
 8007aca:	4952      	ldr	r1, [pc, #328]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007acc:	4313      	orrs	r3, r2
 8007ace:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007ad0:	4b50      	ldr	r3, [pc, #320]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad4:	f023 020c 	bic.w	r2, r3, #12
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007adc:	494d      	ldr	r1, [pc, #308]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007ae2:	4b4c      	ldr	r3, [pc, #304]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae6:	f023 0202 	bic.w	r2, r3, #2
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aee:	4949      	ldr	r1, [pc, #292]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007af0:	4313      	orrs	r3, r2
 8007af2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007af4:	4b47      	ldr	r3, [pc, #284]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af8:	4a46      	ldr	r2, [pc, #280]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007afe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b00:	4b44      	ldr	r3, [pc, #272]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b04:	4a43      	ldr	r2, [pc, #268]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007b0c:	4b41      	ldr	r3, [pc, #260]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b10:	4a40      	ldr	r2, [pc, #256]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007b12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007b18:	4b3e      	ldr	r3, [pc, #248]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1c:	4a3d      	ldr	r2, [pc, #244]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007b1e:	f043 0301 	orr.w	r3, r3, #1
 8007b22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b24:	4b3b      	ldr	r3, [pc, #236]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a3a      	ldr	r2, [pc, #232]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b30:	f7fb fa34 	bl	8002f9c <HAL_GetTick>
 8007b34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b36:	e008      	b.n	8007b4a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b38:	f7fb fa30 	bl	8002f9c <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d901      	bls.n	8007b4a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e05f      	b.n	8007c0a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b4a:	4b32      	ldr	r3, [pc, #200]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d0f0      	beq.n	8007b38 <HAL_RCC_OscConfig+0x670>
 8007b56:	e057      	b.n	8007c08 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b58:	4b2e      	ldr	r3, [pc, #184]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a2d      	ldr	r2, [pc, #180]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b64:	f7fb fa1a 	bl	8002f9c <HAL_GetTick>
 8007b68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b6a:	e008      	b.n	8007b7e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b6c:	f7fb fa16 	bl	8002f9c <HAL_GetTick>
 8007b70:	4602      	mov	r2, r0
 8007b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d901      	bls.n	8007b7e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e045      	b.n	8007c0a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b7e:	4b25      	ldr	r3, [pc, #148]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1f0      	bne.n	8007b6c <HAL_RCC_OscConfig+0x6a4>
 8007b8a:	e03d      	b.n	8007c08 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007b8c:	4b21      	ldr	r3, [pc, #132]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007b92:	4b20      	ldr	r3, [pc, #128]	; (8007c14 <HAL_RCC_OscConfig+0x74c>)
 8007b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b96:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d031      	beq.n	8007c04 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	f003 0203 	and.w	r2, r3, #3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d12a      	bne.n	8007c04 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	091b      	lsrs	r3, r3, #4
 8007bb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d122      	bne.n	8007c04 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d11a      	bne.n	8007c04 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	0a5b      	lsrs	r3, r3, #9
 8007bd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bda:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d111      	bne.n	8007c04 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	0c1b      	lsrs	r3, r3, #16
 8007be4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d108      	bne.n	8007c04 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	0e1b      	lsrs	r3, r3, #24
 8007bf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bfe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d001      	beq.n	8007c08 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e000      	b.n	8007c0a <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3730      	adds	r7, #48	; 0x30
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	58024400 	.word	0x58024400
 8007c18:	fffffc0c 	.word	0xfffffc0c
 8007c1c:	ffff0007 	.word	0xffff0007

08007c20 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e19c      	b.n	8007f6e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c34:	4b8a      	ldr	r3, [pc, #552]	; (8007e60 <HAL_RCC_ClockConfig+0x240>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 030f 	and.w	r3, r3, #15
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d910      	bls.n	8007c64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c42:	4b87      	ldr	r3, [pc, #540]	; (8007e60 <HAL_RCC_ClockConfig+0x240>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f023 020f 	bic.w	r2, r3, #15
 8007c4a:	4985      	ldr	r1, [pc, #532]	; (8007e60 <HAL_RCC_ClockConfig+0x240>)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c52:	4b83      	ldr	r3, [pc, #524]	; (8007e60 <HAL_RCC_ClockConfig+0x240>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 030f 	and.w	r3, r3, #15
 8007c5a:	683a      	ldr	r2, [r7, #0]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d001      	beq.n	8007c64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e184      	b.n	8007f6e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0304 	and.w	r3, r3, #4
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d010      	beq.n	8007c92 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	691a      	ldr	r2, [r3, #16]
 8007c74:	4b7b      	ldr	r3, [pc, #492]	; (8007e64 <HAL_RCC_ClockConfig+0x244>)
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d908      	bls.n	8007c92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007c80:	4b78      	ldr	r3, [pc, #480]	; (8007e64 <HAL_RCC_ClockConfig+0x244>)
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	4975      	ldr	r1, [pc, #468]	; (8007e64 <HAL_RCC_ClockConfig+0x244>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 0308 	and.w	r3, r3, #8
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d010      	beq.n	8007cc0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	695a      	ldr	r2, [r3, #20]
 8007ca2:	4b70      	ldr	r3, [pc, #448]	; (8007e64 <HAL_RCC_ClockConfig+0x244>)
 8007ca4:	69db      	ldr	r3, [r3, #28]
 8007ca6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d908      	bls.n	8007cc0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007cae:	4b6d      	ldr	r3, [pc, #436]	; (8007e64 <HAL_RCC_ClockConfig+0x244>)
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	695b      	ldr	r3, [r3, #20]
 8007cba:	496a      	ldr	r1, [pc, #424]	; (8007e64 <HAL_RCC_ClockConfig+0x244>)
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 0310 	and.w	r3, r3, #16
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d010      	beq.n	8007cee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	699a      	ldr	r2, [r3, #24]
 8007cd0:	4b64      	ldr	r3, [pc, #400]	; (8007e64 <HAL_RCC_ClockConfig+0x244>)
 8007cd2:	69db      	ldr	r3, [r3, #28]
 8007cd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d908      	bls.n	8007cee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007cdc:	4b61      	ldr	r3, [pc, #388]	; (8007e64 <HAL_RCC_ClockConfig+0x244>)
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	495e      	ldr	r1, [pc, #376]	; (8007e64 <HAL_RCC_ClockConfig+0x244>)
 8007cea:	4313      	orrs	r3, r2
 8007cec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0320 	and.w	r3, r3, #32
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d010      	beq.n	8007d1c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	69da      	ldr	r2, [r3, #28]
 8007cfe:	4b59      	ldr	r3, [pc, #356]	; (8007e64 <HAL_RCC_ClockConfig+0x244>)
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d908      	bls.n	8007d1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007d0a:	4b56      	ldr	r3, [pc, #344]	; (8007e64 <HAL_RCC_ClockConfig+0x244>)
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	4953      	ldr	r1, [pc, #332]	; (8007e64 <HAL_RCC_ClockConfig+0x244>)
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 0302 	and.w	r3, r3, #2
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d010      	beq.n	8007d4a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	68da      	ldr	r2, [r3, #12]
 8007d2c:	4b4d      	ldr	r3, [pc, #308]	; (8007e64 <HAL_RCC_ClockConfig+0x244>)
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	f003 030f 	and.w	r3, r3, #15
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d908      	bls.n	8007d4a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d38:	4b4a      	ldr	r3, [pc, #296]	; (8007e64 <HAL_RCC_ClockConfig+0x244>)
 8007d3a:	699b      	ldr	r3, [r3, #24]
 8007d3c:	f023 020f 	bic.w	r2, r3, #15
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	4947      	ldr	r1, [pc, #284]	; (8007e64 <HAL_RCC_ClockConfig+0x244>)
 8007d46:	4313      	orrs	r3, r2
 8007d48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d055      	beq.n	8007e02 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007d56:	4b43      	ldr	r3, [pc, #268]	; (8007e64 <HAL_RCC_ClockConfig+0x244>)
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	4940      	ldr	r1, [pc, #256]	; (8007e64 <HAL_RCC_ClockConfig+0x244>)
 8007d64:	4313      	orrs	r3, r2
 8007d66:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d107      	bne.n	8007d80 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d70:	4b3c      	ldr	r3, [pc, #240]	; (8007e64 <HAL_RCC_ClockConfig+0x244>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d121      	bne.n	8007dc0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e0f6      	b.n	8007f6e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	2b03      	cmp	r3, #3
 8007d86:	d107      	bne.n	8007d98 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007d88:	4b36      	ldr	r3, [pc, #216]	; (8007e64 <HAL_RCC_ClockConfig+0x244>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d115      	bne.n	8007dc0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e0ea      	b.n	8007f6e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d107      	bne.n	8007db0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007da0:	4b30      	ldr	r3, [pc, #192]	; (8007e64 <HAL_RCC_ClockConfig+0x244>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d109      	bne.n	8007dc0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e0de      	b.n	8007f6e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007db0:	4b2c      	ldr	r3, [pc, #176]	; (8007e64 <HAL_RCC_ClockConfig+0x244>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 0304 	and.w	r3, r3, #4
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d101      	bne.n	8007dc0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e0d6      	b.n	8007f6e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007dc0:	4b28      	ldr	r3, [pc, #160]	; (8007e64 <HAL_RCC_ClockConfig+0x244>)
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	f023 0207 	bic.w	r2, r3, #7
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	4925      	ldr	r1, [pc, #148]	; (8007e64 <HAL_RCC_ClockConfig+0x244>)
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dd2:	f7fb f8e3 	bl	8002f9c <HAL_GetTick>
 8007dd6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dd8:	e00a      	b.n	8007df0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007dda:	f7fb f8df 	bl	8002f9c <HAL_GetTick>
 8007dde:	4602      	mov	r2, r0
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d901      	bls.n	8007df0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007dec:	2303      	movs	r3, #3
 8007dee:	e0be      	b.n	8007f6e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007df0:	4b1c      	ldr	r3, [pc, #112]	; (8007e64 <HAL_RCC_ClockConfig+0x244>)
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	00db      	lsls	r3, r3, #3
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d1eb      	bne.n	8007dda <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0302 	and.w	r3, r3, #2
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d010      	beq.n	8007e30 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	68da      	ldr	r2, [r3, #12]
 8007e12:	4b14      	ldr	r3, [pc, #80]	; (8007e64 <HAL_RCC_ClockConfig+0x244>)
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	f003 030f 	and.w	r3, r3, #15
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d208      	bcs.n	8007e30 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e1e:	4b11      	ldr	r3, [pc, #68]	; (8007e64 <HAL_RCC_ClockConfig+0x244>)
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	f023 020f 	bic.w	r2, r3, #15
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	490e      	ldr	r1, [pc, #56]	; (8007e64 <HAL_RCC_ClockConfig+0x244>)
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e30:	4b0b      	ldr	r3, [pc, #44]	; (8007e60 <HAL_RCC_ClockConfig+0x240>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 030f 	and.w	r3, r3, #15
 8007e38:	683a      	ldr	r2, [r7, #0]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d214      	bcs.n	8007e68 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e3e:	4b08      	ldr	r3, [pc, #32]	; (8007e60 <HAL_RCC_ClockConfig+0x240>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f023 020f 	bic.w	r2, r3, #15
 8007e46:	4906      	ldr	r1, [pc, #24]	; (8007e60 <HAL_RCC_ClockConfig+0x240>)
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e4e:	4b04      	ldr	r3, [pc, #16]	; (8007e60 <HAL_RCC_ClockConfig+0x240>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 030f 	and.w	r3, r3, #15
 8007e56:	683a      	ldr	r2, [r7, #0]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d005      	beq.n	8007e68 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e086      	b.n	8007f6e <HAL_RCC_ClockConfig+0x34e>
 8007e60:	52002000 	.word	0x52002000
 8007e64:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 0304 	and.w	r3, r3, #4
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d010      	beq.n	8007e96 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	691a      	ldr	r2, [r3, #16]
 8007e78:	4b3f      	ldr	r3, [pc, #252]	; (8007f78 <HAL_RCC_ClockConfig+0x358>)
 8007e7a:	699b      	ldr	r3, [r3, #24]
 8007e7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d208      	bcs.n	8007e96 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007e84:	4b3c      	ldr	r3, [pc, #240]	; (8007f78 <HAL_RCC_ClockConfig+0x358>)
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	4939      	ldr	r1, [pc, #228]	; (8007f78 <HAL_RCC_ClockConfig+0x358>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0308 	and.w	r3, r3, #8
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d010      	beq.n	8007ec4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	695a      	ldr	r2, [r3, #20]
 8007ea6:	4b34      	ldr	r3, [pc, #208]	; (8007f78 <HAL_RCC_ClockConfig+0x358>)
 8007ea8:	69db      	ldr	r3, [r3, #28]
 8007eaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d208      	bcs.n	8007ec4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007eb2:	4b31      	ldr	r3, [pc, #196]	; (8007f78 <HAL_RCC_ClockConfig+0x358>)
 8007eb4:	69db      	ldr	r3, [r3, #28]
 8007eb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	492e      	ldr	r1, [pc, #184]	; (8007f78 <HAL_RCC_ClockConfig+0x358>)
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 0310 	and.w	r3, r3, #16
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d010      	beq.n	8007ef2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	699a      	ldr	r2, [r3, #24]
 8007ed4:	4b28      	ldr	r3, [pc, #160]	; (8007f78 <HAL_RCC_ClockConfig+0x358>)
 8007ed6:	69db      	ldr	r3, [r3, #28]
 8007ed8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d208      	bcs.n	8007ef2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007ee0:	4b25      	ldr	r3, [pc, #148]	; (8007f78 <HAL_RCC_ClockConfig+0x358>)
 8007ee2:	69db      	ldr	r3, [r3, #28]
 8007ee4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	699b      	ldr	r3, [r3, #24]
 8007eec:	4922      	ldr	r1, [pc, #136]	; (8007f78 <HAL_RCC_ClockConfig+0x358>)
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0320 	and.w	r3, r3, #32
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d010      	beq.n	8007f20 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	69da      	ldr	r2, [r3, #28]
 8007f02:	4b1d      	ldr	r3, [pc, #116]	; (8007f78 <HAL_RCC_ClockConfig+0x358>)
 8007f04:	6a1b      	ldr	r3, [r3, #32]
 8007f06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d208      	bcs.n	8007f20 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007f0e:	4b1a      	ldr	r3, [pc, #104]	; (8007f78 <HAL_RCC_ClockConfig+0x358>)
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	69db      	ldr	r3, [r3, #28]
 8007f1a:	4917      	ldr	r1, [pc, #92]	; (8007f78 <HAL_RCC_ClockConfig+0x358>)
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007f20:	f000 f834 	bl	8007f8c <HAL_RCC_GetSysClockFreq>
 8007f24:	4602      	mov	r2, r0
 8007f26:	4b14      	ldr	r3, [pc, #80]	; (8007f78 <HAL_RCC_ClockConfig+0x358>)
 8007f28:	699b      	ldr	r3, [r3, #24]
 8007f2a:	0a1b      	lsrs	r3, r3, #8
 8007f2c:	f003 030f 	and.w	r3, r3, #15
 8007f30:	4912      	ldr	r1, [pc, #72]	; (8007f7c <HAL_RCC_ClockConfig+0x35c>)
 8007f32:	5ccb      	ldrb	r3, [r1, r3]
 8007f34:	f003 031f 	and.w	r3, r3, #31
 8007f38:	fa22 f303 	lsr.w	r3, r2, r3
 8007f3c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f3e:	4b0e      	ldr	r3, [pc, #56]	; (8007f78 <HAL_RCC_ClockConfig+0x358>)
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	f003 030f 	and.w	r3, r3, #15
 8007f46:	4a0d      	ldr	r2, [pc, #52]	; (8007f7c <HAL_RCC_ClockConfig+0x35c>)
 8007f48:	5cd3      	ldrb	r3, [r2, r3]
 8007f4a:	f003 031f 	and.w	r3, r3, #31
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	fa22 f303 	lsr.w	r3, r2, r3
 8007f54:	4a0a      	ldr	r2, [pc, #40]	; (8007f80 <HAL_RCC_ClockConfig+0x360>)
 8007f56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007f58:	4a0a      	ldr	r2, [pc, #40]	; (8007f84 <HAL_RCC_ClockConfig+0x364>)
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007f5e:	4b0a      	ldr	r3, [pc, #40]	; (8007f88 <HAL_RCC_ClockConfig+0x368>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fa ffd0 	bl	8002f08 <HAL_InitTick>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3718      	adds	r7, #24
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	58024400 	.word	0x58024400
 8007f7c:	0800e390 	.word	0x0800e390
 8007f80:	24000004 	.word	0x24000004
 8007f84:	24000000 	.word	0x24000000
 8007f88:	24000008 	.word	0x24000008

08007f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b089      	sub	sp, #36	; 0x24
 8007f90:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f92:	4bb3      	ldr	r3, [pc, #716]	; (8008260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f9a:	2b18      	cmp	r3, #24
 8007f9c:	f200 8155 	bhi.w	800824a <HAL_RCC_GetSysClockFreq+0x2be>
 8007fa0:	a201      	add	r2, pc, #4	; (adr r2, 8007fa8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa6:	bf00      	nop
 8007fa8:	0800800d 	.word	0x0800800d
 8007fac:	0800824b 	.word	0x0800824b
 8007fb0:	0800824b 	.word	0x0800824b
 8007fb4:	0800824b 	.word	0x0800824b
 8007fb8:	0800824b 	.word	0x0800824b
 8007fbc:	0800824b 	.word	0x0800824b
 8007fc0:	0800824b 	.word	0x0800824b
 8007fc4:	0800824b 	.word	0x0800824b
 8007fc8:	08008033 	.word	0x08008033
 8007fcc:	0800824b 	.word	0x0800824b
 8007fd0:	0800824b 	.word	0x0800824b
 8007fd4:	0800824b 	.word	0x0800824b
 8007fd8:	0800824b 	.word	0x0800824b
 8007fdc:	0800824b 	.word	0x0800824b
 8007fe0:	0800824b 	.word	0x0800824b
 8007fe4:	0800824b 	.word	0x0800824b
 8007fe8:	08008039 	.word	0x08008039
 8007fec:	0800824b 	.word	0x0800824b
 8007ff0:	0800824b 	.word	0x0800824b
 8007ff4:	0800824b 	.word	0x0800824b
 8007ff8:	0800824b 	.word	0x0800824b
 8007ffc:	0800824b 	.word	0x0800824b
 8008000:	0800824b 	.word	0x0800824b
 8008004:	0800824b 	.word	0x0800824b
 8008008:	0800803f 	.word	0x0800803f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800800c:	4b94      	ldr	r3, [pc, #592]	; (8008260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0320 	and.w	r3, r3, #32
 8008014:	2b00      	cmp	r3, #0
 8008016:	d009      	beq.n	800802c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008018:	4b91      	ldr	r3, [pc, #580]	; (8008260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	08db      	lsrs	r3, r3, #3
 800801e:	f003 0303 	and.w	r3, r3, #3
 8008022:	4a90      	ldr	r2, [pc, #576]	; (8008264 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008024:	fa22 f303 	lsr.w	r3, r2, r3
 8008028:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800802a:	e111      	b.n	8008250 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800802c:	4b8d      	ldr	r3, [pc, #564]	; (8008264 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800802e:	61bb      	str	r3, [r7, #24]
    break;
 8008030:	e10e      	b.n	8008250 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008032:	4b8d      	ldr	r3, [pc, #564]	; (8008268 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008034:	61bb      	str	r3, [r7, #24]
    break;
 8008036:	e10b      	b.n	8008250 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008038:	4b8c      	ldr	r3, [pc, #560]	; (800826c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800803a:	61bb      	str	r3, [r7, #24]
    break;
 800803c:	e108      	b.n	8008250 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800803e:	4b88      	ldr	r3, [pc, #544]	; (8008260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008042:	f003 0303 	and.w	r3, r3, #3
 8008046:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008048:	4b85      	ldr	r3, [pc, #532]	; (8008260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800804a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804c:	091b      	lsrs	r3, r3, #4
 800804e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008052:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008054:	4b82      	ldr	r3, [pc, #520]	; (8008260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800805e:	4b80      	ldr	r3, [pc, #512]	; (8008260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008062:	08db      	lsrs	r3, r3, #3
 8008064:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	fb02 f303 	mul.w	r3, r2, r3
 800806e:	ee07 3a90 	vmov	s15, r3
 8008072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008076:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	2b00      	cmp	r3, #0
 800807e:	f000 80e1 	beq.w	8008244 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	2b02      	cmp	r3, #2
 8008086:	f000 8083 	beq.w	8008190 <HAL_RCC_GetSysClockFreq+0x204>
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	2b02      	cmp	r3, #2
 800808e:	f200 80a1 	bhi.w	80081d4 <HAL_RCC_GetSysClockFreq+0x248>
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d003      	beq.n	80080a0 <HAL_RCC_GetSysClockFreq+0x114>
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	2b01      	cmp	r3, #1
 800809c:	d056      	beq.n	800814c <HAL_RCC_GetSysClockFreq+0x1c0>
 800809e:	e099      	b.n	80081d4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080a0:	4b6f      	ldr	r3, [pc, #444]	; (8008260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 0320 	and.w	r3, r3, #32
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d02d      	beq.n	8008108 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080ac:	4b6c      	ldr	r3, [pc, #432]	; (8008260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	08db      	lsrs	r3, r3, #3
 80080b2:	f003 0303 	and.w	r3, r3, #3
 80080b6:	4a6b      	ldr	r2, [pc, #428]	; (8008264 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80080b8:	fa22 f303 	lsr.w	r3, r2, r3
 80080bc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	ee07 3a90 	vmov	s15, r3
 80080c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	ee07 3a90 	vmov	s15, r3
 80080ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080d6:	4b62      	ldr	r3, [pc, #392]	; (8008260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080de:	ee07 3a90 	vmov	s15, r3
 80080e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80080ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008270 <HAL_RCC_GetSysClockFreq+0x2e4>
 80080ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008102:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008106:	e087      	b.n	8008218 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	ee07 3a90 	vmov	s15, r3
 800810e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008112:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008274 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800811a:	4b51      	ldr	r3, [pc, #324]	; (8008260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800811c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800811e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008122:	ee07 3a90 	vmov	s15, r3
 8008126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800812a:	ed97 6a02 	vldr	s12, [r7, #8]
 800812e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008270 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800813a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800813e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008146:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800814a:	e065      	b.n	8008218 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	ee07 3a90 	vmov	s15, r3
 8008152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008156:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008278 <HAL_RCC_GetSysClockFreq+0x2ec>
 800815a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800815e:	4b40      	ldr	r3, [pc, #256]	; (8008260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008166:	ee07 3a90 	vmov	s15, r3
 800816a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800816e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008172:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008270 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800817a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800817e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800818a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800818e:	e043      	b.n	8008218 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	ee07 3a90 	vmov	s15, r3
 8008196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800819a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800827c <HAL_RCC_GetSysClockFreq+0x2f0>
 800819e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081a2:	4b2f      	ldr	r3, [pc, #188]	; (8008260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081aa:	ee07 3a90 	vmov	s15, r3
 80081ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80081b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008270 <HAL_RCC_GetSysClockFreq+0x2e4>
 80081ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081d2:	e021      	b.n	8008218 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	ee07 3a90 	vmov	s15, r3
 80081da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008278 <HAL_RCC_GetSysClockFreq+0x2ec>
 80081e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081e6:	4b1e      	ldr	r3, [pc, #120]	; (8008260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ee:	ee07 3a90 	vmov	s15, r3
 80081f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80081fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008270 <HAL_RCC_GetSysClockFreq+0x2e4>
 80081fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800820a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800820e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008216:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008218:	4b11      	ldr	r3, [pc, #68]	; (8008260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800821a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821c:	0a5b      	lsrs	r3, r3, #9
 800821e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008222:	3301      	adds	r3, #1
 8008224:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	ee07 3a90 	vmov	s15, r3
 800822c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008230:	edd7 6a07 	vldr	s13, [r7, #28]
 8008234:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800823c:	ee17 3a90 	vmov	r3, s15
 8008240:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008242:	e005      	b.n	8008250 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008244:	2300      	movs	r3, #0
 8008246:	61bb      	str	r3, [r7, #24]
    break;
 8008248:	e002      	b.n	8008250 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800824a:	4b07      	ldr	r3, [pc, #28]	; (8008268 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800824c:	61bb      	str	r3, [r7, #24]
    break;
 800824e:	bf00      	nop
  }

  return sysclockfreq;
 8008250:	69bb      	ldr	r3, [r7, #24]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3724      	adds	r7, #36	; 0x24
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	58024400 	.word	0x58024400
 8008264:	03d09000 	.word	0x03d09000
 8008268:	003d0900 	.word	0x003d0900
 800826c:	017d7840 	.word	0x017d7840
 8008270:	46000000 	.word	0x46000000
 8008274:	4c742400 	.word	0x4c742400
 8008278:	4a742400 	.word	0x4a742400
 800827c:	4bbebc20 	.word	0x4bbebc20

08008280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008286:	f7ff fe81 	bl	8007f8c <HAL_RCC_GetSysClockFreq>
 800828a:	4602      	mov	r2, r0
 800828c:	4b10      	ldr	r3, [pc, #64]	; (80082d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800828e:	699b      	ldr	r3, [r3, #24]
 8008290:	0a1b      	lsrs	r3, r3, #8
 8008292:	f003 030f 	and.w	r3, r3, #15
 8008296:	490f      	ldr	r1, [pc, #60]	; (80082d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8008298:	5ccb      	ldrb	r3, [r1, r3]
 800829a:	f003 031f 	and.w	r3, r3, #31
 800829e:	fa22 f303 	lsr.w	r3, r2, r3
 80082a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80082a4:	4b0a      	ldr	r3, [pc, #40]	; (80082d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80082a6:	699b      	ldr	r3, [r3, #24]
 80082a8:	f003 030f 	and.w	r3, r3, #15
 80082ac:	4a09      	ldr	r2, [pc, #36]	; (80082d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80082ae:	5cd3      	ldrb	r3, [r2, r3]
 80082b0:	f003 031f 	and.w	r3, r3, #31
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	fa22 f303 	lsr.w	r3, r2, r3
 80082ba:	4a07      	ldr	r2, [pc, #28]	; (80082d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80082bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80082be:	4a07      	ldr	r2, [pc, #28]	; (80082dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80082c4:	4b04      	ldr	r3, [pc, #16]	; (80082d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80082c6:	681b      	ldr	r3, [r3, #0]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3708      	adds	r7, #8
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	58024400 	.word	0x58024400
 80082d4:	0800e390 	.word	0x0800e390
 80082d8:	24000004 	.word	0x24000004
 80082dc:	24000000 	.word	0x24000000

080082e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80082e4:	f7ff ffcc 	bl	8008280 <HAL_RCC_GetHCLKFreq>
 80082e8:	4602      	mov	r2, r0
 80082ea:	4b06      	ldr	r3, [pc, #24]	; (8008304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80082ec:	69db      	ldr	r3, [r3, #28]
 80082ee:	091b      	lsrs	r3, r3, #4
 80082f0:	f003 0307 	and.w	r3, r3, #7
 80082f4:	4904      	ldr	r1, [pc, #16]	; (8008308 <HAL_RCC_GetPCLK1Freq+0x28>)
 80082f6:	5ccb      	ldrb	r3, [r1, r3]
 80082f8:	f003 031f 	and.w	r3, r3, #31
 80082fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008300:	4618      	mov	r0, r3
 8008302:	bd80      	pop	{r7, pc}
 8008304:	58024400 	.word	0x58024400
 8008308:	0800e390 	.word	0x0800e390

0800830c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008310:	f7ff ffb6 	bl	8008280 <HAL_RCC_GetHCLKFreq>
 8008314:	4602      	mov	r2, r0
 8008316:	4b06      	ldr	r3, [pc, #24]	; (8008330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008318:	69db      	ldr	r3, [r3, #28]
 800831a:	0a1b      	lsrs	r3, r3, #8
 800831c:	f003 0307 	and.w	r3, r3, #7
 8008320:	4904      	ldr	r1, [pc, #16]	; (8008334 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008322:	5ccb      	ldrb	r3, [r1, r3]
 8008324:	f003 031f 	and.w	r3, r3, #31
 8008328:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800832c:	4618      	mov	r0, r3
 800832e:	bd80      	pop	{r7, pc}
 8008330:	58024400 	.word	0x58024400
 8008334:	0800e390 	.word	0x0800e390

08008338 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b086      	sub	sp, #24
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008340:	2300      	movs	r3, #0
 8008342:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008344:	2300      	movs	r3, #0
 8008346:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d03f      	beq.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008358:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800835c:	d02a      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800835e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008362:	d824      	bhi.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008364:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008368:	d018      	beq.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800836a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800836e:	d81e      	bhi.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008370:	2b00      	cmp	r3, #0
 8008372:	d003      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008378:	d007      	beq.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800837a:	e018      	b.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800837c:	4bab      	ldr	r3, [pc, #684]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800837e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008380:	4aaa      	ldr	r2, [pc, #680]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008386:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008388:	e015      	b.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	3304      	adds	r3, #4
 800838e:	2102      	movs	r1, #2
 8008390:	4618      	mov	r0, r3
 8008392:	f001 feff 	bl	800a194 <RCCEx_PLL2_Config>
 8008396:	4603      	mov	r3, r0
 8008398:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800839a:	e00c      	b.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	3324      	adds	r3, #36	; 0x24
 80083a0:	2102      	movs	r1, #2
 80083a2:	4618      	mov	r0, r3
 80083a4:	f001 ffa8 	bl	800a2f8 <RCCEx_PLL3_Config>
 80083a8:	4603      	mov	r3, r0
 80083aa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80083ac:	e003      	b.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	75fb      	strb	r3, [r7, #23]
      break;
 80083b2:	e000      	b.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80083b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083b6:	7dfb      	ldrb	r3, [r7, #23]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d109      	bne.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80083bc:	4b9b      	ldr	r3, [pc, #620]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083c8:	4998      	ldr	r1, [pc, #608]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083ca:	4313      	orrs	r3, r2
 80083cc:	650b      	str	r3, [r1, #80]	; 0x50
 80083ce:	e001      	b.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083d0:	7dfb      	ldrb	r3, [r7, #23]
 80083d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d03d      	beq.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083e4:	2b04      	cmp	r3, #4
 80083e6:	d826      	bhi.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80083e8:	a201      	add	r2, pc, #4	; (adr r2, 80083f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80083ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ee:	bf00      	nop
 80083f0:	08008405 	.word	0x08008405
 80083f4:	08008413 	.word	0x08008413
 80083f8:	08008425 	.word	0x08008425
 80083fc:	0800843d 	.word	0x0800843d
 8008400:	0800843d 	.word	0x0800843d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008404:	4b89      	ldr	r3, [pc, #548]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008408:	4a88      	ldr	r2, [pc, #544]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800840a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800840e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008410:	e015      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	3304      	adds	r3, #4
 8008416:	2100      	movs	r1, #0
 8008418:	4618      	mov	r0, r3
 800841a:	f001 febb 	bl	800a194 <RCCEx_PLL2_Config>
 800841e:	4603      	mov	r3, r0
 8008420:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008422:	e00c      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	3324      	adds	r3, #36	; 0x24
 8008428:	2100      	movs	r1, #0
 800842a:	4618      	mov	r0, r3
 800842c:	f001 ff64 	bl	800a2f8 <RCCEx_PLL3_Config>
 8008430:	4603      	mov	r3, r0
 8008432:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008434:	e003      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	75fb      	strb	r3, [r7, #23]
      break;
 800843a:	e000      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800843c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800843e:	7dfb      	ldrb	r3, [r7, #23]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d109      	bne.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008444:	4b79      	ldr	r3, [pc, #484]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008448:	f023 0207 	bic.w	r2, r3, #7
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008450:	4976      	ldr	r1, [pc, #472]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008452:	4313      	orrs	r3, r2
 8008454:	650b      	str	r3, [r1, #80]	; 0x50
 8008456:	e001      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008458:	7dfb      	ldrb	r3, [r7, #23]
 800845a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008464:	2b00      	cmp	r3, #0
 8008466:	d051      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800846e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008472:	d036      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008474:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008478:	d830      	bhi.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800847a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800847e:	d032      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8008480:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008484:	d82a      	bhi.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008486:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800848a:	d02e      	beq.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800848c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008490:	d824      	bhi.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008492:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008496:	d018      	beq.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008498:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800849c:	d81e      	bhi.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d003      	beq.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x172>
 80084a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084a6:	d007      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80084a8:	e018      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084aa:	4b60      	ldr	r3, [pc, #384]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ae:	4a5f      	ldr	r2, [pc, #380]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80084b6:	e019      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	3304      	adds	r3, #4
 80084bc:	2100      	movs	r1, #0
 80084be:	4618      	mov	r0, r3
 80084c0:	f001 fe68 	bl	800a194 <RCCEx_PLL2_Config>
 80084c4:	4603      	mov	r3, r0
 80084c6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80084c8:	e010      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	3324      	adds	r3, #36	; 0x24
 80084ce:	2100      	movs	r1, #0
 80084d0:	4618      	mov	r0, r3
 80084d2:	f001 ff11 	bl	800a2f8 <RCCEx_PLL3_Config>
 80084d6:	4603      	mov	r3, r0
 80084d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80084da:	e007      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	75fb      	strb	r3, [r7, #23]
      break;
 80084e0:	e004      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80084e2:	bf00      	nop
 80084e4:	e002      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80084e6:	bf00      	nop
 80084e8:	e000      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80084ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084ec:	7dfb      	ldrb	r3, [r7, #23]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10a      	bne.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80084f2:	4b4e      	ldr	r3, [pc, #312]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084f6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008500:	494a      	ldr	r1, [pc, #296]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008502:	4313      	orrs	r3, r2
 8008504:	658b      	str	r3, [r1, #88]	; 0x58
 8008506:	e001      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008508:	7dfb      	ldrb	r3, [r7, #23]
 800850a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008514:	2b00      	cmp	r3, #0
 8008516:	d051      	beq.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800851e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008522:	d036      	beq.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8008524:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008528:	d830      	bhi.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800852a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800852e:	d032      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8008530:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008534:	d82a      	bhi.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008536:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800853a:	d02e      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x262>
 800853c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008540:	d824      	bhi.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008542:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008546:	d018      	beq.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8008548:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800854c:	d81e      	bhi.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8008552:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008556:	d007      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008558:	e018      	b.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800855a:	4b34      	ldr	r3, [pc, #208]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800855c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855e:	4a33      	ldr	r2, [pc, #204]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008564:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008566:	e019      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	3304      	adds	r3, #4
 800856c:	2100      	movs	r1, #0
 800856e:	4618      	mov	r0, r3
 8008570:	f001 fe10 	bl	800a194 <RCCEx_PLL2_Config>
 8008574:	4603      	mov	r3, r0
 8008576:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008578:	e010      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	3324      	adds	r3, #36	; 0x24
 800857e:	2100      	movs	r1, #0
 8008580:	4618      	mov	r0, r3
 8008582:	f001 feb9 	bl	800a2f8 <RCCEx_PLL3_Config>
 8008586:	4603      	mov	r3, r0
 8008588:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800858a:	e007      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	75fb      	strb	r3, [r7, #23]
      break;
 8008590:	e004      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008592:	bf00      	nop
 8008594:	e002      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008596:	bf00      	nop
 8008598:	e000      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800859a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800859c:	7dfb      	ldrb	r3, [r7, #23]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10a      	bne.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80085a2:	4b22      	ldr	r3, [pc, #136]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80085b0:	491e      	ldr	r1, [pc, #120]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085b2:	4313      	orrs	r3, r2
 80085b4:	658b      	str	r3, [r1, #88]	; 0x58
 80085b6:	e001      	b.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085b8:	7dfb      	ldrb	r3, [r7, #23]
 80085ba:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d035      	beq.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085cc:	2b30      	cmp	r3, #48	; 0x30
 80085ce:	d01c      	beq.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80085d0:	2b30      	cmp	r3, #48	; 0x30
 80085d2:	d817      	bhi.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80085d4:	2b20      	cmp	r3, #32
 80085d6:	d00c      	beq.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80085d8:	2b20      	cmp	r3, #32
 80085da:	d813      	bhi.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d016      	beq.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80085e0:	2b10      	cmp	r3, #16
 80085e2:	d10f      	bne.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085e4:	4b11      	ldr	r3, [pc, #68]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e8:	4a10      	ldr	r2, [pc, #64]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80085f0:	e00e      	b.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	3304      	adds	r3, #4
 80085f6:	2102      	movs	r1, #2
 80085f8:	4618      	mov	r0, r3
 80085fa:	f001 fdcb 	bl	800a194 <RCCEx_PLL2_Config>
 80085fe:	4603      	mov	r3, r0
 8008600:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008602:	e005      	b.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	75fb      	strb	r3, [r7, #23]
      break;
 8008608:	e002      	b.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800860a:	bf00      	nop
 800860c:	e000      	b.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800860e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008610:	7dfb      	ldrb	r3, [r7, #23]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d10c      	bne.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008616:	4b05      	ldr	r3, [pc, #20]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800861a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008622:	4902      	ldr	r1, [pc, #8]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008624:	4313      	orrs	r3, r2
 8008626:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008628:	e004      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800862a:	bf00      	nop
 800862c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008630:	7dfb      	ldrb	r3, [r7, #23]
 8008632:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800863c:	2b00      	cmp	r3, #0
 800863e:	d047      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008644:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008648:	d030      	beq.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x374>
 800864a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800864e:	d82a      	bhi.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008650:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008654:	d02c      	beq.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8008656:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800865a:	d824      	bhi.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800865c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008660:	d018      	beq.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008666:	d81e      	bhi.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008668:	2b00      	cmp	r3, #0
 800866a:	d003      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800866c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008670:	d007      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008672:	e018      	b.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008674:	4bac      	ldr	r3, [pc, #688]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008678:	4aab      	ldr	r2, [pc, #684]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800867a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800867e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008680:	e017      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	3304      	adds	r3, #4
 8008686:	2100      	movs	r1, #0
 8008688:	4618      	mov	r0, r3
 800868a:	f001 fd83 	bl	800a194 <RCCEx_PLL2_Config>
 800868e:	4603      	mov	r3, r0
 8008690:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008692:	e00e      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	3324      	adds	r3, #36	; 0x24
 8008698:	2100      	movs	r1, #0
 800869a:	4618      	mov	r0, r3
 800869c:	f001 fe2c 	bl	800a2f8 <RCCEx_PLL3_Config>
 80086a0:	4603      	mov	r3, r0
 80086a2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80086a4:	e005      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	75fb      	strb	r3, [r7, #23]
      break;
 80086aa:	e002      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80086ac:	bf00      	nop
 80086ae:	e000      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80086b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086b2:	7dfb      	ldrb	r3, [r7, #23]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d109      	bne.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80086b8:	4b9b      	ldr	r3, [pc, #620]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80086ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086bc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086c4:	4998      	ldr	r1, [pc, #608]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80086c6:	4313      	orrs	r3, r2
 80086c8:	650b      	str	r3, [r1, #80]	; 0x50
 80086ca:	e001      	b.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086cc:	7dfb      	ldrb	r3, [r7, #23]
 80086ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d049      	beq.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086e4:	d02e      	beq.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80086e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086ea:	d828      	bhi.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80086ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80086f0:	d02a      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80086f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80086f6:	d822      	bhi.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80086f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80086fc:	d026      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x414>
 80086fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008702:	d81c      	bhi.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008704:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008708:	d010      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800870a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800870e:	d816      	bhi.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008710:	2b00      	cmp	r3, #0
 8008712:	d01d      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8008714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008718:	d111      	bne.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	3304      	adds	r3, #4
 800871e:	2101      	movs	r1, #1
 8008720:	4618      	mov	r0, r3
 8008722:	f001 fd37 	bl	800a194 <RCCEx_PLL2_Config>
 8008726:	4603      	mov	r3, r0
 8008728:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800872a:	e012      	b.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	3324      	adds	r3, #36	; 0x24
 8008730:	2101      	movs	r1, #1
 8008732:	4618      	mov	r0, r3
 8008734:	f001 fde0 	bl	800a2f8 <RCCEx_PLL3_Config>
 8008738:	4603      	mov	r3, r0
 800873a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800873c:	e009      	b.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	75fb      	strb	r3, [r7, #23]
      break;
 8008742:	e006      	b.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008744:	bf00      	nop
 8008746:	e004      	b.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008748:	bf00      	nop
 800874a:	e002      	b.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800874c:	bf00      	nop
 800874e:	e000      	b.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008750:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008752:	7dfb      	ldrb	r3, [r7, #23]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d109      	bne.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008758:	4b73      	ldr	r3, [pc, #460]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800875a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800875c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008764:	4970      	ldr	r1, [pc, #448]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008766:	4313      	orrs	r3, r2
 8008768:	650b      	str	r3, [r1, #80]	; 0x50
 800876a:	e001      	b.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800876c:	7dfb      	ldrb	r3, [r7, #23]
 800876e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d04b      	beq.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008782:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008786:	d02e      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8008788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800878c:	d828      	bhi.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800878e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008792:	d02a      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8008794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008798:	d822      	bhi.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800879a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800879e:	d026      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80087a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087a4:	d81c      	bhi.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80087a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087aa:	d010      	beq.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x496>
 80087ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087b0:	d816      	bhi.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d01d      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80087b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087ba:	d111      	bne.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	3304      	adds	r3, #4
 80087c0:	2101      	movs	r1, #1
 80087c2:	4618      	mov	r0, r3
 80087c4:	f001 fce6 	bl	800a194 <RCCEx_PLL2_Config>
 80087c8:	4603      	mov	r3, r0
 80087ca:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80087cc:	e012      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	3324      	adds	r3, #36	; 0x24
 80087d2:	2101      	movs	r1, #1
 80087d4:	4618      	mov	r0, r3
 80087d6:	f001 fd8f 	bl	800a2f8 <RCCEx_PLL3_Config>
 80087da:	4603      	mov	r3, r0
 80087dc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80087de:	e009      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	75fb      	strb	r3, [r7, #23]
      break;
 80087e4:	e006      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80087e6:	bf00      	nop
 80087e8:	e004      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80087ea:	bf00      	nop
 80087ec:	e002      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80087ee:	bf00      	nop
 80087f0:	e000      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80087f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087f4:	7dfb      	ldrb	r3, [r7, #23]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10a      	bne.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80087fa:	4b4b      	ldr	r3, [pc, #300]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80087fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087fe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008808:	4947      	ldr	r1, [pc, #284]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800880a:	4313      	orrs	r3, r2
 800880c:	658b      	str	r3, [r1, #88]	; 0x58
 800880e:	e001      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008810:	7dfb      	ldrb	r3, [r7, #23]
 8008812:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800881c:	2b00      	cmp	r3, #0
 800881e:	d02f      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008828:	d00e      	beq.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800882a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800882e:	d814      	bhi.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008830:	2b00      	cmp	r3, #0
 8008832:	d015      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008834:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008838:	d10f      	bne.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800883a:	4b3b      	ldr	r3, [pc, #236]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800883c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800883e:	4a3a      	ldr	r2, [pc, #232]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008844:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008846:	e00c      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	3304      	adds	r3, #4
 800884c:	2101      	movs	r1, #1
 800884e:	4618      	mov	r0, r3
 8008850:	f001 fca0 	bl	800a194 <RCCEx_PLL2_Config>
 8008854:	4603      	mov	r3, r0
 8008856:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008858:	e003      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	75fb      	strb	r3, [r7, #23]
      break;
 800885e:	e000      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8008860:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008862:	7dfb      	ldrb	r3, [r7, #23]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d109      	bne.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008868:	4b2f      	ldr	r3, [pc, #188]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800886a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800886c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008874:	492c      	ldr	r1, [pc, #176]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008876:	4313      	orrs	r3, r2
 8008878:	650b      	str	r3, [r1, #80]	; 0x50
 800887a:	e001      	b.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800887c:	7dfb      	ldrb	r3, [r7, #23]
 800887e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d032      	beq.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008890:	2b03      	cmp	r3, #3
 8008892:	d81b      	bhi.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8008894:	a201      	add	r2, pc, #4	; (adr r2, 800889c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8008896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889a:	bf00      	nop
 800889c:	080088d3 	.word	0x080088d3
 80088a0:	080088ad 	.word	0x080088ad
 80088a4:	080088bb 	.word	0x080088bb
 80088a8:	080088d3 	.word	0x080088d3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088ac:	4b1e      	ldr	r3, [pc, #120]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80088ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b0:	4a1d      	ldr	r2, [pc, #116]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80088b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80088b8:	e00c      	b.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	3304      	adds	r3, #4
 80088be:	2102      	movs	r1, #2
 80088c0:	4618      	mov	r0, r3
 80088c2:	f001 fc67 	bl	800a194 <RCCEx_PLL2_Config>
 80088c6:	4603      	mov	r3, r0
 80088c8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80088ca:	e003      	b.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	75fb      	strb	r3, [r7, #23]
      break;
 80088d0:	e000      	b.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80088d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088d4:	7dfb      	ldrb	r3, [r7, #23]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d109      	bne.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80088da:	4b13      	ldr	r3, [pc, #76]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80088dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088de:	f023 0203 	bic.w	r2, r3, #3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088e6:	4910      	ldr	r1, [pc, #64]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80088e8:	4313      	orrs	r3, r2
 80088ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80088ec:	e001      	b.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ee:	7dfb      	ldrb	r3, [r7, #23]
 80088f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f000 808a 	beq.w	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008900:	4b0a      	ldr	r3, [pc, #40]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a09      	ldr	r2, [pc, #36]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800890a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800890c:	f7fa fb46 	bl	8002f9c <HAL_GetTick>
 8008910:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008912:	e00d      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008914:	f7fa fb42 	bl	8002f9c <HAL_GetTick>
 8008918:	4602      	mov	r2, r0
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	2b64      	cmp	r3, #100	; 0x64
 8008920:	d906      	bls.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8008922:	2303      	movs	r3, #3
 8008924:	75fb      	strb	r3, [r7, #23]
        break;
 8008926:	e009      	b.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008928:	58024400 	.word	0x58024400
 800892c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008930:	4bb9      	ldr	r3, [pc, #740]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008938:	2b00      	cmp	r3, #0
 800893a:	d0eb      	beq.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800893c:	7dfb      	ldrb	r3, [r7, #23]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d166      	bne.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008942:	4bb6      	ldr	r3, [pc, #728]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008944:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800894c:	4053      	eors	r3, r2
 800894e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008952:	2b00      	cmp	r3, #0
 8008954:	d013      	beq.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008956:	4bb1      	ldr	r3, [pc, #708]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800895a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800895e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008960:	4bae      	ldr	r3, [pc, #696]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008964:	4aad      	ldr	r2, [pc, #692]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800896a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800896c:	4bab      	ldr	r3, [pc, #684]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800896e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008970:	4aaa      	ldr	r2, [pc, #680]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008976:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008978:	4aa8      	ldr	r2, [pc, #672]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008988:	d115      	bne.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800898a:	f7fa fb07 	bl	8002f9c <HAL_GetTick>
 800898e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008990:	e00b      	b.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008992:	f7fa fb03 	bl	8002f9c <HAL_GetTick>
 8008996:	4602      	mov	r2, r0
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	1ad3      	subs	r3, r2, r3
 800899c:	f241 3288 	movw	r2, #5000	; 0x1388
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d902      	bls.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80089a4:	2303      	movs	r3, #3
 80089a6:	75fb      	strb	r3, [r7, #23]
            break;
 80089a8:	e005      	b.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089aa:	4b9c      	ldr	r3, [pc, #624]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80089ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ae:	f003 0302 	and.w	r3, r3, #2
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d0ed      	beq.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80089b6:	7dfb      	ldrb	r3, [r7, #23]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d126      	bne.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80089c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089ca:	d10d      	bne.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80089cc:	4b93      	ldr	r3, [pc, #588]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80089da:	0919      	lsrs	r1, r3, #4
 80089dc:	4b90      	ldr	r3, [pc, #576]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80089de:	400b      	ands	r3, r1
 80089e0:	498e      	ldr	r1, [pc, #568]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80089e2:	4313      	orrs	r3, r2
 80089e4:	610b      	str	r3, [r1, #16]
 80089e6:	e005      	b.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80089e8:	4b8c      	ldr	r3, [pc, #560]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	4a8b      	ldr	r2, [pc, #556]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80089ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80089f2:	6113      	str	r3, [r2, #16]
 80089f4:	4b89      	ldr	r3, [pc, #548]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80089f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80089fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a02:	4986      	ldr	r1, [pc, #536]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008a04:	4313      	orrs	r3, r2
 8008a06:	670b      	str	r3, [r1, #112]	; 0x70
 8008a08:	e004      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a0a:	7dfb      	ldrb	r3, [r7, #23]
 8008a0c:	75bb      	strb	r3, [r7, #22]
 8008a0e:	e001      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a10:	7dfb      	ldrb	r3, [r7, #23]
 8008a12:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 0301 	and.w	r3, r3, #1
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d07e      	beq.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a24:	2b28      	cmp	r3, #40	; 0x28
 8008a26:	d867      	bhi.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8008a28:	a201      	add	r2, pc, #4	; (adr r2, 8008a30 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8008a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2e:	bf00      	nop
 8008a30:	08008aff 	.word	0x08008aff
 8008a34:	08008af9 	.word	0x08008af9
 8008a38:	08008af9 	.word	0x08008af9
 8008a3c:	08008af9 	.word	0x08008af9
 8008a40:	08008af9 	.word	0x08008af9
 8008a44:	08008af9 	.word	0x08008af9
 8008a48:	08008af9 	.word	0x08008af9
 8008a4c:	08008af9 	.word	0x08008af9
 8008a50:	08008ad5 	.word	0x08008ad5
 8008a54:	08008af9 	.word	0x08008af9
 8008a58:	08008af9 	.word	0x08008af9
 8008a5c:	08008af9 	.word	0x08008af9
 8008a60:	08008af9 	.word	0x08008af9
 8008a64:	08008af9 	.word	0x08008af9
 8008a68:	08008af9 	.word	0x08008af9
 8008a6c:	08008af9 	.word	0x08008af9
 8008a70:	08008ae7 	.word	0x08008ae7
 8008a74:	08008af9 	.word	0x08008af9
 8008a78:	08008af9 	.word	0x08008af9
 8008a7c:	08008af9 	.word	0x08008af9
 8008a80:	08008af9 	.word	0x08008af9
 8008a84:	08008af9 	.word	0x08008af9
 8008a88:	08008af9 	.word	0x08008af9
 8008a8c:	08008af9 	.word	0x08008af9
 8008a90:	08008aff 	.word	0x08008aff
 8008a94:	08008af9 	.word	0x08008af9
 8008a98:	08008af9 	.word	0x08008af9
 8008a9c:	08008af9 	.word	0x08008af9
 8008aa0:	08008af9 	.word	0x08008af9
 8008aa4:	08008af9 	.word	0x08008af9
 8008aa8:	08008af9 	.word	0x08008af9
 8008aac:	08008af9 	.word	0x08008af9
 8008ab0:	08008aff 	.word	0x08008aff
 8008ab4:	08008af9 	.word	0x08008af9
 8008ab8:	08008af9 	.word	0x08008af9
 8008abc:	08008af9 	.word	0x08008af9
 8008ac0:	08008af9 	.word	0x08008af9
 8008ac4:	08008af9 	.word	0x08008af9
 8008ac8:	08008af9 	.word	0x08008af9
 8008acc:	08008af9 	.word	0x08008af9
 8008ad0:	08008aff 	.word	0x08008aff
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	3304      	adds	r3, #4
 8008ad8:	2101      	movs	r1, #1
 8008ada:	4618      	mov	r0, r3
 8008adc:	f001 fb5a 	bl	800a194 <RCCEx_PLL2_Config>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008ae4:	e00c      	b.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	3324      	adds	r3, #36	; 0x24
 8008aea:	2101      	movs	r1, #1
 8008aec:	4618      	mov	r0, r3
 8008aee:	f001 fc03 	bl	800a2f8 <RCCEx_PLL3_Config>
 8008af2:	4603      	mov	r3, r0
 8008af4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008af6:	e003      	b.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	75fb      	strb	r3, [r7, #23]
      break;
 8008afc:	e000      	b.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8008afe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b00:	7dfb      	ldrb	r3, [r7, #23]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d109      	bne.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008b06:	4b45      	ldr	r3, [pc, #276]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b0a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b12:	4942      	ldr	r1, [pc, #264]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008b14:	4313      	orrs	r3, r2
 8008b16:	654b      	str	r3, [r1, #84]	; 0x54
 8008b18:	e001      	b.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b1a:	7dfb      	ldrb	r3, [r7, #23]
 8008b1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 0302 	and.w	r3, r3, #2
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d037      	beq.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b2e:	2b05      	cmp	r3, #5
 8008b30:	d820      	bhi.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8008b32:	a201      	add	r2, pc, #4	; (adr r2, 8008b38 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b38:	08008b7b 	.word	0x08008b7b
 8008b3c:	08008b51 	.word	0x08008b51
 8008b40:	08008b63 	.word	0x08008b63
 8008b44:	08008b7b 	.word	0x08008b7b
 8008b48:	08008b7b 	.word	0x08008b7b
 8008b4c:	08008b7b 	.word	0x08008b7b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	3304      	adds	r3, #4
 8008b54:	2101      	movs	r1, #1
 8008b56:	4618      	mov	r0, r3
 8008b58:	f001 fb1c 	bl	800a194 <RCCEx_PLL2_Config>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008b60:	e00c      	b.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	3324      	adds	r3, #36	; 0x24
 8008b66:	2101      	movs	r1, #1
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f001 fbc5 	bl	800a2f8 <RCCEx_PLL3_Config>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008b72:	e003      	b.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	75fb      	strb	r3, [r7, #23]
      break;
 8008b78:	e000      	b.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8008b7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b7c:	7dfb      	ldrb	r3, [r7, #23]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d109      	bne.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008b82:	4b26      	ldr	r3, [pc, #152]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b86:	f023 0207 	bic.w	r2, r3, #7
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b8e:	4923      	ldr	r1, [pc, #140]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008b90:	4313      	orrs	r3, r2
 8008b92:	654b      	str	r3, [r1, #84]	; 0x54
 8008b94:	e001      	b.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b96:	7dfb      	ldrb	r3, [r7, #23]
 8008b98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f003 0304 	and.w	r3, r3, #4
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d040      	beq.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bac:	2b05      	cmp	r3, #5
 8008bae:	d821      	bhi.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8008bb0:	a201      	add	r2, pc, #4	; (adr r2, 8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8008bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb6:	bf00      	nop
 8008bb8:	08008bfb 	.word	0x08008bfb
 8008bbc:	08008bd1 	.word	0x08008bd1
 8008bc0:	08008be3 	.word	0x08008be3
 8008bc4:	08008bfb 	.word	0x08008bfb
 8008bc8:	08008bfb 	.word	0x08008bfb
 8008bcc:	08008bfb 	.word	0x08008bfb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	2101      	movs	r1, #1
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f001 fadc 	bl	800a194 <RCCEx_PLL2_Config>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008be0:	e00c      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	3324      	adds	r3, #36	; 0x24
 8008be6:	2101      	movs	r1, #1
 8008be8:	4618      	mov	r0, r3
 8008bea:	f001 fb85 	bl	800a2f8 <RCCEx_PLL3_Config>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008bf2:	e003      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8008bf8:	e000      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8008bfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bfc:	7dfb      	ldrb	r3, [r7, #23]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d110      	bne.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008c02:	4b06      	ldr	r3, [pc, #24]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c06:	f023 0207 	bic.w	r2, r3, #7
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c10:	4902      	ldr	r1, [pc, #8]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008c12:	4313      	orrs	r3, r2
 8008c14:	658b      	str	r3, [r1, #88]	; 0x58
 8008c16:	e007      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8008c18:	58024800 	.word	0x58024800
 8008c1c:	58024400 	.word	0x58024400
 8008c20:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c24:	7dfb      	ldrb	r3, [r7, #23]
 8008c26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 0320 	and.w	r3, r3, #32
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d04b      	beq.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c3e:	d02e      	beq.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8008c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c44:	d828      	bhi.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c4a:	d02a      	beq.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8008c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c50:	d822      	bhi.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008c52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008c56:	d026      	beq.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008c58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008c5c:	d81c      	bhi.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008c5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c62:	d010      	beq.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8008c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c68:	d816      	bhi.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d01d      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x972>
 8008c6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c72:	d111      	bne.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	3304      	adds	r3, #4
 8008c78:	2100      	movs	r1, #0
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f001 fa8a 	bl	800a194 <RCCEx_PLL2_Config>
 8008c80:	4603      	mov	r3, r0
 8008c82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008c84:	e012      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	3324      	adds	r3, #36	; 0x24
 8008c8a:	2102      	movs	r1, #2
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f001 fb33 	bl	800a2f8 <RCCEx_PLL3_Config>
 8008c92:	4603      	mov	r3, r0
 8008c94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008c96:	e009      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8008c9c:	e006      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008c9e:	bf00      	nop
 8008ca0:	e004      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008ca2:	bf00      	nop
 8008ca4:	e002      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008ca6:	bf00      	nop
 8008ca8:	e000      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008caa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cac:	7dfb      	ldrb	r3, [r7, #23]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10a      	bne.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008cb2:	4bb2      	ldr	r3, [pc, #712]	; (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cb6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cc0:	49ae      	ldr	r1, [pc, #696]	; (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	654b      	str	r3, [r1, #84]	; 0x54
 8008cc6:	e001      	b.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cc8:	7dfb      	ldrb	r3, [r7, #23]
 8008cca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d04b      	beq.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cde:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008ce2:	d02e      	beq.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8008ce4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008ce8:	d828      	bhi.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cee:	d02a      	beq.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8008cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cf4:	d822      	bhi.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008cf6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008cfa:	d026      	beq.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008cfc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d00:	d81c      	bhi.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008d02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d06:	d010      	beq.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8008d08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d0c:	d816      	bhi.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d01d      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8008d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d16:	d111      	bne.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	3304      	adds	r3, #4
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f001 fa38 	bl	800a194 <RCCEx_PLL2_Config>
 8008d24:	4603      	mov	r3, r0
 8008d26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008d28:	e012      	b.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	3324      	adds	r3, #36	; 0x24
 8008d2e:	2102      	movs	r1, #2
 8008d30:	4618      	mov	r0, r3
 8008d32:	f001 fae1 	bl	800a2f8 <RCCEx_PLL3_Config>
 8008d36:	4603      	mov	r3, r0
 8008d38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008d3a:	e009      	b.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8008d40:	e006      	b.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008d42:	bf00      	nop
 8008d44:	e004      	b.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008d46:	bf00      	nop
 8008d48:	e002      	b.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008d4a:	bf00      	nop
 8008d4c:	e000      	b.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008d4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d50:	7dfb      	ldrb	r3, [r7, #23]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10a      	bne.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008d56:	4b89      	ldr	r3, [pc, #548]	; (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d5a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d64:	4985      	ldr	r1, [pc, #532]	; (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008d66:	4313      	orrs	r3, r2
 8008d68:	658b      	str	r3, [r1, #88]	; 0x58
 8008d6a:	e001      	b.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d6c:	7dfb      	ldrb	r3, [r7, #23]
 8008d6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d04b      	beq.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008d82:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008d86:	d02e      	beq.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8008d88:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008d8c:	d828      	bhi.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d92:	d02a      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8008d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d98:	d822      	bhi.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008d9a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008d9e:	d026      	beq.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8008da0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008da4:	d81c      	bhi.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008da6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008daa:	d010      	beq.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8008dac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008db0:	d816      	bhi.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d01d      	beq.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8008db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dba:	d111      	bne.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	3304      	adds	r3, #4
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f001 f9e6 	bl	800a194 <RCCEx_PLL2_Config>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008dcc:	e012      	b.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	3324      	adds	r3, #36	; 0x24
 8008dd2:	2102      	movs	r1, #2
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f001 fa8f 	bl	800a2f8 <RCCEx_PLL3_Config>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008dde:	e009      	b.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	75fb      	strb	r3, [r7, #23]
      break;
 8008de4:	e006      	b.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008de6:	bf00      	nop
 8008de8:	e004      	b.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008dea:	bf00      	nop
 8008dec:	e002      	b.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008dee:	bf00      	nop
 8008df0:	e000      	b.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008df2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008df4:	7dfb      	ldrb	r3, [r7, #23]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d10a      	bne.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008dfa:	4b60      	ldr	r3, [pc, #384]	; (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e08:	495c      	ldr	r1, [pc, #368]	; (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	658b      	str	r3, [r1, #88]	; 0x58
 8008e0e:	e001      	b.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e10:	7dfb      	ldrb	r3, [r7, #23]
 8008e12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 0308 	and.w	r3, r3, #8
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d018      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e28:	d10a      	bne.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	3324      	adds	r3, #36	; 0x24
 8008e2e:	2102      	movs	r1, #2
 8008e30:	4618      	mov	r0, r3
 8008e32:	f001 fa61 	bl	800a2f8 <RCCEx_PLL3_Config>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d001      	beq.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008e40:	4b4e      	ldr	r3, [pc, #312]	; (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e4c:	494b      	ldr	r1, [pc, #300]	; (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 0310 	and.w	r3, r3, #16
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d01a      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e68:	d10a      	bne.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	3324      	adds	r3, #36	; 0x24
 8008e6e:	2102      	movs	r1, #2
 8008e70:	4618      	mov	r0, r3
 8008e72:	f001 fa41 	bl	800a2f8 <RCCEx_PLL3_Config>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d001      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008e80:	4b3e      	ldr	r3, [pc, #248]	; (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e8e:	493b      	ldr	r1, [pc, #236]	; (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008e90:	4313      	orrs	r3, r2
 8008e92:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d034      	beq.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ea6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008eaa:	d01d      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008eac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008eb0:	d817      	bhi.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d003      	beq.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008eba:	d009      	beq.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008ebc:	e011      	b.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f001 f965 	bl	800a194 <RCCEx_PLL2_Config>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008ece:	e00c      	b.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	3324      	adds	r3, #36	; 0x24
 8008ed4:	2102      	movs	r1, #2
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f001 fa0e 	bl	800a2f8 <RCCEx_PLL3_Config>
 8008edc:	4603      	mov	r3, r0
 8008ede:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008ee0:	e003      	b.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	75fb      	strb	r3, [r7, #23]
      break;
 8008ee6:	e000      	b.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8008ee8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008eea:	7dfb      	ldrb	r3, [r7, #23]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10a      	bne.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008ef0:	4b22      	ldr	r3, [pc, #136]	; (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ef4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008efe:	491f      	ldr	r1, [pc, #124]	; (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008f00:	4313      	orrs	r3, r2
 8008f02:	658b      	str	r3, [r1, #88]	; 0x58
 8008f04:	e001      	b.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f06:	7dfb      	ldrb	r3, [r7, #23]
 8008f08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d036      	beq.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f20:	d01c      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008f22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f26:	d816      	bhi.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008f28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f2c:	d003      	beq.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008f2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f32:	d007      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8008f34:	e00f      	b.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f36:	4b11      	ldr	r3, [pc, #68]	; (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3a:	4a10      	ldr	r2, [pc, #64]	; (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008f42:	e00c      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	3324      	adds	r3, #36	; 0x24
 8008f48:	2101      	movs	r1, #1
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f001 f9d4 	bl	800a2f8 <RCCEx_PLL3_Config>
 8008f50:	4603      	mov	r3, r0
 8008f52:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008f54:	e003      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	75fb      	strb	r3, [r7, #23]
      break;
 8008f5a:	e000      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8008f5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f5e:	7dfb      	ldrb	r3, [r7, #23]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d10d      	bne.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008f64:	4b05      	ldr	r3, [pc, #20]	; (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f72:	4902      	ldr	r1, [pc, #8]	; (8008f7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008f74:	4313      	orrs	r3, r2
 8008f76:	654b      	str	r3, [r1, #84]	; 0x54
 8008f78:	e004      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8008f7a:	bf00      	nop
 8008f7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f80:	7dfb      	ldrb	r3, [r7, #23]
 8008f82:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d029      	beq.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d003      	beq.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f9c:	d007      	beq.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8008f9e:	e00f      	b.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fa0:	4b61      	ldr	r3, [pc, #388]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa4:	4a60      	ldr	r2, [pc, #384]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008fa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008faa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008fac:	e00b      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	3304      	adds	r3, #4
 8008fb2:	2102      	movs	r1, #2
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f001 f8ed 	bl	800a194 <RCCEx_PLL2_Config>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008fbe:	e002      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	75fb      	strb	r3, [r7, #23]
      break;
 8008fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fc6:	7dfb      	ldrb	r3, [r7, #23]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d109      	bne.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008fcc:	4b56      	ldr	r3, [pc, #344]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fd8:	4953      	ldr	r1, [pc, #332]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008fde:	e001      	b.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fe0:	7dfb      	ldrb	r3, [r7, #23]
 8008fe2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00a      	beq.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	3324      	adds	r3, #36	; 0x24
 8008ff4:	2102      	movs	r1, #2
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f001 f97e 	bl	800a2f8 <RCCEx_PLL3_Config>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d001      	beq.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800900e:	2b00      	cmp	r3, #0
 8009010:	d030      	beq.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009016:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800901a:	d017      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800901c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009020:	d811      	bhi.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8009022:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009026:	d013      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8009028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800902c:	d80b      	bhi.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800902e:	2b00      	cmp	r3, #0
 8009030:	d010      	beq.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8009032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009036:	d106      	bne.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009038:	4b3b      	ldr	r3, [pc, #236]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800903a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800903c:	4a3a      	ldr	r2, [pc, #232]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800903e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009042:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009044:	e007      	b.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	75fb      	strb	r3, [r7, #23]
      break;
 800904a:	e004      	b.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800904c:	bf00      	nop
 800904e:	e002      	b.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8009050:	bf00      	nop
 8009052:	e000      	b.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8009054:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009056:	7dfb      	ldrb	r3, [r7, #23]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d109      	bne.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800905c:	4b32      	ldr	r3, [pc, #200]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800905e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009060:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009068:	492f      	ldr	r1, [pc, #188]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800906a:	4313      	orrs	r3, r2
 800906c:	654b      	str	r3, [r1, #84]	; 0x54
 800906e:	e001      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009070:	7dfb      	ldrb	r3, [r7, #23]
 8009072:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800907c:	2b00      	cmp	r3, #0
 800907e:	d008      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009080:	4b29      	ldr	r3, [pc, #164]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009084:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800908c:	4926      	ldr	r1, [pc, #152]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800908e:	4313      	orrs	r3, r2
 8009090:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800909a:	2b00      	cmp	r3, #0
 800909c:	d008      	beq.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800909e:	4b22      	ldr	r3, [pc, #136]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80090a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090a2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090aa:	491f      	ldr	r1, [pc, #124]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80090ac:	4313      	orrs	r3, r2
 80090ae:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00d      	beq.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80090bc:	4b1a      	ldr	r3, [pc, #104]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	4a19      	ldr	r2, [pc, #100]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80090c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80090c6:	6113      	str	r3, [r2, #16]
 80090c8:	4b17      	ldr	r3, [pc, #92]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80090ca:	691a      	ldr	r2, [r3, #16]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80090d2:	4915      	ldr	r1, [pc, #84]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80090d4:	4313      	orrs	r3, r2
 80090d6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	da08      	bge.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80090e0:	4b11      	ldr	r3, [pc, #68]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80090e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090e4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ec:	490e      	ldr	r1, [pc, #56]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80090ee:	4313      	orrs	r3, r2
 80090f0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d009      	beq.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80090fe:	4b0a      	ldr	r3, [pc, #40]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009102:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800910c:	4906      	ldr	r1, [pc, #24]	; (8009128 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800910e:	4313      	orrs	r3, r2
 8009110:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009112:	7dbb      	ldrb	r3, [r7, #22]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d101      	bne.n	800911c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8009118:	2300      	movs	r3, #0
 800911a:	e000      	b.n	800911e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800911c:	2301      	movs	r3, #1
}
 800911e:	4618      	mov	r0, r3
 8009120:	3718      	adds	r7, #24
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	58024400 	.word	0x58024400

0800912c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b090      	sub	sp, #64	; 0x40
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800913a:	f040 8089 	bne.w	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800913e:	4b95      	ldr	r3, [pc, #596]	; (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009142:	f003 0307 	and.w	r3, r3, #7
 8009146:	633b      	str	r3, [r7, #48]	; 0x30
 8009148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914a:	2b04      	cmp	r3, #4
 800914c:	d87d      	bhi.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800914e:	a201      	add	r2, pc, #4	; (adr r2, 8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8009150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009154:	08009169 	.word	0x08009169
 8009158:	0800918d 	.word	0x0800918d
 800915c:	080091b1 	.word	0x080091b1
 8009160:	08009245 	.word	0x08009245
 8009164:	080091d5 	.word	0x080091d5

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009168:	4b8a      	ldr	r3, [pc, #552]	; (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009170:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009174:	d107      	bne.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800917a:	4618      	mov	r0, r3
 800917c:	f000 feb8 	bl	8009ef0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009182:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009184:	e3ed      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009186:	2300      	movs	r3, #0
 8009188:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800918a:	e3ea      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800918c:	4b81      	ldr	r3, [pc, #516]	; (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009194:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009198:	d107      	bne.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800919a:	f107 0318 	add.w	r3, r7, #24
 800919e:	4618      	mov	r0, r3
 80091a0:	f000 fbfe 	bl	80099a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091a8:	e3db      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80091aa:	2300      	movs	r3, #0
 80091ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091ae:	e3d8      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091b0:	4b78      	ldr	r3, [pc, #480]	; (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091bc:	d107      	bne.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091be:	f107 030c 	add.w	r3, r7, #12
 80091c2:	4618      	mov	r0, r3
 80091c4:	f000 fd40 	bl	8009c48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091cc:	e3c9      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80091ce:	2300      	movs	r3, #0
 80091d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091d2:	e3c6      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80091d4:	4b6f      	ldr	r3, [pc, #444]	; (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80091d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80091dc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091de:	4b6d      	ldr	r3, [pc, #436]	; (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 0304 	and.w	r3, r3, #4
 80091e6:	2b04      	cmp	r3, #4
 80091e8:	d10c      	bne.n	8009204 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80091ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d109      	bne.n	8009204 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80091f0:	4b68      	ldr	r3, [pc, #416]	; (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	08db      	lsrs	r3, r3, #3
 80091f6:	f003 0303 	and.w	r3, r3, #3
 80091fa:	4a67      	ldr	r2, [pc, #412]	; (8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80091fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009200:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009202:	e01e      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009204:	4b63      	ldr	r3, [pc, #396]	; (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800920c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009210:	d106      	bne.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009214:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009218:	d102      	bne.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800921a:	4b60      	ldr	r3, [pc, #384]	; (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800921c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800921e:	e010      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009220:	4b5c      	ldr	r3, [pc, #368]	; (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009228:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800922c:	d106      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800922e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009234:	d102      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009236:	4b5a      	ldr	r3, [pc, #360]	; (80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009238:	63fb      	str	r3, [r7, #60]	; 0x3c
 800923a:	e002      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800923c:	2300      	movs	r3, #0
 800923e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009240:	e38f      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009242:	e38e      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009244:	4b57      	ldr	r3, [pc, #348]	; (80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009246:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009248:	e38b      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800924a:	2300      	movs	r3, #0
 800924c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800924e:	e388      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009256:	f040 80a7 	bne.w	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800925a:	4b4e      	ldr	r3, [pc, #312]	; (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800925c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800925e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009262:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009266:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800926a:	d054      	beq.n	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800926c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009272:	f200 808b 	bhi.w	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8009276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009278:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800927c:	f000 8083 	beq.w	8009386 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009282:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009286:	f200 8081 	bhi.w	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800928a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800928c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009290:	d02f      	beq.n	80092f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8009292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009294:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009298:	d878      	bhi.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800929a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929c:	2b00      	cmp	r3, #0
 800929e:	d004      	beq.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80092a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092a6:	d012      	beq.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80092a8:	e070      	b.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092aa:	4b3a      	ldr	r3, [pc, #232]	; (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092b6:	d107      	bne.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092bc:	4618      	mov	r0, r3
 80092be:	f000 fe17 	bl	8009ef0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80092c6:	e34c      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80092c8:	2300      	movs	r3, #0
 80092ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092cc:	e349      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092ce:	4b31      	ldr	r3, [pc, #196]	; (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092da:	d107      	bne.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092dc:	f107 0318 	add.w	r3, r7, #24
 80092e0:	4618      	mov	r0, r3
 80092e2:	f000 fb5d 	bl	80099a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80092ea:	e33a      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80092ec:	2300      	movs	r3, #0
 80092ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092f0:	e337      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092f2:	4b28      	ldr	r3, [pc, #160]	; (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092fe:	d107      	bne.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009300:	f107 030c 	add.w	r3, r7, #12
 8009304:	4618      	mov	r0, r3
 8009306:	f000 fc9f 	bl	8009c48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800930e:	e328      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009310:	2300      	movs	r3, #0
 8009312:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009314:	e325      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009316:	4b1f      	ldr	r3, [pc, #124]	; (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800931a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800931e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009320:	4b1c      	ldr	r3, [pc, #112]	; (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 0304 	and.w	r3, r3, #4
 8009328:	2b04      	cmp	r3, #4
 800932a:	d10c      	bne.n	8009346 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800932c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800932e:	2b00      	cmp	r3, #0
 8009330:	d109      	bne.n	8009346 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009332:	4b18      	ldr	r3, [pc, #96]	; (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	08db      	lsrs	r3, r3, #3
 8009338:	f003 0303 	and.w	r3, r3, #3
 800933c:	4a16      	ldr	r2, [pc, #88]	; (8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800933e:	fa22 f303 	lsr.w	r3, r2, r3
 8009342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009344:	e01e      	b.n	8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009346:	4b13      	ldr	r3, [pc, #76]	; (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800934e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009352:	d106      	bne.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8009354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009356:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800935a:	d102      	bne.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800935c:	4b0f      	ldr	r3, [pc, #60]	; (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800935e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009360:	e010      	b.n	8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009362:	4b0c      	ldr	r3, [pc, #48]	; (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800936a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800936e:	d106      	bne.n	800937e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8009370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009372:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009376:	d102      	bne.n	800937e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009378:	4b09      	ldr	r3, [pc, #36]	; (80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800937a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800937c:	e002      	b.n	8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800937e:	2300      	movs	r3, #0
 8009380:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009382:	e2ee      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009384:	e2ed      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009386:	4b07      	ldr	r3, [pc, #28]	; (80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009388:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800938a:	e2ea      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800938c:	2300      	movs	r3, #0
 800938e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009390:	e2e7      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009392:	bf00      	nop
 8009394:	58024400 	.word	0x58024400
 8009398:	03d09000 	.word	0x03d09000
 800939c:	003d0900 	.word	0x003d0900
 80093a0:	017d7840 	.word	0x017d7840
 80093a4:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093ae:	f040 809c 	bne.w	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80093b2:	4b9e      	ldr	r3, [pc, #632]	; (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80093b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093b6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80093ba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80093bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80093c2:	d054      	beq.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80093c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80093ca:	f200 808b 	bhi.w	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80093ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80093d4:	f000 8083 	beq.w	80094de <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80093d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80093de:	f200 8081 	bhi.w	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80093e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093e8:	d02f      	beq.n	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80093ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093f0:	d878      	bhi.n	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80093f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d004      	beq.n	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80093f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80093fe:	d012      	beq.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8009400:	e070      	b.n	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009402:	4b8a      	ldr	r3, [pc, #552]	; (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800940a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800940e:	d107      	bne.n	8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009414:	4618      	mov	r0, r3
 8009416:	f000 fd6b 	bl	8009ef0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800941a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800941e:	e2a0      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009420:	2300      	movs	r3, #0
 8009422:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009424:	e29d      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009426:	4b81      	ldr	r3, [pc, #516]	; (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800942e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009432:	d107      	bne.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009434:	f107 0318 	add.w	r3, r7, #24
 8009438:	4618      	mov	r0, r3
 800943a:	f000 fab1 	bl	80099a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8009442:	e28e      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009444:	2300      	movs	r3, #0
 8009446:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009448:	e28b      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800944a:	4b78      	ldr	r3, [pc, #480]	; (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009452:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009456:	d107      	bne.n	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009458:	f107 030c 	add.w	r3, r7, #12
 800945c:	4618      	mov	r0, r3
 800945e:	f000 fbf3 	bl	8009c48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009466:	e27c      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009468:	2300      	movs	r3, #0
 800946a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800946c:	e279      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800946e:	4b6f      	ldr	r3, [pc, #444]	; (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009472:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009476:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009478:	4b6c      	ldr	r3, [pc, #432]	; (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f003 0304 	and.w	r3, r3, #4
 8009480:	2b04      	cmp	r3, #4
 8009482:	d10c      	bne.n	800949e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009486:	2b00      	cmp	r3, #0
 8009488:	d109      	bne.n	800949e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800948a:	4b68      	ldr	r3, [pc, #416]	; (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	08db      	lsrs	r3, r3, #3
 8009490:	f003 0303 	and.w	r3, r3, #3
 8009494:	4a66      	ldr	r2, [pc, #408]	; (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009496:	fa22 f303 	lsr.w	r3, r2, r3
 800949a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800949c:	e01e      	b.n	80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800949e:	4b63      	ldr	r3, [pc, #396]	; (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094aa:	d106      	bne.n	80094ba <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80094ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094b2:	d102      	bne.n	80094ba <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80094b4:	4b5f      	ldr	r3, [pc, #380]	; (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80094b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094b8:	e010      	b.n	80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094ba:	4b5c      	ldr	r3, [pc, #368]	; (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094c6:	d106      	bne.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80094c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094ce:	d102      	bne.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80094d0:	4b59      	ldr	r3, [pc, #356]	; (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80094d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094d4:	e002      	b.n	80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80094d6:	2300      	movs	r3, #0
 80094d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80094da:	e242      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80094dc:	e241      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80094de:	4b57      	ldr	r3, [pc, #348]	; (800963c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80094e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094e2:	e23e      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80094e4:	2300      	movs	r3, #0
 80094e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094e8:	e23b      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094f0:	f040 80a6 	bne.w	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80094f4:	4b4d      	ldr	r3, [pc, #308]	; (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80094f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094f8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80094fc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80094fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009500:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009504:	d054      	beq.n	80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8009506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009508:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800950c:	f200 808b 	bhi.w	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009512:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009516:	f000 8083 	beq.w	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800951a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009520:	f200 8081 	bhi.w	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800952a:	d02f      	beq.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800952c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009532:	d878      	bhi.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009536:	2b00      	cmp	r3, #0
 8009538:	d004      	beq.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800953a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009540:	d012      	beq.n	8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8009542:	e070      	b.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009544:	4b39      	ldr	r3, [pc, #228]	; (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800954c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009550:	d107      	bne.n	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009556:	4618      	mov	r0, r3
 8009558:	f000 fcca 	bl	8009ef0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800955c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009560:	e1ff      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009562:	2300      	movs	r3, #0
 8009564:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009566:	e1fc      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009568:	4b30      	ldr	r3, [pc, #192]	; (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009574:	d107      	bne.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009576:	f107 0318 	add.w	r3, r7, #24
 800957a:	4618      	mov	r0, r3
 800957c:	f000 fa10 	bl	80099a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009584:	e1ed      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009586:	2300      	movs	r3, #0
 8009588:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800958a:	e1ea      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800958c:	4b27      	ldr	r3, [pc, #156]	; (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009594:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009598:	d107      	bne.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800959a:	f107 030c 	add.w	r3, r7, #12
 800959e:	4618      	mov	r0, r3
 80095a0:	f000 fb52 	bl	8009c48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80095a8:	e1db      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80095aa:	2300      	movs	r3, #0
 80095ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095ae:	e1d8      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80095b0:	4b1e      	ldr	r3, [pc, #120]	; (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80095b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80095b8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095ba:	4b1c      	ldr	r3, [pc, #112]	; (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f003 0304 	and.w	r3, r3, #4
 80095c2:	2b04      	cmp	r3, #4
 80095c4:	d10c      	bne.n	80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 80095c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d109      	bne.n	80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80095cc:	4b17      	ldr	r3, [pc, #92]	; (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	08db      	lsrs	r3, r3, #3
 80095d2:	f003 0303 	and.w	r3, r3, #3
 80095d6:	4a16      	ldr	r2, [pc, #88]	; (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80095d8:	fa22 f303 	lsr.w	r3, r2, r3
 80095dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095de:	e01e      	b.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80095e0:	4b12      	ldr	r3, [pc, #72]	; (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095ec:	d106      	bne.n	80095fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80095ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095f4:	d102      	bne.n	80095fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80095f6:	4b0f      	ldr	r3, [pc, #60]	; (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80095f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095fa:	e010      	b.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80095fc:	4b0b      	ldr	r3, [pc, #44]	; (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009604:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009608:	d106      	bne.n	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800960a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800960c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009610:	d102      	bne.n	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009612:	4b09      	ldr	r3, [pc, #36]	; (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8009614:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009616:	e002      	b.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009618:	2300      	movs	r3, #0
 800961a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800961c:	e1a1      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800961e:	e1a0      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009620:	4b06      	ldr	r3, [pc, #24]	; (800963c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8009622:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009624:	e19d      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8009626:	2300      	movs	r3, #0
 8009628:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800962a:	e19a      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800962c:	58024400 	.word	0x58024400
 8009630:	03d09000 	.word	0x03d09000
 8009634:	003d0900 	.word	0x003d0900
 8009638:	017d7840 	.word	0x017d7840
 800963c:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009646:	d173      	bne.n	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009648:	4b9a      	ldr	r3, [pc, #616]	; (80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800964a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800964c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009650:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009654:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009658:	d02f      	beq.n	80096ba <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800965a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009660:	d863      	bhi.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8009662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009664:	2b00      	cmp	r3, #0
 8009666:	d004      	beq.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8009668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800966a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800966e:	d012      	beq.n	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8009670:	e05b      	b.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009672:	4b90      	ldr	r3, [pc, #576]	; (80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800967a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800967e:	d107      	bne.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009680:	f107 0318 	add.w	r3, r7, #24
 8009684:	4618      	mov	r0, r3
 8009686:	f000 f98b 	bl	80099a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800968e:	e168      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009690:	2300      	movs	r3, #0
 8009692:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009694:	e165      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009696:	4b87      	ldr	r3, [pc, #540]	; (80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800969e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096a2:	d107      	bne.n	80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096a4:	f107 030c 	add.w	r3, r7, #12
 80096a8:	4618      	mov	r0, r3
 80096aa:	f000 facd 	bl	8009c48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80096b2:	e156      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80096b4:	2300      	movs	r3, #0
 80096b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096b8:	e153      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80096ba:	4b7e      	ldr	r3, [pc, #504]	; (80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80096bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80096c2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80096c4:	4b7b      	ldr	r3, [pc, #492]	; (80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f003 0304 	and.w	r3, r3, #4
 80096cc:	2b04      	cmp	r3, #4
 80096ce:	d10c      	bne.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 80096d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d109      	bne.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80096d6:	4b77      	ldr	r3, [pc, #476]	; (80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	08db      	lsrs	r3, r3, #3
 80096dc:	f003 0303 	and.w	r3, r3, #3
 80096e0:	4a75      	ldr	r2, [pc, #468]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80096e2:	fa22 f303 	lsr.w	r3, r2, r3
 80096e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096e8:	e01e      	b.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80096ea:	4b72      	ldr	r3, [pc, #456]	; (80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096f6:	d106      	bne.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80096f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096fe:	d102      	bne.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009700:	4b6e      	ldr	r3, [pc, #440]	; (80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8009702:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009704:	e010      	b.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009706:	4b6b      	ldr	r3, [pc, #428]	; (80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800970e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009712:	d106      	bne.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8009714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009716:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800971a:	d102      	bne.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800971c:	4b68      	ldr	r3, [pc, #416]	; (80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800971e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009720:	e002      	b.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009722:	2300      	movs	r3, #0
 8009724:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009726:	e11c      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009728:	e11b      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800972a:	2300      	movs	r3, #0
 800972c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800972e:	e118      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009736:	d133      	bne.n	80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009738:	4b5e      	ldr	r3, [pc, #376]	; (80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800973a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800973c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009740:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009744:	2b00      	cmp	r3, #0
 8009746:	d004      	beq.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8009748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800974e:	d012      	beq.n	8009776 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8009750:	e023      	b.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009752:	4b58      	ldr	r3, [pc, #352]	; (80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800975a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800975e:	d107      	bne.n	8009770 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009764:	4618      	mov	r0, r3
 8009766:	f000 fbc3 	bl	8009ef0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800976a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800976e:	e0f8      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009770:	2300      	movs	r3, #0
 8009772:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009774:	e0f5      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009776:	4b4f      	ldr	r3, [pc, #316]	; (80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800977e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009782:	d107      	bne.n	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009784:	f107 0318 	add.w	r3, r7, #24
 8009788:	4618      	mov	r0, r3
 800978a:	f000 f909 	bl	80099a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800978e:	6a3b      	ldr	r3, [r7, #32]
 8009790:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009792:	e0e6      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009794:	2300      	movs	r3, #0
 8009796:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009798:	e0e3      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800979a:	2300      	movs	r3, #0
 800979c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800979e:	e0e0      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097a6:	f040 808d 	bne.w	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80097aa:	4b42      	ldr	r3, [pc, #264]	; (80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80097ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ae:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80097b2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80097b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097ba:	d06b      	beq.n	8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 80097bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097c2:	d874      	bhi.n	80098ae <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80097c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097ca:	d056      	beq.n	800987a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80097cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097d2:	d86c      	bhi.n	80098ae <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80097d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097da:	d03b      	beq.n	8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80097dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097e2:	d864      	bhi.n	80098ae <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80097e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097ea:	d021      	beq.n	8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80097ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097f2:	d85c      	bhi.n	80098ae <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80097f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d004      	beq.n	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80097fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009800:	d004      	beq.n	800980c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8009802:	e054      	b.n	80098ae <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009804:	f000 f8b6 	bl	8009974 <HAL_RCCEx_GetD3PCLK1Freq>
 8009808:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800980a:	e0aa      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800980c:	4b29      	ldr	r3, [pc, #164]	; (80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009814:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009818:	d107      	bne.n	800982a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800981a:	f107 0318 	add.w	r3, r7, #24
 800981e:	4618      	mov	r0, r3
 8009820:	f000 f8be 	bl	80099a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009828:	e09b      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800982a:	2300      	movs	r3, #0
 800982c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800982e:	e098      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009830:	4b20      	ldr	r3, [pc, #128]	; (80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800983c:	d107      	bne.n	800984e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800983e:	f107 030c 	add.w	r3, r7, #12
 8009842:	4618      	mov	r0, r3
 8009844:	f000 fa00 	bl	8009c48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800984c:	e089      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800984e:	2300      	movs	r3, #0
 8009850:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009852:	e086      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009854:	4b17      	ldr	r3, [pc, #92]	; (80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 0304 	and.w	r3, r3, #4
 800985c:	2b04      	cmp	r3, #4
 800985e:	d109      	bne.n	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009860:	4b14      	ldr	r3, [pc, #80]	; (80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	08db      	lsrs	r3, r3, #3
 8009866:	f003 0303 	and.w	r3, r3, #3
 800986a:	4a13      	ldr	r2, [pc, #76]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800986c:	fa22 f303 	lsr.w	r3, r2, r3
 8009870:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009872:	e076      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009874:	2300      	movs	r3, #0
 8009876:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009878:	e073      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800987a:	4b0e      	ldr	r3, [pc, #56]	; (80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009886:	d102      	bne.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8009888:	4b0c      	ldr	r3, [pc, #48]	; (80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800988a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800988c:	e069      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800988e:	2300      	movs	r3, #0
 8009890:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009892:	e066      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009894:	4b07      	ldr	r3, [pc, #28]	; (80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800989c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098a0:	d102      	bne.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 80098a2:	4b07      	ldr	r3, [pc, #28]	; (80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80098a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80098a6:	e05c      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80098a8:	2300      	movs	r3, #0
 80098aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098ac:	e059      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80098ae:	2300      	movs	r3, #0
 80098b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098b2:	e056      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80098b4:	58024400 	.word	0x58024400
 80098b8:	03d09000 	.word	0x03d09000
 80098bc:	003d0900 	.word	0x003d0900
 80098c0:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098ca:	d148      	bne.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80098cc:	4b27      	ldr	r3, [pc, #156]	; (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80098ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80098d4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80098d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098dc:	d02a      	beq.n	8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 80098de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098e4:	d838      	bhi.n	8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 80098e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d004      	beq.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 80098ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098f2:	d00d      	beq.n	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 80098f4:	e030      	b.n	8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80098f6:	4b1d      	ldr	r3, [pc, #116]	; (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009902:	d102      	bne.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8009904:	4b1a      	ldr	r3, [pc, #104]	; (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009906:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009908:	e02b      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800990a:	2300      	movs	r3, #0
 800990c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800990e:	e028      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009910:	4b16      	ldr	r3, [pc, #88]	; (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009918:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800991c:	d107      	bne.n	800992e <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800991e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009922:	4618      	mov	r0, r3
 8009924:	f000 fae4 	bl	8009ef0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800992c:	e019      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800992e:	2300      	movs	r3, #0
 8009930:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009932:	e016      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009934:	4b0d      	ldr	r3, [pc, #52]	; (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800993c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009940:	d107      	bne.n	8009952 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009942:	f107 0318 	add.w	r3, r7, #24
 8009946:	4618      	mov	r0, r3
 8009948:	f000 f82a 	bl	80099a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009950:	e007      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009952:	2300      	movs	r3, #0
 8009954:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009956:	e004      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8009958:	2300      	movs	r3, #0
 800995a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800995c:	e001      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800995e:	2300      	movs	r3, #0
 8009960:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009964:	4618      	mov	r0, r3
 8009966:	3740      	adds	r7, #64	; 0x40
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	58024400 	.word	0x58024400
 8009970:	017d7840 	.word	0x017d7840

08009974 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009978:	f7fe fc82 	bl	8008280 <HAL_RCC_GetHCLKFreq>
 800997c:	4602      	mov	r2, r0
 800997e:	4b06      	ldr	r3, [pc, #24]	; (8009998 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009980:	6a1b      	ldr	r3, [r3, #32]
 8009982:	091b      	lsrs	r3, r3, #4
 8009984:	f003 0307 	and.w	r3, r3, #7
 8009988:	4904      	ldr	r1, [pc, #16]	; (800999c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800998a:	5ccb      	ldrb	r3, [r1, r3]
 800998c:	f003 031f 	and.w	r3, r3, #31
 8009990:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009994:	4618      	mov	r0, r3
 8009996:	bd80      	pop	{r7, pc}
 8009998:	58024400 	.word	0x58024400
 800999c:	0800e390 	.word	0x0800e390

080099a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b089      	sub	sp, #36	; 0x24
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80099a8:	4ba1      	ldr	r3, [pc, #644]	; (8009c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ac:	f003 0303 	and.w	r3, r3, #3
 80099b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80099b2:	4b9f      	ldr	r3, [pc, #636]	; (8009c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b6:	0b1b      	lsrs	r3, r3, #12
 80099b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80099be:	4b9c      	ldr	r3, [pc, #624]	; (8009c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c2:	091b      	lsrs	r3, r3, #4
 80099c4:	f003 0301 	and.w	r3, r3, #1
 80099c8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80099ca:	4b99      	ldr	r3, [pc, #612]	; (8009c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ce:	08db      	lsrs	r3, r3, #3
 80099d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	fb02 f303 	mul.w	r3, r2, r3
 80099da:	ee07 3a90 	vmov	s15, r3
 80099de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f000 8111 	beq.w	8009c10 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	2b02      	cmp	r3, #2
 80099f2:	f000 8083 	beq.w	8009afc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	f200 80a1 	bhi.w	8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d003      	beq.n	8009a0c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009a04:	69bb      	ldr	r3, [r7, #24]
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d056      	beq.n	8009ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009a0a:	e099      	b.n	8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a0c:	4b88      	ldr	r3, [pc, #544]	; (8009c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f003 0320 	and.w	r3, r3, #32
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d02d      	beq.n	8009a74 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a18:	4b85      	ldr	r3, [pc, #532]	; (8009c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	08db      	lsrs	r3, r3, #3
 8009a1e:	f003 0303 	and.w	r3, r3, #3
 8009a22:	4a84      	ldr	r2, [pc, #528]	; (8009c34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009a24:	fa22 f303 	lsr.w	r3, r2, r3
 8009a28:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	ee07 3a90 	vmov	s15, r3
 8009a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	ee07 3a90 	vmov	s15, r3
 8009a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a42:	4b7b      	ldr	r3, [pc, #492]	; (8009c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a4a:	ee07 3a90 	vmov	s15, r3
 8009a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a56:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009c38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a6e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009a72:	e087      	b.n	8009b84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	ee07 3a90 	vmov	s15, r3
 8009a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009c3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a86:	4b6a      	ldr	r3, [pc, #424]	; (8009c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a8e:	ee07 3a90 	vmov	s15, r3
 8009a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009c38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ab2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ab6:	e065      	b.n	8009b84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	ee07 3a90 	vmov	s15, r3
 8009abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ac2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009c40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aca:	4b59      	ldr	r3, [pc, #356]	; (8009c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ad2:	ee07 3a90 	vmov	s15, r3
 8009ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ade:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009c38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009af6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009afa:	e043      	b.n	8009b84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	ee07 3a90 	vmov	s15, r3
 8009b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b0e:	4b48      	ldr	r3, [pc, #288]	; (8009c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b16:	ee07 3a90 	vmov	s15, r3
 8009b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b22:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009c38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b3e:	e021      	b.n	8009b84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	ee07 3a90 	vmov	s15, r3
 8009b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009c40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b52:	4b37      	ldr	r3, [pc, #220]	; (8009c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b5a:	ee07 3a90 	vmov	s15, r3
 8009b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b66:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009c38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009b84:	4b2a      	ldr	r3, [pc, #168]	; (8009c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b88:	0a5b      	lsrs	r3, r3, #9
 8009b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b8e:	ee07 3a90 	vmov	s15, r3
 8009b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009baa:	ee17 2a90 	vmov	r2, s15
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009bb2:	4b1f      	ldr	r3, [pc, #124]	; (8009c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb6:	0c1b      	lsrs	r3, r3, #16
 8009bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bbc:	ee07 3a90 	vmov	s15, r3
 8009bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bd8:	ee17 2a90 	vmov	r2, s15
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009be0:	4b13      	ldr	r3, [pc, #76]	; (8009c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be4:	0e1b      	lsrs	r3, r3, #24
 8009be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bea:	ee07 3a90 	vmov	s15, r3
 8009bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c06:	ee17 2a90 	vmov	r2, s15
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009c0e:	e008      	b.n	8009c22 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	609a      	str	r2, [r3, #8]
}
 8009c22:	bf00      	nop
 8009c24:	3724      	adds	r7, #36	; 0x24
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	58024400 	.word	0x58024400
 8009c34:	03d09000 	.word	0x03d09000
 8009c38:	46000000 	.word	0x46000000
 8009c3c:	4c742400 	.word	0x4c742400
 8009c40:	4a742400 	.word	0x4a742400
 8009c44:	4bbebc20 	.word	0x4bbebc20

08009c48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b089      	sub	sp, #36	; 0x24
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c50:	4ba1      	ldr	r3, [pc, #644]	; (8009ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c54:	f003 0303 	and.w	r3, r3, #3
 8009c58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009c5a:	4b9f      	ldr	r3, [pc, #636]	; (8009ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c5e:	0d1b      	lsrs	r3, r3, #20
 8009c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009c66:	4b9c      	ldr	r3, [pc, #624]	; (8009ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6a:	0a1b      	lsrs	r3, r3, #8
 8009c6c:	f003 0301 	and.w	r3, r3, #1
 8009c70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009c72:	4b99      	ldr	r3, [pc, #612]	; (8009ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c76:	08db      	lsrs	r3, r3, #3
 8009c78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c7c:	693a      	ldr	r2, [r7, #16]
 8009c7e:	fb02 f303 	mul.w	r3, r2, r3
 8009c82:	ee07 3a90 	vmov	s15, r3
 8009c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f000 8111 	beq.w	8009eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	2b02      	cmp	r3, #2
 8009c9a:	f000 8083 	beq.w	8009da4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	2b02      	cmp	r3, #2
 8009ca2:	f200 80a1 	bhi.w	8009de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d003      	beq.n	8009cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d056      	beq.n	8009d60 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009cb2:	e099      	b.n	8009de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cb4:	4b88      	ldr	r3, [pc, #544]	; (8009ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f003 0320 	and.w	r3, r3, #32
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d02d      	beq.n	8009d1c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009cc0:	4b85      	ldr	r3, [pc, #532]	; (8009ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	08db      	lsrs	r3, r3, #3
 8009cc6:	f003 0303 	and.w	r3, r3, #3
 8009cca:	4a84      	ldr	r2, [pc, #528]	; (8009edc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8009cd0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	ee07 3a90 	vmov	s15, r3
 8009cd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	ee07 3a90 	vmov	s15, r3
 8009ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cea:	4b7b      	ldr	r3, [pc, #492]	; (8009ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cf2:	ee07 3a90 	vmov	s15, r3
 8009cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cfe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d16:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009d1a:	e087      	b.n	8009e2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	ee07 3a90 	vmov	s15, r3
 8009d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d2e:	4b6a      	ldr	r3, [pc, #424]	; (8009ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d36:	ee07 3a90 	vmov	s15, r3
 8009d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d42:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d5e:	e065      	b.n	8009e2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	ee07 3a90 	vmov	s15, r3
 8009d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d72:	4b59      	ldr	r3, [pc, #356]	; (8009ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d7a:	ee07 3a90 	vmov	s15, r3
 8009d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d86:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009da2:	e043      	b.n	8009e2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	ee07 3a90 	vmov	s15, r3
 8009daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009db6:	4b48      	ldr	r3, [pc, #288]	; (8009ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dbe:	ee07 3a90 	vmov	s15, r3
 8009dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dca:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009de2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009de6:	e021      	b.n	8009e2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	ee07 3a90 	vmov	s15, r3
 8009dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009df2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dfa:	4b37      	ldr	r3, [pc, #220]	; (8009ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e02:	ee07 3a90 	vmov	s15, r3
 8009e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e0e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e2a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009e2c:	4b2a      	ldr	r3, [pc, #168]	; (8009ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e30:	0a5b      	lsrs	r3, r3, #9
 8009e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e36:	ee07 3a90 	vmov	s15, r3
 8009e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e46:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e52:	ee17 2a90 	vmov	r2, s15
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009e5a:	4b1f      	ldr	r3, [pc, #124]	; (8009ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e5e:	0c1b      	lsrs	r3, r3, #16
 8009e60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e64:	ee07 3a90 	vmov	s15, r3
 8009e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e74:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e80:	ee17 2a90 	vmov	r2, s15
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009e88:	4b13      	ldr	r3, [pc, #76]	; (8009ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8c:	0e1b      	lsrs	r3, r3, #24
 8009e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e92:	ee07 3a90 	vmov	s15, r3
 8009e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ea2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eae:	ee17 2a90 	vmov	r2, s15
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009eb6:	e008      	b.n	8009eca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	609a      	str	r2, [r3, #8]
}
 8009eca:	bf00      	nop
 8009ecc:	3724      	adds	r7, #36	; 0x24
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop
 8009ed8:	58024400 	.word	0x58024400
 8009edc:	03d09000 	.word	0x03d09000
 8009ee0:	46000000 	.word	0x46000000
 8009ee4:	4c742400 	.word	0x4c742400
 8009ee8:	4a742400 	.word	0x4a742400
 8009eec:	4bbebc20 	.word	0x4bbebc20

08009ef0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b089      	sub	sp, #36	; 0x24
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ef8:	4ba0      	ldr	r3, [pc, #640]	; (800a17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009efc:	f003 0303 	and.w	r3, r3, #3
 8009f00:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009f02:	4b9e      	ldr	r3, [pc, #632]	; (800a17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f06:	091b      	lsrs	r3, r3, #4
 8009f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f0c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009f0e:	4b9b      	ldr	r3, [pc, #620]	; (800a17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f12:	f003 0301 	and.w	r3, r3, #1
 8009f16:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009f18:	4b98      	ldr	r3, [pc, #608]	; (800a17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f1c:	08db      	lsrs	r3, r3, #3
 8009f1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f22:	693a      	ldr	r2, [r7, #16]
 8009f24:	fb02 f303 	mul.w	r3, r2, r3
 8009f28:	ee07 3a90 	vmov	s15, r3
 8009f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f30:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	f000 8111 	beq.w	800a15e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	2b02      	cmp	r3, #2
 8009f40:	f000 8083 	beq.w	800a04a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009f44:	69bb      	ldr	r3, [r7, #24]
 8009f46:	2b02      	cmp	r3, #2
 8009f48:	f200 80a1 	bhi.w	800a08e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d003      	beq.n	8009f5a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d056      	beq.n	800a006 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009f58:	e099      	b.n	800a08e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f5a:	4b88      	ldr	r3, [pc, #544]	; (800a17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f003 0320 	and.w	r3, r3, #32
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d02d      	beq.n	8009fc2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f66:	4b85      	ldr	r3, [pc, #532]	; (800a17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	08db      	lsrs	r3, r3, #3
 8009f6c:	f003 0303 	and.w	r3, r3, #3
 8009f70:	4a83      	ldr	r2, [pc, #524]	; (800a180 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009f72:	fa22 f303 	lsr.w	r3, r2, r3
 8009f76:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	ee07 3a90 	vmov	s15, r3
 8009f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	ee07 3a90 	vmov	s15, r3
 8009f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f90:	4b7a      	ldr	r3, [pc, #488]	; (800a17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f98:	ee07 3a90 	vmov	s15, r3
 8009f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fa0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fa4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a184 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009fa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fbc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009fc0:	e087      	b.n	800a0d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	ee07 3a90 	vmov	s15, r3
 8009fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fcc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a188 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009fd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fd4:	4b69      	ldr	r3, [pc, #420]	; (800a17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fdc:	ee07 3a90 	vmov	s15, r3
 8009fe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fe4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fe8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a184 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009fec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ff0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ff4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ff8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a000:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a004:	e065      	b.n	800a0d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	ee07 3a90 	vmov	s15, r3
 800a00c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a010:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a18c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a014:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a018:	4b58      	ldr	r3, [pc, #352]	; (800a17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a01c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a020:	ee07 3a90 	vmov	s15, r3
 800a024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a028:	ed97 6a03 	vldr	s12, [r7, #12]
 800a02c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a184 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a030:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a034:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a038:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a03c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a040:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a044:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a048:	e043      	b.n	800a0d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	ee07 3a90 	vmov	s15, r3
 800a050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a054:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a190 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a058:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a05c:	4b47      	ldr	r3, [pc, #284]	; (800a17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a05e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a064:	ee07 3a90 	vmov	s15, r3
 800a068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a06c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a070:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a184 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a074:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a078:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a07c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a080:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a084:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a088:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a08c:	e021      	b.n	800a0d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	ee07 3a90 	vmov	s15, r3
 800a094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a098:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a188 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a09c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0a0:	4b36      	ldr	r3, [pc, #216]	; (800a17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0a8:	ee07 3a90 	vmov	s15, r3
 800a0ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0b4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a184 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a0b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0d0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a0d2:	4b2a      	ldr	r3, [pc, #168]	; (800a17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0d6:	0a5b      	lsrs	r3, r3, #9
 800a0d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0dc:	ee07 3a90 	vmov	s15, r3
 800a0e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0f8:	ee17 2a90 	vmov	r2, s15
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a100:	4b1e      	ldr	r3, [pc, #120]	; (800a17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a104:	0c1b      	lsrs	r3, r3, #16
 800a106:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a10a:	ee07 3a90 	vmov	s15, r3
 800a10e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a112:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a116:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a11a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a11e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a122:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a126:	ee17 2a90 	vmov	r2, s15
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a12e:	4b13      	ldr	r3, [pc, #76]	; (800a17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a132:	0e1b      	lsrs	r3, r3, #24
 800a134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a138:	ee07 3a90 	vmov	s15, r3
 800a13c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a140:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a144:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a148:	edd7 6a07 	vldr	s13, [r7, #28]
 800a14c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a154:	ee17 2a90 	vmov	r2, s15
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a15c:	e008      	b.n	800a170 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	609a      	str	r2, [r3, #8]
}
 800a170:	bf00      	nop
 800a172:	3724      	adds	r7, #36	; 0x24
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr
 800a17c:	58024400 	.word	0x58024400
 800a180:	03d09000 	.word	0x03d09000
 800a184:	46000000 	.word	0x46000000
 800a188:	4c742400 	.word	0x4c742400
 800a18c:	4a742400 	.word	0x4a742400
 800a190:	4bbebc20 	.word	0x4bbebc20

0800a194 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a1a2:	4b53      	ldr	r3, [pc, #332]	; (800a2f0 <RCCEx_PLL2_Config+0x15c>)
 800a1a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1a6:	f003 0303 	and.w	r3, r3, #3
 800a1aa:	2b03      	cmp	r3, #3
 800a1ac:	d101      	bne.n	800a1b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e099      	b.n	800a2e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a1b2:	4b4f      	ldr	r3, [pc, #316]	; (800a2f0 <RCCEx_PLL2_Config+0x15c>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a4e      	ldr	r2, [pc, #312]	; (800a2f0 <RCCEx_PLL2_Config+0x15c>)
 800a1b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a1bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1be:	f7f8 feed 	bl	8002f9c <HAL_GetTick>
 800a1c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a1c4:	e008      	b.n	800a1d8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a1c6:	f7f8 fee9 	bl	8002f9c <HAL_GetTick>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	1ad3      	subs	r3, r2, r3
 800a1d0:	2b02      	cmp	r3, #2
 800a1d2:	d901      	bls.n	800a1d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a1d4:	2303      	movs	r3, #3
 800a1d6:	e086      	b.n	800a2e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a1d8:	4b45      	ldr	r3, [pc, #276]	; (800a2f0 <RCCEx_PLL2_Config+0x15c>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d1f0      	bne.n	800a1c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a1e4:	4b42      	ldr	r3, [pc, #264]	; (800a2f0 <RCCEx_PLL2_Config+0x15c>)
 800a1e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	031b      	lsls	r3, r3, #12
 800a1f2:	493f      	ldr	r1, [pc, #252]	; (800a2f0 <RCCEx_PLL2_Config+0x15c>)
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	628b      	str	r3, [r1, #40]	; 0x28
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	3b01      	subs	r3, #1
 800a208:	025b      	lsls	r3, r3, #9
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	431a      	orrs	r2, r3
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	3b01      	subs	r3, #1
 800a214:	041b      	lsls	r3, r3, #16
 800a216:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a21a:	431a      	orrs	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	3b01      	subs	r3, #1
 800a222:	061b      	lsls	r3, r3, #24
 800a224:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a228:	4931      	ldr	r1, [pc, #196]	; (800a2f0 <RCCEx_PLL2_Config+0x15c>)
 800a22a:	4313      	orrs	r3, r2
 800a22c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a22e:	4b30      	ldr	r3, [pc, #192]	; (800a2f0 <RCCEx_PLL2_Config+0x15c>)
 800a230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a232:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	695b      	ldr	r3, [r3, #20]
 800a23a:	492d      	ldr	r1, [pc, #180]	; (800a2f0 <RCCEx_PLL2_Config+0x15c>)
 800a23c:	4313      	orrs	r3, r2
 800a23e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a240:	4b2b      	ldr	r3, [pc, #172]	; (800a2f0 <RCCEx_PLL2_Config+0x15c>)
 800a242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a244:	f023 0220 	bic.w	r2, r3, #32
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	699b      	ldr	r3, [r3, #24]
 800a24c:	4928      	ldr	r1, [pc, #160]	; (800a2f0 <RCCEx_PLL2_Config+0x15c>)
 800a24e:	4313      	orrs	r3, r2
 800a250:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a252:	4b27      	ldr	r3, [pc, #156]	; (800a2f0 <RCCEx_PLL2_Config+0x15c>)
 800a254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a256:	4a26      	ldr	r2, [pc, #152]	; (800a2f0 <RCCEx_PLL2_Config+0x15c>)
 800a258:	f023 0310 	bic.w	r3, r3, #16
 800a25c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a25e:	4b24      	ldr	r3, [pc, #144]	; (800a2f0 <RCCEx_PLL2_Config+0x15c>)
 800a260:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a262:	4b24      	ldr	r3, [pc, #144]	; (800a2f4 <RCCEx_PLL2_Config+0x160>)
 800a264:	4013      	ands	r3, r2
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	69d2      	ldr	r2, [r2, #28]
 800a26a:	00d2      	lsls	r2, r2, #3
 800a26c:	4920      	ldr	r1, [pc, #128]	; (800a2f0 <RCCEx_PLL2_Config+0x15c>)
 800a26e:	4313      	orrs	r3, r2
 800a270:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a272:	4b1f      	ldr	r3, [pc, #124]	; (800a2f0 <RCCEx_PLL2_Config+0x15c>)
 800a274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a276:	4a1e      	ldr	r2, [pc, #120]	; (800a2f0 <RCCEx_PLL2_Config+0x15c>)
 800a278:	f043 0310 	orr.w	r3, r3, #16
 800a27c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d106      	bne.n	800a292 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a284:	4b1a      	ldr	r3, [pc, #104]	; (800a2f0 <RCCEx_PLL2_Config+0x15c>)
 800a286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a288:	4a19      	ldr	r2, [pc, #100]	; (800a2f0 <RCCEx_PLL2_Config+0x15c>)
 800a28a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a28e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a290:	e00f      	b.n	800a2b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	2b01      	cmp	r3, #1
 800a296:	d106      	bne.n	800a2a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a298:	4b15      	ldr	r3, [pc, #84]	; (800a2f0 <RCCEx_PLL2_Config+0x15c>)
 800a29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a29c:	4a14      	ldr	r2, [pc, #80]	; (800a2f0 <RCCEx_PLL2_Config+0x15c>)
 800a29e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2a4:	e005      	b.n	800a2b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a2a6:	4b12      	ldr	r3, [pc, #72]	; (800a2f0 <RCCEx_PLL2_Config+0x15c>)
 800a2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2aa:	4a11      	ldr	r2, [pc, #68]	; (800a2f0 <RCCEx_PLL2_Config+0x15c>)
 800a2ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a2b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a2b2:	4b0f      	ldr	r3, [pc, #60]	; (800a2f0 <RCCEx_PLL2_Config+0x15c>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a0e      	ldr	r2, [pc, #56]	; (800a2f0 <RCCEx_PLL2_Config+0x15c>)
 800a2b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a2bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2be:	f7f8 fe6d 	bl	8002f9c <HAL_GetTick>
 800a2c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a2c4:	e008      	b.n	800a2d8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a2c6:	f7f8 fe69 	bl	8002f9c <HAL_GetTick>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	d901      	bls.n	800a2d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a2d4:	2303      	movs	r3, #3
 800a2d6:	e006      	b.n	800a2e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a2d8:	4b05      	ldr	r3, [pc, #20]	; (800a2f0 <RCCEx_PLL2_Config+0x15c>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d0f0      	beq.n	800a2c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a2e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3710      	adds	r7, #16
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	58024400 	.word	0x58024400
 800a2f4:	ffff0007 	.word	0xffff0007

0800a2f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a302:	2300      	movs	r3, #0
 800a304:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a306:	4b53      	ldr	r3, [pc, #332]	; (800a454 <RCCEx_PLL3_Config+0x15c>)
 800a308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a30a:	f003 0303 	and.w	r3, r3, #3
 800a30e:	2b03      	cmp	r3, #3
 800a310:	d101      	bne.n	800a316 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	e099      	b.n	800a44a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a316:	4b4f      	ldr	r3, [pc, #316]	; (800a454 <RCCEx_PLL3_Config+0x15c>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a4e      	ldr	r2, [pc, #312]	; (800a454 <RCCEx_PLL3_Config+0x15c>)
 800a31c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a320:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a322:	f7f8 fe3b 	bl	8002f9c <HAL_GetTick>
 800a326:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a328:	e008      	b.n	800a33c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a32a:	f7f8 fe37 	bl	8002f9c <HAL_GetTick>
 800a32e:	4602      	mov	r2, r0
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	1ad3      	subs	r3, r2, r3
 800a334:	2b02      	cmp	r3, #2
 800a336:	d901      	bls.n	800a33c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a338:	2303      	movs	r3, #3
 800a33a:	e086      	b.n	800a44a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a33c:	4b45      	ldr	r3, [pc, #276]	; (800a454 <RCCEx_PLL3_Config+0x15c>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a344:	2b00      	cmp	r3, #0
 800a346:	d1f0      	bne.n	800a32a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a348:	4b42      	ldr	r3, [pc, #264]	; (800a454 <RCCEx_PLL3_Config+0x15c>)
 800a34a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a34c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	051b      	lsls	r3, r3, #20
 800a356:	493f      	ldr	r1, [pc, #252]	; (800a454 <RCCEx_PLL3_Config+0x15c>)
 800a358:	4313      	orrs	r3, r2
 800a35a:	628b      	str	r3, [r1, #40]	; 0x28
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	3b01      	subs	r3, #1
 800a362:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	3b01      	subs	r3, #1
 800a36c:	025b      	lsls	r3, r3, #9
 800a36e:	b29b      	uxth	r3, r3
 800a370:	431a      	orrs	r2, r3
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	3b01      	subs	r3, #1
 800a378:	041b      	lsls	r3, r3, #16
 800a37a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a37e:	431a      	orrs	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	691b      	ldr	r3, [r3, #16]
 800a384:	3b01      	subs	r3, #1
 800a386:	061b      	lsls	r3, r3, #24
 800a388:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a38c:	4931      	ldr	r1, [pc, #196]	; (800a454 <RCCEx_PLL3_Config+0x15c>)
 800a38e:	4313      	orrs	r3, r2
 800a390:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a392:	4b30      	ldr	r3, [pc, #192]	; (800a454 <RCCEx_PLL3_Config+0x15c>)
 800a394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a396:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	695b      	ldr	r3, [r3, #20]
 800a39e:	492d      	ldr	r1, [pc, #180]	; (800a454 <RCCEx_PLL3_Config+0x15c>)
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a3a4:	4b2b      	ldr	r3, [pc, #172]	; (800a454 <RCCEx_PLL3_Config+0x15c>)
 800a3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	699b      	ldr	r3, [r3, #24]
 800a3b0:	4928      	ldr	r1, [pc, #160]	; (800a454 <RCCEx_PLL3_Config+0x15c>)
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a3b6:	4b27      	ldr	r3, [pc, #156]	; (800a454 <RCCEx_PLL3_Config+0x15c>)
 800a3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ba:	4a26      	ldr	r2, [pc, #152]	; (800a454 <RCCEx_PLL3_Config+0x15c>)
 800a3bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a3c2:	4b24      	ldr	r3, [pc, #144]	; (800a454 <RCCEx_PLL3_Config+0x15c>)
 800a3c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3c6:	4b24      	ldr	r3, [pc, #144]	; (800a458 <RCCEx_PLL3_Config+0x160>)
 800a3c8:	4013      	ands	r3, r2
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	69d2      	ldr	r2, [r2, #28]
 800a3ce:	00d2      	lsls	r2, r2, #3
 800a3d0:	4920      	ldr	r1, [pc, #128]	; (800a454 <RCCEx_PLL3_Config+0x15c>)
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a3d6:	4b1f      	ldr	r3, [pc, #124]	; (800a454 <RCCEx_PLL3_Config+0x15c>)
 800a3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3da:	4a1e      	ldr	r2, [pc, #120]	; (800a454 <RCCEx_PLL3_Config+0x15c>)
 800a3dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d106      	bne.n	800a3f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a3e8:	4b1a      	ldr	r3, [pc, #104]	; (800a454 <RCCEx_PLL3_Config+0x15c>)
 800a3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ec:	4a19      	ldr	r2, [pc, #100]	; (800a454 <RCCEx_PLL3_Config+0x15c>)
 800a3ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a3f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a3f4:	e00f      	b.n	800a416 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d106      	bne.n	800a40a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a3fc:	4b15      	ldr	r3, [pc, #84]	; (800a454 <RCCEx_PLL3_Config+0x15c>)
 800a3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a400:	4a14      	ldr	r2, [pc, #80]	; (800a454 <RCCEx_PLL3_Config+0x15c>)
 800a402:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a406:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a408:	e005      	b.n	800a416 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a40a:	4b12      	ldr	r3, [pc, #72]	; (800a454 <RCCEx_PLL3_Config+0x15c>)
 800a40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a40e:	4a11      	ldr	r2, [pc, #68]	; (800a454 <RCCEx_PLL3_Config+0x15c>)
 800a410:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a414:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a416:	4b0f      	ldr	r3, [pc, #60]	; (800a454 <RCCEx_PLL3_Config+0x15c>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a0e      	ldr	r2, [pc, #56]	; (800a454 <RCCEx_PLL3_Config+0x15c>)
 800a41c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a420:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a422:	f7f8 fdbb 	bl	8002f9c <HAL_GetTick>
 800a426:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a428:	e008      	b.n	800a43c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a42a:	f7f8 fdb7 	bl	8002f9c <HAL_GetTick>
 800a42e:	4602      	mov	r2, r0
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	2b02      	cmp	r3, #2
 800a436:	d901      	bls.n	800a43c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a438:	2303      	movs	r3, #3
 800a43a:	e006      	b.n	800a44a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a43c:	4b05      	ldr	r3, [pc, #20]	; (800a454 <RCCEx_PLL3_Config+0x15c>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a444:	2b00      	cmp	r3, #0
 800a446:	d0f0      	beq.n	800a42a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a448:	7bfb      	ldrb	r3, [r7, #15]
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3710      	adds	r7, #16
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	58024400 	.word	0x58024400
 800a458:	ffff0007 	.word	0xffff0007

0800a45c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b08a      	sub	sp, #40	; 0x28
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d101      	bne.n	800a46e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	e1fb      	b.n	800a866 <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a474:	2b01      	cmp	r3, #1
 800a476:	d113      	bne.n	800a4a0 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a96      	ldr	r2, [pc, #600]	; (800a6d8 <HAL_SAI_Init+0x27c>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d004      	beq.n	800a48c <HAL_SAI_Init+0x30>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a95      	ldr	r2, [pc, #596]	; (800a6dc <HAL_SAI_Init+0x280>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d107      	bne.n	800a49c <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a490:	2b01      	cmp	r3, #1
 800a492:	d103      	bne.n	800a49c <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d001      	beq.n	800a4a0 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	e1e2      	b.n	800a866 <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a8c      	ldr	r2, [pc, #560]	; (800a6d8 <HAL_SAI_Init+0x27c>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d004      	beq.n	800a4b4 <HAL_SAI_Init+0x58>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a8c      	ldr	r2, [pc, #560]	; (800a6e0 <HAL_SAI_Init+0x284>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d102      	bne.n	800a4ba <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 800a4b4:	4b8b      	ldr	r3, [pc, #556]	; (800a6e4 <HAL_SAI_Init+0x288>)
 800a4b6:	61bb      	str	r3, [r7, #24]
 800a4b8:	e00e      	b.n	800a4d8 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a87      	ldr	r2, [pc, #540]	; (800a6dc <HAL_SAI_Init+0x280>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d004      	beq.n	800a4ce <HAL_SAI_Init+0x72>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a87      	ldr	r2, [pc, #540]	; (800a6e8 <HAL_SAI_Init+0x28c>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d102      	bne.n	800a4d4 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 800a4ce:	4b87      	ldr	r3, [pc, #540]	; (800a6ec <HAL_SAI_Init+0x290>)
 800a4d0:	61bb      	str	r3, [r7, #24]
 800a4d2:	e001      	b.n	800a4d8 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e1c6      	b.n	800a866 <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d106      	bne.n	800a4f2 <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f7f8 fb65 	bl	8002bbc <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 f9c6 	bl	800a884 <SAI_Disable>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d001      	beq.n	800a502 <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	e1b1      	b.n	800a866 <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2202      	movs	r2, #2
 800a506:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	2b02      	cmp	r3, #2
 800a510:	d00c      	beq.n	800a52c <HAL_SAI_Init+0xd0>
 800a512:	2b02      	cmp	r3, #2
 800a514:	d80d      	bhi.n	800a532 <HAL_SAI_Init+0xd6>
 800a516:	2b00      	cmp	r3, #0
 800a518:	d002      	beq.n	800a520 <HAL_SAI_Init+0xc4>
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d003      	beq.n	800a526 <HAL_SAI_Init+0xca>
 800a51e:	e008      	b.n	800a532 <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800a520:	2300      	movs	r3, #0
 800a522:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a524:	e008      	b.n	800a538 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a526:	2310      	movs	r3, #16
 800a528:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a52a:	e005      	b.n	800a538 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a52c:	2320      	movs	r3, #32
 800a52e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a530:	e002      	b.n	800a538 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 800a532:	2300      	movs	r3, #0
 800a534:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a536:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	2b05      	cmp	r3, #5
 800a53e:	d822      	bhi.n	800a586 <HAL_SAI_Init+0x12a>
 800a540:	a201      	add	r2, pc, #4	; (adr r2, 800a548 <HAL_SAI_Init+0xec>)
 800a542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a546:	bf00      	nop
 800a548:	0800a561 	.word	0x0800a561
 800a54c:	0800a567 	.word	0x0800a567
 800a550:	0800a56f 	.word	0x0800a56f
 800a554:	0800a587 	.word	0x0800a587
 800a558:	0800a587 	.word	0x0800a587
 800a55c:	0800a577 	.word	0x0800a577
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800a560:	2300      	movs	r3, #0
 800a562:	61fb      	str	r3, [r7, #28]
      break;
 800a564:	e012      	b.n	800a58c <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a56a:	61fb      	str	r3, [r7, #28]
      break;
 800a56c:	e00e      	b.n	800a58c <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a56e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a572:	61fb      	str	r3, [r7, #28]
      break;
 800a574:	e00a      	b.n	800a58c <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a576:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a57a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800a57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57e:	f043 0303 	orr.w	r3, r3, #3
 800a582:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a584:	e002      	b.n	800a58c <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800a586:	2300      	movs	r3, #0
 800a588:	61fb      	str	r3, [r7, #28]
      break;
 800a58a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800a58c:	69bb      	ldr	r3, [r7, #24]
 800a58e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a590:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a1b      	ldr	r3, [r3, #32]
 800a596:	2b00      	cmp	r3, #0
 800a598:	f000 8084 	beq.w	800a6a4 <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 800a59c:	2300      	movs	r3, #0
 800a59e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a4c      	ldr	r2, [pc, #304]	; (800a6d8 <HAL_SAI_Init+0x27c>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d004      	beq.n	800a5b4 <HAL_SAI_Init+0x158>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a4c      	ldr	r2, [pc, #304]	; (800a6e0 <HAL_SAI_Init+0x284>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d104      	bne.n	800a5be <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a5b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a5b8:	f7fe fdb8 	bl	800912c <HAL_RCCEx_GetPeriphCLKFreq>
 800a5bc:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a46      	ldr	r2, [pc, #280]	; (800a6dc <HAL_SAI_Init+0x280>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d104      	bne.n	800a5d2 <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800a5c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a5cc:	f7fe fdae 	bl	800912c <HAL_RCCEx_GetPeriphCLKFreq>
 800a5d0:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a44      	ldr	r2, [pc, #272]	; (800a6e8 <HAL_SAI_Init+0x28c>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d104      	bne.n	800a5e6 <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800a5dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a5e0:	f7fe fda4 	bl	800912c <HAL_RCCEx_GetPeriphCLKFreq>
 800a5e4:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	699b      	ldr	r3, [r3, #24]
 800a5ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a5ee:	d120      	bne.n	800a632 <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5f4:	2b04      	cmp	r3, #4
 800a5f6:	d102      	bne.n	800a5fe <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800a5f8:	2340      	movs	r3, #64	; 0x40
 800a5fa:	60fb      	str	r3, [r7, #12]
 800a5fc:	e00a      	b.n	800a614 <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a602:	2b08      	cmp	r3, #8
 800a604:	d103      	bne.n	800a60e <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800a606:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a60a:	60fb      	str	r3, [r7, #12]
 800a60c:	e002      	b.n	800a614 <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a612:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800a614:	697a      	ldr	r2, [r7, #20]
 800a616:	4613      	mov	r3, r2
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	4413      	add	r3, r2
 800a61c:	005b      	lsls	r3, r3, #1
 800a61e:	4619      	mov	r1, r3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6a1b      	ldr	r3, [r3, #32]
 800a624:	68fa      	ldr	r2, [r7, #12]
 800a626:	fb02 f303 	mul.w	r3, r2, r3
 800a62a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a62e:	613b      	str	r3, [r7, #16]
 800a630:	e017      	b.n	800a662 <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a636:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a63a:	d101      	bne.n	800a640 <HAL_SAI_Init+0x1e4>
 800a63c:	2302      	movs	r3, #2
 800a63e:	e000      	b.n	800a642 <HAL_SAI_Init+0x1e6>
 800a640:	2301      	movs	r3, #1
 800a642:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800a644:	697a      	ldr	r2, [r7, #20]
 800a646:	4613      	mov	r3, r2
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	4413      	add	r3, r2
 800a64c:	005b      	lsls	r3, r3, #1
 800a64e:	4619      	mov	r1, r3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6a1b      	ldr	r3, [r3, #32]
 800a654:	68ba      	ldr	r2, [r7, #8]
 800a656:	fb02 f303 	mul.w	r3, r2, r3
 800a65a:	021b      	lsls	r3, r3, #8
 800a65c:	fbb1 f3f3 	udiv	r3, r1, r3
 800a660:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	4a22      	ldr	r2, [pc, #136]	; (800a6f0 <HAL_SAI_Init+0x294>)
 800a666:	fba2 2303 	umull	r2, r3, r2, r3
 800a66a:	08da      	lsrs	r2, r3, #3
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800a670:	6939      	ldr	r1, [r7, #16]
 800a672:	4b1f      	ldr	r3, [pc, #124]	; (800a6f0 <HAL_SAI_Init+0x294>)
 800a674:	fba3 2301 	umull	r2, r3, r3, r1
 800a678:	08da      	lsrs	r2, r3, #3
 800a67a:	4613      	mov	r3, r2
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	4413      	add	r3, r2
 800a680:	005b      	lsls	r3, r3, #1
 800a682:	1aca      	subs	r2, r1, r3
 800a684:	2a08      	cmp	r2, #8
 800a686:	d904      	bls.n	800a692 <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68c:	1c5a      	adds	r2, r3, #1
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a696:	2b04      	cmp	r3, #4
 800a698:	d104      	bne.n	800a6a4 <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69e:	085a      	lsrs	r2, r3, #1
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d003      	beq.n	800a6b4 <HAL_SAI_Init+0x258>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	2b02      	cmp	r3, #2
 800a6b2:	d109      	bne.n	800a6c8 <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d101      	bne.n	800a6c0 <HAL_SAI_Init+0x264>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	e001      	b.n	800a6c4 <HAL_SAI_Init+0x268>
 800a6c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6c4:	623b      	str	r3, [r7, #32]
 800a6c6:	e017      	b.n	800a6f8 <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d111      	bne.n	800a6f4 <HAL_SAI_Init+0x298>
 800a6d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6d4:	e00f      	b.n	800a6f6 <HAL_SAI_Init+0x29a>
 800a6d6:	bf00      	nop
 800a6d8:	40015804 	.word	0x40015804
 800a6dc:	58005404 	.word	0x58005404
 800a6e0:	40015824 	.word	0x40015824
 800a6e4:	40015800 	.word	0x40015800
 800a6e8:	58005424 	.word	0x58005424
 800a6ec:	58005400 	.word	0x58005400
 800a6f0:	cccccccd 	.word	0xcccccccd
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	6819      	ldr	r1, [r3, #0]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	4b5b      	ldr	r3, [pc, #364]	; (800a870 <HAL_SAI_Init+0x414>)
 800a704:	400b      	ands	r3, r1
 800a706:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	6819      	ldr	r1, [r3, #0]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	685a      	ldr	r2, [r3, #4]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a716:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a71c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a722:	431a      	orrs	r2, r3
 800a724:	6a3b      	ldr	r3, [r7, #32]
 800a726:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 800a730:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	695b      	ldr	r3, [r3, #20]
 800a736:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a73c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a742:	051b      	lsls	r3, r3, #20
 800a744:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a74a:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	691b      	ldr	r3, [r3, #16]
 800a750:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	430a      	orrs	r2, r1
 800a758:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	6859      	ldr	r1, [r3, #4]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	4b43      	ldr	r3, [pc, #268]	; (800a874 <HAL_SAI_Init+0x418>)
 800a766:	400b      	ands	r3, r1
 800a768:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	6859      	ldr	r1, [r3, #4]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	69da      	ldr	r2, [r3, #28]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a778:	431a      	orrs	r2, r3
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a77e:	431a      	orrs	r2, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	430a      	orrs	r2, r1
 800a786:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	6899      	ldr	r1, [r3, #8]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	4b39      	ldr	r3, [pc, #228]	; (800a878 <HAL_SAI_Init+0x41c>)
 800a794:	400b      	ands	r3, r1
 800a796:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	6899      	ldr	r1, [r3, #8]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7a2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a7a8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800a7ae:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800a7b4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7ba:	3b01      	subs	r3, #1
 800a7bc:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a7be:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	430a      	orrs	r2, r1
 800a7c6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	68d9      	ldr	r1, [r3, #12]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a7d6:	400b      	ands	r3, r1
 800a7d8:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	68d9      	ldr	r1, [r3, #12]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7e8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7ee:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a7f0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7f6:	3b01      	subs	r3, #1
 800a7f8:	021b      	lsls	r3, r3, #8
 800a7fa:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	430a      	orrs	r2, r1
 800a802:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a1c      	ldr	r2, [pc, #112]	; (800a87c <HAL_SAI_Init+0x420>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d004      	beq.n	800a818 <HAL_SAI_Init+0x3bc>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4a1b      	ldr	r2, [pc, #108]	; (800a880 <HAL_SAI_Init+0x424>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d119      	bne.n	800a84c <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a81c:	f023 0201 	bic.w	r2, r3, #1
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d10e      	bne.n	800a84c <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a836:	3b01      	subs	r3, #1
 800a838:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a83a:	431a      	orrs	r2, r3
 800a83c:	69bb      	ldr	r3, [r7, #24]
 800a83e:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a844:	f043 0201 	orr.w	r2, r3, #1
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2201      	movs	r2, #1
 800a858:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800a864:	2300      	movs	r3, #0
}
 800a866:	4618      	mov	r0, r3
 800a868:	3728      	adds	r7, #40	; 0x28
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
 800a86e:	bf00      	nop
 800a870:	f005c010 	.word	0xf005c010
 800a874:	ffff1ff0 	.word	0xffff1ff0
 800a878:	fff88000 	.word	0xfff88000
 800a87c:	40015804 	.word	0x40015804
 800a880:	58005404 	.word	0x58005404

0800a884 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a88c:	4b18      	ldr	r3, [pc, #96]	; (800a8f0 <SAI_Disable+0x6c>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a18      	ldr	r2, [pc, #96]	; (800a8f4 <SAI_Disable+0x70>)
 800a892:	fba2 2303 	umull	r2, r3, r2, r3
 800a896:	0b1b      	lsrs	r3, r3, #12
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a89c:	2300      	movs	r3, #0
 800a89e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	681a      	ldr	r2, [r3, #0]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a8ae:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d10a      	bne.n	800a8cc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800a8c6:	2303      	movs	r3, #3
 800a8c8:	72fb      	strb	r3, [r7, #11]
      break;
 800a8ca:	e009      	b.n	800a8e0 <SAI_Disable+0x5c>
    }
    count--;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	3b01      	subs	r3, #1
 800a8d0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d1e7      	bne.n	800a8b0 <SAI_Disable+0x2c>

  return status;
 800a8e0:	7afb      	ldrb	r3, [r7, #11]
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3714      	adds	r7, #20
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop
 800a8f0:	24000000 	.word	0x24000000
 800a8f4:	95cbec1b 	.word	0x95cbec1b

0800a8f8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b08a      	sub	sp, #40	; 0x28
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d101      	bne.n	800a90a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a906:	2301      	movs	r3, #1
 800a908:	e075      	b.n	800a9f6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a910:	b2db      	uxtb	r3, r3
 800a912:	2b00      	cmp	r3, #0
 800a914:	d105      	bne.n	800a922 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f7f7 ff0f 	bl	8002740 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2204      	movs	r2, #4
 800a926:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 f868 	bl	800aa00 <HAL_SD_InitCard>
 800a930:	4603      	mov	r3, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	d001      	beq.n	800a93a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a936:	2301      	movs	r3, #1
 800a938:	e05d      	b.n	800a9f6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a93a:	f107 0308 	add.w	r3, r7, #8
 800a93e:	4619      	mov	r1, r3
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 fa97 	bl	800ae74 <HAL_SD_GetCardStatus>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d001      	beq.n	800a950 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	e052      	b.n	800a9f6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800a950:	7e3b      	ldrb	r3, [r7, #24]
 800a952:	b2db      	uxtb	r3, r3
 800a954:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a956:	7e7b      	ldrb	r3, [r7, #25]
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a960:	2b01      	cmp	r3, #1
 800a962:	d10a      	bne.n	800a97a <HAL_SD_Init+0x82>
 800a964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a966:	2b00      	cmp	r3, #0
 800a968:	d102      	bne.n	800a970 <HAL_SD_Init+0x78>
 800a96a:	6a3b      	ldr	r3, [r7, #32]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d004      	beq.n	800a97a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a976:	659a      	str	r2, [r3, #88]	; 0x58
 800a978:	e00b      	b.n	800a992 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d104      	bne.n	800a98c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a988:	659a      	str	r2, [r3, #88]	; 0x58
 800a98a:	e002      	b.n	800a992 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	4619      	mov	r1, r3
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 fb29 	bl	800aff0 <HAL_SD_ConfigWideBusOperation>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d001      	beq.n	800a9a8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	e026      	b.n	800a9f6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800a9a8:	f7f8 faf8 	bl	8002f9c <HAL_GetTick>
 800a9ac:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a9ae:	e011      	b.n	800a9d4 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a9b0:	f7f8 faf4 	bl	8002f9c <HAL_GetTick>
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	69fb      	ldr	r3, [r7, #28]
 800a9b8:	1ad3      	subs	r3, r2, r3
 800a9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9be:	d109      	bne.n	800a9d4 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a9c6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800a9d0:	2303      	movs	r3, #3
 800a9d2:	e010      	b.n	800a9f6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 fc1d 	bl	800b214 <HAL_SD_GetCardState>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b04      	cmp	r3, #4
 800a9de:	d1e7      	bne.n	800a9b0 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800a9f4:	2300      	movs	r3, #0
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3728      	adds	r7, #40	; 0x28
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
	...

0800aa00 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800aa00:	b590      	push	{r4, r7, lr}
 800aa02:	b08d      	sub	sp, #52	; 0x34
 800aa04:	af02      	add	r7, sp, #8
 800aa06:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800aa10:	2300      	movs	r3, #0
 800aa12:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800aa14:	2300      	movs	r3, #0
 800aa16:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800aa1c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800aa20:	f7fe fb84 	bl	800912c <HAL_RCCEx_GetPeriphCLKFreq>
 800aa24:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800aa26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d109      	bne.n	800aa40 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800aa3a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	e06a      	b.n	800ab16 <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800aa40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa42:	0a1b      	lsrs	r3, r3, #8
 800aa44:	4a36      	ldr	r2, [pc, #216]	; (800ab20 <HAL_SD_InitCard+0x120>)
 800aa46:	fba2 2303 	umull	r2, r3, r2, r3
 800aa4a:	091b      	lsrs	r3, r3, #4
 800aa4c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681c      	ldr	r4, [r3, #0]
 800aa52:	466a      	mov	r2, sp
 800aa54:	f107 0318 	add.w	r3, r7, #24
 800aa58:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aa5c:	e882 0003 	stmia.w	r2, {r0, r1}
 800aa60:	f107 030c 	add.w	r3, r7, #12
 800aa64:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aa66:	4620      	mov	r0, r4
 800aa68:	f002 ff38 	bl	800d8dc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4618      	mov	r0, r3
 800aa72:	f002 ff6a 	bl	800d94a <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800aa76:	69fb      	ldr	r3, [r7, #28]
 800aa78:	005b      	lsls	r3, r3, #1
 800aa7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800aa82:	4a28      	ldr	r2, [pc, #160]	; (800ab24 <HAL_SD_InitCard+0x124>)
 800aa84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa86:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7f8 fa91 	bl	8002fb4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 fcac 	bl	800b3f0 <SD_PowerON>
 800aa98:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aa9a:	6a3b      	ldr	r3, [r7, #32]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d00b      	beq.n	800aab8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aaac:	6a3b      	ldr	r3, [r7, #32]
 800aaae:	431a      	orrs	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800aab4:	2301      	movs	r3, #1
 800aab6:	e02e      	b.n	800ab16 <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 fbcb 	bl	800b254 <SD_InitCard>
 800aabe:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aac0:	6a3b      	ldr	r3, [r7, #32]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d00b      	beq.n	800aade <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2201      	movs	r2, #1
 800aaca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aad2:	6a3b      	ldr	r3, [r7, #32]
 800aad4:	431a      	orrs	r2, r3
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800aada:	2301      	movs	r3, #1
 800aadc:	e01b      	b.n	800ab16 <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aae6:	4618      	mov	r0, r3
 800aae8:	f002 ffc4 	bl	800da74 <SDMMC_CmdBlockLength>
 800aaec:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aaee:	6a3b      	ldr	r3, [r7, #32]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d00f      	beq.n	800ab14 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a0b      	ldr	r2, [pc, #44]	; (800ab28 <HAL_SD_InitCard+0x128>)
 800aafa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab00:	6a3b      	ldr	r3, [r7, #32]
 800ab02:	431a      	orrs	r2, r3
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800ab10:	2301      	movs	r3, #1
 800ab12:	e000      	b.n	800ab16 <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	372c      	adds	r7, #44	; 0x2c
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd90      	pop	{r4, r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	014f8b59 	.word	0x014f8b59
 800ab24:	00012110 	.word	0x00012110
 800ab28:	1fe00fff 	.word	0x1fe00fff

0800ab2c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab3a:	0f9b      	lsrs	r3, r3, #30
 800ab3c:	b2da      	uxtb	r2, r3
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab46:	0e9b      	lsrs	r3, r3, #26
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	f003 030f 	and.w	r3, r3, #15
 800ab4e:	b2da      	uxtb	r2, r3
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab58:	0e1b      	lsrs	r3, r3, #24
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	f003 0303 	and.w	r3, r3, #3
 800ab60:	b2da      	uxtb	r2, r3
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab6a:	0c1b      	lsrs	r3, r3, #16
 800ab6c:	b2da      	uxtb	r2, r3
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab76:	0a1b      	lsrs	r3, r3, #8
 800ab78:	b2da      	uxtb	r2, r3
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab82:	b2da      	uxtb	r2, r3
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab8c:	0d1b      	lsrs	r3, r3, #20
 800ab8e:	b29a      	uxth	r2, r3
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab98:	0c1b      	lsrs	r3, r3, #16
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	f003 030f 	and.w	r3, r3, #15
 800aba0:	b2da      	uxtb	r2, r3
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abaa:	0bdb      	lsrs	r3, r3, #15
 800abac:	b2db      	uxtb	r3, r3
 800abae:	f003 0301 	and.w	r3, r3, #1
 800abb2:	b2da      	uxtb	r2, r3
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abbc:	0b9b      	lsrs	r3, r3, #14
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	f003 0301 	and.w	r3, r3, #1
 800abc4:	b2da      	uxtb	r2, r3
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abce:	0b5b      	lsrs	r3, r3, #13
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	f003 0301 	and.w	r3, r3, #1
 800abd6:	b2da      	uxtb	r2, r3
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abe0:	0b1b      	lsrs	r3, r3, #12
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	f003 0301 	and.w	r3, r3, #1
 800abe8:	b2da      	uxtb	r2, r3
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	2200      	movs	r2, #0
 800abf2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d163      	bne.n	800acc4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac00:	009a      	lsls	r2, r3, #2
 800ac02:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ac06:	4013      	ands	r3, r2
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800ac0c:	0f92      	lsrs	r2, r2, #30
 800ac0e:	431a      	orrs	r2, r3
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac18:	0edb      	lsrs	r3, r3, #27
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	f003 0307 	and.w	r3, r3, #7
 800ac20:	b2da      	uxtb	r2, r3
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac2a:	0e1b      	lsrs	r3, r3, #24
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	f003 0307 	and.w	r3, r3, #7
 800ac32:	b2da      	uxtb	r2, r3
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac3c:	0d5b      	lsrs	r3, r3, #21
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	f003 0307 	and.w	r3, r3, #7
 800ac44:	b2da      	uxtb	r2, r3
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac4e:	0c9b      	lsrs	r3, r3, #18
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	f003 0307 	and.w	r3, r3, #7
 800ac56:	b2da      	uxtb	r2, r3
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac60:	0bdb      	lsrs	r3, r3, #15
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	f003 0307 	and.w	r3, r3, #7
 800ac68:	b2da      	uxtb	r2, r3
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	691b      	ldr	r3, [r3, #16]
 800ac72:	1c5a      	adds	r2, r3, #1
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	7e1b      	ldrb	r3, [r3, #24]
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	f003 0307 	and.w	r3, r3, #7
 800ac82:	3302      	adds	r3, #2
 800ac84:	2201      	movs	r2, #1
 800ac86:	fa02 f303 	lsl.w	r3, r2, r3
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ac8e:	fb02 f203 	mul.w	r2, r2, r3
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	7a1b      	ldrb	r3, [r3, #8]
 800ac9a:	b2db      	uxtb	r3, r3
 800ac9c:	f003 030f 	and.w	r3, r3, #15
 800aca0:	2201      	movs	r2, #1
 800aca2:	409a      	lsls	r2, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800acb0:	0a52      	lsrs	r2, r2, #9
 800acb2:	fb02 f203 	mul.w	r2, r2, r3
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800acc0:	655a      	str	r2, [r3, #84]	; 0x54
 800acc2:	e031      	b.n	800ad28 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d11d      	bne.n	800ad08 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acd0:	041b      	lsls	r3, r3, #16
 800acd2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acda:	0c1b      	lsrs	r3, r3, #16
 800acdc:	431a      	orrs	r2, r3
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	691b      	ldr	r3, [r3, #16]
 800ace6:	3301      	adds	r3, #1
 800ace8:	029a      	lsls	r2, r3, #10
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800acfc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	655a      	str	r2, [r3, #84]	; 0x54
 800ad06:	e00f      	b.n	800ad28 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a58      	ldr	r2, [pc, #352]	; (800ae70 <HAL_SD_GetCardCSD+0x344>)
 800ad0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800ad24:	2301      	movs	r3, #1
 800ad26:	e09d      	b.n	800ae64 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad2c:	0b9b      	lsrs	r3, r3, #14
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	f003 0301 	and.w	r3, r3, #1
 800ad34:	b2da      	uxtb	r2, r3
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad3e:	09db      	lsrs	r3, r3, #7
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad46:	b2da      	uxtb	r2, r3
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad56:	b2da      	uxtb	r2, r3
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad60:	0fdb      	lsrs	r3, r3, #31
 800ad62:	b2da      	uxtb	r2, r3
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad6c:	0f5b      	lsrs	r3, r3, #29
 800ad6e:	b2db      	uxtb	r3, r3
 800ad70:	f003 0303 	and.w	r3, r3, #3
 800ad74:	b2da      	uxtb	r2, r3
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad7e:	0e9b      	lsrs	r3, r3, #26
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	f003 0307 	and.w	r3, r3, #7
 800ad86:	b2da      	uxtb	r2, r3
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad90:	0d9b      	lsrs	r3, r3, #22
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	f003 030f 	and.w	r3, r3, #15
 800ad98:	b2da      	uxtb	r2, r3
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ada2:	0d5b      	lsrs	r3, r3, #21
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	f003 0301 	and.w	r3, r3, #1
 800adaa:	b2da      	uxtb	r2, r3
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	2200      	movs	r2, #0
 800adb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adbe:	0c1b      	lsrs	r3, r3, #16
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	f003 0301 	and.w	r3, r3, #1
 800adc6:	b2da      	uxtb	r2, r3
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800add2:	0bdb      	lsrs	r3, r3, #15
 800add4:	b2db      	uxtb	r3, r3
 800add6:	f003 0301 	and.w	r3, r3, #1
 800adda:	b2da      	uxtb	r2, r3
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ade6:	0b9b      	lsrs	r3, r3, #14
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	f003 0301 	and.w	r3, r3, #1
 800adee:	b2da      	uxtb	r2, r3
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adfa:	0b5b      	lsrs	r3, r3, #13
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	f003 0301 	and.w	r3, r3, #1
 800ae02:	b2da      	uxtb	r2, r3
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae0e:	0b1b      	lsrs	r3, r3, #12
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	f003 0301 	and.w	r3, r3, #1
 800ae16:	b2da      	uxtb	r2, r3
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae22:	0a9b      	lsrs	r3, r3, #10
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	f003 0303 	and.w	r3, r3, #3
 800ae2a:	b2da      	uxtb	r2, r3
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae36:	0a1b      	lsrs	r3, r3, #8
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	f003 0303 	and.w	r3, r3, #3
 800ae3e:	b2da      	uxtb	r2, r3
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae4a:	085b      	lsrs	r3, r3, #1
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae52:	b2da      	uxtb	r2, r3
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ae62:	2300      	movs	r3, #0
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr
 800ae70:	1fe00fff 	.word	0x1fe00fff

0800ae74 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b094      	sub	sp, #80	; 0x50
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	2b03      	cmp	r3, #3
 800ae8e:	d101      	bne.n	800ae94 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800ae90:	2301      	movs	r3, #1
 800ae92:	e0a7      	b.n	800afe4 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800ae94:	f107 0308 	add.w	r3, r7, #8
 800ae98:	4619      	mov	r1, r3
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 fb36 	bl	800b50c <SD_SendSDStatus>
 800aea0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800aea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d011      	beq.n	800aecc <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4a4f      	ldr	r2, [pc, #316]	; (800afec <HAL_SD_GetCardStatus+0x178>)
 800aeae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aeb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aeb6:	431a      	orrs	r2, r3
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2201      	movs	r2, #1
 800aec0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800aec4:	2301      	movs	r3, #1
 800aec6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800aeca:	e070      	b.n	800afae <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	099b      	lsrs	r3, r3, #6
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	f003 0303 	and.w	r3, r3, #3
 800aed6:	b2da      	uxtb	r2, r3
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	095b      	lsrs	r3, r3, #5
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	f003 0301 	and.w	r3, r3, #1
 800aee6:	b2da      	uxtb	r2, r3
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	0a1b      	lsrs	r3, r3, #8
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800aef6:	b29a      	uxth	r2, r3
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	0e1b      	lsrs	r3, r3, #24
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	4313      	orrs	r3, r2
 800af00:	b29a      	uxth	r2, r3
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	061a      	lsls	r2, r3, #24
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	021b      	lsls	r3, r3, #8
 800af0e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800af12:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	0a1b      	lsrs	r3, r3, #8
 800af18:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800af1c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	0e1b      	lsrs	r3, r3, #24
 800af22:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	b2da      	uxtb	r2, r3
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	0a1b      	lsrs	r3, r3, #8
 800af34:	b2da      	uxtb	r2, r3
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	0d1b      	lsrs	r3, r3, #20
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	f003 030f 	and.w	r3, r3, #15
 800af44:	b2da      	uxtb	r2, r3
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	0c1b      	lsrs	r3, r3, #16
 800af4e:	b29b      	uxth	r3, r3
 800af50:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800af54:	b29a      	uxth	r2, r3
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	b29b      	uxth	r3, r3
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	4313      	orrs	r3, r2
 800af60:	b29a      	uxth	r2, r3
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	0a9b      	lsrs	r3, r3, #10
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af70:	b2da      	uxtb	r2, r3
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	0a1b      	lsrs	r3, r3, #8
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	f003 0303 	and.w	r3, r3, #3
 800af80:	b2da      	uxtb	r2, r3
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	091b      	lsrs	r3, r3, #4
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	f003 030f 	and.w	r3, r3, #15
 800af90:	b2da      	uxtb	r2, r3
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	b2db      	uxtb	r3, r3
 800af9a:	f003 030f 	and.w	r3, r3, #15
 800af9e:	b2da      	uxtb	r2, r3
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800afa4:	69bb      	ldr	r3, [r7, #24]
 800afa6:	0e1b      	lsrs	r3, r3, #24
 800afa8:	b2da      	uxtb	r2, r3
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800afb6:	4618      	mov	r0, r3
 800afb8:	f002 fd5c 	bl	800da74 <SDMMC_CmdBlockLength>
 800afbc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800afbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d00d      	beq.n	800afe0 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4a08      	ldr	r2, [pc, #32]	; (800afec <HAL_SD_GetCardStatus+0x178>)
 800afca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afd0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2201      	movs	r2, #1
 800afd6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800afda:	2301      	movs	r3, #1
 800afdc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800afe0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3750      	adds	r7, #80	; 0x50
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	1fe00fff 	.word	0x1fe00fff

0800aff0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800aff0:	b590      	push	{r4, r7, lr}
 800aff2:	b08d      	sub	sp, #52	; 0x34
 800aff4:	af02      	add	r7, sp, #8
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 800affa:	2300      	movs	r3, #0
 800affc:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800affe:	2300      	movs	r3, #0
 800b000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2203      	movs	r2, #3
 800b008:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b010:	2b03      	cmp	r3, #3
 800b012:	d02e      	beq.n	800b072 <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b01a:	d106      	bne.n	800b02a <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b020:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	635a      	str	r2, [r3, #52]	; 0x34
 800b028:	e029      	b.n	800b07e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b030:	d10a      	bne.n	800b048 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 fb62 	bl	800b6fc <SD_WideBus_Enable>
 800b038:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b03e:	69fb      	ldr	r3, [r7, #28]
 800b040:	431a      	orrs	r2, r3
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	635a      	str	r2, [r3, #52]	; 0x34
 800b046:	e01a      	b.n	800b07e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d10a      	bne.n	800b064 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 fb9f 	bl	800b792 <SD_WideBus_Disable>
 800b054:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b05a:	69fb      	ldr	r3, [r7, #28]
 800b05c:	431a      	orrs	r2, r3
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	635a      	str	r2, [r3, #52]	; 0x34
 800b062:	e00c      	b.n	800b07e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b068:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	635a      	str	r2, [r3, #52]	; 0x34
 800b070:	e005      	b.n	800b07e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b076:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b082:	2b00      	cmp	r3, #0
 800b084:	d007      	beq.n	800b096 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a5e      	ldr	r2, [pc, #376]	; (800b204 <HAL_SD_ConfigWideBusOperation+0x214>)
 800b08c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b08e:	2301      	movs	r3, #1
 800b090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b094:	e094      	b.n	800b1c0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800b096:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800b09a:	f7fe f847 	bl	800912c <HAL_RCCEx_GetPeriphCLKFreq>
 800b09e:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 800b0a0:	6a3b      	ldr	r3, [r7, #32]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	f000 8083 	beq.w	800b1ae <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	689b      	ldr	r3, [r3, #8]
 800b0b2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	691b      	ldr	r3, [r3, #16]
 800b0bc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	695a      	ldr	r2, [r3, #20]
 800b0c2:	6a3b      	ldr	r3, [r7, #32]
 800b0c4:	4950      	ldr	r1, [pc, #320]	; (800b208 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b0c6:	fba1 1303 	umull	r1, r3, r1, r3
 800b0ca:	0e1b      	lsrs	r3, r3, #24
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d303      	bcc.n	800b0d8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	695b      	ldr	r3, [r3, #20]
 800b0d4:	61bb      	str	r3, [r7, #24]
 800b0d6:	e05a      	b.n	800b18e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0e0:	d103      	bne.n	800b0ea <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	695b      	ldr	r3, [r3, #20]
 800b0e6:	61bb      	str	r3, [r7, #24]
 800b0e8:	e051      	b.n	800b18e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0f2:	d126      	bne.n	800b142 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	695b      	ldr	r3, [r3, #20]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d10e      	bne.n	800b11a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800b0fc:	6a3b      	ldr	r3, [r7, #32]
 800b0fe:	4a43      	ldr	r2, [pc, #268]	; (800b20c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d906      	bls.n	800b112 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800b104:	6a3b      	ldr	r3, [r7, #32]
 800b106:	4a40      	ldr	r2, [pc, #256]	; (800b208 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b108:	fba2 2303 	umull	r2, r3, r2, r3
 800b10c:	0e5b      	lsrs	r3, r3, #25
 800b10e:	61bb      	str	r3, [r7, #24]
 800b110:	e03d      	b.n	800b18e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	695b      	ldr	r3, [r3, #20]
 800b116:	61bb      	str	r3, [r7, #24]
 800b118:	e039      	b.n	800b18e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	695b      	ldr	r3, [r3, #20]
 800b11e:	005b      	lsls	r3, r3, #1
 800b120:	6a3a      	ldr	r2, [r7, #32]
 800b122:	fbb2 f3f3 	udiv	r3, r2, r3
 800b126:	4a39      	ldr	r2, [pc, #228]	; (800b20c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d906      	bls.n	800b13a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800b12c:	6a3b      	ldr	r3, [r7, #32]
 800b12e:	4a36      	ldr	r2, [pc, #216]	; (800b208 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b130:	fba2 2303 	umull	r2, r3, r2, r3
 800b134:	0e5b      	lsrs	r3, r3, #25
 800b136:	61bb      	str	r3, [r7, #24]
 800b138:	e029      	b.n	800b18e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	695b      	ldr	r3, [r3, #20]
 800b13e:	61bb      	str	r3, [r7, #24]
 800b140:	e025      	b.n	800b18e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	695b      	ldr	r3, [r3, #20]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d10e      	bne.n	800b168 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800b14a:	6a3b      	ldr	r3, [r7, #32]
 800b14c:	4a30      	ldr	r2, [pc, #192]	; (800b210 <HAL_SD_ConfigWideBusOperation+0x220>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d906      	bls.n	800b160 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800b152:	6a3b      	ldr	r3, [r7, #32]
 800b154:	4a2c      	ldr	r2, [pc, #176]	; (800b208 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b156:	fba2 2303 	umull	r2, r3, r2, r3
 800b15a:	0e1b      	lsrs	r3, r3, #24
 800b15c:	61bb      	str	r3, [r7, #24]
 800b15e:	e016      	b.n	800b18e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	695b      	ldr	r3, [r3, #20]
 800b164:	61bb      	str	r3, [r7, #24]
 800b166:	e012      	b.n	800b18e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	695b      	ldr	r3, [r3, #20]
 800b16c:	005b      	lsls	r3, r3, #1
 800b16e:	6a3a      	ldr	r2, [r7, #32]
 800b170:	fbb2 f3f3 	udiv	r3, r2, r3
 800b174:	4a26      	ldr	r2, [pc, #152]	; (800b210 <HAL_SD_ConfigWideBusOperation+0x220>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d906      	bls.n	800b188 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800b17a:	6a3b      	ldr	r3, [r7, #32]
 800b17c:	4a22      	ldr	r2, [pc, #136]	; (800b208 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b17e:	fba2 2303 	umull	r2, r3, r2, r3
 800b182:	0e1b      	lsrs	r3, r3, #24
 800b184:	61bb      	str	r3, [r7, #24]
 800b186:	e002      	b.n	800b18e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	695b      	ldr	r3, [r3, #20]
 800b18c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681c      	ldr	r4, [r3, #0]
 800b192:	466a      	mov	r2, sp
 800b194:	f107 0314 	add.w	r3, r7, #20
 800b198:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b19c:	e882 0003 	stmia.w	r2, {r0, r1}
 800b1a0:	f107 0308 	add.w	r3, r7, #8
 800b1a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	f002 fb98 	bl	800d8dc <SDMMC_Init>
 800b1ac:	e008      	b.n	800b1c0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f002 fc53 	bl	800da74 <SDMMC_CmdBlockLength>
 800b1ce:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b1d0:	69fb      	ldr	r3, [r7, #28]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00c      	beq.n	800b1f0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4a0a      	ldr	r2, [pc, #40]	; (800b204 <HAL_SD_ConfigWideBusOperation+0x214>)
 800b1dc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	431a      	orrs	r2, r3
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800b1f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	372c      	adds	r7, #44	; 0x2c
 800b200:	46bd      	mov	sp, r7
 800b202:	bd90      	pop	{r4, r7, pc}
 800b204:	1fe00fff 	.word	0x1fe00fff
 800b208:	55e63b89 	.word	0x55e63b89
 800b20c:	02faf080 	.word	0x02faf080
 800b210:	017d7840 	.word	0x017d7840

0800b214 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b086      	sub	sp, #24
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b21c:	2300      	movs	r3, #0
 800b21e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b220:	f107 030c 	add.w	r3, r7, #12
 800b224:	4619      	mov	r1, r3
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 fa40 	bl	800b6ac <SD_SendStatus>
 800b22c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d005      	beq.n	800b240 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	431a      	orrs	r2, r3
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	0a5b      	lsrs	r3, r3, #9
 800b244:	f003 030f 	and.w	r3, r3, #15
 800b248:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b24a:	693b      	ldr	r3, [r7, #16]
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3718      	adds	r7, #24
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}

0800b254 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b090      	sub	sp, #64	; 0x40
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800b25c:	2300      	movs	r3, #0
 800b25e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800b260:	f7f7 fe9c 	bl	8002f9c <HAL_GetTick>
 800b264:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4618      	mov	r0, r3
 800b26c:	f002 fb7e 	bl	800d96c <SDMMC_GetPowerState>
 800b270:	4603      	mov	r3, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d102      	bne.n	800b27c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b276:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b27a:	e0b5      	b.n	800b3e8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b280:	2b03      	cmp	r3, #3
 800b282:	d02e      	beq.n	800b2e2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4618      	mov	r0, r3
 800b28a:	f002 fcff 	bl	800dc8c <SDMMC_CmdSendCID>
 800b28e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800b290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b292:	2b00      	cmp	r3, #0
 800b294:	d001      	beq.n	800b29a <SD_InitCard+0x46>
    {
      return errorstate;
 800b296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b298:	e0a6      	b.n	800b3e8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	2100      	movs	r1, #0
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f002 fba8 	bl	800d9f6 <SDMMC_GetResponse>
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	2104      	movs	r1, #4
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f002 fb9f 	bl	800d9f6 <SDMMC_GetResponse>
 800b2b8:	4602      	mov	r2, r0
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	2108      	movs	r1, #8
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f002 fb96 	bl	800d9f6 <SDMMC_GetResponse>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	210c      	movs	r1, #12
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f002 fb8d 	bl	800d9f6 <SDMMC_GetResponse>
 800b2dc:	4602      	mov	r2, r0
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2e6:	2b03      	cmp	r3, #3
 800b2e8:	d01d      	beq.n	800b326 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800b2ea:	e019      	b.n	800b320 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f107 020a 	add.w	r2, r7, #10
 800b2f4:	4611      	mov	r1, r2
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f002 fd07 	bl	800dd0a <SDMMC_CmdSetRelAdd>
 800b2fc:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800b2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b300:	2b00      	cmp	r3, #0
 800b302:	d001      	beq.n	800b308 <SD_InitCard+0xb4>
      {
        return errorstate;
 800b304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b306:	e06f      	b.n	800b3e8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800b308:	f7f7 fe48 	bl	8002f9c <HAL_GetTick>
 800b30c:	4602      	mov	r2, r0
 800b30e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b310:	1ad3      	subs	r3, r2, r3
 800b312:	f241 3287 	movw	r2, #4999	; 0x1387
 800b316:	4293      	cmp	r3, r2
 800b318:	d902      	bls.n	800b320 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800b31a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b31e:	e063      	b.n	800b3e8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800b320:	897b      	ldrh	r3, [r7, #10]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d0e2      	beq.n	800b2ec <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b32a:	2b03      	cmp	r3, #3
 800b32c:	d036      	beq.n	800b39c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b32e:	897b      	ldrh	r3, [r7, #10]
 800b330:	461a      	mov	r2, r3
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b33e:	041b      	lsls	r3, r3, #16
 800b340:	4619      	mov	r1, r3
 800b342:	4610      	mov	r0, r2
 800b344:	f002 fcc1 	bl	800dcca <SDMMC_CmdSendCSD>
 800b348:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800b34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d001      	beq.n	800b354 <SD_InitCard+0x100>
    {
      return errorstate;
 800b350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b352:	e049      	b.n	800b3e8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	2100      	movs	r1, #0
 800b35a:	4618      	mov	r0, r3
 800b35c:	f002 fb4b 	bl	800d9f6 <SDMMC_GetResponse>
 800b360:	4602      	mov	r2, r0
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2104      	movs	r1, #4
 800b36c:	4618      	mov	r0, r3
 800b36e:	f002 fb42 	bl	800d9f6 <SDMMC_GetResponse>
 800b372:	4602      	mov	r2, r0
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	2108      	movs	r1, #8
 800b37e:	4618      	mov	r0, r3
 800b380:	f002 fb39 	bl	800d9f6 <SDMMC_GetResponse>
 800b384:	4602      	mov	r2, r0
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	210c      	movs	r1, #12
 800b390:	4618      	mov	r0, r3
 800b392:	f002 fb30 	bl	800d9f6 <SDMMC_GetResponse>
 800b396:	4602      	mov	r2, r0
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	2104      	movs	r1, #4
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f002 fb27 	bl	800d9f6 <SDMMC_GetResponse>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	0d1a      	lsrs	r2, r3, #20
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b3b0:	f107 030c 	add.w	r3, r7, #12
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f7ff fbb8 	bl	800ab2c <HAL_SD_GetCardCSD>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d002      	beq.n	800b3c8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b3c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b3c6:	e00f      	b.n	800b3e8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3d0:	041b      	lsls	r3, r3, #16
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	4610      	mov	r0, r2
 800b3d6:	f002 fb70 	bl	800daba <SDMMC_CmdSelDesel>
 800b3da:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800b3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d001      	beq.n	800b3e6 <SD_InitCard+0x192>
  {
    return errorstate;
 800b3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e4:	e000      	b.n	800b3e8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3740      	adds	r7, #64	; 0x40
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b086      	sub	sp, #24
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800b400:	2300      	movs	r3, #0
 800b402:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4618      	mov	r0, r3
 800b40a:	f002 fb79 	bl	800db00 <SDMMC_CmdGoIdleState>
 800b40e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d001      	beq.n	800b41a <SD_PowerON+0x2a>
  {
    return errorstate;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	e072      	b.n	800b500 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4618      	mov	r0, r3
 800b420:	f002 fb8c 	bl	800db3c <SDMMC_CmdOperCond>
 800b424:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b42c:	d10d      	bne.n	800b44a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2200      	movs	r2, #0
 800b432:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4618      	mov	r0, r3
 800b43a:	f002 fb61 	bl	800db00 <SDMMC_CmdGoIdleState>
 800b43e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d004      	beq.n	800b450 <SD_PowerON+0x60>
    {
      return errorstate;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	e05a      	b.n	800b500 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2201      	movs	r2, #1
 800b44e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b454:	2b01      	cmp	r3, #1
 800b456:	d137      	bne.n	800b4c8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2100      	movs	r1, #0
 800b45e:	4618      	mov	r0, r3
 800b460:	f002 fb8c 	bl	800db7c <SDMMC_CmdAppCommand>
 800b464:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d02d      	beq.n	800b4c8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b46c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b470:	e046      	b.n	800b500 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2100      	movs	r1, #0
 800b478:	4618      	mov	r0, r3
 800b47a:	f002 fb7f 	bl	800db7c <SDMMC_CmdAppCommand>
 800b47e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d001      	beq.n	800b48a <SD_PowerON+0x9a>
    {
      return errorstate;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	e03a      	b.n	800b500 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	491e      	ldr	r1, [pc, #120]	; (800b508 <SD_PowerON+0x118>)
 800b490:	4618      	mov	r0, r3
 800b492:	f002 fb96 	bl	800dbc2 <SDMMC_CmdAppOperCommand>
 800b496:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d002      	beq.n	800b4a4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b49e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b4a2:	e02d      	b.n	800b500 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f002 faa3 	bl	800d9f6 <SDMMC_GetResponse>
 800b4b0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	0fdb      	lsrs	r3, r3, #31
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d101      	bne.n	800b4be <SD_PowerON+0xce>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e000      	b.n	800b4c0 <SD_PowerON+0xd0>
 800b4be:	2300      	movs	r3, #0
 800b4c0:	613b      	str	r3, [r7, #16]

    count++;
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d802      	bhi.n	800b4d8 <SD_PowerON+0xe8>
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d0cc      	beq.n	800b472 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d902      	bls.n	800b4e8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b4e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b4e6:	e00b      	b.n	800b500 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d002      	beq.n	800b4fe <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800b4fe:	2300      	movs	r3, #0
}
 800b500:	4618      	mov	r0, r3
 800b502:	3718      	adds	r7, #24
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	c1100000 	.word	0xc1100000

0800b50c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b08c      	sub	sp, #48	; 0x30
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b516:	f7f7 fd41 	bl	8002f9c <HAL_GetTick>
 800b51a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	2100      	movs	r1, #0
 800b526:	4618      	mov	r0, r3
 800b528:	f002 fa65 	bl	800d9f6 <SDMMC_GetResponse>
 800b52c:	4603      	mov	r3, r0
 800b52e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b532:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b536:	d102      	bne.n	800b53e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b538:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b53c:	e0b0      	b.n	800b6a0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	2140      	movs	r1, #64	; 0x40
 800b544:	4618      	mov	r0, r3
 800b546:	f002 fa95 	bl	800da74 <SDMMC_CmdBlockLength>
 800b54a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b54c:	6a3b      	ldr	r3, [r7, #32]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d005      	beq.n	800b55e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b55a:	6a3b      	ldr	r3, [r7, #32]
 800b55c:	e0a0      	b.n	800b6a0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b566:	041b      	lsls	r3, r3, #16
 800b568:	4619      	mov	r1, r3
 800b56a:	4610      	mov	r0, r2
 800b56c:	f002 fb06 	bl	800db7c <SDMMC_CmdAppCommand>
 800b570:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b572:	6a3b      	ldr	r3, [r7, #32]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d005      	beq.n	800b584 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b580:	6a3b      	ldr	r3, [r7, #32]
 800b582:	e08d      	b.n	800b6a0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b584:	f04f 33ff 	mov.w	r3, #4294967295
 800b588:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800b58a:	2340      	movs	r3, #64	; 0x40
 800b58c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800b58e:	2360      	movs	r3, #96	; 0x60
 800b590:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b592:	2302      	movs	r3, #2
 800b594:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b596:	2300      	movs	r3, #0
 800b598:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b59a:	2301      	movs	r3, #1
 800b59c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f107 0208 	add.w	r2, r7, #8
 800b5a6:	4611      	mov	r1, r2
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f002 fa37 	bl	800da1c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f002 fbee 	bl	800dd94 <SDMMC_CmdStatusRegister>
 800b5b8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b5ba:	6a3b      	ldr	r3, [r7, #32]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d02b      	beq.n	800b618 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b5c8:	6a3b      	ldr	r3, [r7, #32]
 800b5ca:	e069      	b.n	800b6a0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d013      	beq.n	800b602 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800b5da:	2300      	movs	r3, #0
 800b5dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5de:	e00d      	b.n	800b5fc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f002 f9a3 	bl	800d930 <SDMMC_ReadFIFO>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ee:	601a      	str	r2, [r3, #0]
        pData++;
 800b5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f2:	3304      	adds	r3, #4
 800b5f4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800b5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5fe:	2b07      	cmp	r3, #7
 800b600:	d9ee      	bls.n	800b5e0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b602:	f7f7 fccb 	bl	8002f9c <HAL_GetTick>
 800b606:	4602      	mov	r2, r0
 800b608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60a:	1ad3      	subs	r3, r2, r3
 800b60c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b610:	d102      	bne.n	800b618 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b612:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b616:	e043      	b.n	800b6a0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b61e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b622:	2b00      	cmp	r3, #0
 800b624:	d0d2      	beq.n	800b5cc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b62c:	f003 0308 	and.w	r3, r3, #8
 800b630:	2b00      	cmp	r3, #0
 800b632:	d001      	beq.n	800b638 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b634:	2308      	movs	r3, #8
 800b636:	e033      	b.n	800b6a0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b63e:	f003 0302 	and.w	r3, r3, #2
 800b642:	2b00      	cmp	r3, #0
 800b644:	d001      	beq.n	800b64a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b646:	2302      	movs	r3, #2
 800b648:	e02a      	b.n	800b6a0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b650:	f003 0320 	and.w	r3, r3, #32
 800b654:	2b00      	cmp	r3, #0
 800b656:	d017      	beq.n	800b688 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b658:	2320      	movs	r3, #32
 800b65a:	e021      	b.n	800b6a0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4618      	mov	r0, r3
 800b662:	f002 f965 	bl	800d930 <SDMMC_ReadFIFO>
 800b666:	4602      	mov	r2, r0
 800b668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66a:	601a      	str	r2, [r3, #0]
    pData++;
 800b66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66e:	3304      	adds	r3, #4
 800b670:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b672:	f7f7 fc93 	bl	8002f9c <HAL_GetTick>
 800b676:	4602      	mov	r2, r0
 800b678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67a:	1ad3      	subs	r3, r2, r3
 800b67c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b680:	d102      	bne.n	800b688 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b682:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b686:	e00b      	b.n	800b6a0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b68e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b692:	2b00      	cmp	r3, #0
 800b694:	d1e2      	bne.n	800b65c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4a03      	ldr	r2, [pc, #12]	; (800b6a8 <SD_SendSDStatus+0x19c>)
 800b69c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800b69e:	2300      	movs	r3, #0
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3730      	adds	r7, #48	; 0x30
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}
 800b6a8:	18000f3a 	.word	0x18000f3a

0800b6ac <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d102      	bne.n	800b6c2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b6bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b6c0:	e018      	b.n	800b6f4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6ca:	041b      	lsls	r3, r3, #16
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	4610      	mov	r0, r2
 800b6d0:	f002 fb3d 	bl	800dd4e <SDMMC_CmdSendStatus>
 800b6d4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d001      	beq.n	800b6e0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	e009      	b.n	800b6f4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	2100      	movs	r1, #0
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f002 f985 	bl	800d9f6 <SDMMC_GetResponse>
 800b6ec:	4602      	mov	r2, r0
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b6f2:	2300      	movs	r3, #0
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3710      	adds	r7, #16
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b086      	sub	sp, #24
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b704:	2300      	movs	r3, #0
 800b706:	60fb      	str	r3, [r7, #12]
 800b708:	2300      	movs	r3, #0
 800b70a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	2100      	movs	r1, #0
 800b712:	4618      	mov	r0, r3
 800b714:	f002 f96f 	bl	800d9f6 <SDMMC_GetResponse>
 800b718:	4603      	mov	r3, r0
 800b71a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b71e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b722:	d102      	bne.n	800b72a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b724:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b728:	e02f      	b.n	800b78a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b72a:	f107 030c 	add.w	r3, r7, #12
 800b72e:	4619      	mov	r1, r3
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 f879 	bl	800b828 <SD_FindSCR>
 800b736:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d001      	beq.n	800b742 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	e023      	b.n	800b78a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d01c      	beq.n	800b786 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b754:	041b      	lsls	r3, r3, #16
 800b756:	4619      	mov	r1, r3
 800b758:	4610      	mov	r0, r2
 800b75a:	f002 fa0f 	bl	800db7c <SDMMC_CmdAppCommand>
 800b75e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d001      	beq.n	800b76a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	e00f      	b.n	800b78a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2102      	movs	r1, #2
 800b770:	4618      	mov	r0, r3
 800b772:	f002 fa46 	bl	800dc02 <SDMMC_CmdBusWidth>
 800b776:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d001      	beq.n	800b782 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	e003      	b.n	800b78a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b782:	2300      	movs	r3, #0
 800b784:	e001      	b.n	800b78a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b786:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3718      	adds	r7, #24
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}

0800b792 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b792:	b580      	push	{r7, lr}
 800b794:	b086      	sub	sp, #24
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b79a:	2300      	movs	r3, #0
 800b79c:	60fb      	str	r3, [r7, #12]
 800b79e:	2300      	movs	r3, #0
 800b7a0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	2100      	movs	r1, #0
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f002 f924 	bl	800d9f6 <SDMMC_GetResponse>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b7b8:	d102      	bne.n	800b7c0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b7ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b7be:	e02f      	b.n	800b820 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b7c0:	f107 030c 	add.w	r3, r7, #12
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f000 f82e 	bl	800b828 <SD_FindSCR>
 800b7cc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d001      	beq.n	800b7d8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	e023      	b.n	800b820 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d01c      	beq.n	800b81c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7ea:	041b      	lsls	r3, r3, #16
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	4610      	mov	r0, r2
 800b7f0:	f002 f9c4 	bl	800db7c <SDMMC_CmdAppCommand>
 800b7f4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d001      	beq.n	800b800 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	e00f      	b.n	800b820 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	2100      	movs	r1, #0
 800b806:	4618      	mov	r0, r3
 800b808:	f002 f9fb 	bl	800dc02 <SDMMC_CmdBusWidth>
 800b80c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d001      	beq.n	800b818 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	e003      	b.n	800b820 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b818:	2300      	movs	r3, #0
 800b81a:	e001      	b.n	800b820 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b81c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b820:	4618      	mov	r0, r3
 800b822:	3718      	adds	r7, #24
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b08e      	sub	sp, #56	; 0x38
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b832:	f7f7 fbb3 	bl	8002f9c <HAL_GetTick>
 800b836:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b838:	2300      	movs	r3, #0
 800b83a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b83c:	2300      	movs	r3, #0
 800b83e:	60bb      	str	r3, [r7, #8]
 800b840:	2300      	movs	r3, #0
 800b842:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	2108      	movs	r1, #8
 800b84e:	4618      	mov	r0, r3
 800b850:	f002 f910 	bl	800da74 <SDMMC_CmdBlockLength>
 800b854:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d001      	beq.n	800b860 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85e:	e0ad      	b.n	800b9bc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b868:	041b      	lsls	r3, r3, #16
 800b86a:	4619      	mov	r1, r3
 800b86c:	4610      	mov	r0, r2
 800b86e:	f002 f985 	bl	800db7c <SDMMC_CmdAppCommand>
 800b872:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b876:	2b00      	cmp	r3, #0
 800b878:	d001      	beq.n	800b87e <SD_FindSCR+0x56>
  {
    return errorstate;
 800b87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87c:	e09e      	b.n	800b9bc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b87e:	f04f 33ff 	mov.w	r3, #4294967295
 800b882:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b884:	2308      	movs	r3, #8
 800b886:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b888:	2330      	movs	r3, #48	; 0x30
 800b88a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b88c:	2302      	movs	r3, #2
 800b88e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b890:	2300      	movs	r3, #0
 800b892:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b894:	2301      	movs	r3, #1
 800b896:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f107 0210 	add.w	r2, r7, #16
 800b8a0:	4611      	mov	r1, r2
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f002 f8ba 	bl	800da1c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f002 f9cb 	bl	800dc48 <SDMMC_CmdSendSCR>
 800b8b2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d027      	beq.n	800b90a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8bc:	e07e      	b.n	800b9bc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d113      	bne.n	800b8f4 <SD_FindSCR+0xcc>
 800b8cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d110      	bne.n	800b8f4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f002 f82a 	bl	800d930 <SDMMC_ReadFIFO>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f002 f823 	bl	800d930 <SDMMC_ReadFIFO>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	60fb      	str	r3, [r7, #12]
      index++;
 800b8ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b8f4:	f7f7 fb52 	bl	8002f9c <HAL_GetTick>
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8fc:	1ad3      	subs	r3, r2, r3
 800b8fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b902:	d102      	bne.n	800b90a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b904:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b908:	e058      	b.n	800b9bc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b910:	f240 532a 	movw	r3, #1322	; 0x52a
 800b914:	4013      	ands	r3, r2
 800b916:	2b00      	cmp	r3, #0
 800b918:	d0d1      	beq.n	800b8be <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b920:	f003 0308 	and.w	r3, r3, #8
 800b924:	2b00      	cmp	r3, #0
 800b926:	d005      	beq.n	800b934 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2208      	movs	r2, #8
 800b92e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b930:	2308      	movs	r3, #8
 800b932:	e043      	b.n	800b9bc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b93a:	f003 0302 	and.w	r3, r3, #2
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d005      	beq.n	800b94e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	2202      	movs	r2, #2
 800b948:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b94a:	2302      	movs	r3, #2
 800b94c:	e036      	b.n	800b9bc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b954:	f003 0320 	and.w	r3, r3, #32
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d005      	beq.n	800b968 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	2220      	movs	r2, #32
 800b962:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b964:	2320      	movs	r3, #32
 800b966:	e029      	b.n	800b9bc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a15      	ldr	r2, [pc, #84]	; (800b9c4 <SD_FindSCR+0x19c>)
 800b96e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	061a      	lsls	r2, r3, #24
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	021b      	lsls	r3, r3, #8
 800b978:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b97c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	0a1b      	lsrs	r3, r3, #8
 800b982:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b986:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	0e1b      	lsrs	r3, r3, #24
 800b98c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b990:	601a      	str	r2, [r3, #0]
    scr++;
 800b992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b994:	3304      	adds	r3, #4
 800b996:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	061a      	lsls	r2, r3, #24
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	021b      	lsls	r3, r3, #8
 800b9a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b9a4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	0a1b      	lsrs	r3, r3, #8
 800b9aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b9ae:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	0e1b      	lsrs	r3, r3, #24
 800b9b4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b9ba:	2300      	movs	r3, #0
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3738      	adds	r7, #56	; 0x38
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	18000f3a 	.word	0x18000f3a

0800b9c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d101      	bne.n	800b9da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	e049      	b.n	800ba6e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d106      	bne.n	800b9f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f7f6 ff32 	bl	8002858 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2202      	movs	r2, #2
 800b9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681a      	ldr	r2, [r3, #0]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	3304      	adds	r3, #4
 800ba04:	4619      	mov	r1, r3
 800ba06:	4610      	mov	r0, r2
 800ba08:	f000 f94a 	bl	800bca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2201      	movs	r2, #1
 800ba18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2201      	movs	r2, #1
 800ba20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2201      	movs	r2, #1
 800ba28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2201      	movs	r2, #1
 800ba30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2201      	movs	r2, #1
 800ba38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2201      	movs	r2, #1
 800ba40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2201      	movs	r2, #1
 800ba48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2201      	movs	r2, #1
 800ba50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2201      	movs	r2, #1
 800ba58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2201      	movs	r2, #1
 800ba60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2201      	movs	r2, #1
 800ba68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba6c:	2300      	movs	r3, #0
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3708      	adds	r7, #8
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
	...

0800ba78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b086      	sub	sp, #24
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba84:	2300      	movs	r3, #0
 800ba86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba8e:	2b01      	cmp	r3, #1
 800ba90:	d101      	bne.n	800ba96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ba92:	2302      	movs	r3, #2
 800ba94:	e0ff      	b.n	800bc96 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2201      	movs	r2, #1
 800ba9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2b14      	cmp	r3, #20
 800baa2:	f200 80f0 	bhi.w	800bc86 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800baa6:	a201      	add	r2, pc, #4	; (adr r2, 800baac <HAL_TIM_PWM_ConfigChannel+0x34>)
 800baa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baac:	0800bb01 	.word	0x0800bb01
 800bab0:	0800bc87 	.word	0x0800bc87
 800bab4:	0800bc87 	.word	0x0800bc87
 800bab8:	0800bc87 	.word	0x0800bc87
 800babc:	0800bb41 	.word	0x0800bb41
 800bac0:	0800bc87 	.word	0x0800bc87
 800bac4:	0800bc87 	.word	0x0800bc87
 800bac8:	0800bc87 	.word	0x0800bc87
 800bacc:	0800bb83 	.word	0x0800bb83
 800bad0:	0800bc87 	.word	0x0800bc87
 800bad4:	0800bc87 	.word	0x0800bc87
 800bad8:	0800bc87 	.word	0x0800bc87
 800badc:	0800bbc3 	.word	0x0800bbc3
 800bae0:	0800bc87 	.word	0x0800bc87
 800bae4:	0800bc87 	.word	0x0800bc87
 800bae8:	0800bc87 	.word	0x0800bc87
 800baec:	0800bc05 	.word	0x0800bc05
 800baf0:	0800bc87 	.word	0x0800bc87
 800baf4:	0800bc87 	.word	0x0800bc87
 800baf8:	0800bc87 	.word	0x0800bc87
 800bafc:	0800bc45 	.word	0x0800bc45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	68b9      	ldr	r1, [r7, #8]
 800bb06:	4618      	mov	r0, r3
 800bb08:	f000 f970 	bl	800bdec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	699a      	ldr	r2, [r3, #24]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f042 0208 	orr.w	r2, r2, #8
 800bb1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	699a      	ldr	r2, [r3, #24]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f022 0204 	bic.w	r2, r2, #4
 800bb2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	6999      	ldr	r1, [r3, #24]
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	691a      	ldr	r2, [r3, #16]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	430a      	orrs	r2, r1
 800bb3c:	619a      	str	r2, [r3, #24]
      break;
 800bb3e:	e0a5      	b.n	800bc8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	68b9      	ldr	r1, [r7, #8]
 800bb46:	4618      	mov	r0, r3
 800bb48:	f000 f9e0 	bl	800bf0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	699a      	ldr	r2, [r3, #24]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	699a      	ldr	r2, [r3, #24]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	6999      	ldr	r1, [r3, #24]
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	691b      	ldr	r3, [r3, #16]
 800bb76:	021a      	lsls	r2, r3, #8
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	430a      	orrs	r2, r1
 800bb7e:	619a      	str	r2, [r3, #24]
      break;
 800bb80:	e084      	b.n	800bc8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	68b9      	ldr	r1, [r7, #8]
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f000 fa49 	bl	800c020 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	69da      	ldr	r2, [r3, #28]
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f042 0208 	orr.w	r2, r2, #8
 800bb9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	69da      	ldr	r2, [r3, #28]
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f022 0204 	bic.w	r2, r2, #4
 800bbac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	69d9      	ldr	r1, [r3, #28]
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	691a      	ldr	r2, [r3, #16]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	430a      	orrs	r2, r1
 800bbbe:	61da      	str	r2, [r3, #28]
      break;
 800bbc0:	e064      	b.n	800bc8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	68b9      	ldr	r1, [r7, #8]
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f000 fab1 	bl	800c130 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	69da      	ldr	r2, [r3, #28]
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bbdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	69da      	ldr	r2, [r3, #28]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	69d9      	ldr	r1, [r3, #28]
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	691b      	ldr	r3, [r3, #16]
 800bbf8:	021a      	lsls	r2, r3, #8
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	430a      	orrs	r2, r1
 800bc00:	61da      	str	r2, [r3, #28]
      break;
 800bc02:	e043      	b.n	800bc8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	68b9      	ldr	r1, [r7, #8]
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f000 fafa 	bl	800c204 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f042 0208 	orr.w	r2, r2, #8
 800bc1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f022 0204 	bic.w	r2, r2, #4
 800bc2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	691a      	ldr	r2, [r3, #16]
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	430a      	orrs	r2, r1
 800bc40:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bc42:	e023      	b.n	800bc8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	68b9      	ldr	r1, [r7, #8]
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f000 fb3e 	bl	800c2cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	691b      	ldr	r3, [r3, #16]
 800bc7a:	021a      	lsls	r2, r3, #8
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	430a      	orrs	r2, r1
 800bc82:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bc84:	e002      	b.n	800bc8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bc86:	2301      	movs	r3, #1
 800bc88:	75fb      	strb	r3, [r7, #23]
      break;
 800bc8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bc94:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3718      	adds	r7, #24
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}
 800bc9e:	bf00      	nop

0800bca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b085      	sub	sp, #20
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	4a44      	ldr	r2, [pc, #272]	; (800bdc4 <TIM_Base_SetConfig+0x124>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d013      	beq.n	800bce0 <TIM_Base_SetConfig+0x40>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcbe:	d00f      	beq.n	800bce0 <TIM_Base_SetConfig+0x40>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	4a41      	ldr	r2, [pc, #260]	; (800bdc8 <TIM_Base_SetConfig+0x128>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d00b      	beq.n	800bce0 <TIM_Base_SetConfig+0x40>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a40      	ldr	r2, [pc, #256]	; (800bdcc <TIM_Base_SetConfig+0x12c>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d007      	beq.n	800bce0 <TIM_Base_SetConfig+0x40>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	4a3f      	ldr	r2, [pc, #252]	; (800bdd0 <TIM_Base_SetConfig+0x130>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d003      	beq.n	800bce0 <TIM_Base_SetConfig+0x40>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	4a3e      	ldr	r2, [pc, #248]	; (800bdd4 <TIM_Base_SetConfig+0x134>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d108      	bne.n	800bcf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	68fa      	ldr	r2, [r7, #12]
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	4a33      	ldr	r2, [pc, #204]	; (800bdc4 <TIM_Base_SetConfig+0x124>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d027      	beq.n	800bd4a <TIM_Base_SetConfig+0xaa>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd00:	d023      	beq.n	800bd4a <TIM_Base_SetConfig+0xaa>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	4a30      	ldr	r2, [pc, #192]	; (800bdc8 <TIM_Base_SetConfig+0x128>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d01f      	beq.n	800bd4a <TIM_Base_SetConfig+0xaa>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4a2f      	ldr	r2, [pc, #188]	; (800bdcc <TIM_Base_SetConfig+0x12c>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d01b      	beq.n	800bd4a <TIM_Base_SetConfig+0xaa>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4a2e      	ldr	r2, [pc, #184]	; (800bdd0 <TIM_Base_SetConfig+0x130>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d017      	beq.n	800bd4a <TIM_Base_SetConfig+0xaa>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4a2d      	ldr	r2, [pc, #180]	; (800bdd4 <TIM_Base_SetConfig+0x134>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d013      	beq.n	800bd4a <TIM_Base_SetConfig+0xaa>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	4a2c      	ldr	r2, [pc, #176]	; (800bdd8 <TIM_Base_SetConfig+0x138>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d00f      	beq.n	800bd4a <TIM_Base_SetConfig+0xaa>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4a2b      	ldr	r2, [pc, #172]	; (800bddc <TIM_Base_SetConfig+0x13c>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d00b      	beq.n	800bd4a <TIM_Base_SetConfig+0xaa>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	4a2a      	ldr	r2, [pc, #168]	; (800bde0 <TIM_Base_SetConfig+0x140>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d007      	beq.n	800bd4a <TIM_Base_SetConfig+0xaa>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	4a29      	ldr	r2, [pc, #164]	; (800bde4 <TIM_Base_SetConfig+0x144>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d003      	beq.n	800bd4a <TIM_Base_SetConfig+0xaa>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	4a28      	ldr	r2, [pc, #160]	; (800bde8 <TIM_Base_SetConfig+0x148>)
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d108      	bne.n	800bd5c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	68db      	ldr	r3, [r3, #12]
 800bd56:	68fa      	ldr	r2, [r7, #12]
 800bd58:	4313      	orrs	r3, r2
 800bd5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	695b      	ldr	r3, [r3, #20]
 800bd66:	4313      	orrs	r3, r2
 800bd68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	68fa      	ldr	r2, [r7, #12]
 800bd6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	689a      	ldr	r2, [r3, #8]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	681a      	ldr	r2, [r3, #0]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	4a10      	ldr	r2, [pc, #64]	; (800bdc4 <TIM_Base_SetConfig+0x124>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d00f      	beq.n	800bda8 <TIM_Base_SetConfig+0x108>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	4a12      	ldr	r2, [pc, #72]	; (800bdd4 <TIM_Base_SetConfig+0x134>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d00b      	beq.n	800bda8 <TIM_Base_SetConfig+0x108>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	4a11      	ldr	r2, [pc, #68]	; (800bdd8 <TIM_Base_SetConfig+0x138>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d007      	beq.n	800bda8 <TIM_Base_SetConfig+0x108>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	4a10      	ldr	r2, [pc, #64]	; (800bddc <TIM_Base_SetConfig+0x13c>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d003      	beq.n	800bda8 <TIM_Base_SetConfig+0x108>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	4a0f      	ldr	r2, [pc, #60]	; (800bde0 <TIM_Base_SetConfig+0x140>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d103      	bne.n	800bdb0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	691a      	ldr	r2, [r3, #16]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	615a      	str	r2, [r3, #20]
}
 800bdb6:	bf00      	nop
 800bdb8:	3714      	adds	r7, #20
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop
 800bdc4:	40010000 	.word	0x40010000
 800bdc8:	40000400 	.word	0x40000400
 800bdcc:	40000800 	.word	0x40000800
 800bdd0:	40000c00 	.word	0x40000c00
 800bdd4:	40010400 	.word	0x40010400
 800bdd8:	40014000 	.word	0x40014000
 800bddc:	40014400 	.word	0x40014400
 800bde0:	40014800 	.word	0x40014800
 800bde4:	4000e000 	.word	0x4000e000
 800bde8:	4000e400 	.word	0x4000e400

0800bdec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b087      	sub	sp, #28
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6a1b      	ldr	r3, [r3, #32]
 800bdfa:	f023 0201 	bic.w	r2, r3, #1
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6a1b      	ldr	r3, [r3, #32]
 800be06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	699b      	ldr	r3, [r3, #24]
 800be12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800be14:	68fa      	ldr	r2, [r7, #12]
 800be16:	4b37      	ldr	r3, [pc, #220]	; (800bef4 <TIM_OC1_SetConfig+0x108>)
 800be18:	4013      	ands	r3, r2
 800be1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f023 0303 	bic.w	r3, r3, #3
 800be22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	68fa      	ldr	r2, [r7, #12]
 800be2a:	4313      	orrs	r3, r2
 800be2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	f023 0302 	bic.w	r3, r3, #2
 800be34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	689b      	ldr	r3, [r3, #8]
 800be3a:	697a      	ldr	r2, [r7, #20]
 800be3c:	4313      	orrs	r3, r2
 800be3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	4a2d      	ldr	r2, [pc, #180]	; (800bef8 <TIM_OC1_SetConfig+0x10c>)
 800be44:	4293      	cmp	r3, r2
 800be46:	d00f      	beq.n	800be68 <TIM_OC1_SetConfig+0x7c>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	4a2c      	ldr	r2, [pc, #176]	; (800befc <TIM_OC1_SetConfig+0x110>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d00b      	beq.n	800be68 <TIM_OC1_SetConfig+0x7c>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	4a2b      	ldr	r2, [pc, #172]	; (800bf00 <TIM_OC1_SetConfig+0x114>)
 800be54:	4293      	cmp	r3, r2
 800be56:	d007      	beq.n	800be68 <TIM_OC1_SetConfig+0x7c>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	4a2a      	ldr	r2, [pc, #168]	; (800bf04 <TIM_OC1_SetConfig+0x118>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d003      	beq.n	800be68 <TIM_OC1_SetConfig+0x7c>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	4a29      	ldr	r2, [pc, #164]	; (800bf08 <TIM_OC1_SetConfig+0x11c>)
 800be64:	4293      	cmp	r3, r2
 800be66:	d10c      	bne.n	800be82 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	f023 0308 	bic.w	r3, r3, #8
 800be6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	68db      	ldr	r3, [r3, #12]
 800be74:	697a      	ldr	r2, [r7, #20]
 800be76:	4313      	orrs	r3, r2
 800be78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	f023 0304 	bic.w	r3, r3, #4
 800be80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	4a1c      	ldr	r2, [pc, #112]	; (800bef8 <TIM_OC1_SetConfig+0x10c>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d00f      	beq.n	800beaa <TIM_OC1_SetConfig+0xbe>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	4a1b      	ldr	r2, [pc, #108]	; (800befc <TIM_OC1_SetConfig+0x110>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d00b      	beq.n	800beaa <TIM_OC1_SetConfig+0xbe>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	4a1a      	ldr	r2, [pc, #104]	; (800bf00 <TIM_OC1_SetConfig+0x114>)
 800be96:	4293      	cmp	r3, r2
 800be98:	d007      	beq.n	800beaa <TIM_OC1_SetConfig+0xbe>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	4a19      	ldr	r2, [pc, #100]	; (800bf04 <TIM_OC1_SetConfig+0x118>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d003      	beq.n	800beaa <TIM_OC1_SetConfig+0xbe>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	4a18      	ldr	r2, [pc, #96]	; (800bf08 <TIM_OC1_SetConfig+0x11c>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d111      	bne.n	800bece <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800beb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800beb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	695b      	ldr	r3, [r3, #20]
 800bebe:	693a      	ldr	r2, [r7, #16]
 800bec0:	4313      	orrs	r3, r2
 800bec2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	699b      	ldr	r3, [r3, #24]
 800bec8:	693a      	ldr	r2, [r7, #16]
 800beca:	4313      	orrs	r3, r2
 800becc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	693a      	ldr	r2, [r7, #16]
 800bed2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	68fa      	ldr	r2, [r7, #12]
 800bed8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	685a      	ldr	r2, [r3, #4]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	697a      	ldr	r2, [r7, #20]
 800bee6:	621a      	str	r2, [r3, #32]
}
 800bee8:	bf00      	nop
 800beea:	371c      	adds	r7, #28
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr
 800bef4:	fffeff8f 	.word	0xfffeff8f
 800bef8:	40010000 	.word	0x40010000
 800befc:	40010400 	.word	0x40010400
 800bf00:	40014000 	.word	0x40014000
 800bf04:	40014400 	.word	0x40014400
 800bf08:	40014800 	.word	0x40014800

0800bf0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b087      	sub	sp, #28
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6a1b      	ldr	r3, [r3, #32]
 800bf1a:	f023 0210 	bic.w	r2, r3, #16
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6a1b      	ldr	r3, [r3, #32]
 800bf26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	699b      	ldr	r3, [r3, #24]
 800bf32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bf34:	68fa      	ldr	r2, [r7, #12]
 800bf36:	4b34      	ldr	r3, [pc, #208]	; (800c008 <TIM_OC2_SetConfig+0xfc>)
 800bf38:	4013      	ands	r3, r2
 800bf3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	021b      	lsls	r3, r3, #8
 800bf4a:	68fa      	ldr	r2, [r7, #12]
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	f023 0320 	bic.w	r3, r3, #32
 800bf56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	689b      	ldr	r3, [r3, #8]
 800bf5c:	011b      	lsls	r3, r3, #4
 800bf5e:	697a      	ldr	r2, [r7, #20]
 800bf60:	4313      	orrs	r3, r2
 800bf62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	4a29      	ldr	r2, [pc, #164]	; (800c00c <TIM_OC2_SetConfig+0x100>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d003      	beq.n	800bf74 <TIM_OC2_SetConfig+0x68>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	4a28      	ldr	r2, [pc, #160]	; (800c010 <TIM_OC2_SetConfig+0x104>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d10d      	bne.n	800bf90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	011b      	lsls	r3, r3, #4
 800bf82:	697a      	ldr	r2, [r7, #20]
 800bf84:	4313      	orrs	r3, r2
 800bf86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	4a1e      	ldr	r2, [pc, #120]	; (800c00c <TIM_OC2_SetConfig+0x100>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d00f      	beq.n	800bfb8 <TIM_OC2_SetConfig+0xac>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	4a1d      	ldr	r2, [pc, #116]	; (800c010 <TIM_OC2_SetConfig+0x104>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d00b      	beq.n	800bfb8 <TIM_OC2_SetConfig+0xac>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	4a1c      	ldr	r2, [pc, #112]	; (800c014 <TIM_OC2_SetConfig+0x108>)
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d007      	beq.n	800bfb8 <TIM_OC2_SetConfig+0xac>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	4a1b      	ldr	r2, [pc, #108]	; (800c018 <TIM_OC2_SetConfig+0x10c>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d003      	beq.n	800bfb8 <TIM_OC2_SetConfig+0xac>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	4a1a      	ldr	r2, [pc, #104]	; (800c01c <TIM_OC2_SetConfig+0x110>)
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d113      	bne.n	800bfe0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bfbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bfc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	695b      	ldr	r3, [r3, #20]
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	693a      	ldr	r2, [r7, #16]
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	699b      	ldr	r3, [r3, #24]
 800bfd8:	009b      	lsls	r3, r3, #2
 800bfda:	693a      	ldr	r2, [r7, #16]
 800bfdc:	4313      	orrs	r3, r2
 800bfde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	693a      	ldr	r2, [r7, #16]
 800bfe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	68fa      	ldr	r2, [r7, #12]
 800bfea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	685a      	ldr	r2, [r3, #4]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	697a      	ldr	r2, [r7, #20]
 800bff8:	621a      	str	r2, [r3, #32]
}
 800bffa:	bf00      	nop
 800bffc:	371c      	adds	r7, #28
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr
 800c006:	bf00      	nop
 800c008:	feff8fff 	.word	0xfeff8fff
 800c00c:	40010000 	.word	0x40010000
 800c010:	40010400 	.word	0x40010400
 800c014:	40014000 	.word	0x40014000
 800c018:	40014400 	.word	0x40014400
 800c01c:	40014800 	.word	0x40014800

0800c020 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c020:	b480      	push	{r7}
 800c022:	b087      	sub	sp, #28
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6a1b      	ldr	r3, [r3, #32]
 800c02e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6a1b      	ldr	r3, [r3, #32]
 800c03a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	69db      	ldr	r3, [r3, #28]
 800c046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c048:	68fa      	ldr	r2, [r7, #12]
 800c04a:	4b33      	ldr	r3, [pc, #204]	; (800c118 <TIM_OC3_SetConfig+0xf8>)
 800c04c:	4013      	ands	r3, r2
 800c04e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f023 0303 	bic.w	r3, r3, #3
 800c056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	68fa      	ldr	r2, [r7, #12]
 800c05e:	4313      	orrs	r3, r2
 800c060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	689b      	ldr	r3, [r3, #8]
 800c06e:	021b      	lsls	r3, r3, #8
 800c070:	697a      	ldr	r2, [r7, #20]
 800c072:	4313      	orrs	r3, r2
 800c074:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	4a28      	ldr	r2, [pc, #160]	; (800c11c <TIM_OC3_SetConfig+0xfc>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d003      	beq.n	800c086 <TIM_OC3_SetConfig+0x66>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	4a27      	ldr	r2, [pc, #156]	; (800c120 <TIM_OC3_SetConfig+0x100>)
 800c082:	4293      	cmp	r3, r2
 800c084:	d10d      	bne.n	800c0a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c08c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	68db      	ldr	r3, [r3, #12]
 800c092:	021b      	lsls	r3, r3, #8
 800c094:	697a      	ldr	r2, [r7, #20]
 800c096:	4313      	orrs	r3, r2
 800c098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c0a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	4a1d      	ldr	r2, [pc, #116]	; (800c11c <TIM_OC3_SetConfig+0xfc>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d00f      	beq.n	800c0ca <TIM_OC3_SetConfig+0xaa>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	4a1c      	ldr	r2, [pc, #112]	; (800c120 <TIM_OC3_SetConfig+0x100>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d00b      	beq.n	800c0ca <TIM_OC3_SetConfig+0xaa>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	4a1b      	ldr	r2, [pc, #108]	; (800c124 <TIM_OC3_SetConfig+0x104>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d007      	beq.n	800c0ca <TIM_OC3_SetConfig+0xaa>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	4a1a      	ldr	r2, [pc, #104]	; (800c128 <TIM_OC3_SetConfig+0x108>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d003      	beq.n	800c0ca <TIM_OC3_SetConfig+0xaa>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	4a19      	ldr	r2, [pc, #100]	; (800c12c <TIM_OC3_SetConfig+0x10c>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d113      	bne.n	800c0f2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c0d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c0d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	695b      	ldr	r3, [r3, #20]
 800c0de:	011b      	lsls	r3, r3, #4
 800c0e0:	693a      	ldr	r2, [r7, #16]
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	699b      	ldr	r3, [r3, #24]
 800c0ea:	011b      	lsls	r3, r3, #4
 800c0ec:	693a      	ldr	r2, [r7, #16]
 800c0ee:	4313      	orrs	r3, r2
 800c0f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	693a      	ldr	r2, [r7, #16]
 800c0f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	68fa      	ldr	r2, [r7, #12]
 800c0fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	685a      	ldr	r2, [r3, #4]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	697a      	ldr	r2, [r7, #20]
 800c10a:	621a      	str	r2, [r3, #32]
}
 800c10c:	bf00      	nop
 800c10e:	371c      	adds	r7, #28
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr
 800c118:	fffeff8f 	.word	0xfffeff8f
 800c11c:	40010000 	.word	0x40010000
 800c120:	40010400 	.word	0x40010400
 800c124:	40014000 	.word	0x40014000
 800c128:	40014400 	.word	0x40014400
 800c12c:	40014800 	.word	0x40014800

0800c130 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c130:	b480      	push	{r7}
 800c132:	b087      	sub	sp, #28
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6a1b      	ldr	r3, [r3, #32]
 800c13e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6a1b      	ldr	r3, [r3, #32]
 800c14a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	685b      	ldr	r3, [r3, #4]
 800c150:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	69db      	ldr	r3, [r3, #28]
 800c156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c158:	68fa      	ldr	r2, [r7, #12]
 800c15a:	4b24      	ldr	r3, [pc, #144]	; (800c1ec <TIM_OC4_SetConfig+0xbc>)
 800c15c:	4013      	ands	r3, r2
 800c15e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c166:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	021b      	lsls	r3, r3, #8
 800c16e:	68fa      	ldr	r2, [r7, #12]
 800c170:	4313      	orrs	r3, r2
 800c172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c17a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	689b      	ldr	r3, [r3, #8]
 800c180:	031b      	lsls	r3, r3, #12
 800c182:	693a      	ldr	r2, [r7, #16]
 800c184:	4313      	orrs	r3, r2
 800c186:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	4a19      	ldr	r2, [pc, #100]	; (800c1f0 <TIM_OC4_SetConfig+0xc0>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d00f      	beq.n	800c1b0 <TIM_OC4_SetConfig+0x80>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	4a18      	ldr	r2, [pc, #96]	; (800c1f4 <TIM_OC4_SetConfig+0xc4>)
 800c194:	4293      	cmp	r3, r2
 800c196:	d00b      	beq.n	800c1b0 <TIM_OC4_SetConfig+0x80>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	4a17      	ldr	r2, [pc, #92]	; (800c1f8 <TIM_OC4_SetConfig+0xc8>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d007      	beq.n	800c1b0 <TIM_OC4_SetConfig+0x80>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	4a16      	ldr	r2, [pc, #88]	; (800c1fc <TIM_OC4_SetConfig+0xcc>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d003      	beq.n	800c1b0 <TIM_OC4_SetConfig+0x80>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	4a15      	ldr	r2, [pc, #84]	; (800c200 <TIM_OC4_SetConfig+0xd0>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d109      	bne.n	800c1c4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c1b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	695b      	ldr	r3, [r3, #20]
 800c1bc:	019b      	lsls	r3, r3, #6
 800c1be:	697a      	ldr	r2, [r7, #20]
 800c1c0:	4313      	orrs	r3, r2
 800c1c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	697a      	ldr	r2, [r7, #20]
 800c1c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	68fa      	ldr	r2, [r7, #12]
 800c1ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	685a      	ldr	r2, [r3, #4]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	693a      	ldr	r2, [r7, #16]
 800c1dc:	621a      	str	r2, [r3, #32]
}
 800c1de:	bf00      	nop
 800c1e0:	371c      	adds	r7, #28
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e8:	4770      	bx	lr
 800c1ea:	bf00      	nop
 800c1ec:	feff8fff 	.word	0xfeff8fff
 800c1f0:	40010000 	.word	0x40010000
 800c1f4:	40010400 	.word	0x40010400
 800c1f8:	40014000 	.word	0x40014000
 800c1fc:	40014400 	.word	0x40014400
 800c200:	40014800 	.word	0x40014800

0800c204 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c204:	b480      	push	{r7}
 800c206:	b087      	sub	sp, #28
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6a1b      	ldr	r3, [r3, #32]
 800c212:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6a1b      	ldr	r3, [r3, #32]
 800c21e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c22a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c22c:	68fa      	ldr	r2, [r7, #12]
 800c22e:	4b21      	ldr	r3, [pc, #132]	; (800c2b4 <TIM_OC5_SetConfig+0xb0>)
 800c230:	4013      	ands	r3, r2
 800c232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	68fa      	ldr	r2, [r7, #12]
 800c23a:	4313      	orrs	r3, r2
 800c23c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c244:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	689b      	ldr	r3, [r3, #8]
 800c24a:	041b      	lsls	r3, r3, #16
 800c24c:	693a      	ldr	r2, [r7, #16]
 800c24e:	4313      	orrs	r3, r2
 800c250:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	4a18      	ldr	r2, [pc, #96]	; (800c2b8 <TIM_OC5_SetConfig+0xb4>)
 800c256:	4293      	cmp	r3, r2
 800c258:	d00f      	beq.n	800c27a <TIM_OC5_SetConfig+0x76>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	4a17      	ldr	r2, [pc, #92]	; (800c2bc <TIM_OC5_SetConfig+0xb8>)
 800c25e:	4293      	cmp	r3, r2
 800c260:	d00b      	beq.n	800c27a <TIM_OC5_SetConfig+0x76>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	4a16      	ldr	r2, [pc, #88]	; (800c2c0 <TIM_OC5_SetConfig+0xbc>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d007      	beq.n	800c27a <TIM_OC5_SetConfig+0x76>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	4a15      	ldr	r2, [pc, #84]	; (800c2c4 <TIM_OC5_SetConfig+0xc0>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d003      	beq.n	800c27a <TIM_OC5_SetConfig+0x76>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	4a14      	ldr	r2, [pc, #80]	; (800c2c8 <TIM_OC5_SetConfig+0xc4>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d109      	bne.n	800c28e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c280:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	695b      	ldr	r3, [r3, #20]
 800c286:	021b      	lsls	r3, r3, #8
 800c288:	697a      	ldr	r2, [r7, #20]
 800c28a:	4313      	orrs	r3, r2
 800c28c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	697a      	ldr	r2, [r7, #20]
 800c292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	68fa      	ldr	r2, [r7, #12]
 800c298:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	685a      	ldr	r2, [r3, #4]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	693a      	ldr	r2, [r7, #16]
 800c2a6:	621a      	str	r2, [r3, #32]
}
 800c2a8:	bf00      	nop
 800c2aa:	371c      	adds	r7, #28
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b2:	4770      	bx	lr
 800c2b4:	fffeff8f 	.word	0xfffeff8f
 800c2b8:	40010000 	.word	0x40010000
 800c2bc:	40010400 	.word	0x40010400
 800c2c0:	40014000 	.word	0x40014000
 800c2c4:	40014400 	.word	0x40014400
 800c2c8:	40014800 	.word	0x40014800

0800c2cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b087      	sub	sp, #28
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6a1b      	ldr	r3, [r3, #32]
 800c2da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6a1b      	ldr	r3, [r3, #32]
 800c2e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	685b      	ldr	r3, [r3, #4]
 800c2ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c2f4:	68fa      	ldr	r2, [r7, #12]
 800c2f6:	4b22      	ldr	r3, [pc, #136]	; (800c380 <TIM_OC6_SetConfig+0xb4>)
 800c2f8:	4013      	ands	r3, r2
 800c2fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	021b      	lsls	r3, r3, #8
 800c302:	68fa      	ldr	r2, [r7, #12]
 800c304:	4313      	orrs	r3, r2
 800c306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c30e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	689b      	ldr	r3, [r3, #8]
 800c314:	051b      	lsls	r3, r3, #20
 800c316:	693a      	ldr	r2, [r7, #16]
 800c318:	4313      	orrs	r3, r2
 800c31a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	4a19      	ldr	r2, [pc, #100]	; (800c384 <TIM_OC6_SetConfig+0xb8>)
 800c320:	4293      	cmp	r3, r2
 800c322:	d00f      	beq.n	800c344 <TIM_OC6_SetConfig+0x78>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	4a18      	ldr	r2, [pc, #96]	; (800c388 <TIM_OC6_SetConfig+0xbc>)
 800c328:	4293      	cmp	r3, r2
 800c32a:	d00b      	beq.n	800c344 <TIM_OC6_SetConfig+0x78>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	4a17      	ldr	r2, [pc, #92]	; (800c38c <TIM_OC6_SetConfig+0xc0>)
 800c330:	4293      	cmp	r3, r2
 800c332:	d007      	beq.n	800c344 <TIM_OC6_SetConfig+0x78>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	4a16      	ldr	r2, [pc, #88]	; (800c390 <TIM_OC6_SetConfig+0xc4>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d003      	beq.n	800c344 <TIM_OC6_SetConfig+0x78>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	4a15      	ldr	r2, [pc, #84]	; (800c394 <TIM_OC6_SetConfig+0xc8>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d109      	bne.n	800c358 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c34a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	695b      	ldr	r3, [r3, #20]
 800c350:	029b      	lsls	r3, r3, #10
 800c352:	697a      	ldr	r2, [r7, #20]
 800c354:	4313      	orrs	r3, r2
 800c356:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	697a      	ldr	r2, [r7, #20]
 800c35c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	68fa      	ldr	r2, [r7, #12]
 800c362:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	685a      	ldr	r2, [r3, #4]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	693a      	ldr	r2, [r7, #16]
 800c370:	621a      	str	r2, [r3, #32]
}
 800c372:	bf00      	nop
 800c374:	371c      	adds	r7, #28
 800c376:	46bd      	mov	sp, r7
 800c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37c:	4770      	bx	lr
 800c37e:	bf00      	nop
 800c380:	feff8fff 	.word	0xfeff8fff
 800c384:	40010000 	.word	0x40010000
 800c388:	40010400 	.word	0x40010400
 800c38c:	40014000 	.word	0x40014000
 800c390:	40014400 	.word	0x40014400
 800c394:	40014800 	.word	0x40014800

0800c398 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c398:	b480      	push	{r7}
 800c39a:	b085      	sub	sp, #20
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3a8:	2b01      	cmp	r3, #1
 800c3aa:	d101      	bne.n	800c3b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c3ac:	2302      	movs	r3, #2
 800c3ae:	e077      	b.n	800c4a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2202      	movs	r2, #2
 800c3bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	689b      	ldr	r3, [r3, #8]
 800c3ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a35      	ldr	r2, [pc, #212]	; (800c4ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d004      	beq.n	800c3e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a34      	ldr	r2, [pc, #208]	; (800c4b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d108      	bne.n	800c3f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c3ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	68fa      	ldr	r2, [r7, #12]
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	68fa      	ldr	r2, [r7, #12]
 800c404:	4313      	orrs	r3, r2
 800c406:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	68fa      	ldr	r2, [r7, #12]
 800c40e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4a25      	ldr	r2, [pc, #148]	; (800c4ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d02c      	beq.n	800c474 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c422:	d027      	beq.n	800c474 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4a22      	ldr	r2, [pc, #136]	; (800c4b4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d022      	beq.n	800c474 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4a21      	ldr	r2, [pc, #132]	; (800c4b8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d01d      	beq.n	800c474 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a1f      	ldr	r2, [pc, #124]	; (800c4bc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d018      	beq.n	800c474 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a1a      	ldr	r2, [pc, #104]	; (800c4b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d013      	beq.n	800c474 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4a1b      	ldr	r2, [pc, #108]	; (800c4c0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d00e      	beq.n	800c474 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4a1a      	ldr	r2, [pc, #104]	; (800c4c4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d009      	beq.n	800c474 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4a18      	ldr	r2, [pc, #96]	; (800c4c8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d004      	beq.n	800c474 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	4a17      	ldr	r2, [pc, #92]	; (800c4cc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c470:	4293      	cmp	r3, r2
 800c472:	d10c      	bne.n	800c48e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c47a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	689b      	ldr	r3, [r3, #8]
 800c480:	68ba      	ldr	r2, [r7, #8]
 800c482:	4313      	orrs	r3, r2
 800c484:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	68ba      	ldr	r2, [r7, #8]
 800c48c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2201      	movs	r2, #1
 800c492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2200      	movs	r2, #0
 800c49a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c49e:	2300      	movs	r3, #0
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3714      	adds	r7, #20
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr
 800c4ac:	40010000 	.word	0x40010000
 800c4b0:	40010400 	.word	0x40010400
 800c4b4:	40000400 	.word	0x40000400
 800c4b8:	40000800 	.word	0x40000800
 800c4bc:	40000c00 	.word	0x40000c00
 800c4c0:	40001800 	.word	0x40001800
 800c4c4:	40014000 	.word	0x40014000
 800c4c8:	4000e000 	.word	0x4000e000
 800c4cc:	4000e400 	.word	0x4000e400

0800c4d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b085      	sub	sp, #20
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d101      	bne.n	800c4ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c4e8:	2302      	movs	r3, #2
 800c4ea:	e087      	b.n	800c5fc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	68db      	ldr	r3, [r3, #12]
 800c4fe:	4313      	orrs	r3, r2
 800c500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	689b      	ldr	r3, [r3, #8]
 800c50c:	4313      	orrs	r3, r2
 800c50e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	685b      	ldr	r3, [r3, #4]
 800c51a:	4313      	orrs	r3, r2
 800c51c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4313      	orrs	r3, r2
 800c52a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	691b      	ldr	r3, [r3, #16]
 800c536:	4313      	orrs	r3, r2
 800c538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	695b      	ldr	r3, [r3, #20]
 800c544:	4313      	orrs	r3, r2
 800c546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c552:	4313      	orrs	r3, r2
 800c554:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	699b      	ldr	r3, [r3, #24]
 800c560:	041b      	lsls	r3, r3, #16
 800c562:	4313      	orrs	r3, r2
 800c564:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	4a27      	ldr	r2, [pc, #156]	; (800c608 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d004      	beq.n	800c57a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4a25      	ldr	r2, [pc, #148]	; (800c60c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d106      	bne.n	800c588 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	69db      	ldr	r3, [r3, #28]
 800c584:	4313      	orrs	r3, r2
 800c586:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	4a1e      	ldr	r2, [pc, #120]	; (800c608 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c58e:	4293      	cmp	r3, r2
 800c590:	d004      	beq.n	800c59c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4a1d      	ldr	r2, [pc, #116]	; (800c60c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c598:	4293      	cmp	r3, r2
 800c59a:	d126      	bne.n	800c5ea <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5a6:	051b      	lsls	r3, r3, #20
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	6a1b      	ldr	r3, [r3, #32]
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	4a0e      	ldr	r2, [pc, #56]	; (800c608 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d004      	beq.n	800c5dc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	4a0d      	ldr	r2, [pc, #52]	; (800c60c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d106      	bne.n	800c5ea <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	68fa      	ldr	r2, [r7, #12]
 800c5f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c5fa:	2300      	movs	r3, #0
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3714      	adds	r7, #20
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr
 800c608:	40010000 	.word	0x40010000
 800c60c:	40010400 	.word	0x40010400

0800c610 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d101      	bne.n	800c622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c61e:	2301      	movs	r3, #1
 800c620:	e042      	b.n	800c6a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d106      	bne.n	800c63a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2200      	movs	r2, #0
 800c630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f7f6 fa0f 	bl	8002a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2224      	movs	r2, #36	; 0x24
 800c63e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	681a      	ldr	r2, [r3, #0]
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f022 0201 	bic.w	r2, r2, #1
 800c650:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 f82c 	bl	800c6b0 <UART_SetConfig>
 800c658:	4603      	mov	r3, r0
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	d101      	bne.n	800c662 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c65e:	2301      	movs	r3, #1
 800c660:	e022      	b.n	800c6a8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c666:	2b00      	cmp	r3, #0
 800c668:	d002      	beq.n	800c670 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 fe7e 	bl	800d36c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	685a      	ldr	r2, [r3, #4]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c67e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	689a      	ldr	r2, [r3, #8]
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c68e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f042 0201 	orr.w	r2, r2, #1
 800c69e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f000 ff05 	bl	800d4b0 <UART_CheckIdleState>
 800c6a6:	4603      	mov	r3, r0
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3708      	adds	r7, #8
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c6b0:	b5b0      	push	{r4, r5, r7, lr}
 800c6b2:	b08e      	sub	sp, #56	; 0x38
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	689a      	ldr	r2, [r3, #8]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	691b      	ldr	r3, [r3, #16]
 800c6c6:	431a      	orrs	r2, r3
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	695b      	ldr	r3, [r3, #20]
 800c6cc:	431a      	orrs	r2, r3
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	69db      	ldr	r3, [r3, #28]
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	4bbf      	ldr	r3, [pc, #764]	; (800c9dc <UART_SetConfig+0x32c>)
 800c6de:	4013      	ands	r3, r2
 800c6e0:	687a      	ldr	r2, [r7, #4]
 800c6e2:	6812      	ldr	r2, [r2, #0]
 800c6e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c6e6:	430b      	orrs	r3, r1
 800c6e8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	68da      	ldr	r2, [r3, #12]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	430a      	orrs	r2, r1
 800c6fe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	699b      	ldr	r3, [r3, #24]
 800c704:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	4ab5      	ldr	r2, [pc, #724]	; (800c9e0 <UART_SetConfig+0x330>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d004      	beq.n	800c71a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6a1b      	ldr	r3, [r3, #32]
 800c714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c716:	4313      	orrs	r3, r2
 800c718:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	689a      	ldr	r2, [r3, #8]
 800c720:	4bb0      	ldr	r3, [pc, #704]	; (800c9e4 <UART_SetConfig+0x334>)
 800c722:	4013      	ands	r3, r2
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	6812      	ldr	r2, [r2, #0]
 800c728:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c72a:	430b      	orrs	r3, r1
 800c72c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c734:	f023 010f 	bic.w	r1, r3, #15
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	430a      	orrs	r2, r1
 800c742:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4aa7      	ldr	r2, [pc, #668]	; (800c9e8 <UART_SetConfig+0x338>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d176      	bne.n	800c83c <UART_SetConfig+0x18c>
 800c74e:	4ba7      	ldr	r3, [pc, #668]	; (800c9ec <UART_SetConfig+0x33c>)
 800c750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c752:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c756:	2b28      	cmp	r3, #40	; 0x28
 800c758:	d86c      	bhi.n	800c834 <UART_SetConfig+0x184>
 800c75a:	a201      	add	r2, pc, #4	; (adr r2, 800c760 <UART_SetConfig+0xb0>)
 800c75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c760:	0800c805 	.word	0x0800c805
 800c764:	0800c835 	.word	0x0800c835
 800c768:	0800c835 	.word	0x0800c835
 800c76c:	0800c835 	.word	0x0800c835
 800c770:	0800c835 	.word	0x0800c835
 800c774:	0800c835 	.word	0x0800c835
 800c778:	0800c835 	.word	0x0800c835
 800c77c:	0800c835 	.word	0x0800c835
 800c780:	0800c80d 	.word	0x0800c80d
 800c784:	0800c835 	.word	0x0800c835
 800c788:	0800c835 	.word	0x0800c835
 800c78c:	0800c835 	.word	0x0800c835
 800c790:	0800c835 	.word	0x0800c835
 800c794:	0800c835 	.word	0x0800c835
 800c798:	0800c835 	.word	0x0800c835
 800c79c:	0800c835 	.word	0x0800c835
 800c7a0:	0800c815 	.word	0x0800c815
 800c7a4:	0800c835 	.word	0x0800c835
 800c7a8:	0800c835 	.word	0x0800c835
 800c7ac:	0800c835 	.word	0x0800c835
 800c7b0:	0800c835 	.word	0x0800c835
 800c7b4:	0800c835 	.word	0x0800c835
 800c7b8:	0800c835 	.word	0x0800c835
 800c7bc:	0800c835 	.word	0x0800c835
 800c7c0:	0800c81d 	.word	0x0800c81d
 800c7c4:	0800c835 	.word	0x0800c835
 800c7c8:	0800c835 	.word	0x0800c835
 800c7cc:	0800c835 	.word	0x0800c835
 800c7d0:	0800c835 	.word	0x0800c835
 800c7d4:	0800c835 	.word	0x0800c835
 800c7d8:	0800c835 	.word	0x0800c835
 800c7dc:	0800c835 	.word	0x0800c835
 800c7e0:	0800c825 	.word	0x0800c825
 800c7e4:	0800c835 	.word	0x0800c835
 800c7e8:	0800c835 	.word	0x0800c835
 800c7ec:	0800c835 	.word	0x0800c835
 800c7f0:	0800c835 	.word	0x0800c835
 800c7f4:	0800c835 	.word	0x0800c835
 800c7f8:	0800c835 	.word	0x0800c835
 800c7fc:	0800c835 	.word	0x0800c835
 800c800:	0800c82d 	.word	0x0800c82d
 800c804:	2301      	movs	r3, #1
 800c806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c80a:	e326      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c80c:	2304      	movs	r3, #4
 800c80e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c812:	e322      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c814:	2308      	movs	r3, #8
 800c816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c81a:	e31e      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c81c:	2310      	movs	r3, #16
 800c81e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c822:	e31a      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c824:	2320      	movs	r3, #32
 800c826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c82a:	e316      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c82c:	2340      	movs	r3, #64	; 0x40
 800c82e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c832:	e312      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c834:	2380      	movs	r3, #128	; 0x80
 800c836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c83a:	e30e      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4a6b      	ldr	r2, [pc, #428]	; (800c9f0 <UART_SetConfig+0x340>)
 800c842:	4293      	cmp	r3, r2
 800c844:	d130      	bne.n	800c8a8 <UART_SetConfig+0x1f8>
 800c846:	4b69      	ldr	r3, [pc, #420]	; (800c9ec <UART_SetConfig+0x33c>)
 800c848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c84a:	f003 0307 	and.w	r3, r3, #7
 800c84e:	2b05      	cmp	r3, #5
 800c850:	d826      	bhi.n	800c8a0 <UART_SetConfig+0x1f0>
 800c852:	a201      	add	r2, pc, #4	; (adr r2, 800c858 <UART_SetConfig+0x1a8>)
 800c854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c858:	0800c871 	.word	0x0800c871
 800c85c:	0800c879 	.word	0x0800c879
 800c860:	0800c881 	.word	0x0800c881
 800c864:	0800c889 	.word	0x0800c889
 800c868:	0800c891 	.word	0x0800c891
 800c86c:	0800c899 	.word	0x0800c899
 800c870:	2300      	movs	r3, #0
 800c872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c876:	e2f0      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c878:	2304      	movs	r3, #4
 800c87a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c87e:	e2ec      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c880:	2308      	movs	r3, #8
 800c882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c886:	e2e8      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c888:	2310      	movs	r3, #16
 800c88a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c88e:	e2e4      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c890:	2320      	movs	r3, #32
 800c892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c896:	e2e0      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c898:	2340      	movs	r3, #64	; 0x40
 800c89a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c89e:	e2dc      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c8a0:	2380      	movs	r3, #128	; 0x80
 800c8a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8a6:	e2d8      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4a51      	ldr	r2, [pc, #324]	; (800c9f4 <UART_SetConfig+0x344>)
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d130      	bne.n	800c914 <UART_SetConfig+0x264>
 800c8b2:	4b4e      	ldr	r3, [pc, #312]	; (800c9ec <UART_SetConfig+0x33c>)
 800c8b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8b6:	f003 0307 	and.w	r3, r3, #7
 800c8ba:	2b05      	cmp	r3, #5
 800c8bc:	d826      	bhi.n	800c90c <UART_SetConfig+0x25c>
 800c8be:	a201      	add	r2, pc, #4	; (adr r2, 800c8c4 <UART_SetConfig+0x214>)
 800c8c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8c4:	0800c8dd 	.word	0x0800c8dd
 800c8c8:	0800c8e5 	.word	0x0800c8e5
 800c8cc:	0800c8ed 	.word	0x0800c8ed
 800c8d0:	0800c8f5 	.word	0x0800c8f5
 800c8d4:	0800c8fd 	.word	0x0800c8fd
 800c8d8:	0800c905 	.word	0x0800c905
 800c8dc:	2300      	movs	r3, #0
 800c8de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8e2:	e2ba      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c8e4:	2304      	movs	r3, #4
 800c8e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8ea:	e2b6      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c8ec:	2308      	movs	r3, #8
 800c8ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8f2:	e2b2      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c8f4:	2310      	movs	r3, #16
 800c8f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8fa:	e2ae      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c8fc:	2320      	movs	r3, #32
 800c8fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c902:	e2aa      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c904:	2340      	movs	r3, #64	; 0x40
 800c906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c90a:	e2a6      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c90c:	2380      	movs	r3, #128	; 0x80
 800c90e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c912:	e2a2      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	4a37      	ldr	r2, [pc, #220]	; (800c9f8 <UART_SetConfig+0x348>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d130      	bne.n	800c980 <UART_SetConfig+0x2d0>
 800c91e:	4b33      	ldr	r3, [pc, #204]	; (800c9ec <UART_SetConfig+0x33c>)
 800c920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c922:	f003 0307 	and.w	r3, r3, #7
 800c926:	2b05      	cmp	r3, #5
 800c928:	d826      	bhi.n	800c978 <UART_SetConfig+0x2c8>
 800c92a:	a201      	add	r2, pc, #4	; (adr r2, 800c930 <UART_SetConfig+0x280>)
 800c92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c930:	0800c949 	.word	0x0800c949
 800c934:	0800c951 	.word	0x0800c951
 800c938:	0800c959 	.word	0x0800c959
 800c93c:	0800c961 	.word	0x0800c961
 800c940:	0800c969 	.word	0x0800c969
 800c944:	0800c971 	.word	0x0800c971
 800c948:	2300      	movs	r3, #0
 800c94a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c94e:	e284      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c950:	2304      	movs	r3, #4
 800c952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c956:	e280      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c958:	2308      	movs	r3, #8
 800c95a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c95e:	e27c      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c960:	2310      	movs	r3, #16
 800c962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c966:	e278      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c968:	2320      	movs	r3, #32
 800c96a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c96e:	e274      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c970:	2340      	movs	r3, #64	; 0x40
 800c972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c976:	e270      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c978:	2380      	movs	r3, #128	; 0x80
 800c97a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c97e:	e26c      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4a1d      	ldr	r2, [pc, #116]	; (800c9fc <UART_SetConfig+0x34c>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d142      	bne.n	800ca10 <UART_SetConfig+0x360>
 800c98a:	4b18      	ldr	r3, [pc, #96]	; (800c9ec <UART_SetConfig+0x33c>)
 800c98c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c98e:	f003 0307 	and.w	r3, r3, #7
 800c992:	2b05      	cmp	r3, #5
 800c994:	d838      	bhi.n	800ca08 <UART_SetConfig+0x358>
 800c996:	a201      	add	r2, pc, #4	; (adr r2, 800c99c <UART_SetConfig+0x2ec>)
 800c998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c99c:	0800c9b5 	.word	0x0800c9b5
 800c9a0:	0800c9bd 	.word	0x0800c9bd
 800c9a4:	0800c9c5 	.word	0x0800c9c5
 800c9a8:	0800c9cd 	.word	0x0800c9cd
 800c9ac:	0800c9d5 	.word	0x0800c9d5
 800c9b0:	0800ca01 	.word	0x0800ca01
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ba:	e24e      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c9bc:	2304      	movs	r3, #4
 800c9be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9c2:	e24a      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c9c4:	2308      	movs	r3, #8
 800c9c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ca:	e246      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c9cc:	2310      	movs	r3, #16
 800c9ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9d2:	e242      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c9d4:	2320      	movs	r3, #32
 800c9d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9da:	e23e      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800c9dc:	cfff69f3 	.word	0xcfff69f3
 800c9e0:	58000c00 	.word	0x58000c00
 800c9e4:	11fff4ff 	.word	0x11fff4ff
 800c9e8:	40011000 	.word	0x40011000
 800c9ec:	58024400 	.word	0x58024400
 800c9f0:	40004400 	.word	0x40004400
 800c9f4:	40004800 	.word	0x40004800
 800c9f8:	40004c00 	.word	0x40004c00
 800c9fc:	40005000 	.word	0x40005000
 800ca00:	2340      	movs	r3, #64	; 0x40
 800ca02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca06:	e228      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800ca08:	2380      	movs	r3, #128	; 0x80
 800ca0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca0e:	e224      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4ab1      	ldr	r2, [pc, #708]	; (800ccdc <UART_SetConfig+0x62c>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d176      	bne.n	800cb08 <UART_SetConfig+0x458>
 800ca1a:	4bb1      	ldr	r3, [pc, #708]	; (800cce0 <UART_SetConfig+0x630>)
 800ca1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ca22:	2b28      	cmp	r3, #40	; 0x28
 800ca24:	d86c      	bhi.n	800cb00 <UART_SetConfig+0x450>
 800ca26:	a201      	add	r2, pc, #4	; (adr r2, 800ca2c <UART_SetConfig+0x37c>)
 800ca28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca2c:	0800cad1 	.word	0x0800cad1
 800ca30:	0800cb01 	.word	0x0800cb01
 800ca34:	0800cb01 	.word	0x0800cb01
 800ca38:	0800cb01 	.word	0x0800cb01
 800ca3c:	0800cb01 	.word	0x0800cb01
 800ca40:	0800cb01 	.word	0x0800cb01
 800ca44:	0800cb01 	.word	0x0800cb01
 800ca48:	0800cb01 	.word	0x0800cb01
 800ca4c:	0800cad9 	.word	0x0800cad9
 800ca50:	0800cb01 	.word	0x0800cb01
 800ca54:	0800cb01 	.word	0x0800cb01
 800ca58:	0800cb01 	.word	0x0800cb01
 800ca5c:	0800cb01 	.word	0x0800cb01
 800ca60:	0800cb01 	.word	0x0800cb01
 800ca64:	0800cb01 	.word	0x0800cb01
 800ca68:	0800cb01 	.word	0x0800cb01
 800ca6c:	0800cae1 	.word	0x0800cae1
 800ca70:	0800cb01 	.word	0x0800cb01
 800ca74:	0800cb01 	.word	0x0800cb01
 800ca78:	0800cb01 	.word	0x0800cb01
 800ca7c:	0800cb01 	.word	0x0800cb01
 800ca80:	0800cb01 	.word	0x0800cb01
 800ca84:	0800cb01 	.word	0x0800cb01
 800ca88:	0800cb01 	.word	0x0800cb01
 800ca8c:	0800cae9 	.word	0x0800cae9
 800ca90:	0800cb01 	.word	0x0800cb01
 800ca94:	0800cb01 	.word	0x0800cb01
 800ca98:	0800cb01 	.word	0x0800cb01
 800ca9c:	0800cb01 	.word	0x0800cb01
 800caa0:	0800cb01 	.word	0x0800cb01
 800caa4:	0800cb01 	.word	0x0800cb01
 800caa8:	0800cb01 	.word	0x0800cb01
 800caac:	0800caf1 	.word	0x0800caf1
 800cab0:	0800cb01 	.word	0x0800cb01
 800cab4:	0800cb01 	.word	0x0800cb01
 800cab8:	0800cb01 	.word	0x0800cb01
 800cabc:	0800cb01 	.word	0x0800cb01
 800cac0:	0800cb01 	.word	0x0800cb01
 800cac4:	0800cb01 	.word	0x0800cb01
 800cac8:	0800cb01 	.word	0x0800cb01
 800cacc:	0800caf9 	.word	0x0800caf9
 800cad0:	2301      	movs	r3, #1
 800cad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cad6:	e1c0      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800cad8:	2304      	movs	r3, #4
 800cada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cade:	e1bc      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800cae0:	2308      	movs	r3, #8
 800cae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cae6:	e1b8      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800cae8:	2310      	movs	r3, #16
 800caea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caee:	e1b4      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800caf0:	2320      	movs	r3, #32
 800caf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caf6:	e1b0      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800caf8:	2340      	movs	r3, #64	; 0x40
 800cafa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cafe:	e1ac      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800cb00:	2380      	movs	r3, #128	; 0x80
 800cb02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb06:	e1a8      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4a75      	ldr	r2, [pc, #468]	; (800cce4 <UART_SetConfig+0x634>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d130      	bne.n	800cb74 <UART_SetConfig+0x4c4>
 800cb12:	4b73      	ldr	r3, [pc, #460]	; (800cce0 <UART_SetConfig+0x630>)
 800cb14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb16:	f003 0307 	and.w	r3, r3, #7
 800cb1a:	2b05      	cmp	r3, #5
 800cb1c:	d826      	bhi.n	800cb6c <UART_SetConfig+0x4bc>
 800cb1e:	a201      	add	r2, pc, #4	; (adr r2, 800cb24 <UART_SetConfig+0x474>)
 800cb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb24:	0800cb3d 	.word	0x0800cb3d
 800cb28:	0800cb45 	.word	0x0800cb45
 800cb2c:	0800cb4d 	.word	0x0800cb4d
 800cb30:	0800cb55 	.word	0x0800cb55
 800cb34:	0800cb5d 	.word	0x0800cb5d
 800cb38:	0800cb65 	.word	0x0800cb65
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb42:	e18a      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800cb44:	2304      	movs	r3, #4
 800cb46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb4a:	e186      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800cb4c:	2308      	movs	r3, #8
 800cb4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb52:	e182      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800cb54:	2310      	movs	r3, #16
 800cb56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb5a:	e17e      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800cb5c:	2320      	movs	r3, #32
 800cb5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb62:	e17a      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800cb64:	2340      	movs	r3, #64	; 0x40
 800cb66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb6a:	e176      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800cb6c:	2380      	movs	r3, #128	; 0x80
 800cb6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb72:	e172      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	4a5b      	ldr	r2, [pc, #364]	; (800cce8 <UART_SetConfig+0x638>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d130      	bne.n	800cbe0 <UART_SetConfig+0x530>
 800cb7e:	4b58      	ldr	r3, [pc, #352]	; (800cce0 <UART_SetConfig+0x630>)
 800cb80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb82:	f003 0307 	and.w	r3, r3, #7
 800cb86:	2b05      	cmp	r3, #5
 800cb88:	d826      	bhi.n	800cbd8 <UART_SetConfig+0x528>
 800cb8a:	a201      	add	r2, pc, #4	; (adr r2, 800cb90 <UART_SetConfig+0x4e0>)
 800cb8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb90:	0800cba9 	.word	0x0800cba9
 800cb94:	0800cbb1 	.word	0x0800cbb1
 800cb98:	0800cbb9 	.word	0x0800cbb9
 800cb9c:	0800cbc1 	.word	0x0800cbc1
 800cba0:	0800cbc9 	.word	0x0800cbc9
 800cba4:	0800cbd1 	.word	0x0800cbd1
 800cba8:	2300      	movs	r3, #0
 800cbaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbae:	e154      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800cbb0:	2304      	movs	r3, #4
 800cbb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbb6:	e150      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800cbb8:	2308      	movs	r3, #8
 800cbba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbbe:	e14c      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800cbc0:	2310      	movs	r3, #16
 800cbc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbc6:	e148      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800cbc8:	2320      	movs	r3, #32
 800cbca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbce:	e144      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800cbd0:	2340      	movs	r3, #64	; 0x40
 800cbd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbd6:	e140      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800cbd8:	2380      	movs	r3, #128	; 0x80
 800cbda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbde:	e13c      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a41      	ldr	r2, [pc, #260]	; (800ccec <UART_SetConfig+0x63c>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	f040 8082 	bne.w	800ccf0 <UART_SetConfig+0x640>
 800cbec:	4b3c      	ldr	r3, [pc, #240]	; (800cce0 <UART_SetConfig+0x630>)
 800cbee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cbf4:	2b28      	cmp	r3, #40	; 0x28
 800cbf6:	d86d      	bhi.n	800ccd4 <UART_SetConfig+0x624>
 800cbf8:	a201      	add	r2, pc, #4	; (adr r2, 800cc00 <UART_SetConfig+0x550>)
 800cbfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbfe:	bf00      	nop
 800cc00:	0800cca5 	.word	0x0800cca5
 800cc04:	0800ccd5 	.word	0x0800ccd5
 800cc08:	0800ccd5 	.word	0x0800ccd5
 800cc0c:	0800ccd5 	.word	0x0800ccd5
 800cc10:	0800ccd5 	.word	0x0800ccd5
 800cc14:	0800ccd5 	.word	0x0800ccd5
 800cc18:	0800ccd5 	.word	0x0800ccd5
 800cc1c:	0800ccd5 	.word	0x0800ccd5
 800cc20:	0800ccad 	.word	0x0800ccad
 800cc24:	0800ccd5 	.word	0x0800ccd5
 800cc28:	0800ccd5 	.word	0x0800ccd5
 800cc2c:	0800ccd5 	.word	0x0800ccd5
 800cc30:	0800ccd5 	.word	0x0800ccd5
 800cc34:	0800ccd5 	.word	0x0800ccd5
 800cc38:	0800ccd5 	.word	0x0800ccd5
 800cc3c:	0800ccd5 	.word	0x0800ccd5
 800cc40:	0800ccb5 	.word	0x0800ccb5
 800cc44:	0800ccd5 	.word	0x0800ccd5
 800cc48:	0800ccd5 	.word	0x0800ccd5
 800cc4c:	0800ccd5 	.word	0x0800ccd5
 800cc50:	0800ccd5 	.word	0x0800ccd5
 800cc54:	0800ccd5 	.word	0x0800ccd5
 800cc58:	0800ccd5 	.word	0x0800ccd5
 800cc5c:	0800ccd5 	.word	0x0800ccd5
 800cc60:	0800ccbd 	.word	0x0800ccbd
 800cc64:	0800ccd5 	.word	0x0800ccd5
 800cc68:	0800ccd5 	.word	0x0800ccd5
 800cc6c:	0800ccd5 	.word	0x0800ccd5
 800cc70:	0800ccd5 	.word	0x0800ccd5
 800cc74:	0800ccd5 	.word	0x0800ccd5
 800cc78:	0800ccd5 	.word	0x0800ccd5
 800cc7c:	0800ccd5 	.word	0x0800ccd5
 800cc80:	0800ccc5 	.word	0x0800ccc5
 800cc84:	0800ccd5 	.word	0x0800ccd5
 800cc88:	0800ccd5 	.word	0x0800ccd5
 800cc8c:	0800ccd5 	.word	0x0800ccd5
 800cc90:	0800ccd5 	.word	0x0800ccd5
 800cc94:	0800ccd5 	.word	0x0800ccd5
 800cc98:	0800ccd5 	.word	0x0800ccd5
 800cc9c:	0800ccd5 	.word	0x0800ccd5
 800cca0:	0800cccd 	.word	0x0800cccd
 800cca4:	2301      	movs	r3, #1
 800cca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccaa:	e0d6      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800ccac:	2304      	movs	r3, #4
 800ccae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccb2:	e0d2      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800ccb4:	2308      	movs	r3, #8
 800ccb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccba:	e0ce      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800ccbc:	2310      	movs	r3, #16
 800ccbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccc2:	e0ca      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800ccc4:	2320      	movs	r3, #32
 800ccc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccca:	e0c6      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800cccc:	2340      	movs	r3, #64	; 0x40
 800ccce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccd2:	e0c2      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800ccd4:	2380      	movs	r3, #128	; 0x80
 800ccd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccda:	e0be      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800ccdc:	40011400 	.word	0x40011400
 800cce0:	58024400 	.word	0x58024400
 800cce4:	40007800 	.word	0x40007800
 800cce8:	40007c00 	.word	0x40007c00
 800ccec:	40011800 	.word	0x40011800
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4aad      	ldr	r2, [pc, #692]	; (800cfac <UART_SetConfig+0x8fc>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d176      	bne.n	800cde8 <UART_SetConfig+0x738>
 800ccfa:	4bad      	ldr	r3, [pc, #692]	; (800cfb0 <UART_SetConfig+0x900>)
 800ccfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cd02:	2b28      	cmp	r3, #40	; 0x28
 800cd04:	d86c      	bhi.n	800cde0 <UART_SetConfig+0x730>
 800cd06:	a201      	add	r2, pc, #4	; (adr r2, 800cd0c <UART_SetConfig+0x65c>)
 800cd08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd0c:	0800cdb1 	.word	0x0800cdb1
 800cd10:	0800cde1 	.word	0x0800cde1
 800cd14:	0800cde1 	.word	0x0800cde1
 800cd18:	0800cde1 	.word	0x0800cde1
 800cd1c:	0800cde1 	.word	0x0800cde1
 800cd20:	0800cde1 	.word	0x0800cde1
 800cd24:	0800cde1 	.word	0x0800cde1
 800cd28:	0800cde1 	.word	0x0800cde1
 800cd2c:	0800cdb9 	.word	0x0800cdb9
 800cd30:	0800cde1 	.word	0x0800cde1
 800cd34:	0800cde1 	.word	0x0800cde1
 800cd38:	0800cde1 	.word	0x0800cde1
 800cd3c:	0800cde1 	.word	0x0800cde1
 800cd40:	0800cde1 	.word	0x0800cde1
 800cd44:	0800cde1 	.word	0x0800cde1
 800cd48:	0800cde1 	.word	0x0800cde1
 800cd4c:	0800cdc1 	.word	0x0800cdc1
 800cd50:	0800cde1 	.word	0x0800cde1
 800cd54:	0800cde1 	.word	0x0800cde1
 800cd58:	0800cde1 	.word	0x0800cde1
 800cd5c:	0800cde1 	.word	0x0800cde1
 800cd60:	0800cde1 	.word	0x0800cde1
 800cd64:	0800cde1 	.word	0x0800cde1
 800cd68:	0800cde1 	.word	0x0800cde1
 800cd6c:	0800cdc9 	.word	0x0800cdc9
 800cd70:	0800cde1 	.word	0x0800cde1
 800cd74:	0800cde1 	.word	0x0800cde1
 800cd78:	0800cde1 	.word	0x0800cde1
 800cd7c:	0800cde1 	.word	0x0800cde1
 800cd80:	0800cde1 	.word	0x0800cde1
 800cd84:	0800cde1 	.word	0x0800cde1
 800cd88:	0800cde1 	.word	0x0800cde1
 800cd8c:	0800cdd1 	.word	0x0800cdd1
 800cd90:	0800cde1 	.word	0x0800cde1
 800cd94:	0800cde1 	.word	0x0800cde1
 800cd98:	0800cde1 	.word	0x0800cde1
 800cd9c:	0800cde1 	.word	0x0800cde1
 800cda0:	0800cde1 	.word	0x0800cde1
 800cda4:	0800cde1 	.word	0x0800cde1
 800cda8:	0800cde1 	.word	0x0800cde1
 800cdac:	0800cdd9 	.word	0x0800cdd9
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdb6:	e050      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800cdb8:	2304      	movs	r3, #4
 800cdba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdbe:	e04c      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800cdc0:	2308      	movs	r3, #8
 800cdc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdc6:	e048      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800cdc8:	2310      	movs	r3, #16
 800cdca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdce:	e044      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800cdd0:	2320      	movs	r3, #32
 800cdd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdd6:	e040      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800cdd8:	2340      	movs	r3, #64	; 0x40
 800cdda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdde:	e03c      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800cde0:	2380      	movs	r3, #128	; 0x80
 800cde2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cde6:	e038      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4a71      	ldr	r2, [pc, #452]	; (800cfb4 <UART_SetConfig+0x904>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d130      	bne.n	800ce54 <UART_SetConfig+0x7a4>
 800cdf2:	4b6f      	ldr	r3, [pc, #444]	; (800cfb0 <UART_SetConfig+0x900>)
 800cdf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdf6:	f003 0307 	and.w	r3, r3, #7
 800cdfa:	2b05      	cmp	r3, #5
 800cdfc:	d826      	bhi.n	800ce4c <UART_SetConfig+0x79c>
 800cdfe:	a201      	add	r2, pc, #4	; (adr r2, 800ce04 <UART_SetConfig+0x754>)
 800ce00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce04:	0800ce1d 	.word	0x0800ce1d
 800ce08:	0800ce25 	.word	0x0800ce25
 800ce0c:	0800ce2d 	.word	0x0800ce2d
 800ce10:	0800ce35 	.word	0x0800ce35
 800ce14:	0800ce3d 	.word	0x0800ce3d
 800ce18:	0800ce45 	.word	0x0800ce45
 800ce1c:	2302      	movs	r3, #2
 800ce1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce22:	e01a      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800ce24:	2304      	movs	r3, #4
 800ce26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce2a:	e016      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800ce2c:	2308      	movs	r3, #8
 800ce2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce32:	e012      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800ce34:	2310      	movs	r3, #16
 800ce36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce3a:	e00e      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800ce3c:	2320      	movs	r3, #32
 800ce3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce42:	e00a      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800ce44:	2340      	movs	r3, #64	; 0x40
 800ce46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce4a:	e006      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800ce4c:	2380      	movs	r3, #128	; 0x80
 800ce4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce52:	e002      	b.n	800ce5a <UART_SetConfig+0x7aa>
 800ce54:	2380      	movs	r3, #128	; 0x80
 800ce56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	4a55      	ldr	r2, [pc, #340]	; (800cfb4 <UART_SetConfig+0x904>)
 800ce60:	4293      	cmp	r3, r2
 800ce62:	f040 80f0 	bne.w	800d046 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ce66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ce6a:	2b20      	cmp	r3, #32
 800ce6c:	dc46      	bgt.n	800cefc <UART_SetConfig+0x84c>
 800ce6e:	2b02      	cmp	r3, #2
 800ce70:	db75      	blt.n	800cf5e <UART_SetConfig+0x8ae>
 800ce72:	3b02      	subs	r3, #2
 800ce74:	2b1e      	cmp	r3, #30
 800ce76:	d872      	bhi.n	800cf5e <UART_SetConfig+0x8ae>
 800ce78:	a201      	add	r2, pc, #4	; (adr r2, 800ce80 <UART_SetConfig+0x7d0>)
 800ce7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce7e:	bf00      	nop
 800ce80:	0800cf03 	.word	0x0800cf03
 800ce84:	0800cf5f 	.word	0x0800cf5f
 800ce88:	0800cf0b 	.word	0x0800cf0b
 800ce8c:	0800cf5f 	.word	0x0800cf5f
 800ce90:	0800cf5f 	.word	0x0800cf5f
 800ce94:	0800cf5f 	.word	0x0800cf5f
 800ce98:	0800cf1b 	.word	0x0800cf1b
 800ce9c:	0800cf5f 	.word	0x0800cf5f
 800cea0:	0800cf5f 	.word	0x0800cf5f
 800cea4:	0800cf5f 	.word	0x0800cf5f
 800cea8:	0800cf5f 	.word	0x0800cf5f
 800ceac:	0800cf5f 	.word	0x0800cf5f
 800ceb0:	0800cf5f 	.word	0x0800cf5f
 800ceb4:	0800cf5f 	.word	0x0800cf5f
 800ceb8:	0800cf2b 	.word	0x0800cf2b
 800cebc:	0800cf5f 	.word	0x0800cf5f
 800cec0:	0800cf5f 	.word	0x0800cf5f
 800cec4:	0800cf5f 	.word	0x0800cf5f
 800cec8:	0800cf5f 	.word	0x0800cf5f
 800cecc:	0800cf5f 	.word	0x0800cf5f
 800ced0:	0800cf5f 	.word	0x0800cf5f
 800ced4:	0800cf5f 	.word	0x0800cf5f
 800ced8:	0800cf5f 	.word	0x0800cf5f
 800cedc:	0800cf5f 	.word	0x0800cf5f
 800cee0:	0800cf5f 	.word	0x0800cf5f
 800cee4:	0800cf5f 	.word	0x0800cf5f
 800cee8:	0800cf5f 	.word	0x0800cf5f
 800ceec:	0800cf5f 	.word	0x0800cf5f
 800cef0:	0800cf5f 	.word	0x0800cf5f
 800cef4:	0800cf5f 	.word	0x0800cf5f
 800cef8:	0800cf51 	.word	0x0800cf51
 800cefc:	2b40      	cmp	r3, #64	; 0x40
 800cefe:	d02a      	beq.n	800cf56 <UART_SetConfig+0x8a6>
 800cf00:	e02d      	b.n	800cf5e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cf02:	f7fc fd37 	bl	8009974 <HAL_RCCEx_GetD3PCLK1Freq>
 800cf06:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cf08:	e02f      	b.n	800cf6a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf0a:	f107 0314 	add.w	r3, r7, #20
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7fc fd46 	bl	80099a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cf14:	69bb      	ldr	r3, [r7, #24]
 800cf16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf18:	e027      	b.n	800cf6a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf1a:	f107 0308 	add.w	r3, r7, #8
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7fc fe92 	bl	8009c48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf28:	e01f      	b.n	800cf6a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf2a:	4b21      	ldr	r3, [pc, #132]	; (800cfb0 <UART_SetConfig+0x900>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f003 0320 	and.w	r3, r3, #32
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d009      	beq.n	800cf4a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cf36:	4b1e      	ldr	r3, [pc, #120]	; (800cfb0 <UART_SetConfig+0x900>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	08db      	lsrs	r3, r3, #3
 800cf3c:	f003 0303 	and.w	r3, r3, #3
 800cf40:	4a1d      	ldr	r2, [pc, #116]	; (800cfb8 <UART_SetConfig+0x908>)
 800cf42:	fa22 f303 	lsr.w	r3, r2, r3
 800cf46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cf48:	e00f      	b.n	800cf6a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800cf4a:	4b1b      	ldr	r3, [pc, #108]	; (800cfb8 <UART_SetConfig+0x908>)
 800cf4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf4e:	e00c      	b.n	800cf6a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cf50:	4b1a      	ldr	r3, [pc, #104]	; (800cfbc <UART_SetConfig+0x90c>)
 800cf52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf54:	e009      	b.n	800cf6a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf5c:	e005      	b.n	800cf6a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cf62:	2301      	movs	r3, #1
 800cf64:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cf68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cf6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	f000 81e6 	beq.w	800d33e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf76:	4a12      	ldr	r2, [pc, #72]	; (800cfc0 <UART_SetConfig+0x910>)
 800cf78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf7c:	461a      	mov	r2, r3
 800cf7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf80:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf84:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	685a      	ldr	r2, [r3, #4]
 800cf8a:	4613      	mov	r3, r2
 800cf8c:	005b      	lsls	r3, r3, #1
 800cf8e:	4413      	add	r3, r2
 800cf90:	6a3a      	ldr	r2, [r7, #32]
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d305      	bcc.n	800cfa2 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	685b      	ldr	r3, [r3, #4]
 800cf9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf9c:	6a3a      	ldr	r2, [r7, #32]
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	d910      	bls.n	800cfc4 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cfa8:	e1c9      	b.n	800d33e <UART_SetConfig+0xc8e>
 800cfaa:	bf00      	nop
 800cfac:	40011c00 	.word	0x40011c00
 800cfb0:	58024400 	.word	0x58024400
 800cfb4:	58000c00 	.word	0x58000c00
 800cfb8:	03d09000 	.word	0x03d09000
 800cfbc:	003d0900 	.word	0x003d0900
 800cfc0:	0800e3a0 	.word	0x0800e3a0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cfc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f04f 0100 	mov.w	r1, #0
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfd0:	4ac1      	ldr	r2, [pc, #772]	; (800d2d8 <UART_SetConfig+0xc28>)
 800cfd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfd6:	b29a      	uxth	r2, r3
 800cfd8:	f04f 0300 	mov.w	r3, #0
 800cfdc:	f7f3 f996 	bl	800030c <__aeabi_uldivmod>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	4610      	mov	r0, r2
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	f04f 0200 	mov.w	r2, #0
 800cfec:	f04f 0300 	mov.w	r3, #0
 800cff0:	020b      	lsls	r3, r1, #8
 800cff2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cff6:	0202      	lsls	r2, r0, #8
 800cff8:	6879      	ldr	r1, [r7, #4]
 800cffa:	6849      	ldr	r1, [r1, #4]
 800cffc:	0849      	lsrs	r1, r1, #1
 800cffe:	4608      	mov	r0, r1
 800d000:	f04f 0100 	mov.w	r1, #0
 800d004:	1814      	adds	r4, r2, r0
 800d006:	eb43 0501 	adc.w	r5, r3, r1
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	461a      	mov	r2, r3
 800d010:	f04f 0300 	mov.w	r3, #0
 800d014:	4620      	mov	r0, r4
 800d016:	4629      	mov	r1, r5
 800d018:	f7f3 f978 	bl	800030c <__aeabi_uldivmod>
 800d01c:	4602      	mov	r2, r0
 800d01e:	460b      	mov	r3, r1
 800d020:	4613      	mov	r3, r2
 800d022:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d026:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d02a:	d308      	bcc.n	800d03e <UART_SetConfig+0x98e>
 800d02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d032:	d204      	bcs.n	800d03e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d03a:	60da      	str	r2, [r3, #12]
 800d03c:	e17f      	b.n	800d33e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800d03e:	2301      	movs	r3, #1
 800d040:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d044:	e17b      	b.n	800d33e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	69db      	ldr	r3, [r3, #28]
 800d04a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d04e:	f040 80bd 	bne.w	800d1cc <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800d052:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d056:	2b20      	cmp	r3, #32
 800d058:	dc48      	bgt.n	800d0ec <UART_SetConfig+0xa3c>
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	db7b      	blt.n	800d156 <UART_SetConfig+0xaa6>
 800d05e:	2b20      	cmp	r3, #32
 800d060:	d879      	bhi.n	800d156 <UART_SetConfig+0xaa6>
 800d062:	a201      	add	r2, pc, #4	; (adr r2, 800d068 <UART_SetConfig+0x9b8>)
 800d064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d068:	0800d0f3 	.word	0x0800d0f3
 800d06c:	0800d0fb 	.word	0x0800d0fb
 800d070:	0800d157 	.word	0x0800d157
 800d074:	0800d157 	.word	0x0800d157
 800d078:	0800d103 	.word	0x0800d103
 800d07c:	0800d157 	.word	0x0800d157
 800d080:	0800d157 	.word	0x0800d157
 800d084:	0800d157 	.word	0x0800d157
 800d088:	0800d113 	.word	0x0800d113
 800d08c:	0800d157 	.word	0x0800d157
 800d090:	0800d157 	.word	0x0800d157
 800d094:	0800d157 	.word	0x0800d157
 800d098:	0800d157 	.word	0x0800d157
 800d09c:	0800d157 	.word	0x0800d157
 800d0a0:	0800d157 	.word	0x0800d157
 800d0a4:	0800d157 	.word	0x0800d157
 800d0a8:	0800d123 	.word	0x0800d123
 800d0ac:	0800d157 	.word	0x0800d157
 800d0b0:	0800d157 	.word	0x0800d157
 800d0b4:	0800d157 	.word	0x0800d157
 800d0b8:	0800d157 	.word	0x0800d157
 800d0bc:	0800d157 	.word	0x0800d157
 800d0c0:	0800d157 	.word	0x0800d157
 800d0c4:	0800d157 	.word	0x0800d157
 800d0c8:	0800d157 	.word	0x0800d157
 800d0cc:	0800d157 	.word	0x0800d157
 800d0d0:	0800d157 	.word	0x0800d157
 800d0d4:	0800d157 	.word	0x0800d157
 800d0d8:	0800d157 	.word	0x0800d157
 800d0dc:	0800d157 	.word	0x0800d157
 800d0e0:	0800d157 	.word	0x0800d157
 800d0e4:	0800d157 	.word	0x0800d157
 800d0e8:	0800d149 	.word	0x0800d149
 800d0ec:	2b40      	cmp	r3, #64	; 0x40
 800d0ee:	d02e      	beq.n	800d14e <UART_SetConfig+0xa9e>
 800d0f0:	e031      	b.n	800d156 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d0f2:	f7fb f8f5 	bl	80082e0 <HAL_RCC_GetPCLK1Freq>
 800d0f6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d0f8:	e033      	b.n	800d162 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d0fa:	f7fb f907 	bl	800830c <HAL_RCC_GetPCLK2Freq>
 800d0fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d100:	e02f      	b.n	800d162 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d102:	f107 0314 	add.w	r3, r7, #20
 800d106:	4618      	mov	r0, r3
 800d108:	f7fc fc4a 	bl	80099a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d10c:	69bb      	ldr	r3, [r7, #24]
 800d10e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d110:	e027      	b.n	800d162 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d112:	f107 0308 	add.w	r3, r7, #8
 800d116:	4618      	mov	r0, r3
 800d118:	f7fc fd96 	bl	8009c48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d120:	e01f      	b.n	800d162 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d122:	4b6e      	ldr	r3, [pc, #440]	; (800d2dc <UART_SetConfig+0xc2c>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f003 0320 	and.w	r3, r3, #32
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d009      	beq.n	800d142 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d12e:	4b6b      	ldr	r3, [pc, #428]	; (800d2dc <UART_SetConfig+0xc2c>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	08db      	lsrs	r3, r3, #3
 800d134:	f003 0303 	and.w	r3, r3, #3
 800d138:	4a69      	ldr	r2, [pc, #420]	; (800d2e0 <UART_SetConfig+0xc30>)
 800d13a:	fa22 f303 	lsr.w	r3, r2, r3
 800d13e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d140:	e00f      	b.n	800d162 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800d142:	4b67      	ldr	r3, [pc, #412]	; (800d2e0 <UART_SetConfig+0xc30>)
 800d144:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d146:	e00c      	b.n	800d162 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d148:	4b66      	ldr	r3, [pc, #408]	; (800d2e4 <UART_SetConfig+0xc34>)
 800d14a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d14c:	e009      	b.n	800d162 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d14e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d152:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d154:	e005      	b.n	800d162 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800d156:	2300      	movs	r3, #0
 800d158:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d15a:	2301      	movs	r3, #1
 800d15c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d160:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d164:	2b00      	cmp	r3, #0
 800d166:	f000 80ea 	beq.w	800d33e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d16e:	4a5a      	ldr	r2, [pc, #360]	; (800d2d8 <UART_SetConfig+0xc28>)
 800d170:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d174:	461a      	mov	r2, r3
 800d176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d178:	fbb3 f3f2 	udiv	r3, r3, r2
 800d17c:	005a      	lsls	r2, r3, #1
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	085b      	lsrs	r3, r3, #1
 800d184:	441a      	add	r2, r3
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	685b      	ldr	r3, [r3, #4]
 800d18a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d18e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d192:	2b0f      	cmp	r3, #15
 800d194:	d916      	bls.n	800d1c4 <UART_SetConfig+0xb14>
 800d196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d19c:	d212      	bcs.n	800d1c4 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a0:	b29b      	uxth	r3, r3
 800d1a2:	f023 030f 	bic.w	r3, r3, #15
 800d1a6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1aa:	085b      	lsrs	r3, r3, #1
 800d1ac:	b29b      	uxth	r3, r3
 800d1ae:	f003 0307 	and.w	r3, r3, #7
 800d1b2:	b29a      	uxth	r2, r3
 800d1b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d1b6:	4313      	orrs	r3, r2
 800d1b8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d1c0:	60da      	str	r2, [r3, #12]
 800d1c2:	e0bc      	b.n	800d33e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d1ca:	e0b8      	b.n	800d33e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d1cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d1d0:	2b20      	cmp	r3, #32
 800d1d2:	dc4b      	bgt.n	800d26c <UART_SetConfig+0xbbc>
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	f2c0 8087 	blt.w	800d2e8 <UART_SetConfig+0xc38>
 800d1da:	2b20      	cmp	r3, #32
 800d1dc:	f200 8084 	bhi.w	800d2e8 <UART_SetConfig+0xc38>
 800d1e0:	a201      	add	r2, pc, #4	; (adr r2, 800d1e8 <UART_SetConfig+0xb38>)
 800d1e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1e6:	bf00      	nop
 800d1e8:	0800d273 	.word	0x0800d273
 800d1ec:	0800d27b 	.word	0x0800d27b
 800d1f0:	0800d2e9 	.word	0x0800d2e9
 800d1f4:	0800d2e9 	.word	0x0800d2e9
 800d1f8:	0800d283 	.word	0x0800d283
 800d1fc:	0800d2e9 	.word	0x0800d2e9
 800d200:	0800d2e9 	.word	0x0800d2e9
 800d204:	0800d2e9 	.word	0x0800d2e9
 800d208:	0800d293 	.word	0x0800d293
 800d20c:	0800d2e9 	.word	0x0800d2e9
 800d210:	0800d2e9 	.word	0x0800d2e9
 800d214:	0800d2e9 	.word	0x0800d2e9
 800d218:	0800d2e9 	.word	0x0800d2e9
 800d21c:	0800d2e9 	.word	0x0800d2e9
 800d220:	0800d2e9 	.word	0x0800d2e9
 800d224:	0800d2e9 	.word	0x0800d2e9
 800d228:	0800d2a3 	.word	0x0800d2a3
 800d22c:	0800d2e9 	.word	0x0800d2e9
 800d230:	0800d2e9 	.word	0x0800d2e9
 800d234:	0800d2e9 	.word	0x0800d2e9
 800d238:	0800d2e9 	.word	0x0800d2e9
 800d23c:	0800d2e9 	.word	0x0800d2e9
 800d240:	0800d2e9 	.word	0x0800d2e9
 800d244:	0800d2e9 	.word	0x0800d2e9
 800d248:	0800d2e9 	.word	0x0800d2e9
 800d24c:	0800d2e9 	.word	0x0800d2e9
 800d250:	0800d2e9 	.word	0x0800d2e9
 800d254:	0800d2e9 	.word	0x0800d2e9
 800d258:	0800d2e9 	.word	0x0800d2e9
 800d25c:	0800d2e9 	.word	0x0800d2e9
 800d260:	0800d2e9 	.word	0x0800d2e9
 800d264:	0800d2e9 	.word	0x0800d2e9
 800d268:	0800d2c9 	.word	0x0800d2c9
 800d26c:	2b40      	cmp	r3, #64	; 0x40
 800d26e:	d02e      	beq.n	800d2ce <UART_SetConfig+0xc1e>
 800d270:	e03a      	b.n	800d2e8 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d272:	f7fb f835 	bl	80082e0 <HAL_RCC_GetPCLK1Freq>
 800d276:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d278:	e03c      	b.n	800d2f4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d27a:	f7fb f847 	bl	800830c <HAL_RCC_GetPCLK2Freq>
 800d27e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d280:	e038      	b.n	800d2f4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d282:	f107 0314 	add.w	r3, r7, #20
 800d286:	4618      	mov	r0, r3
 800d288:	f7fc fb8a 	bl	80099a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d28c:	69bb      	ldr	r3, [r7, #24]
 800d28e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d290:	e030      	b.n	800d2f4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d292:	f107 0308 	add.w	r3, r7, #8
 800d296:	4618      	mov	r0, r3
 800d298:	f7fc fcd6 	bl	8009c48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2a0:	e028      	b.n	800d2f4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d2a2:	4b0e      	ldr	r3, [pc, #56]	; (800d2dc <UART_SetConfig+0xc2c>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f003 0320 	and.w	r3, r3, #32
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d009      	beq.n	800d2c2 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d2ae:	4b0b      	ldr	r3, [pc, #44]	; (800d2dc <UART_SetConfig+0xc2c>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	08db      	lsrs	r3, r3, #3
 800d2b4:	f003 0303 	and.w	r3, r3, #3
 800d2b8:	4a09      	ldr	r2, [pc, #36]	; (800d2e0 <UART_SetConfig+0xc30>)
 800d2ba:	fa22 f303 	lsr.w	r3, r2, r3
 800d2be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d2c0:	e018      	b.n	800d2f4 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800d2c2:	4b07      	ldr	r3, [pc, #28]	; (800d2e0 <UART_SetConfig+0xc30>)
 800d2c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2c6:	e015      	b.n	800d2f4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d2c8:	4b06      	ldr	r3, [pc, #24]	; (800d2e4 <UART_SetConfig+0xc34>)
 800d2ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2cc:	e012      	b.n	800d2f4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d2ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d2d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2d4:	e00e      	b.n	800d2f4 <UART_SetConfig+0xc44>
 800d2d6:	bf00      	nop
 800d2d8:	0800e3a0 	.word	0x0800e3a0
 800d2dc:	58024400 	.word	0x58024400
 800d2e0:	03d09000 	.word	0x03d09000
 800d2e4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d2f2:	bf00      	nop
    }

    if (pclk != 0U)
 800d2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d021      	beq.n	800d33e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2fe:	4a1a      	ldr	r2, [pc, #104]	; (800d368 <UART_SetConfig+0xcb8>)
 800d300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d304:	461a      	mov	r2, r3
 800d306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d308:	fbb3 f2f2 	udiv	r2, r3, r2
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	085b      	lsrs	r3, r3, #1
 800d312:	441a      	add	r2, r3
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	fbb2 f3f3 	udiv	r3, r2, r3
 800d31c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d320:	2b0f      	cmp	r3, #15
 800d322:	d909      	bls.n	800d338 <UART_SetConfig+0xc88>
 800d324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d32a:	d205      	bcs.n	800d338 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d32e:	b29a      	uxth	r2, r3
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	60da      	str	r2, [r3, #12]
 800d336:	e002      	b.n	800d33e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800d338:	2301      	movs	r3, #1
 800d33a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2201      	movs	r2, #1
 800d342:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2201      	movs	r2, #1
 800d34a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2200      	movs	r2, #0
 800d352:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2200      	movs	r2, #0
 800d358:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d35a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3738      	adds	r7, #56	; 0x38
 800d362:	46bd      	mov	sp, r7
 800d364:	bdb0      	pop	{r4, r5, r7, pc}
 800d366:	bf00      	nop
 800d368:	0800e3a0 	.word	0x0800e3a0

0800d36c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d36c:	b480      	push	{r7}
 800d36e:	b083      	sub	sp, #12
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d378:	f003 0301 	and.w	r3, r3, #1
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d00a      	beq.n	800d396 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	685b      	ldr	r3, [r3, #4]
 800d386:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	430a      	orrs	r2, r1
 800d394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d39a:	f003 0302 	and.w	r3, r3, #2
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d00a      	beq.n	800d3b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	685b      	ldr	r3, [r3, #4]
 800d3a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	430a      	orrs	r2, r1
 800d3b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3bc:	f003 0304 	and.w	r3, r3, #4
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d00a      	beq.n	800d3da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	685b      	ldr	r3, [r3, #4]
 800d3ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	430a      	orrs	r2, r1
 800d3d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3de:	f003 0308 	and.w	r3, r3, #8
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d00a      	beq.n	800d3fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	430a      	orrs	r2, r1
 800d3fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d400:	f003 0310 	and.w	r3, r3, #16
 800d404:	2b00      	cmp	r3, #0
 800d406:	d00a      	beq.n	800d41e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	689b      	ldr	r3, [r3, #8]
 800d40e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	430a      	orrs	r2, r1
 800d41c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d422:	f003 0320 	and.w	r3, r3, #32
 800d426:	2b00      	cmp	r3, #0
 800d428:	d00a      	beq.n	800d440 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	689b      	ldr	r3, [r3, #8]
 800d430:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	430a      	orrs	r2, r1
 800d43e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d01a      	beq.n	800d482 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	685b      	ldr	r3, [r3, #4]
 800d452:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	430a      	orrs	r2, r1
 800d460:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d46a:	d10a      	bne.n	800d482 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	685b      	ldr	r3, [r3, #4]
 800d472:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	430a      	orrs	r2, r1
 800d480:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d00a      	beq.n	800d4a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	430a      	orrs	r2, r1
 800d4a2:	605a      	str	r2, [r3, #4]
  }
}
 800d4a4:	bf00      	nop
 800d4a6:	370c      	adds	r7, #12
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr

0800d4b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b086      	sub	sp, #24
 800d4b4:	af02      	add	r7, sp, #8
 800d4b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d4c0:	f7f5 fd6c 	bl	8002f9c <HAL_GetTick>
 800d4c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	f003 0308 	and.w	r3, r3, #8
 800d4d0:	2b08      	cmp	r3, #8
 800d4d2:	d10e      	bne.n	800d4f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d4d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d4d8:	9300      	str	r3, [sp, #0]
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f000 f82f 	bl	800d546 <UART_WaitOnFlagUntilTimeout>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d001      	beq.n	800d4f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d4ee:	2303      	movs	r3, #3
 800d4f0:	e025      	b.n	800d53e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f003 0304 	and.w	r3, r3, #4
 800d4fc:	2b04      	cmp	r3, #4
 800d4fe:	d10e      	bne.n	800d51e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d500:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d504:	9300      	str	r3, [sp, #0]
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	2200      	movs	r2, #0
 800d50a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f000 f819 	bl	800d546 <UART_WaitOnFlagUntilTimeout>
 800d514:	4603      	mov	r3, r0
 800d516:	2b00      	cmp	r3, #0
 800d518:	d001      	beq.n	800d51e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d51a:	2303      	movs	r3, #3
 800d51c:	e00f      	b.n	800d53e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2220      	movs	r2, #32
 800d522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2220      	movs	r2, #32
 800d52a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2200      	movs	r2, #0
 800d532:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2200      	movs	r2, #0
 800d538:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d53c:	2300      	movs	r3, #0
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3710      	adds	r7, #16
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}

0800d546 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d546:	b580      	push	{r7, lr}
 800d548:	b09c      	sub	sp, #112	; 0x70
 800d54a:	af00      	add	r7, sp, #0
 800d54c:	60f8      	str	r0, [r7, #12]
 800d54e:	60b9      	str	r1, [r7, #8]
 800d550:	603b      	str	r3, [r7, #0]
 800d552:	4613      	mov	r3, r2
 800d554:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d556:	e0a9      	b.n	800d6ac <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d558:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d55a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d55e:	f000 80a5 	beq.w	800d6ac <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d562:	f7f5 fd1b 	bl	8002f9c <HAL_GetTick>
 800d566:	4602      	mov	r2, r0
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	1ad3      	subs	r3, r2, r3
 800d56c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d56e:	429a      	cmp	r2, r3
 800d570:	d302      	bcc.n	800d578 <UART_WaitOnFlagUntilTimeout+0x32>
 800d572:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d574:	2b00      	cmp	r3, #0
 800d576:	d140      	bne.n	800d5fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d57e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d580:	e853 3f00 	ldrex	r3, [r3]
 800d584:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d588:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d58c:	667b      	str	r3, [r7, #100]	; 0x64
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	461a      	mov	r2, r3
 800d594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d596:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d598:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d59a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d59c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d59e:	e841 2300 	strex	r3, r2, [r1]
 800d5a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d5a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d1e6      	bne.n	800d578 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	3308      	adds	r3, #8
 800d5b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5b4:	e853 3f00 	ldrex	r3, [r3]
 800d5b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5bc:	f023 0301 	bic.w	r3, r3, #1
 800d5c0:	663b      	str	r3, [r7, #96]	; 0x60
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	3308      	adds	r3, #8
 800d5c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d5ca:	64ba      	str	r2, [r7, #72]	; 0x48
 800d5cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d5d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5d2:	e841 2300 	strex	r3, r2, [r1]
 800d5d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d5d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d1e5      	bne.n	800d5aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	2220      	movs	r2, #32
 800d5e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2220      	movs	r2, #32
 800d5ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d5f6:	2303      	movs	r3, #3
 800d5f8:	e069      	b.n	800d6ce <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f003 0304 	and.w	r3, r3, #4
 800d604:	2b00      	cmp	r3, #0
 800d606:	d051      	beq.n	800d6ac <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	69db      	ldr	r3, [r3, #28]
 800d60e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d616:	d149      	bne.n	800d6ac <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d620:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d62a:	e853 3f00 	ldrex	r3, [r3]
 800d62e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d632:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d636:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	461a      	mov	r2, r3
 800d63e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d640:	637b      	str	r3, [r7, #52]	; 0x34
 800d642:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d644:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d648:	e841 2300 	strex	r3, r2, [r1]
 800d64c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d650:	2b00      	cmp	r3, #0
 800d652:	d1e6      	bne.n	800d622 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	3308      	adds	r3, #8
 800d65a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	e853 3f00 	ldrex	r3, [r3]
 800d662:	613b      	str	r3, [r7, #16]
   return(result);
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	f023 0301 	bic.w	r3, r3, #1
 800d66a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	3308      	adds	r3, #8
 800d672:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d674:	623a      	str	r2, [r7, #32]
 800d676:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d678:	69f9      	ldr	r1, [r7, #28]
 800d67a:	6a3a      	ldr	r2, [r7, #32]
 800d67c:	e841 2300 	strex	r3, r2, [r1]
 800d680:	61bb      	str	r3, [r7, #24]
   return(result);
 800d682:	69bb      	ldr	r3, [r7, #24]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d1e5      	bne.n	800d654 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	2220      	movs	r2, #32
 800d68c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	2220      	movs	r2, #32
 800d694:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2220      	movs	r2, #32
 800d69c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d6a8:	2303      	movs	r3, #3
 800d6aa:	e010      	b.n	800d6ce <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	69da      	ldr	r2, [r3, #28]
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	4013      	ands	r3, r2
 800d6b6:	68ba      	ldr	r2, [r7, #8]
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	bf0c      	ite	eq
 800d6bc:	2301      	moveq	r3, #1
 800d6be:	2300      	movne	r3, #0
 800d6c0:	b2db      	uxtb	r3, r3
 800d6c2:	461a      	mov	r2, r3
 800d6c4:	79fb      	ldrb	r3, [r7, #7]
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	f43f af46 	beq.w	800d558 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d6cc:	2300      	movs	r3, #0
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3770      	adds	r7, #112	; 0x70
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}

0800d6d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d6d6:	b480      	push	{r7}
 800d6d8:	b085      	sub	sp, #20
 800d6da:	af00      	add	r7, sp, #0
 800d6dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d6e4:	2b01      	cmp	r3, #1
 800d6e6:	d101      	bne.n	800d6ec <HAL_UARTEx_DisableFifoMode+0x16>
 800d6e8:	2302      	movs	r3, #2
 800d6ea:	e027      	b.n	800d73c <HAL_UARTEx_DisableFifoMode+0x66>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2224      	movs	r2, #36	; 0x24
 800d6f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	681a      	ldr	r2, [r3, #0]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f022 0201 	bic.w	r2, r2, #1
 800d712:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d71a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2200      	movs	r2, #0
 800d720:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	68fa      	ldr	r2, [r7, #12]
 800d728:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2220      	movs	r2, #32
 800d72e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2200      	movs	r2, #0
 800d736:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d73a:	2300      	movs	r3, #0
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3714      	adds	r7, #20
 800d740:	46bd      	mov	sp, r7
 800d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d746:	4770      	bx	lr

0800d748 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b084      	sub	sp, #16
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
 800d750:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d758:	2b01      	cmp	r3, #1
 800d75a:	d101      	bne.n	800d760 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d75c:	2302      	movs	r3, #2
 800d75e:	e02d      	b.n	800d7bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2201      	movs	r2, #1
 800d764:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2224      	movs	r2, #36	; 0x24
 800d76c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	681a      	ldr	r2, [r3, #0]
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	f022 0201 	bic.w	r2, r2, #1
 800d786:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	689b      	ldr	r3, [r3, #8]
 800d78e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	683a      	ldr	r2, [r7, #0]
 800d798:	430a      	orrs	r2, r1
 800d79a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f000 f84f 	bl	800d840 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	68fa      	ldr	r2, [r7, #12]
 800d7a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2220      	movs	r2, #32
 800d7ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d7ba:	2300      	movs	r3, #0
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	3710      	adds	r7, #16
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}

0800d7c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	d101      	bne.n	800d7dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d7d8:	2302      	movs	r3, #2
 800d7da:	e02d      	b.n	800d838 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2201      	movs	r2, #1
 800d7e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2224      	movs	r2, #36	; 0x24
 800d7e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	681a      	ldr	r2, [r3, #0]
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f022 0201 	bic.w	r2, r2, #1
 800d802:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	689b      	ldr	r3, [r3, #8]
 800d80a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	683a      	ldr	r2, [r7, #0]
 800d814:	430a      	orrs	r2, r1
 800d816:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f000 f811 	bl	800d840 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	68fa      	ldr	r2, [r7, #12]
 800d824:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2220      	movs	r2, #32
 800d82a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2200      	movs	r2, #0
 800d832:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d836:	2300      	movs	r3, #0
}
 800d838:	4618      	mov	r0, r3
 800d83a:	3710      	adds	r7, #16
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}

0800d840 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d840:	b480      	push	{r7}
 800d842:	b085      	sub	sp, #20
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d108      	bne.n	800d862 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2201      	movs	r2, #1
 800d854:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2201      	movs	r2, #1
 800d85c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d860:	e031      	b.n	800d8c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d862:	2310      	movs	r3, #16
 800d864:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d866:	2310      	movs	r3, #16
 800d868:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	689b      	ldr	r3, [r3, #8]
 800d870:	0e5b      	lsrs	r3, r3, #25
 800d872:	b2db      	uxtb	r3, r3
 800d874:	f003 0307 	and.w	r3, r3, #7
 800d878:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	689b      	ldr	r3, [r3, #8]
 800d880:	0f5b      	lsrs	r3, r3, #29
 800d882:	b2db      	uxtb	r3, r3
 800d884:	f003 0307 	and.w	r3, r3, #7
 800d888:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d88a:	7bbb      	ldrb	r3, [r7, #14]
 800d88c:	7b3a      	ldrb	r2, [r7, #12]
 800d88e:	4911      	ldr	r1, [pc, #68]	; (800d8d4 <UARTEx_SetNbDataToProcess+0x94>)
 800d890:	5c8a      	ldrb	r2, [r1, r2]
 800d892:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d896:	7b3a      	ldrb	r2, [r7, #12]
 800d898:	490f      	ldr	r1, [pc, #60]	; (800d8d8 <UARTEx_SetNbDataToProcess+0x98>)
 800d89a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d89c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d8a0:	b29a      	uxth	r2, r3
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d8a8:	7bfb      	ldrb	r3, [r7, #15]
 800d8aa:	7b7a      	ldrb	r2, [r7, #13]
 800d8ac:	4909      	ldr	r1, [pc, #36]	; (800d8d4 <UARTEx_SetNbDataToProcess+0x94>)
 800d8ae:	5c8a      	ldrb	r2, [r1, r2]
 800d8b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d8b4:	7b7a      	ldrb	r2, [r7, #13]
 800d8b6:	4908      	ldr	r1, [pc, #32]	; (800d8d8 <UARTEx_SetNbDataToProcess+0x98>)
 800d8b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d8ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800d8be:	b29a      	uxth	r2, r3
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d8c6:	bf00      	nop
 800d8c8:	3714      	adds	r7, #20
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr
 800d8d2:	bf00      	nop
 800d8d4:	0800e3b8 	.word	0x0800e3b8
 800d8d8:	0800e3c0 	.word	0x0800e3c0

0800d8dc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d8dc:	b084      	sub	sp, #16
 800d8de:	b480      	push	{r7}
 800d8e0:	b085      	sub	sp, #20
 800d8e2:	af00      	add	r7, sp, #0
 800d8e4:	6078      	str	r0, [r7, #4]
 800d8e6:	f107 001c 	add.w	r0, r7, #28
 800d8ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800d8f2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800d8f4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800d8f6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800d8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800d8fa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800d8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800d8fe:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800d902:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800d904:	68fa      	ldr	r2, [r7, #12]
 800d906:	4313      	orrs	r3, r2
 800d908:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	685a      	ldr	r2, [r3, #4]
 800d90e:	4b07      	ldr	r3, [pc, #28]	; (800d92c <SDMMC_Init+0x50>)
 800d910:	4013      	ands	r3, r2
 800d912:	68fa      	ldr	r2, [r7, #12]
 800d914:	431a      	orrs	r2, r3
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d91a:	2300      	movs	r3, #0
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3714      	adds	r7, #20
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	b004      	add	sp, #16
 800d928:	4770      	bx	lr
 800d92a:	bf00      	nop
 800d92c:	ffc02c00 	.word	0xffc02c00

0800d930 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d930:	b480      	push	{r7}
 800d932:	b083      	sub	sp, #12
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d93e:	4618      	mov	r0, r3
 800d940:	370c      	adds	r7, #12
 800d942:	46bd      	mov	sp, r7
 800d944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d948:	4770      	bx	lr

0800d94a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d94a:	b480      	push	{r7}
 800d94c:	b083      	sub	sp, #12
 800d94e:	af00      	add	r7, sp, #0
 800d950:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f043 0203 	orr.w	r2, r3, #3
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d95e:	2300      	movs	r3, #0
}
 800d960:	4618      	mov	r0, r3
 800d962:	370c      	adds	r7, #12
 800d964:	46bd      	mov	sp, r7
 800d966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96a:	4770      	bx	lr

0800d96c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b083      	sub	sp, #12
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	f003 0303 	and.w	r3, r3, #3
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	370c      	adds	r7, #12
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr

0800d988 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d988:	b480      	push	{r7}
 800d98a:	b085      	sub	sp, #20
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d992:	2300      	movs	r3, #0
 800d994:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	681a      	ldr	r2, [r3, #0]
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d9a6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800d9ac:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800d9b2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d9b4:	68fa      	ldr	r2, [r7, #12]
 800d9b6:	4313      	orrs	r3, r2
 800d9b8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	68da      	ldr	r2, [r3, #12]
 800d9be:	4b06      	ldr	r3, [pc, #24]	; (800d9d8 <SDMMC_SendCommand+0x50>)
 800d9c0:	4013      	ands	r3, r2
 800d9c2:	68fa      	ldr	r2, [r7, #12]
 800d9c4:	431a      	orrs	r2, r3
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d9ca:	2300      	movs	r3, #0
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3714      	adds	r7, #20
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr
 800d9d8:	fffee0c0 	.word	0xfffee0c0

0800d9dc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b083      	sub	sp, #12
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	691b      	ldr	r3, [r3, #16]
 800d9e8:	b2db      	uxtb	r3, r3
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	370c      	adds	r7, #12
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f4:	4770      	bx	lr

0800d9f6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d9f6:	b480      	push	{r7}
 800d9f8:	b085      	sub	sp, #20
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	6078      	str	r0, [r7, #4]
 800d9fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	3314      	adds	r3, #20
 800da04:	461a      	mov	r2, r3
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	4413      	add	r3, r2
 800da0a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
}
 800da10:	4618      	mov	r0, r3
 800da12:	3714      	adds	r7, #20
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr

0800da1c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800da1c:	b480      	push	{r7}
 800da1e:	b085      	sub	sp, #20
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800da26:	2300      	movs	r3, #0
 800da28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	681a      	ldr	r2, [r3, #0]
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	685a      	ldr	r2, [r3, #4]
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800da42:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800da48:	431a      	orrs	r2, r3
                       Data->DPSM);
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800da4e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800da50:	68fa      	ldr	r2, [r7, #12]
 800da52:	4313      	orrs	r3, r2
 800da54:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	431a      	orrs	r2, r3
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800da66:	2300      	movs	r3, #0

}
 800da68:	4618      	mov	r0, r3
 800da6a:	3714      	adds	r7, #20
 800da6c:	46bd      	mov	sp, r7
 800da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da72:	4770      	bx	lr

0800da74 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b088      	sub	sp, #32
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
 800da7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800da82:	2310      	movs	r3, #16
 800da84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da86:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da8c:	2300      	movs	r3, #0
 800da8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da94:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da96:	f107 0308 	add.w	r3, r7, #8
 800da9a:	4619      	mov	r1, r3
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f7ff ff73 	bl	800d988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800daa2:	f241 3288 	movw	r2, #5000	; 0x1388
 800daa6:	2110      	movs	r1, #16
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f000 f995 	bl	800ddd8 <SDMMC_GetCmdResp1>
 800daae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dab0:	69fb      	ldr	r3, [r7, #28]
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3720      	adds	r7, #32
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}

0800daba <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800daba:	b580      	push	{r7, lr}
 800dabc:	b088      	sub	sp, #32
 800dabe:	af00      	add	r7, sp, #0
 800dac0:	6078      	str	r0, [r7, #4]
 800dac2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800dac8:	2307      	movs	r3, #7
 800daca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dacc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dad0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dad2:	2300      	movs	r3, #0
 800dad4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dada:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dadc:	f107 0308 	add.w	r3, r7, #8
 800dae0:	4619      	mov	r1, r3
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f7ff ff50 	bl	800d988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800dae8:	f241 3288 	movw	r2, #5000	; 0x1388
 800daec:	2107      	movs	r1, #7
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f000 f972 	bl	800ddd8 <SDMMC_GetCmdResp1>
 800daf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800daf6:	69fb      	ldr	r3, [r7, #28]
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3720      	adds	r7, #32
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}

0800db00 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b088      	sub	sp, #32
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800db08:	2300      	movs	r3, #0
 800db0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800db0c:	2300      	movs	r3, #0
 800db0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800db10:	2300      	movs	r3, #0
 800db12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db14:	2300      	movs	r3, #0
 800db16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db1e:	f107 0308 	add.w	r3, r7, #8
 800db22:	4619      	mov	r1, r3
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f7ff ff2f 	bl	800d988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f000 fb96 	bl	800e25c <SDMMC_GetCmdError>
 800db30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db32:	69fb      	ldr	r3, [r7, #28]
}
 800db34:	4618      	mov	r0, r3
 800db36:	3720      	adds	r7, #32
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b088      	sub	sp, #32
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800db44:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800db48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800db4a:	2308      	movs	r3, #8
 800db4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db54:	2300      	movs	r3, #0
 800db56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db5e:	f107 0308 	add.w	r3, r7, #8
 800db62:	4619      	mov	r1, r3
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f7ff ff0f 	bl	800d988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f000 fb28 	bl	800e1c0 <SDMMC_GetCmdResp7>
 800db70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db72:	69fb      	ldr	r3, [r7, #28]
}
 800db74:	4618      	mov	r0, r3
 800db76:	3720      	adds	r7, #32
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}

0800db7c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b088      	sub	sp, #32
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
 800db84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800db8a:	2337      	movs	r3, #55	; 0x37
 800db8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db94:	2300      	movs	r3, #0
 800db96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db9e:	f107 0308 	add.w	r3, r7, #8
 800dba2:	4619      	mov	r1, r3
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f7ff feef 	bl	800d988 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800dbaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbae:	2137      	movs	r1, #55	; 0x37
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f000 f911 	bl	800ddd8 <SDMMC_GetCmdResp1>
 800dbb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbb8:	69fb      	ldr	r3, [r7, #28]
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3720      	adds	r7, #32
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}

0800dbc2 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dbc2:	b580      	push	{r7, lr}
 800dbc4:	b088      	sub	sp, #32
 800dbc6:	af00      	add	r7, sp, #0
 800dbc8:	6078      	str	r0, [r7, #4]
 800dbca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800dbd0:	2329      	movs	r3, #41	; 0x29
 800dbd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dbd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dbd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dbe2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbe4:	f107 0308 	add.w	r3, r7, #8
 800dbe8:	4619      	mov	r1, r3
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f7ff fecc 	bl	800d988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f000 fa2d 	bl	800e050 <SDMMC_GetCmdResp3>
 800dbf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbf8:	69fb      	ldr	r3, [r7, #28]
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3720      	adds	r7, #32
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}

0800dc02 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800dc02:	b580      	push	{r7, lr}
 800dc04:	b088      	sub	sp, #32
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	6078      	str	r0, [r7, #4]
 800dc0a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800dc10:	2306      	movs	r3, #6
 800dc12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc14:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc24:	f107 0308 	add.w	r3, r7, #8
 800dc28:	4619      	mov	r1, r3
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f7ff feac 	bl	800d988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800dc30:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc34:	2106      	movs	r1, #6
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f000 f8ce 	bl	800ddd8 <SDMMC_GetCmdResp1>
 800dc3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc3e:	69fb      	ldr	r3, [r7, #28]
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3720      	adds	r7, #32
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}

0800dc48 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b088      	sub	sp, #32
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800dc50:	2300      	movs	r3, #0
 800dc52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800dc54:	2333      	movs	r3, #51	; 0x33
 800dc56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc68:	f107 0308 	add.w	r3, r7, #8
 800dc6c:	4619      	mov	r1, r3
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f7ff fe8a 	bl	800d988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800dc74:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc78:	2133      	movs	r1, #51	; 0x33
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f000 f8ac 	bl	800ddd8 <SDMMC_GetCmdResp1>
 800dc80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc82:	69fb      	ldr	r3, [r7, #28]
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3720      	adds	r7, #32
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}

0800dc8c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b088      	sub	sp, #32
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800dc94:	2300      	movs	r3, #0
 800dc96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800dc98:	2302      	movs	r3, #2
 800dc9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800dc9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800dca0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dca2:	2300      	movs	r3, #0
 800dca4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dcaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dcac:	f107 0308 	add.w	r3, r7, #8
 800dcb0:	4619      	mov	r1, r3
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f7ff fe68 	bl	800d988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f000 f97f 	bl	800dfbc <SDMMC_GetCmdResp2>
 800dcbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcc0:	69fb      	ldr	r3, [r7, #28]
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3720      	adds	r7, #32
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}

0800dcca <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dcca:	b580      	push	{r7, lr}
 800dccc:	b088      	sub	sp, #32
 800dcce:	af00      	add	r7, sp, #0
 800dcd0:	6078      	str	r0, [r7, #4]
 800dcd2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800dcd4:	683b      	ldr	r3, [r7, #0]
 800dcd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800dcd8:	2309      	movs	r3, #9
 800dcda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800dcdc:	f44f 7340 	mov.w	r3, #768	; 0x300
 800dce0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dce2:	2300      	movs	r3, #0
 800dce4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dcea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dcec:	f107 0308 	add.w	r3, r7, #8
 800dcf0:	4619      	mov	r1, r3
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f7ff fe48 	bl	800d988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f000 f95f 	bl	800dfbc <SDMMC_GetCmdResp2>
 800dcfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd00:	69fb      	ldr	r3, [r7, #28]
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3720      	adds	r7, #32
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}

0800dd0a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800dd0a:	b580      	push	{r7, lr}
 800dd0c:	b088      	sub	sp, #32
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	6078      	str	r0, [r7, #4]
 800dd12:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800dd14:	2300      	movs	r3, #0
 800dd16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800dd18:	2303      	movs	r3, #3
 800dd1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd22:	2300      	movs	r3, #0
 800dd24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd2c:	f107 0308 	add.w	r3, r7, #8
 800dd30:	4619      	mov	r1, r3
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f7ff fe28 	bl	800d988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800dd38:	683a      	ldr	r2, [r7, #0]
 800dd3a:	2103      	movs	r1, #3
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f000 f9c7 	bl	800e0d0 <SDMMC_GetCmdResp6>
 800dd42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd44:	69fb      	ldr	r3, [r7, #28]
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3720      	adds	r7, #32
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}

0800dd4e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dd4e:	b580      	push	{r7, lr}
 800dd50:	b088      	sub	sp, #32
 800dd52:	af00      	add	r7, sp, #0
 800dd54:	6078      	str	r0, [r7, #4]
 800dd56:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800dd5c:	230d      	movs	r3, #13
 800dd5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd60:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd66:	2300      	movs	r3, #0
 800dd68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd70:	f107 0308 	add.w	r3, r7, #8
 800dd74:	4619      	mov	r1, r3
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f7ff fe06 	bl	800d988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800dd7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd80:	210d      	movs	r1, #13
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f000 f828 	bl	800ddd8 <SDMMC_GetCmdResp1>
 800dd88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd8a:	69fb      	ldr	r3, [r7, #28]
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3720      	adds	r7, #32
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}

0800dd94 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b088      	sub	sp, #32
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800dda0:	230d      	movs	r3, #13
 800dda2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dda4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dda8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ddae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ddb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ddb4:	f107 0308 	add.w	r3, r7, #8
 800ddb8:	4619      	mov	r1, r3
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f7ff fde4 	bl	800d988 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800ddc0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddc4:	210d      	movs	r1, #13
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f000 f806 	bl	800ddd8 <SDMMC_GetCmdResp1>
 800ddcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddce:	69fb      	ldr	r3, [r7, #28]
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3720      	adds	r7, #32
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b088      	sub	sp, #32
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	60f8      	str	r0, [r7, #12]
 800dde0:	460b      	mov	r3, r1
 800dde2:	607a      	str	r2, [r7, #4]
 800dde4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dde6:	4b70      	ldr	r3, [pc, #448]	; (800dfa8 <SDMMC_GetCmdResp1+0x1d0>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	4a70      	ldr	r2, [pc, #448]	; (800dfac <SDMMC_GetCmdResp1+0x1d4>)
 800ddec:	fba2 2303 	umull	r2, r3, r2, r3
 800ddf0:	0a5a      	lsrs	r2, r3, #9
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	fb02 f303 	mul.w	r3, r2, r3
 800ddf8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ddfa:	69fb      	ldr	r3, [r7, #28]
 800ddfc:	1e5a      	subs	r2, r3, #1
 800ddfe:	61fa      	str	r2, [r7, #28]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d102      	bne.n	800de0a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800de04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800de08:	e0c9      	b.n	800df9e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de0e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800de10:	69ba      	ldr	r2, [r7, #24]
 800de12:	4b67      	ldr	r3, [pc, #412]	; (800dfb0 <SDMMC_GetCmdResp1+0x1d8>)
 800de14:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800de16:	2b00      	cmp	r3, #0
 800de18:	d0ef      	beq.n	800ddfa <SDMMC_GetCmdResp1+0x22>
 800de1a:	69bb      	ldr	r3, [r7, #24]
 800de1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800de20:	2b00      	cmp	r3, #0
 800de22:	d1ea      	bne.n	800ddfa <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de28:	f003 0304 	and.w	r3, r3, #4
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d004      	beq.n	800de3a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	2204      	movs	r2, #4
 800de34:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800de36:	2304      	movs	r3, #4
 800de38:	e0b1      	b.n	800df9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de3e:	f003 0301 	and.w	r3, r3, #1
 800de42:	2b00      	cmp	r3, #0
 800de44:	d004      	beq.n	800de50 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2201      	movs	r2, #1
 800de4a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de4c:	2301      	movs	r3, #1
 800de4e:	e0a6      	b.n	800df9e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	4a58      	ldr	r2, [pc, #352]	; (800dfb4 <SDMMC_GetCmdResp1+0x1dc>)
 800de54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800de56:	68f8      	ldr	r0, [r7, #12]
 800de58:	f7ff fdc0 	bl	800d9dc <SDMMC_GetCommandResponse>
 800de5c:	4603      	mov	r3, r0
 800de5e:	461a      	mov	r2, r3
 800de60:	7afb      	ldrb	r3, [r7, #11]
 800de62:	4293      	cmp	r3, r2
 800de64:	d001      	beq.n	800de6a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de66:	2301      	movs	r3, #1
 800de68:	e099      	b.n	800df9e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800de6a:	2100      	movs	r1, #0
 800de6c:	68f8      	ldr	r0, [r7, #12]
 800de6e:	f7ff fdc2 	bl	800d9f6 <SDMMC_GetResponse>
 800de72:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800de74:	697a      	ldr	r2, [r7, #20]
 800de76:	4b50      	ldr	r3, [pc, #320]	; (800dfb8 <SDMMC_GetCmdResp1+0x1e0>)
 800de78:	4013      	ands	r3, r2
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d101      	bne.n	800de82 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800de7e:	2300      	movs	r3, #0
 800de80:	e08d      	b.n	800df9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	2b00      	cmp	r3, #0
 800de86:	da02      	bge.n	800de8e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800de88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800de8c:	e087      	b.n	800df9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800de94:	2b00      	cmp	r3, #0
 800de96:	d001      	beq.n	800de9c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800de98:	2340      	movs	r3, #64	; 0x40
 800de9a:	e080      	b.n	800df9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d001      	beq.n	800deaa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dea6:	2380      	movs	r3, #128	; 0x80
 800dea8:	e079      	b.n	800df9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d002      	beq.n	800deba <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800deb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800deb8:	e071      	b.n	800df9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d002      	beq.n	800deca <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dec4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dec8:	e069      	b.n	800df9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d002      	beq.n	800deda <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ded4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ded8:	e061      	b.n	800df9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d002      	beq.n	800deea <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dee4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dee8:	e059      	b.n	800df9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800deea:	697b      	ldr	r3, [r7, #20]
 800deec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800def0:	2b00      	cmp	r3, #0
 800def2:	d002      	beq.n	800defa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800def4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800def8:	e051      	b.n	800df9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800df00:	2b00      	cmp	r3, #0
 800df02:	d002      	beq.n	800df0a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800df04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800df08:	e049      	b.n	800df9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800df10:	2b00      	cmp	r3, #0
 800df12:	d002      	beq.n	800df1a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800df14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800df18:	e041      	b.n	800df9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800df20:	2b00      	cmp	r3, #0
 800df22:	d002      	beq.n	800df2a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800df24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df28:	e039      	b.n	800df9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800df30:	2b00      	cmp	r3, #0
 800df32:	d002      	beq.n	800df3a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800df34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800df38:	e031      	b.n	800df9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800df3a:	697b      	ldr	r3, [r7, #20]
 800df3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df40:	2b00      	cmp	r3, #0
 800df42:	d002      	beq.n	800df4a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800df44:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800df48:	e029      	b.n	800df9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df50:	2b00      	cmp	r3, #0
 800df52:	d002      	beq.n	800df5a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800df54:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800df58:	e021      	b.n	800df9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800df5a:	697b      	ldr	r3, [r7, #20]
 800df5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800df60:	2b00      	cmp	r3, #0
 800df62:	d002      	beq.n	800df6a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800df64:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800df68:	e019      	b.n	800df9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800df70:	2b00      	cmp	r3, #0
 800df72:	d002      	beq.n	800df7a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800df74:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800df78:	e011      	b.n	800df9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800df80:	2b00      	cmp	r3, #0
 800df82:	d002      	beq.n	800df8a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800df84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800df88:	e009      	b.n	800df9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	f003 0308 	and.w	r3, r3, #8
 800df90:	2b00      	cmp	r3, #0
 800df92:	d002      	beq.n	800df9a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800df94:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800df98:	e001      	b.n	800df9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800df9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3720      	adds	r7, #32
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}
 800dfa6:	bf00      	nop
 800dfa8:	24000000 	.word	0x24000000
 800dfac:	10624dd3 	.word	0x10624dd3
 800dfb0:	00200045 	.word	0x00200045
 800dfb4:	002000c5 	.word	0x002000c5
 800dfb8:	fdffe008 	.word	0xfdffe008

0800dfbc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	b085      	sub	sp, #20
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800dfc4:	4b1f      	ldr	r3, [pc, #124]	; (800e044 <SDMMC_GetCmdResp2+0x88>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	4a1f      	ldr	r2, [pc, #124]	; (800e048 <SDMMC_GetCmdResp2+0x8c>)
 800dfca:	fba2 2303 	umull	r2, r3, r2, r3
 800dfce:	0a5b      	lsrs	r3, r3, #9
 800dfd0:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfd4:	fb02 f303 	mul.w	r3, r2, r3
 800dfd8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	1e5a      	subs	r2, r3, #1
 800dfde:	60fa      	str	r2, [r7, #12]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d102      	bne.n	800dfea <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dfe4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dfe8:	e026      	b.n	800e038 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfee:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d0ef      	beq.n	800dfda <SDMMC_GetCmdResp2+0x1e>
 800dffa:	68bb      	ldr	r3, [r7, #8]
 800dffc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e000:	2b00      	cmp	r3, #0
 800e002:	d1ea      	bne.n	800dfda <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e008:	f003 0304 	and.w	r3, r3, #4
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d004      	beq.n	800e01a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2204      	movs	r2, #4
 800e014:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e016:	2304      	movs	r3, #4
 800e018:	e00e      	b.n	800e038 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e01e:	f003 0301 	and.w	r3, r3, #1
 800e022:	2b00      	cmp	r3, #0
 800e024:	d004      	beq.n	800e030 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2201      	movs	r2, #1
 800e02a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e02c:	2301      	movs	r3, #1
 800e02e:	e003      	b.n	800e038 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	4a06      	ldr	r2, [pc, #24]	; (800e04c <SDMMC_GetCmdResp2+0x90>)
 800e034:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e036:	2300      	movs	r3, #0
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3714      	adds	r7, #20
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr
 800e044:	24000000 	.word	0x24000000
 800e048:	10624dd3 	.word	0x10624dd3
 800e04c:	002000c5 	.word	0x002000c5

0800e050 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e050:	b480      	push	{r7}
 800e052:	b085      	sub	sp, #20
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e058:	4b1a      	ldr	r3, [pc, #104]	; (800e0c4 <SDMMC_GetCmdResp3+0x74>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	4a1a      	ldr	r2, [pc, #104]	; (800e0c8 <SDMMC_GetCmdResp3+0x78>)
 800e05e:	fba2 2303 	umull	r2, r3, r2, r3
 800e062:	0a5b      	lsrs	r3, r3, #9
 800e064:	f241 3288 	movw	r2, #5000	; 0x1388
 800e068:	fb02 f303 	mul.w	r3, r2, r3
 800e06c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	1e5a      	subs	r2, r3, #1
 800e072:	60fa      	str	r2, [r7, #12]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d102      	bne.n	800e07e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e078:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e07c:	e01b      	b.n	800e0b6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e082:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d0ef      	beq.n	800e06e <SDMMC_GetCmdResp3+0x1e>
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e094:	2b00      	cmp	r3, #0
 800e096:	d1ea      	bne.n	800e06e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e09c:	f003 0304 	and.w	r3, r3, #4
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d004      	beq.n	800e0ae <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2204      	movs	r2, #4
 800e0a8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e0aa:	2304      	movs	r3, #4
 800e0ac:	e003      	b.n	800e0b6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	4a06      	ldr	r2, [pc, #24]	; (800e0cc <SDMMC_GetCmdResp3+0x7c>)
 800e0b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e0b4:	2300      	movs	r3, #0
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3714      	adds	r7, #20
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c0:	4770      	bx	lr
 800e0c2:	bf00      	nop
 800e0c4:	24000000 	.word	0x24000000
 800e0c8:	10624dd3 	.word	0x10624dd3
 800e0cc:	002000c5 	.word	0x002000c5

0800e0d0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b088      	sub	sp, #32
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	60f8      	str	r0, [r7, #12]
 800e0d8:	460b      	mov	r3, r1
 800e0da:	607a      	str	r2, [r7, #4]
 800e0dc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e0de:	4b35      	ldr	r3, [pc, #212]	; (800e1b4 <SDMMC_GetCmdResp6+0xe4>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	4a35      	ldr	r2, [pc, #212]	; (800e1b8 <SDMMC_GetCmdResp6+0xe8>)
 800e0e4:	fba2 2303 	umull	r2, r3, r2, r3
 800e0e8:	0a5b      	lsrs	r3, r3, #9
 800e0ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0ee:	fb02 f303 	mul.w	r3, r2, r3
 800e0f2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e0f4:	69fb      	ldr	r3, [r7, #28]
 800e0f6:	1e5a      	subs	r2, r3, #1
 800e0f8:	61fa      	str	r2, [r7, #28]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d102      	bne.n	800e104 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e0fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e102:	e052      	b.n	800e1aa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e108:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e10a:	69bb      	ldr	r3, [r7, #24]
 800e10c:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e110:	2b00      	cmp	r3, #0
 800e112:	d0ef      	beq.n	800e0f4 <SDMMC_GetCmdResp6+0x24>
 800e114:	69bb      	ldr	r3, [r7, #24]
 800e116:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d1ea      	bne.n	800e0f4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e122:	f003 0304 	and.w	r3, r3, #4
 800e126:	2b00      	cmp	r3, #0
 800e128:	d004      	beq.n	800e134 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	2204      	movs	r2, #4
 800e12e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e130:	2304      	movs	r3, #4
 800e132:	e03a      	b.n	800e1aa <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e138:	f003 0301 	and.w	r3, r3, #1
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d004      	beq.n	800e14a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	2201      	movs	r2, #1
 800e144:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e146:	2301      	movs	r3, #1
 800e148:	e02f      	b.n	800e1aa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e14a:	68f8      	ldr	r0, [r7, #12]
 800e14c:	f7ff fc46 	bl	800d9dc <SDMMC_GetCommandResponse>
 800e150:	4603      	mov	r3, r0
 800e152:	461a      	mov	r2, r3
 800e154:	7afb      	ldrb	r3, [r7, #11]
 800e156:	4293      	cmp	r3, r2
 800e158:	d001      	beq.n	800e15e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e15a:	2301      	movs	r3, #1
 800e15c:	e025      	b.n	800e1aa <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	4a16      	ldr	r2, [pc, #88]	; (800e1bc <SDMMC_GetCmdResp6+0xec>)
 800e162:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e164:	2100      	movs	r1, #0
 800e166:	68f8      	ldr	r0, [r7, #12]
 800e168:	f7ff fc45 	bl	800d9f6 <SDMMC_GetResponse>
 800e16c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e174:	2b00      	cmp	r3, #0
 800e176:	d106      	bne.n	800e186 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800e178:	697b      	ldr	r3, [r7, #20]
 800e17a:	0c1b      	lsrs	r3, r3, #16
 800e17c:	b29a      	uxth	r2, r3
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800e182:	2300      	movs	r3, #0
 800e184:	e011      	b.n	800e1aa <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e186:	697b      	ldr	r3, [r7, #20]
 800e188:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d002      	beq.n	800e196 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e190:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e194:	e009      	b.n	800e1aa <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d002      	beq.n	800e1a6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e1a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e1a4:	e001      	b.n	800e1aa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e1a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	3720      	adds	r7, #32
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
 800e1b2:	bf00      	nop
 800e1b4:	24000000 	.word	0x24000000
 800e1b8:	10624dd3 	.word	0x10624dd3
 800e1bc:	002000c5 	.word	0x002000c5

0800e1c0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e1c0:	b480      	push	{r7}
 800e1c2:	b085      	sub	sp, #20
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e1c8:	4b22      	ldr	r3, [pc, #136]	; (800e254 <SDMMC_GetCmdResp7+0x94>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	4a22      	ldr	r2, [pc, #136]	; (800e258 <SDMMC_GetCmdResp7+0x98>)
 800e1ce:	fba2 2303 	umull	r2, r3, r2, r3
 800e1d2:	0a5b      	lsrs	r3, r3, #9
 800e1d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1d8:	fb02 f303 	mul.w	r3, r2, r3
 800e1dc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	1e5a      	subs	r2, r3, #1
 800e1e2:	60fa      	str	r2, [r7, #12]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d102      	bne.n	800e1ee <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e1e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e1ec:	e02c      	b.n	800e248 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1f2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d0ef      	beq.n	800e1de <SDMMC_GetCmdResp7+0x1e>
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e204:	2b00      	cmp	r3, #0
 800e206:	d1ea      	bne.n	800e1de <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e20c:	f003 0304 	and.w	r3, r3, #4
 800e210:	2b00      	cmp	r3, #0
 800e212:	d004      	beq.n	800e21e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2204      	movs	r2, #4
 800e218:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e21a:	2304      	movs	r3, #4
 800e21c:	e014      	b.n	800e248 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e222:	f003 0301 	and.w	r3, r3, #1
 800e226:	2b00      	cmp	r3, #0
 800e228:	d004      	beq.n	800e234 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2201      	movs	r2, #1
 800e22e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e230:	2301      	movs	r3, #1
 800e232:	e009      	b.n	800e248 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d002      	beq.n	800e246 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2240      	movs	r2, #64	; 0x40
 800e244:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e246:	2300      	movs	r3, #0

}
 800e248:	4618      	mov	r0, r3
 800e24a:	3714      	adds	r7, #20
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr
 800e254:	24000000 	.word	0x24000000
 800e258:	10624dd3 	.word	0x10624dd3

0800e25c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e25c:	b480      	push	{r7}
 800e25e:	b085      	sub	sp, #20
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e264:	4b11      	ldr	r3, [pc, #68]	; (800e2ac <SDMMC_GetCmdError+0x50>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	4a11      	ldr	r2, [pc, #68]	; (800e2b0 <SDMMC_GetCmdError+0x54>)
 800e26a:	fba2 2303 	umull	r2, r3, r2, r3
 800e26e:	0a5b      	lsrs	r3, r3, #9
 800e270:	f241 3288 	movw	r2, #5000	; 0x1388
 800e274:	fb02 f303 	mul.w	r3, r2, r3
 800e278:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	1e5a      	subs	r2, r3, #1
 800e27e:	60fa      	str	r2, [r7, #12]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d102      	bne.n	800e28a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e284:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e288:	e009      	b.n	800e29e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e28e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e292:	2b00      	cmp	r3, #0
 800e294:	d0f1      	beq.n	800e27a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	4a06      	ldr	r2, [pc, #24]	; (800e2b4 <SDMMC_GetCmdError+0x58>)
 800e29a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800e29c:	2300      	movs	r3, #0
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3714      	adds	r7, #20
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a8:	4770      	bx	lr
 800e2aa:	bf00      	nop
 800e2ac:	24000000 	.word	0x24000000
 800e2b0:	10624dd3 	.word	0x10624dd3
 800e2b4:	002000c5 	.word	0x002000c5

0800e2b8 <__libc_init_array>:
 800e2b8:	b570      	push	{r4, r5, r6, lr}
 800e2ba:	4d0d      	ldr	r5, [pc, #52]	; (800e2f0 <__libc_init_array+0x38>)
 800e2bc:	4c0d      	ldr	r4, [pc, #52]	; (800e2f4 <__libc_init_array+0x3c>)
 800e2be:	1b64      	subs	r4, r4, r5
 800e2c0:	10a4      	asrs	r4, r4, #2
 800e2c2:	2600      	movs	r6, #0
 800e2c4:	42a6      	cmp	r6, r4
 800e2c6:	d109      	bne.n	800e2dc <__libc_init_array+0x24>
 800e2c8:	4d0b      	ldr	r5, [pc, #44]	; (800e2f8 <__libc_init_array+0x40>)
 800e2ca:	4c0c      	ldr	r4, [pc, #48]	; (800e2fc <__libc_init_array+0x44>)
 800e2cc:	f000 f82e 	bl	800e32c <_init>
 800e2d0:	1b64      	subs	r4, r4, r5
 800e2d2:	10a4      	asrs	r4, r4, #2
 800e2d4:	2600      	movs	r6, #0
 800e2d6:	42a6      	cmp	r6, r4
 800e2d8:	d105      	bne.n	800e2e6 <__libc_init_array+0x2e>
 800e2da:	bd70      	pop	{r4, r5, r6, pc}
 800e2dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2e0:	4798      	blx	r3
 800e2e2:	3601      	adds	r6, #1
 800e2e4:	e7ee      	b.n	800e2c4 <__libc_init_array+0xc>
 800e2e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2ea:	4798      	blx	r3
 800e2ec:	3601      	adds	r6, #1
 800e2ee:	e7f2      	b.n	800e2d6 <__libc_init_array+0x1e>
 800e2f0:	0800e3d0 	.word	0x0800e3d0
 800e2f4:	0800e3d0 	.word	0x0800e3d0
 800e2f8:	0800e3d0 	.word	0x0800e3d0
 800e2fc:	0800e3d4 	.word	0x0800e3d4

0800e300 <memcpy>:
 800e300:	440a      	add	r2, r1
 800e302:	4291      	cmp	r1, r2
 800e304:	f100 33ff 	add.w	r3, r0, #4294967295
 800e308:	d100      	bne.n	800e30c <memcpy+0xc>
 800e30a:	4770      	bx	lr
 800e30c:	b510      	push	{r4, lr}
 800e30e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e312:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e316:	4291      	cmp	r1, r2
 800e318:	d1f9      	bne.n	800e30e <memcpy+0xe>
 800e31a:	bd10      	pop	{r4, pc}

0800e31c <memset>:
 800e31c:	4402      	add	r2, r0
 800e31e:	4603      	mov	r3, r0
 800e320:	4293      	cmp	r3, r2
 800e322:	d100      	bne.n	800e326 <memset+0xa>
 800e324:	4770      	bx	lr
 800e326:	f803 1b01 	strb.w	r1, [r3], #1
 800e32a:	e7f9      	b.n	800e320 <memset+0x4>

0800e32c <_init>:
 800e32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e32e:	bf00      	nop
 800e330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e332:	bc08      	pop	{r3}
 800e334:	469e      	mov	lr, r3
 800e336:	4770      	bx	lr

0800e338 <_fini>:
 800e338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e33a:	bf00      	nop
 800e33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e33e:	bc08      	pop	{r3}
 800e340:	469e      	mov	lr, r3
 800e342:	4770      	bx	lr
