
STM32H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0a4  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800e370  0800e370  0001e370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e3f4  0800e3f4  0001e3f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e3fc  0800e3fc  0001e3fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e400  0800e400  0001e400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800e404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  0800e414  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  0800e474  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008fc  240000d0  0800e4d4  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240009cc  0800e4d4  000209cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040ab9  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ec9  00000000  00000000  00060bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024e0  00000000  00000000  00065a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002380  00000000  00000000  00067f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b9e5  00000000  00000000  0006a2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cc40  00000000  00000000  000a5cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00189a6f  00000000  00000000  000d2905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0025c374  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a4a8  00000000  00000000  0025c3c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d0 	.word	0x240000d0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800e358 	.word	0x0800e358

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000d4 	.word	0x240000d4
 8000308:	0800e358 	.word	0x0800e358

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96e 	b.w	8000600 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468c      	mov	ip, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	f040 8083 	bne.w	8000452 <__udivmoddi4+0x116>
 800034c:	428a      	cmp	r2, r1
 800034e:	4617      	mov	r7, r2
 8000350:	d947      	bls.n	80003e2 <__udivmoddi4+0xa6>
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	b142      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000358:	f1c2 0020 	rsb	r0, r2, #32
 800035c:	fa24 f000 	lsr.w	r0, r4, r0
 8000360:	4091      	lsls	r1, r2
 8000362:	4097      	lsls	r7, r2
 8000364:	ea40 0c01 	orr.w	ip, r0, r1
 8000368:	4094      	lsls	r4, r2
 800036a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800036e:	0c23      	lsrs	r3, r4, #16
 8000370:	fbbc f6f8 	udiv	r6, ip, r8
 8000374:	fa1f fe87 	uxth.w	lr, r7
 8000378:	fb08 c116 	mls	r1, r8, r6, ip
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f10e 	mul.w	r1, r6, lr
 8000384:	4299      	cmp	r1, r3
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x60>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 30ff 	add.w	r0, r6, #4294967295
 800038e:	f080 8119 	bcs.w	80005c4 <__udivmoddi4+0x288>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 8116 	bls.w	80005c4 <__udivmoddi4+0x288>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a4:	fb08 3310 	mls	r3, r8, r0, r3
 80003a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003ac:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x8c>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	f080 8105 	bcs.w	80005c8 <__udivmoddi4+0x28c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f240 8102 	bls.w	80005c8 <__udivmoddi4+0x28c>
 80003c4:	3802      	subs	r0, #2
 80003c6:	443c      	add	r4, r7
 80003c8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	2600      	movs	r6, #0
 80003d2:	b11d      	cbz	r5, 80003dc <__udivmoddi4+0xa0>
 80003d4:	40d4      	lsrs	r4, r2
 80003d6:	2300      	movs	r3, #0
 80003d8:	e9c5 4300 	strd	r4, r3, [r5]
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xaa>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f282 	clz	r2, r2
 80003ea:	2a00      	cmp	r2, #0
 80003ec:	d150      	bne.n	8000490 <__udivmoddi4+0x154>
 80003ee:	1bcb      	subs	r3, r1, r7
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f f887 	uxth.w	r8, r7
 80003f8:	2601      	movs	r6, #1
 80003fa:	fbb3 fcfe 	udiv	ip, r3, lr
 80003fe:	0c21      	lsrs	r1, r4, #16
 8000400:	fb0e 331c 	mls	r3, lr, ip, r3
 8000404:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000408:	fb08 f30c 	mul.w	r3, r8, ip
 800040c:	428b      	cmp	r3, r1
 800040e:	d907      	bls.n	8000420 <__udivmoddi4+0xe4>
 8000410:	1879      	adds	r1, r7, r1
 8000412:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0xe2>
 8000418:	428b      	cmp	r3, r1
 800041a:	f200 80e9 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 800041e:	4684      	mov	ip, r0
 8000420:	1ac9      	subs	r1, r1, r3
 8000422:	b2a3      	uxth	r3, r4
 8000424:	fbb1 f0fe 	udiv	r0, r1, lr
 8000428:	fb0e 1110 	mls	r1, lr, r0, r1
 800042c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000430:	fb08 f800 	mul.w	r8, r8, r0
 8000434:	45a0      	cmp	r8, r4
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x10c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x10a>
 8000440:	45a0      	cmp	r8, r4
 8000442:	f200 80d9 	bhi.w	80005f8 <__udivmoddi4+0x2bc>
 8000446:	4618      	mov	r0, r3
 8000448:	eba4 0408 	sub.w	r4, r4, r8
 800044c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000450:	e7bf      	b.n	80003d2 <__udivmoddi4+0x96>
 8000452:	428b      	cmp	r3, r1
 8000454:	d909      	bls.n	800046a <__udivmoddi4+0x12e>
 8000456:	2d00      	cmp	r5, #0
 8000458:	f000 80b1 	beq.w	80005be <__udivmoddi4+0x282>
 800045c:	2600      	movs	r6, #0
 800045e:	e9c5 0100 	strd	r0, r1, [r5]
 8000462:	4630      	mov	r0, r6
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	fab3 f683 	clz	r6, r3
 800046e:	2e00      	cmp	r6, #0
 8000470:	d14a      	bne.n	8000508 <__udivmoddi4+0x1cc>
 8000472:	428b      	cmp	r3, r1
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0x140>
 8000476:	4282      	cmp	r2, r0
 8000478:	f200 80b8 	bhi.w	80005ec <__udivmoddi4+0x2b0>
 800047c:	1a84      	subs	r4, r0, r2
 800047e:	eb61 0103 	sbc.w	r1, r1, r3
 8000482:	2001      	movs	r0, #1
 8000484:	468c      	mov	ip, r1
 8000486:	2d00      	cmp	r5, #0
 8000488:	d0a8      	beq.n	80003dc <__udivmoddi4+0xa0>
 800048a:	e9c5 4c00 	strd	r4, ip, [r5]
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0xa0>
 8000490:	f1c2 0320 	rsb	r3, r2, #32
 8000494:	fa20 f603 	lsr.w	r6, r0, r3
 8000498:	4097      	lsls	r7, r2
 800049a:	fa01 f002 	lsl.w	r0, r1, r2
 800049e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a2:	40d9      	lsrs	r1, r3
 80004a4:	4330      	orrs	r0, r6
 80004a6:	0c03      	lsrs	r3, r0, #16
 80004a8:	fbb1 f6fe 	udiv	r6, r1, lr
 80004ac:	fa1f f887 	uxth.w	r8, r7
 80004b0:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b8:	fb06 f108 	mul.w	r1, r6, r8
 80004bc:	4299      	cmp	r1, r3
 80004be:	fa04 f402 	lsl.w	r4, r4, r2
 80004c2:	d909      	bls.n	80004d8 <__udivmoddi4+0x19c>
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ca:	f080 808d 	bcs.w	80005e8 <__udivmoddi4+0x2ac>
 80004ce:	4299      	cmp	r1, r3
 80004d0:	f240 808a 	bls.w	80005e8 <__udivmoddi4+0x2ac>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	443b      	add	r3, r7
 80004d8:	1a5b      	subs	r3, r3, r1
 80004da:	b281      	uxth	r1, r0
 80004dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb00 f308 	mul.w	r3, r0, r8
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x1c4>
 80004f0:	1879      	adds	r1, r7, r1
 80004f2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004f6:	d273      	bcs.n	80005e0 <__udivmoddi4+0x2a4>
 80004f8:	428b      	cmp	r3, r1
 80004fa:	d971      	bls.n	80005e0 <__udivmoddi4+0x2a4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4439      	add	r1, r7
 8000500:	1acb      	subs	r3, r1, r3
 8000502:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000506:	e778      	b.n	80003fa <__udivmoddi4+0xbe>
 8000508:	f1c6 0c20 	rsb	ip, r6, #32
 800050c:	fa03 f406 	lsl.w	r4, r3, r6
 8000510:	fa22 f30c 	lsr.w	r3, r2, ip
 8000514:	431c      	orrs	r4, r3
 8000516:	fa20 f70c 	lsr.w	r7, r0, ip
 800051a:	fa01 f306 	lsl.w	r3, r1, r6
 800051e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000522:	fa21 f10c 	lsr.w	r1, r1, ip
 8000526:	431f      	orrs	r7, r3
 8000528:	0c3b      	lsrs	r3, r7, #16
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fa1f f884 	uxth.w	r8, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053a:	fb09 fa08 	mul.w	sl, r9, r8
 800053e:	458a      	cmp	sl, r1
 8000540:	fa02 f206 	lsl.w	r2, r2, r6
 8000544:	fa00 f306 	lsl.w	r3, r0, r6
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x220>
 800054a:	1861      	adds	r1, r4, r1
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	d248      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 8000552:	458a      	cmp	sl, r1
 8000554:	d946      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 8000556:	f1a9 0902 	sub.w	r9, r9, #2
 800055a:	4421      	add	r1, r4
 800055c:	eba1 010a 	sub.w	r1, r1, sl
 8000560:	b2bf      	uxth	r7, r7
 8000562:	fbb1 f0fe 	udiv	r0, r1, lr
 8000566:	fb0e 1110 	mls	r1, lr, r0, r1
 800056a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800056e:	fb00 f808 	mul.w	r8, r0, r8
 8000572:	45b8      	cmp	r8, r7
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x24a>
 8000576:	19e7      	adds	r7, r4, r7
 8000578:	f100 31ff 	add.w	r1, r0, #4294967295
 800057c:	d22e      	bcs.n	80005dc <__udivmoddi4+0x2a0>
 800057e:	45b8      	cmp	r8, r7
 8000580:	d92c      	bls.n	80005dc <__udivmoddi4+0x2a0>
 8000582:	3802      	subs	r0, #2
 8000584:	4427      	add	r7, r4
 8000586:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058a:	eba7 0708 	sub.w	r7, r7, r8
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	454f      	cmp	r7, r9
 8000594:	46c6      	mov	lr, r8
 8000596:	4649      	mov	r1, r9
 8000598:	d31a      	bcc.n	80005d0 <__udivmoddi4+0x294>
 800059a:	d017      	beq.n	80005cc <__udivmoddi4+0x290>
 800059c:	b15d      	cbz	r5, 80005b6 <__udivmoddi4+0x27a>
 800059e:	ebb3 020e 	subs.w	r2, r3, lr
 80005a2:	eb67 0701 	sbc.w	r7, r7, r1
 80005a6:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005aa:	40f2      	lsrs	r2, r6
 80005ac:	ea4c 0202 	orr.w	r2, ip, r2
 80005b0:	40f7      	lsrs	r7, r6
 80005b2:	e9c5 2700 	strd	r2, r7, [r5]
 80005b6:	2600      	movs	r6, #0
 80005b8:	4631      	mov	r1, r6
 80005ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005be:	462e      	mov	r6, r5
 80005c0:	4628      	mov	r0, r5
 80005c2:	e70b      	b.n	80003dc <__udivmoddi4+0xa0>
 80005c4:	4606      	mov	r6, r0
 80005c6:	e6e9      	b.n	800039c <__udivmoddi4+0x60>
 80005c8:	4618      	mov	r0, r3
 80005ca:	e6fd      	b.n	80003c8 <__udivmoddi4+0x8c>
 80005cc:	4543      	cmp	r3, r8
 80005ce:	d2e5      	bcs.n	800059c <__udivmoddi4+0x260>
 80005d0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d4:	eb69 0104 	sbc.w	r1, r9, r4
 80005d8:	3801      	subs	r0, #1
 80005da:	e7df      	b.n	800059c <__udivmoddi4+0x260>
 80005dc:	4608      	mov	r0, r1
 80005de:	e7d2      	b.n	8000586 <__udivmoddi4+0x24a>
 80005e0:	4660      	mov	r0, ip
 80005e2:	e78d      	b.n	8000500 <__udivmoddi4+0x1c4>
 80005e4:	4681      	mov	r9, r0
 80005e6:	e7b9      	b.n	800055c <__udivmoddi4+0x220>
 80005e8:	4666      	mov	r6, ip
 80005ea:	e775      	b.n	80004d8 <__udivmoddi4+0x19c>
 80005ec:	4630      	mov	r0, r6
 80005ee:	e74a      	b.n	8000486 <__udivmoddi4+0x14a>
 80005f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f4:	4439      	add	r1, r7
 80005f6:	e713      	b.n	8000420 <__udivmoddi4+0xe4>
 80005f8:	3802      	subs	r0, #2
 80005fa:	443c      	add	r4, r7
 80005fc:	e724      	b.n	8000448 <__udivmoddi4+0x10c>
 80005fe:	bf00      	nop

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f002 fc58 	bl	8002ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f83a 	bl	8000684 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000610:	f000 f8b2 	bl	8000778 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f001 f824 	bl	8001660 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000618:	f000 f8da 	bl	80007d0 <MX_ADC1_Init>
  MX_ADC2_Init();
 800061c:	f000 f950 	bl	80008c0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000620:	f000 f9b0 	bl	8000984 <MX_ADC3_Init>
  MX_DAC1_Init();
 8000624:	f000 fa1c 	bl	8000a60 <MX_DAC1_Init>
  MX_ETH_Init();
 8000628:	f000 fa4c 	bl	8000ac4 <MX_ETH_Init>
  MX_FDCAN1_Init();
 800062c:	f000 fa96 	bl	8000b5c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000630:	f000 faf8 	bl	8000c24 <MX_FDCAN2_Init>
  MX_I2C4_Init();
 8000634:	f000 fb5a 	bl	8000cec <MX_I2C4_Init>
  MX_LTDC_Init();
 8000638:	f000 fb98 	bl	8000d6c <MX_LTDC_Init>
  MX_OCTOSPI1_Init();
 800063c:	f000 fc48 	bl	8000ed0 <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 8000640:	f000 fcae 	bl	8000fa0 <MX_OCTOSPI2_Init>
  MX_SAI1_Init();
 8000644:	f000 fd32 	bl	80010ac <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8000648:	f000 fdee 	bl	8001228 <MX_SDMMC1_SD_Init>
  MX_TIM1_Init();
 800064c:	f000 fe10 	bl	8001270 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000650:	f000 fe9c 	bl	800138c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000654:	f000 ff0a 	bl	800146c <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8000658:	f000 ff62 	bl	8001520 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800065c:	f000 ffac 	bl	80015b8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000660:	f000 fff6 	bl	8001650 <MX_USB_OTG_HS_USB_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, USER_LED2_Pin);
 8000664:	2104      	movs	r1, #4
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <main+0x78>)
 8000668:	f005 fbeb 	bl	8005e42 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_7);
 800066c:	2180      	movs	r1, #128	; 0x80
 800066e:	4804      	ldr	r0, [pc, #16]	; (8000680 <main+0x7c>)
 8000670:	f005 fbe7 	bl	8005e42 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000674:	2064      	movs	r0, #100	; 0x64
 8000676:	f002 fcb3 	bl	8002fe0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, USER_LED2_Pin);
 800067a:	e7f3      	b.n	8000664 <main+0x60>
 800067c:	58020800 	.word	0x58020800
 8000680:	58020c00 	.word	0x58020c00

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b09c      	sub	sp, #112	; 0x70
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068e:	224c      	movs	r2, #76	; 0x4c
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f00d fe58 	bl	800e348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2220      	movs	r2, #32
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f00d fe52 	bl	800e348 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006a4:	2004      	movs	r0, #4
 80006a6:	f006 fecb 	bl	8007440 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006aa:	2300      	movs	r3, #0
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	4b30      	ldr	r3, [pc, #192]	; (8000770 <SystemClock_Config+0xec>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	4a2f      	ldr	r2, [pc, #188]	; (8000770 <SystemClock_Config+0xec>)
 80006b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006b8:	6193      	str	r3, [r2, #24]
 80006ba:	4b2d      	ldr	r3, [pc, #180]	; (8000770 <SystemClock_Config+0xec>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c6:	bf00      	nop
 80006c8:	4b29      	ldr	r3, [pc, #164]	; (8000770 <SystemClock_Config+0xec>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006d4:	d1f8      	bne.n	80006c8 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80006d6:	4b27      	ldr	r3, [pc, #156]	; (8000774 <SystemClock_Config+0xf0>)
 80006d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006da:	f023 0303 	bic.w	r3, r3, #3
 80006de:	4a25      	ldr	r2, [pc, #148]	; (8000774 <SystemClock_Config+0xf0>)
 80006e0:	f043 0302 	orr.w	r3, r3, #2
 80006e4:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006e6:	2321      	movs	r3, #33	; 0x21
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f4:	2302      	movs	r3, #2
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80006fc:	2305      	movs	r3, #5
 80006fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 110;
 8000700:	236e      	movs	r3, #110	; 0x6e
 8000702:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000704:	2301      	movs	r3, #1
 8000706:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000708:	2304      	movs	r3, #4
 800070a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800070c:	2302      	movs	r3, #2
 800070e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000710:	2308      	movs	r3, #8
 8000712:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000714:	2300      	movs	r3, #0
 8000716:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000720:	4618      	mov	r0, r3
 8000722:	f006 fee7 	bl	80074f4 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800072c:	f001 f970 	bl	8001a10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	233f      	movs	r3, #63	; 0x3f
 8000732:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	2303      	movs	r3, #3
 8000736:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800073c:	2308      	movs	r3, #8
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000740:	2340      	movs	r3, #64	; 0x40
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000744:	2340      	movs	r3, #64	; 0x40
 8000746:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800074c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800074e:	2340      	movs	r3, #64	; 0x40
 8000750:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2103      	movs	r1, #3
 8000756:	4618      	mov	r0, r3
 8000758:	f007 fa78 	bl	8007c4c <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000762:	f001 f955 	bl	8001a10 <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3770      	adds	r7, #112	; 0x70
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	58024800 	.word	0x58024800
 8000774:	58024400 	.word	0x58024400

08000778 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b0ae      	sub	sp, #184	; 0xb8
 800077c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	22b4      	movs	r2, #180	; 0xb4
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f00d fddf 	bl	800e348 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800078a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800078e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8000790:	2305      	movs	r3, #5
 8000792:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8000794:	2350      	movs	r3, #80	; 0x50
 8000796:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000798:	2305      	movs	r3, #5
 800079a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800079c:	2302      	movs	r3, #2
 800079e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007b0:	2300      	movs	r3, #0
 80007b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	4618      	mov	r0, r3
 80007ba:	f007 fdd3 	bl	8008364 <HAL_RCCEx_PeriphCLKConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 80007c4:	f001 f924 	bl	8001a10 <Error_Handler>
  }
}
 80007c8:	bf00      	nop
 80007ca:	37b8      	adds	r7, #184	; 0xb8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	; 0x30
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007e2:	463b      	mov	r3, r7
 80007e4:	2224      	movs	r2, #36	; 0x24
 80007e6:	2100      	movs	r1, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f00d fdad 	bl	800e348 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80007ee:	4b31      	ldr	r3, [pc, #196]	; (80008b4 <MX_ADC1_Init+0xe4>)
 80007f0:	4a31      	ldr	r2, [pc, #196]	; (80008b8 <MX_ADC1_Init+0xe8>)
 80007f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007f4:	4b2f      	ldr	r3, [pc, #188]	; (80008b4 <MX_ADC1_Init+0xe4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007fa:	4b2e      	ldr	r3, [pc, #184]	; (80008b4 <MX_ADC1_Init+0xe4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000800:	4b2c      	ldr	r3, [pc, #176]	; (80008b4 <MX_ADC1_Init+0xe4>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000806:	4b2b      	ldr	r3, [pc, #172]	; (80008b4 <MX_ADC1_Init+0xe4>)
 8000808:	2204      	movs	r2, #4
 800080a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800080c:	4b29      	ldr	r3, [pc, #164]	; (80008b4 <MX_ADC1_Init+0xe4>)
 800080e:	2200      	movs	r2, #0
 8000810:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000812:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <MX_ADC1_Init+0xe4>)
 8000814:	2200      	movs	r2, #0
 8000816:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000818:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <MX_ADC1_Init+0xe4>)
 800081a:	2201      	movs	r2, #1
 800081c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800081e:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <MX_ADC1_Init+0xe4>)
 8000820:	2200      	movs	r2, #0
 8000822:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000826:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <MX_ADC1_Init+0xe4>)
 8000828:	2200      	movs	r2, #0
 800082a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800082c:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <MX_ADC1_Init+0xe4>)
 800082e:	2200      	movs	r2, #0
 8000830:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000832:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <MX_ADC1_Init+0xe4>)
 8000834:	2200      	movs	r2, #0
 8000836:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000838:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <MX_ADC1_Init+0xe4>)
 800083a:	2200      	movs	r2, #0
 800083c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800083e:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <MX_ADC1_Init+0xe4>)
 8000840:	2200      	movs	r2, #0
 8000842:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000844:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <MX_ADC1_Init+0xe4>)
 8000846:	2200      	movs	r2, #0
 8000848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800084c:	4819      	ldr	r0, [pc, #100]	; (80008b4 <MX_ADC1_Init+0xe4>)
 800084e:	f002 fe5b 	bl	8003508 <HAL_ADC_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000858:	f001 f8da 	bl	8001a10 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000864:	4619      	mov	r1, r3
 8000866:	4813      	ldr	r0, [pc, #76]	; (80008b4 <MX_ADC1_Init+0xe4>)
 8000868:	f003 fe94 	bl	8004594 <HAL_ADCEx_MultiModeConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000872:	f001 f8cd 	bl	8001a10 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_ADC1_Init+0xec>)
 8000878:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800087a:	2306      	movs	r3, #6
 800087c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000882:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000886:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000888:	2304      	movs	r3, #4
 800088a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000896:	463b      	mov	r3, r7
 8000898:	4619      	mov	r1, r3
 800089a:	4806      	ldr	r0, [pc, #24]	; (80008b4 <MX_ADC1_Init+0xe4>)
 800089c:	f003 f83c 	bl	8003918 <HAL_ADC_ConfigChannel>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80008a6:	f001 f8b3 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	3730      	adds	r7, #48	; 0x30
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	24000518 	.word	0x24000518
 80008b8:	40022000 	.word	0x40022000
 80008bc:	04300002 	.word	0x04300002

080008c0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2224      	movs	r2, #36	; 0x24
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f00d fd3b 	bl	800e348 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80008d2:	4b2a      	ldr	r3, [pc, #168]	; (800097c <MX_ADC2_Init+0xbc>)
 80008d4:	4a2a      	ldr	r2, [pc, #168]	; (8000980 <MX_ADC2_Init+0xc0>)
 80008d6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008d8:	4b28      	ldr	r3, [pc, #160]	; (800097c <MX_ADC2_Init+0xbc>)
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80008de:	4b27      	ldr	r3, [pc, #156]	; (800097c <MX_ADC2_Init+0xbc>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008e4:	4b25      	ldr	r3, [pc, #148]	; (800097c <MX_ADC2_Init+0xbc>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ea:	4b24      	ldr	r3, [pc, #144]	; (800097c <MX_ADC2_Init+0xbc>)
 80008ec:	2204      	movs	r2, #4
 80008ee:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008f0:	4b22      	ldr	r3, [pc, #136]	; (800097c <MX_ADC2_Init+0xbc>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008f6:	4b21      	ldr	r3, [pc, #132]	; (800097c <MX_ADC2_Init+0xbc>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80008fc:	4b1f      	ldr	r3, [pc, #124]	; (800097c <MX_ADC2_Init+0xbc>)
 80008fe:	2201      	movs	r2, #1
 8000900:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000902:	4b1e      	ldr	r3, [pc, #120]	; (800097c <MX_ADC2_Init+0xbc>)
 8000904:	2200      	movs	r2, #0
 8000906:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800090a:	4b1c      	ldr	r3, [pc, #112]	; (800097c <MX_ADC2_Init+0xbc>)
 800090c:	2200      	movs	r2, #0
 800090e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000910:	4b1a      	ldr	r3, [pc, #104]	; (800097c <MX_ADC2_Init+0xbc>)
 8000912:	2200      	movs	r2, #0
 8000914:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <MX_ADC2_Init+0xbc>)
 8000918:	2200      	movs	r2, #0
 800091a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <MX_ADC2_Init+0xbc>)
 800091e:	2200      	movs	r2, #0
 8000920:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <MX_ADC2_Init+0xbc>)
 8000924:	2200      	movs	r2, #0
 8000926:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_ADC2_Init+0xbc>)
 800092a:	2200      	movs	r2, #0
 800092c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000930:	4812      	ldr	r0, [pc, #72]	; (800097c <MX_ADC2_Init+0xbc>)
 8000932:	f002 fde9 	bl	8003508 <HAL_ADC_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 800093c:	f001 f868 	bl	8001a10 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000940:	2301      	movs	r3, #1
 8000942:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000944:	2306      	movs	r3, #6
 8000946:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800094c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000950:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000952:	2304      	movs	r3, #4
 8000954:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800095a:	2300      	movs	r3, #0
 800095c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_ADC2_Init+0xbc>)
 8000966:	f002 ffd7 	bl	8003918 <HAL_ADC_ConfigChannel>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000970:	f001 f84e 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	3728      	adds	r7, #40	; 0x28
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	24000240 	.word	0x24000240
 8000980:	40022100 	.word	0x40022100

08000984 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2224      	movs	r2, #36	; 0x24
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f00d fcd9 	bl	800e348 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000996:	4b30      	ldr	r3, [pc, #192]	; (8000a58 <MX_ADC3_Init+0xd4>)
 8000998:	4a30      	ldr	r2, [pc, #192]	; (8000a5c <MX_ADC3_Init+0xd8>)
 800099a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800099c:	4b2e      	ldr	r3, [pc, #184]	; (8000a58 <MX_ADC3_Init+0xd4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	605a      	str	r2, [r3, #4]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80009a2:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <MX_ADC3_Init+0xd4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009a8:	4b2b      	ldr	r3, [pc, #172]	; (8000a58 <MX_ADC3_Init+0xd4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ae:	4b2a      	ldr	r3, [pc, #168]	; (8000a58 <MX_ADC3_Init+0xd4>)
 80009b0:	2204      	movs	r2, #4
 80009b2:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80009b4:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <MX_ADC3_Init+0xd4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80009ba:	4b27      	ldr	r3, [pc, #156]	; (8000a58 <MX_ADC3_Init+0xd4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80009c0:	4b25      	ldr	r3, [pc, #148]	; (8000a58 <MX_ADC3_Init+0xd4>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80009c6:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <MX_ADC3_Init+0xd4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ce:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <MX_ADC3_Init+0xd4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009d4:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <MX_ADC3_Init+0xd4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80009da:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <MX_ADC3_Init+0xd4>)
 80009dc:	2200      	movs	r2, #0
 80009de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80009e2:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <MX_ADC3_Init+0xd4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <MX_ADC3_Init+0xd4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_ADC3_Init+0xd4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009f4:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <MX_ADC3_Init+0xd4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <MX_ADC3_Init+0xd4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a02:	4815      	ldr	r0, [pc, #84]	; (8000a58 <MX_ADC3_Init+0xd4>)
 8000a04:	f002 fd80 	bl	8003508 <HAL_ADC_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000a0e:	f000 ffff 	bl	8001a10 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a12:	2301      	movs	r3, #1
 8000a14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a16:	2306      	movs	r3, #6
 8000a18:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a1e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a22:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a24:	2304      	movs	r3, #4
 8000a26:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_ADC3_Init+0xd4>)
 8000a42:	f002 ff69 	bl	8003918 <HAL_ADC_ConfigChannel>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8000a4c:	f000 ffe0 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	3728      	adds	r7, #40	; 0x28
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	24000588 	.word	0x24000588
 8000a5c:	58026000 	.word	0x58026000

08000a60 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2224      	movs	r2, #36	; 0x24
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f00d fc6b 	bl	800e348 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <MX_DAC1_Init+0x5c>)
 8000a74:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <MX_DAC1_Init+0x60>)
 8000a76:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a78:	4810      	ldr	r0, [pc, #64]	; (8000abc <MX_DAC1_Init+0x5c>)
 8000a7a:	f003 ff50 	bl	800491e <HAL_DAC_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000a84:	f000 ffc4 	bl	8001a10 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000a94:	2301      	movs	r3, #1
 8000a96:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2210      	movs	r2, #16
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	; (8000abc <MX_DAC1_Init+0x5c>)
 8000aa4:	f003 ff5e 	bl	8004964 <HAL_DAC_ConfigChannel>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000aae:	f000 ffaf 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	2400019c 	.word	0x2400019c
 8000ac0:	40007400 	.word	0x40007400

08000ac4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ac8:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <MX_ETH_Init+0x80>)
 8000aca:	4a1f      	ldr	r2, [pc, #124]	; (8000b48 <MX_ETH_Init+0x84>)
 8000acc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000ace:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <MX_ETH_Init+0x88>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ad4:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <MX_ETH_Init+0x88>)
 8000ad6:	2280      	movs	r2, #128	; 0x80
 8000ad8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000ada:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <MX_ETH_Init+0x88>)
 8000adc:	22e1      	movs	r2, #225	; 0xe1
 8000ade:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <MX_ETH_Init+0x88>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000ae6:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <MX_ETH_Init+0x88>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000aec:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <MX_ETH_Init+0x88>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000af2:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <MX_ETH_Init+0x80>)
 8000af4:	4a15      	ldr	r2, [pc, #84]	; (8000b4c <MX_ETH_Init+0x88>)
 8000af6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <MX_ETH_Init+0x80>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_ETH_Init+0x80>)
 8000b00:	4a13      	ldr	r2, [pc, #76]	; (8000b50 <MX_ETH_Init+0x8c>)
 8000b02:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_ETH_Init+0x80>)
 8000b06:	4a13      	ldr	r2, [pc, #76]	; (8000b54 <MX_ETH_Init+0x90>)
 8000b08:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_ETH_Init+0x80>)
 8000b0c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b10:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b12:	480c      	ldr	r0, [pc, #48]	; (8000b44 <MX_ETH_Init+0x80>)
 8000b14:	f004 f856 	bl	8004bc4 <HAL_ETH_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000b1e:	f000 ff77 	bl	8001a10 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b22:	2234      	movs	r2, #52	; 0x34
 8000b24:	2100      	movs	r1, #0
 8000b26:	480c      	ldr	r0, [pc, #48]	; (8000b58 <MX_ETH_Init+0x94>)
 8000b28:	f00d fc0e 	bl	800e348 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <MX_ETH_Init+0x94>)
 8000b2e:	2221      	movs	r2, #33	; 0x21
 8000b30:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_ETH_Init+0x94>)
 8000b34:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b38:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <MX_ETH_Init+0x94>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	2400080c 	.word	0x2400080c
 8000b48:	40028000 	.word	0x40028000
 8000b4c:	240000ec 	.word	0x240000ec
 8000b50:	24000070 	.word	0x24000070
 8000b54:	24000010 	.word	0x24000010
 8000b58:	24000894 	.word	0x24000894

08000b5c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000b60:	4b2e      	ldr	r3, [pc, #184]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000b62:	4a2f      	ldr	r2, [pc, #188]	; (8000c20 <MX_FDCAN1_Init+0xc4>)
 8000b64:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b66:	4b2d      	ldr	r3, [pc, #180]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000b6c:	4b2b      	ldr	r3, [pc, #172]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000b72:	4b2a      	ldr	r3, [pc, #168]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000b78:	4b28      	ldr	r3, [pc, #160]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000b7e:	4b27      	ldr	r3, [pc, #156]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000b84:	4b25      	ldr	r3, [pc, #148]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000b8a:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000b90:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000b92:	2202      	movs	r2, #2
 8000b94:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000b96:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000b98:	2202      	movs	r2, #2
 8000b9a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000ba2:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000ba8:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000bae:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000bb4:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000bce:	2204      	movs	r2, #4
 8000bd0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000bd2:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000bd8:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000bda:	2204      	movs	r2, #4
 8000bdc:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000be4:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000be6:	2204      	movs	r2, #4
 8000be8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000bfc:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000c04:	2204      	movs	r2, #4
 8000c06:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000c08:	4804      	ldr	r0, [pc, #16]	; (8000c1c <MX_FDCAN1_Init+0xc0>)
 8000c0a:	f004 fbf1 	bl	80053f0 <HAL_FDCAN_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000c14:	f000 fefc 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	24000688 	.word	0x24000688
 8000c20:	4000a000 	.word	0x4000a000

08000c24 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000c28:	4b2e      	ldr	r3, [pc, #184]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000c2a:	4a2f      	ldr	r2, [pc, #188]	; (8000ce8 <MX_FDCAN2_Init+0xc4>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000c34:	4b2b      	ldr	r3, [pc, #172]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000c3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000c40:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000c46:	4b27      	ldr	r3, [pc, #156]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000c4c:	4b25      	ldr	r3, [pc, #148]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000c52:	4b24      	ldr	r3, [pc, #144]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000c58:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000c5e:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000c60:	2202      	movs	r2, #2
 8000c62:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000c64:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000c70:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000c76:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000c7c:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000c96:	2204      	movs	r2, #4
 8000c98:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ca0:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000ca2:	2204      	movs	r2, #4
 8000ca4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000cae:	2204      	movs	r2, #4
 8000cb0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000ccc:	2204      	movs	r2, #4
 8000cce:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <MX_FDCAN2_Init+0xc0>)
 8000cd2:	f004 fb8d 	bl	80053f0 <HAL_FDCAN_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000cdc:	f000 fe98 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	240008c8 	.word	0x240008c8
 8000ce8:	4000a400 	.word	0x4000a400

08000cec <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <MX_I2C4_Init+0x74>)
 8000cf2:	4a1c      	ldr	r2, [pc, #112]	; (8000d64 <MX_I2C4_Init+0x78>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60404E72;
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <MX_I2C4_Init+0x74>)
 8000cf8:	4a1b      	ldr	r2, [pc, #108]	; (8000d68 <MX_I2C4_Init+0x7c>)
 8000cfa:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000cfc:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <MX_I2C4_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d02:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <MX_I2C4_Init+0x74>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d08:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <MX_I2C4_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000d0e:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MX_I2C4_Init+0x74>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <MX_I2C4_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_I2C4_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_I2C4_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000d26:	480e      	ldr	r0, [pc, #56]	; (8000d60 <MX_I2C4_Init+0x74>)
 8000d28:	f005 f8a6 	bl	8005e78 <HAL_I2C_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000d32:	f000 fe6d 	bl	8001a10 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d36:	2100      	movs	r1, #0
 8000d38:	4809      	ldr	r0, [pc, #36]	; (8000d60 <MX_I2C4_Init+0x74>)
 8000d3a:	f005 f92d 	bl	8005f98 <HAL_I2CEx_ConfigAnalogFilter>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000d44:	f000 fe64 	bl	8001a10 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_I2C4_Init+0x74>)
 8000d4c:	f005 f96f 	bl	800602e <HAL_I2CEx_ConfigDigitalFilter>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000d56:	f000 fe5b 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	24000104 	.word	0x24000104
 8000d64:	58001c00 	.word	0x58001c00
 8000d68:	60404e72 	.word	0x60404e72

08000d6c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b09a      	sub	sp, #104	; 0x68
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000d72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d76:	2234      	movs	r2, #52	; 0x34
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f00d fae4 	bl	800e348 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000d80:	463b      	mov	r3, r7
 8000d82:	2234      	movs	r2, #52	; 0x34
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f00d fade 	bl	800e348 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000d8c:	4b4e      	ldr	r3, [pc, #312]	; (8000ec8 <MX_LTDC_Init+0x15c>)
 8000d8e:	4a4f      	ldr	r2, [pc, #316]	; (8000ecc <MX_LTDC_Init+0x160>)
 8000d90:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000d92:	4b4d      	ldr	r3, [pc, #308]	; (8000ec8 <MX_LTDC_Init+0x15c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000d98:	4b4b      	ldr	r3, [pc, #300]	; (8000ec8 <MX_LTDC_Init+0x15c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000d9e:	4b4a      	ldr	r3, [pc, #296]	; (8000ec8 <MX_LTDC_Init+0x15c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000da4:	4b48      	ldr	r3, [pc, #288]	; (8000ec8 <MX_LTDC_Init+0x15c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000daa:	4b47      	ldr	r3, [pc, #284]	; (8000ec8 <MX_LTDC_Init+0x15c>)
 8000dac:	2207      	movs	r2, #7
 8000dae:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000db0:	4b45      	ldr	r3, [pc, #276]	; (8000ec8 <MX_LTDC_Init+0x15c>)
 8000db2:	2203      	movs	r2, #3
 8000db4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000db6:	4b44      	ldr	r3, [pc, #272]	; (8000ec8 <MX_LTDC_Init+0x15c>)
 8000db8:	220e      	movs	r2, #14
 8000dba:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000dbc:	4b42      	ldr	r3, [pc, #264]	; (8000ec8 <MX_LTDC_Init+0x15c>)
 8000dbe:	2205      	movs	r2, #5
 8000dc0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000dc2:	4b41      	ldr	r3, [pc, #260]	; (8000ec8 <MX_LTDC_Init+0x15c>)
 8000dc4:	f240 228e 	movw	r2, #654	; 0x28e
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000dca:	4b3f      	ldr	r3, [pc, #252]	; (8000ec8 <MX_LTDC_Init+0x15c>)
 8000dcc:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000dd0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000dd2:	4b3d      	ldr	r3, [pc, #244]	; (8000ec8 <MX_LTDC_Init+0x15c>)
 8000dd4:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000dd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000dda:	4b3b      	ldr	r3, [pc, #236]	; (8000ec8 <MX_LTDC_Init+0x15c>)
 8000ddc:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000de0:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000de2:	4b39      	ldr	r3, [pc, #228]	; (8000ec8 <MX_LTDC_Init+0x15c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000dea:	4b37      	ldr	r3, [pc, #220]	; (8000ec8 <MX_LTDC_Init+0x15c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000df2:	4b35      	ldr	r3, [pc, #212]	; (8000ec8 <MX_LTDC_Init+0x15c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000dfa:	4833      	ldr	r0, [pc, #204]	; (8000ec8 <MX_LTDC_Init+0x15c>)
 8000dfc:	f005 f964 	bl	80060c8 <HAL_LTDC_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000e06:	f000 fe03 	bl	8001a10 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000e26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e2a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000e2c:	2305      	movs	r3, #5
 8000e2e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000e4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e52:	2200      	movs	r2, #0
 8000e54:	4619      	mov	r1, r3
 8000e56:	481c      	ldr	r0, [pc, #112]	; (8000ec8 <MX_LTDC_Init+0x15c>)
 8000e58:	f005 fa06 	bl	8006268 <HAL_LTDC_ConfigLayer>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000e62:	f000 fdd5 	bl	8001a10 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e86:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000e88:	2305      	movs	r3, #5
 8000e8a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2201      	movs	r2, #1
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_LTDC_Init+0x15c>)
 8000eb2:	f005 f9d9 	bl	8006268 <HAL_LTDC_ConfigLayer>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000ebc:	f000 fda8 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	3768      	adds	r7, #104	; 0x68
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	240003d8 	.word	0x240003d8
 8000ecc:	50001000 	.word	0x50001000

08000ed0 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
 8000ee4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000ee6:	4b2b      	ldr	r3, [pc, #172]	; (8000f94 <MX_OCTOSPI1_Init+0xc4>)
 8000ee8:	4a2b      	ldr	r2, [pc, #172]	; (8000f98 <MX_OCTOSPI1_Init+0xc8>)
 8000eea:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000eec:	4b29      	ldr	r3, [pc, #164]	; (8000f94 <MX_OCTOSPI1_Init+0xc4>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000ef2:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <MX_OCTOSPI1_Init+0xc4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000ef8:	4b26      	ldr	r3, [pc, #152]	; (8000f94 <MX_OCTOSPI1_Init+0xc4>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000efe:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <MX_OCTOSPI1_Init+0xc4>)
 8000f00:	2220      	movs	r2, #32
 8000f02:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000f04:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <MX_OCTOSPI1_Init+0xc4>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000f0a:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <MX_OCTOSPI1_Init+0xc4>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000f10:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <MX_OCTOSPI1_Init+0xc4>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000f16:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <MX_OCTOSPI1_Init+0xc4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <MX_OCTOSPI1_Init+0xc4>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000f22:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <MX_OCTOSPI1_Init+0xc4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000f28:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <MX_OCTOSPI1_Init+0xc4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000f2e:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <MX_OCTOSPI1_Init+0xc4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.ClkChipSelectHighTime = 0;
 8000f34:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <MX_OCTOSPI1_Init+0xc4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <MX_OCTOSPI1_Init+0xc4>)
 8000f3c:	2208      	movs	r2, #8
 8000f3e:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.MaxTran = 0;
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <MX_OCTOSPI1_Init+0xc4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	63da      	str	r2, [r3, #60]	; 0x3c
  hospi1.Init.Refresh = 0;
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <MX_OCTOSPI1_Init+0xc4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000f4c:	4811      	ldr	r0, [pc, #68]	; (8000f94 <MX_OCTOSPI1_Init+0xc4>)
 8000f4e:	f005 fb63 	bl	8006618 <HAL_OSPI_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_OCTOSPI1_Init+0x8c>
  {
    Error_Handler();
 8000f58:	f000 fd5a 	bl	8001a10 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.DQSPort = 1;
 8000f60:	2301      	movs	r3, #1
 8000f62:	607b      	str	r3, [r7, #4]
  sOspiManagerCfg.NCSPort = 1;
 8000f64:	2301      	movs	r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000f68:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000f6c:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <MX_OCTOSPI1_Init+0xcc>)
 8000f70:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f72:	463b      	mov	r3, r7
 8000f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4806      	ldr	r0, [pc, #24]	; (8000f94 <MX_OCTOSPI1_Init+0xc4>)
 8000f7c:	f005 fc58 	bl	8006830 <HAL_OSPIM_Config>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_OCTOSPI1_Init+0xba>
  {
    Error_Handler();
 8000f86:	f000 fd43 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	240002b0 	.word	0x240002b0
 8000f98:	52005000 	.word	0x52005000
 8000f9c:	01000001 	.word	0x01000001

08000fa0 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000fa6:	f107 0310 	add.w	r3, r7, #16
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]
 8000fb6:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8000fb8:	463b      	mov	r3, r7
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8000fc4:	4b35      	ldr	r3, [pc, #212]	; (800109c <MX_OCTOSPI2_Init+0xfc>)
 8000fc6:	4a36      	ldr	r2, [pc, #216]	; (80010a0 <MX_OCTOSPI2_Init+0x100>)
 8000fc8:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 8000fca:	4b34      	ldr	r3, [pc, #208]	; (800109c <MX_OCTOSPI2_Init+0xfc>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000fd0:	4b32      	ldr	r3, [pc, #200]	; (800109c <MX_OCTOSPI2_Init+0xfc>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8000fd6:	4b31      	ldr	r3, [pc, #196]	; (800109c <MX_OCTOSPI2_Init+0xfc>)
 8000fd8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000fdc:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 8000fde:	4b2f      	ldr	r3, [pc, #188]	; (800109c <MX_OCTOSPI2_Init+0xfc>)
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 8000fe4:	4b2d      	ldr	r3, [pc, #180]	; (800109c <MX_OCTOSPI2_Init+0xfc>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000fea:	4b2c      	ldr	r3, [pc, #176]	; (800109c <MX_OCTOSPI2_Init+0xfc>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000ff0:	4b2a      	ldr	r3, [pc, #168]	; (800109c <MX_OCTOSPI2_Init+0xfc>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000ff6:	4b29      	ldr	r3, [pc, #164]	; (800109c <MX_OCTOSPI2_Init+0xfc>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 1;
 8000ffc:	4b27      	ldr	r3, [pc, #156]	; (800109c <MX_OCTOSPI2_Init+0xfc>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001002:	4b26      	ldr	r3, [pc, #152]	; (800109c <MX_OCTOSPI2_Init+0xfc>)
 8001004:	2200      	movs	r2, #0
 8001006:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001008:	4b24      	ldr	r3, [pc, #144]	; (800109c <MX_OCTOSPI2_Init+0xfc>)
 800100a:	2200      	movs	r2, #0
 800100c:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 800100e:	4b23      	ldr	r3, [pc, #140]	; (800109c <MX_OCTOSPI2_Init+0xfc>)
 8001010:	2200      	movs	r2, #0
 8001012:	631a      	str	r2, [r3, #48]	; 0x30
  hospi2.Init.ClkChipSelectHighTime = 0;
 8001014:	4b21      	ldr	r3, [pc, #132]	; (800109c <MX_OCTOSPI2_Init+0xfc>)
 8001016:	2200      	movs	r2, #0
 8001018:	635a      	str	r2, [r3, #52]	; 0x34
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800101a:	4b20      	ldr	r3, [pc, #128]	; (800109c <MX_OCTOSPI2_Init+0xfc>)
 800101c:	2208      	movs	r2, #8
 800101e:	639a      	str	r2, [r3, #56]	; 0x38
  hospi2.Init.MaxTran = 0;
 8001020:	4b1e      	ldr	r3, [pc, #120]	; (800109c <MX_OCTOSPI2_Init+0xfc>)
 8001022:	2200      	movs	r2, #0
 8001024:	63da      	str	r2, [r3, #60]	; 0x3c
  hospi2.Init.Refresh = 0;
 8001026:	4b1d      	ldr	r3, [pc, #116]	; (800109c <MX_OCTOSPI2_Init+0xfc>)
 8001028:	2200      	movs	r2, #0
 800102a:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 800102c:	481b      	ldr	r0, [pc, #108]	; (800109c <MX_OCTOSPI2_Init+0xfc>)
 800102e:	f005 faf3 	bl	8006618 <HAL_OSPI_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_OCTOSPI2_Init+0x9c>
  {
    Error_Handler();
 8001038:	f000 fcea 	bl	8001a10 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 800103c:	2302      	movs	r3, #2
 800103e:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.DQSPort = 2;
 8001040:	2302      	movs	r3, #2
 8001042:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.NCSPort = 2;
 8001044:	2302      	movs	r3, #2
 8001046:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_OCTOSPI2_Init+0x104>)
 800104a:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <MX_OCTOSPI2_Init+0x108>)
 800104e:	623b      	str	r3, [r7, #32]
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	f241 3288 	movw	r2, #5000	; 0x1388
 8001058:	4619      	mov	r1, r3
 800105a:	4810      	ldr	r0, [pc, #64]	; (800109c <MX_OCTOSPI2_Init+0xfc>)
 800105c:	f005 fbe8 	bl	8006830 <HAL_OSPIM_Config>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_OCTOSPI2_Init+0xca>
  {
    Error_Handler();
 8001066:	f000 fcd3 	bl	8001a10 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	603b      	str	r3, [r7, #0]
  sHyperBusCfg.AccessTime = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 8001072:	2302      	movs	r3, #2
 8001074:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800107a:	463b      	mov	r3, r7
 800107c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001080:	4619      	mov	r1, r3
 8001082:	4806      	ldr	r0, [pc, #24]	; (800109c <MX_OCTOSPI2_Init+0xfc>)
 8001084:	f005 fb86 	bl	8006794 <HAL_OSPI_HyperbusCfg>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_OCTOSPI2_Init+0xf2>
  {
    Error_Handler();
 800108e:	f000 fcbf 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	3728      	adds	r7, #40	; 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	24000968 	.word	0x24000968
 80010a0:	5200a000 	.word	0x5200a000
 80010a4:	00010002 	.word	0x00010002
 80010a8:	01000002 	.word	0x01000002

080010ac <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80010b0:	4b58      	ldr	r3, [pc, #352]	; (8001214 <MX_SAI1_Init+0x168>)
 80010b2:	4a59      	ldr	r2, [pc, #356]	; (8001218 <MX_SAI1_Init+0x16c>)
 80010b4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80010b6:	4b57      	ldr	r3, [pc, #348]	; (8001214 <MX_SAI1_Init+0x168>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODESLAVE_RX;
 80010bc:	4b55      	ldr	r3, [pc, #340]	; (8001214 <MX_SAI1_Init+0x168>)
 80010be:	2203      	movs	r2, #3
 80010c0:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 80010c2:	4b54      	ldr	r3, [pc, #336]	; (8001214 <MX_SAI1_Init+0x168>)
 80010c4:	2240      	movs	r2, #64	; 0x40
 80010c6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80010c8:	4b52      	ldr	r3, [pc, #328]	; (8001214 <MX_SAI1_Init+0x168>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80010ce:	4b51      	ldr	r3, [pc, #324]	; (8001214 <MX_SAI1_Init+0x168>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_SYNCHRONOUS;
 80010d4:	4b4f      	ldr	r3, [pc, #316]	; (8001214 <MX_SAI1_Init+0x168>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80010da:	4b4e      	ldr	r3, [pc, #312]	; (8001214 <MX_SAI1_Init+0x168>)
 80010dc:	2200      	movs	r2, #0
 80010de:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80010e0:	4b4c      	ldr	r3, [pc, #304]	; (8001214 <MX_SAI1_Init+0x168>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80010e6:	4b4b      	ldr	r3, [pc, #300]	; (8001214 <MX_SAI1_Init+0x168>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80010ec:	4b49      	ldr	r3, [pc, #292]	; (8001214 <MX_SAI1_Init+0x168>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80010f2:	4b48      	ldr	r3, [pc, #288]	; (8001214 <MX_SAI1_Init+0x168>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80010f8:	4b46      	ldr	r3, [pc, #280]	; (8001214 <MX_SAI1_Init+0x168>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 80010fe:	4b45      	ldr	r3, [pc, #276]	; (8001214 <MX_SAI1_Init+0x168>)
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 8001106:	4b43      	ldr	r3, [pc, #268]	; (8001214 <MX_SAI1_Init+0x168>)
 8001108:	2200      	movs	r2, #0
 800110a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800110c:	4b41      	ldr	r3, [pc, #260]	; (8001214 <MX_SAI1_Init+0x168>)
 800110e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001112:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001114:	4b3f      	ldr	r3, [pc, #252]	; (8001214 <MX_SAI1_Init+0x168>)
 8001116:	2208      	movs	r2, #8
 8001118:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800111a:	4b3e      	ldr	r3, [pc, #248]	; (8001214 <MX_SAI1_Init+0x168>)
 800111c:	2201      	movs	r2, #1
 800111e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001120:	4b3c      	ldr	r3, [pc, #240]	; (8001214 <MX_SAI1_Init+0x168>)
 8001122:	2200      	movs	r2, #0
 8001124:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001126:	4b3b      	ldr	r3, [pc, #236]	; (8001214 <MX_SAI1_Init+0x168>)
 8001128:	2200      	movs	r2, #0
 800112a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800112c:	4b39      	ldr	r3, [pc, #228]	; (8001214 <MX_SAI1_Init+0x168>)
 800112e:	2200      	movs	r2, #0
 8001130:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001132:	4b38      	ldr	r3, [pc, #224]	; (8001214 <MX_SAI1_Init+0x168>)
 8001134:	2200      	movs	r2, #0
 8001136:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001138:	4b36      	ldr	r3, [pc, #216]	; (8001214 <MX_SAI1_Init+0x168>)
 800113a:	2200      	movs	r2, #0
 800113c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 800113e:	4b35      	ldr	r3, [pc, #212]	; (8001214 <MX_SAI1_Init+0x168>)
 8001140:	2201      	movs	r2, #1
 8001142:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001144:	4b33      	ldr	r3, [pc, #204]	; (8001214 <MX_SAI1_Init+0x168>)
 8001146:	2200      	movs	r2, #0
 8001148:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800114a:	4832      	ldr	r0, [pc, #200]	; (8001214 <MX_SAI1_Init+0x168>)
 800114c:	f009 f99c 	bl	800a488 <HAL_SAI_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_SAI1_Init+0xae>
  {
    Error_Handler();
 8001156:	f000 fc5b 	bl	8001a10 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 800115a:	4b30      	ldr	r3, [pc, #192]	; (800121c <MX_SAI1_Init+0x170>)
 800115c:	4a30      	ldr	r2, [pc, #192]	; (8001220 <MX_SAI1_Init+0x174>)
 800115e:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001160:	4b2e      	ldr	r3, [pc, #184]	; (800121c <MX_SAI1_Init+0x170>)
 8001162:	2200      	movs	r2, #0
 8001164:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001166:	4b2d      	ldr	r3, [pc, #180]	; (800121c <MX_SAI1_Init+0x170>)
 8001168:	2200      	movs	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800116c:	4b2b      	ldr	r3, [pc, #172]	; (800121c <MX_SAI1_Init+0x170>)
 800116e:	2240      	movs	r2, #64	; 0x40
 8001170:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001172:	4b2a      	ldr	r3, [pc, #168]	; (800121c <MX_SAI1_Init+0x170>)
 8001174:	2200      	movs	r2, #0
 8001176:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001178:	4b28      	ldr	r3, [pc, #160]	; (800121c <MX_SAI1_Init+0x170>)
 800117a:	2200      	movs	r2, #0
 800117c:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 800117e:	4b27      	ldr	r3, [pc, #156]	; (800121c <MX_SAI1_Init+0x170>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001184:	4b25      	ldr	r3, [pc, #148]	; (800121c <MX_SAI1_Init+0x170>)
 8001186:	2200      	movs	r2, #0
 8001188:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800118a:	4b24      	ldr	r3, [pc, #144]	; (800121c <MX_SAI1_Init+0x170>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001190:	4b22      	ldr	r3, [pc, #136]	; (800121c <MX_SAI1_Init+0x170>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001196:	4b21      	ldr	r3, [pc, #132]	; (800121c <MX_SAI1_Init+0x170>)
 8001198:	4a22      	ldr	r2, [pc, #136]	; (8001224 <MX_SAI1_Init+0x178>)
 800119a:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800119c:	4b1f      	ldr	r3, [pc, #124]	; (800121c <MX_SAI1_Init+0x170>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80011a2:	4b1e      	ldr	r3, [pc, #120]	; (800121c <MX_SAI1_Init+0x170>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80011a8:	4b1c      	ldr	r3, [pc, #112]	; (800121c <MX_SAI1_Init+0x170>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80011ae:	4b1b      	ldr	r3, [pc, #108]	; (800121c <MX_SAI1_Init+0x170>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <MX_SAI1_Init+0x170>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <MX_SAI1_Init+0x170>)
 80011be:	2200      	movs	r2, #0
 80011c0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80011c2:	4b16      	ldr	r3, [pc, #88]	; (800121c <MX_SAI1_Init+0x170>)
 80011c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c8:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.FrameLength = 8;
 80011ca:	4b14      	ldr	r3, [pc, #80]	; (800121c <MX_SAI1_Init+0x170>)
 80011cc:	2208      	movs	r2, #8
 80011ce:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <MX_SAI1_Init+0x170>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_SAI1_Init+0x170>)
 80011d8:	2200      	movs	r2, #0
 80011da:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_SAI1_Init+0x170>)
 80011de:	2200      	movs	r2, #0
 80011e0:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <MX_SAI1_Init+0x170>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_SAI1_Init+0x170>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <MX_SAI1_Init+0x170>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_SAI1_Init+0x170>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <MX_SAI1_Init+0x170>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001200:	4806      	ldr	r0, [pc, #24]	; (800121c <MX_SAI1_Init+0x170>)
 8001202:	f009 f941 	bl	800a488 <HAL_SAI_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_SAI1_Init+0x164>
  {
    Error_Handler();
 800120c:	f000 fc00 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	24000774 	.word	0x24000774
 8001218:	40015804 	.word	0x40015804
 800121c:	24000480 	.word	0x24000480
 8001220:	40015824 	.word	0x40015824
 8001224:	0002ee00 	.word	0x0002ee00

08001228 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_SDMMC1_SD_Init+0x40>)
 800122e:	4a0f      	ldr	r2, [pc, #60]	; (800126c <MX_SDMMC1_SD_Init+0x44>)
 8001230:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <MX_SDMMC1_SD_Init+0x40>)
 8001234:	2200      	movs	r2, #0
 8001236:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MX_SDMMC1_SD_Init+0x40>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800123e:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <MX_SDMMC1_SD_Init+0x40>)
 8001240:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001244:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <MX_SDMMC1_SD_Init+0x40>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_SDMMC1_SD_Init+0x40>)
 800124e:	2200      	movs	r2, #0
 8001250:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_SDMMC1_SD_Init+0x40>)
 8001254:	f009 fb66 	bl	800a924 <HAL_SD_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 800125e:	f000 fbd7 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	24000310 	.word	0x24000310
 800126c:	52007000 	.word	0x52007000

08001270 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b098      	sub	sp, #96	; 0x60
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001276:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001282:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]
 8001292:	615a      	str	r2, [r3, #20]
 8001294:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2234      	movs	r2, #52	; 0x34
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f00d f853 	bl	800e348 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012a2:	4b38      	ldr	r3, [pc, #224]	; (8001384 <MX_TIM1_Init+0x114>)
 80012a4:	4a38      	ldr	r2, [pc, #224]	; (8001388 <MX_TIM1_Init+0x118>)
 80012a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012a8:	4b36      	ldr	r3, [pc, #216]	; (8001384 <MX_TIM1_Init+0x114>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ae:	4b35      	ldr	r3, [pc, #212]	; (8001384 <MX_TIM1_Init+0x114>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012b4:	4b33      	ldr	r3, [pc, #204]	; (8001384 <MX_TIM1_Init+0x114>)
 80012b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012bc:	4b31      	ldr	r3, [pc, #196]	; (8001384 <MX_TIM1_Init+0x114>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012c2:	4b30      	ldr	r3, [pc, #192]	; (8001384 <MX_TIM1_Init+0x114>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c8:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <MX_TIM1_Init+0x114>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012ce:	482d      	ldr	r0, [pc, #180]	; (8001384 <MX_TIM1_Init+0x114>)
 80012d0:	f00a fb90 	bl	800b9f4 <HAL_TIM_PWM_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80012da:	f000 fb99 	bl	8001a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012ee:	4619      	mov	r1, r3
 80012f0:	4824      	ldr	r0, [pc, #144]	; (8001384 <MX_TIM1_Init+0x114>)
 80012f2:	f00b f867 	bl	800c3c4 <HAL_TIMEx_MasterConfigSynchronization>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012fc:	f000 fb88 	bl	8001a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001300:	2360      	movs	r3, #96	; 0x60
 8001302:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001308:	2300      	movs	r3, #0
 800130a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001314:	2300      	movs	r3, #0
 8001316:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001318:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800131c:	220c      	movs	r2, #12
 800131e:	4619      	mov	r1, r3
 8001320:	4818      	ldr	r0, [pc, #96]	; (8001384 <MX_TIM1_Init+0x114>)
 8001322:	f00a fbbf 	bl	800baa4 <HAL_TIM_PWM_ConfigChannel>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 800132c:	f000 fb70 	bl	8001a10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001344:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001348:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001352:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	4619      	mov	r1, r3
 8001364:	4807      	ldr	r0, [pc, #28]	; (8001384 <MX_TIM1_Init+0x114>)
 8001366:	f00b f8c9 	bl	800c4fc <HAL_TIMEx_ConfigBreakDeadTime>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8001370:	f000 fb4e 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001374:	4803      	ldr	r0, [pc, #12]	; (8001384 <MX_TIM1_Init+0x114>)
 8001376:	f001 fad5 	bl	8002924 <HAL_TIM_MspPostInit>

}
 800137a:	bf00      	nop
 800137c:	3760      	adds	r7, #96	; 0x60
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	24000728 	.word	0x24000728
 8001388:	40010000 	.word	0x40010000

0800138c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	; 0x28
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800139e:	463b      	mov	r3, r7
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
 80013ac:	615a      	str	r2, [r3, #20]
 80013ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013b0:	4b2c      	ldr	r3, [pc, #176]	; (8001464 <MX_TIM4_Init+0xd8>)
 80013b2:	4a2d      	ldr	r2, [pc, #180]	; (8001468 <MX_TIM4_Init+0xdc>)
 80013b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80013b6:	4b2b      	ldr	r3, [pc, #172]	; (8001464 <MX_TIM4_Init+0xd8>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013bc:	4b29      	ldr	r3, [pc, #164]	; (8001464 <MX_TIM4_Init+0xd8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80013c2:	4b28      	ldr	r3, [pc, #160]	; (8001464 <MX_TIM4_Init+0xd8>)
 80013c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ca:	4b26      	ldr	r3, [pc, #152]	; (8001464 <MX_TIM4_Init+0xd8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d0:	4b24      	ldr	r3, [pc, #144]	; (8001464 <MX_TIM4_Init+0xd8>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013d6:	4823      	ldr	r0, [pc, #140]	; (8001464 <MX_TIM4_Init+0xd8>)
 80013d8:	f00a fb0c 	bl	800b9f4 <HAL_TIM_PWM_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80013e2:	f000 fb15 	bl	8001a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	4619      	mov	r1, r3
 80013f4:	481b      	ldr	r0, [pc, #108]	; (8001464 <MX_TIM4_Init+0xd8>)
 80013f6:	f00a ffe5 	bl	800c3c4 <HAL_TIMEx_MasterConfigSynchronization>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001400:	f000 fb06 	bl	8001a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001404:	2360      	movs	r3, #96	; 0x60
 8001406:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800140c:	2300      	movs	r3, #0
 800140e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001414:	463b      	mov	r3, r7
 8001416:	2204      	movs	r2, #4
 8001418:	4619      	mov	r1, r3
 800141a:	4812      	ldr	r0, [pc, #72]	; (8001464 <MX_TIM4_Init+0xd8>)
 800141c:	f00a fb42 	bl	800baa4 <HAL_TIM_PWM_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001426:	f000 faf3 	bl	8001a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800142a:	463b      	mov	r3, r7
 800142c:	2208      	movs	r2, #8
 800142e:	4619      	mov	r1, r3
 8001430:	480c      	ldr	r0, [pc, #48]	; (8001464 <MX_TIM4_Init+0xd8>)
 8001432:	f00a fb37 	bl	800baa4 <HAL_TIM_PWM_ConfigChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800143c:	f000 fae8 	bl	8001a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001440:	463b      	mov	r3, r7
 8001442:	220c      	movs	r2, #12
 8001444:	4619      	mov	r1, r3
 8001446:	4807      	ldr	r0, [pc, #28]	; (8001464 <MX_TIM4_Init+0xd8>)
 8001448:	f00a fb2c 	bl	800baa4 <HAL_TIM_PWM_ConfigChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8001452:	f000 fadd 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001456:	4803      	ldr	r0, [pc, #12]	; (8001464 <MX_TIM4_Init+0xd8>)
 8001458:	f001 fa64 	bl	8002924 <HAL_TIM_MspPostInit>

}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	; 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	24000150 	.word	0x24000150
 8001468:	40000800 	.word	0x40000800

0800146c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800147e:	463b      	mov	r3, r7
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
 800148c:	615a      	str	r2, [r3, #20]
 800148e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001490:	4b21      	ldr	r3, [pc, #132]	; (8001518 <MX_TIM5_Init+0xac>)
 8001492:	4a22      	ldr	r2, [pc, #136]	; (800151c <MX_TIM5_Init+0xb0>)
 8001494:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001496:	4b20      	ldr	r3, [pc, #128]	; (8001518 <MX_TIM5_Init+0xac>)
 8001498:	2200      	movs	r2, #0
 800149a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149c:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <MX_TIM5_Init+0xac>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80014a2:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <MX_TIM5_Init+0xac>)
 80014a4:	f04f 32ff 	mov.w	r2, #4294967295
 80014a8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014aa:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <MX_TIM5_Init+0xac>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <MX_TIM5_Init+0xac>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80014b6:	4818      	ldr	r0, [pc, #96]	; (8001518 <MX_TIM5_Init+0xac>)
 80014b8:	f00a fa9c 	bl	800b9f4 <HAL_TIM_PWM_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80014c2:	f000 faa5 	bl	8001a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014ce:	f107 031c 	add.w	r3, r7, #28
 80014d2:	4619      	mov	r1, r3
 80014d4:	4810      	ldr	r0, [pc, #64]	; (8001518 <MX_TIM5_Init+0xac>)
 80014d6:	f00a ff75 	bl	800c3c4 <HAL_TIMEx_MasterConfigSynchronization>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80014e0:	f000 fa96 	bl	8001a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e4:	2360      	movs	r3, #96	; 0x60
 80014e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014f4:	463b      	mov	r3, r7
 80014f6:	2200      	movs	r2, #0
 80014f8:	4619      	mov	r1, r3
 80014fa:	4807      	ldr	r0, [pc, #28]	; (8001518 <MX_TIM5_Init+0xac>)
 80014fc:	f00a fad2 	bl	800baa4 <HAL_TIM_PWM_ConfigChannel>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001506:	f000 fa83 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800150a:	4803      	ldr	r0, [pc, #12]	; (8001518 <MX_TIM5_Init+0xac>)
 800150c:	f001 fa0a 	bl	8002924 <HAL_TIM_MspPostInit>

}
 8001510:	bf00      	nop
 8001512:	3728      	adds	r7, #40	; 0x28
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	2400038c 	.word	0x2400038c
 800151c:	40000c00 	.word	0x40000c00

08001520 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001524:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <MX_USART1_UART_Init+0x90>)
 8001526:	4a23      	ldr	r2, [pc, #140]	; (80015b4 <MX_USART1_UART_Init+0x94>)
 8001528:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800152a:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <MX_USART1_UART_Init+0x90>)
 800152c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001530:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001532:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <MX_USART1_UART_Init+0x90>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001538:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <MX_USART1_UART_Init+0x90>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800153e:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <MX_USART1_UART_Init+0x90>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001544:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <MX_USART1_UART_Init+0x90>)
 8001546:	220c      	movs	r2, #12
 8001548:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154a:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <MX_USART1_UART_Init+0x90>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001550:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <MX_USART1_UART_Init+0x90>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001556:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <MX_USART1_UART_Init+0x90>)
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800155c:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <MX_USART1_UART_Init+0x90>)
 800155e:	2200      	movs	r2, #0
 8001560:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001562:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <MX_USART1_UART_Init+0x90>)
 8001564:	2200      	movs	r2, #0
 8001566:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001568:	4811      	ldr	r0, [pc, #68]	; (80015b0 <MX_USART1_UART_Init+0x90>)
 800156a:	f00b f867 	bl	800c63c <HAL_UART_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001574:	f000 fa4c 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001578:	2100      	movs	r1, #0
 800157a:	480d      	ldr	r0, [pc, #52]	; (80015b0 <MX_USART1_UART_Init+0x90>)
 800157c:	f00c f8fa 	bl	800d774 <HAL_UARTEx_SetTxFifoThreshold>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001586:	f000 fa43 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800158a:	2100      	movs	r1, #0
 800158c:	4808      	ldr	r0, [pc, #32]	; (80015b0 <MX_USART1_UART_Init+0x90>)
 800158e:	f00c f92f 	bl	800d7f0 <HAL_UARTEx_SetRxFifoThreshold>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001598:	f000 fa3a 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800159c:	4804      	ldr	r0, [pc, #16]	; (80015b0 <MX_USART1_UART_Init+0x90>)
 800159e:	f00c f8b0 	bl	800d702 <HAL_UARTEx_DisableFifoMode>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015a8:	f000 fa32 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	240005f8 	.word	0x240005f8
 80015b4:	40011000 	.word	0x40011000

080015b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015bc:	4b22      	ldr	r3, [pc, #136]	; (8001648 <MX_USART3_UART_Init+0x90>)
 80015be:	4a23      	ldr	r2, [pc, #140]	; (800164c <MX_USART3_UART_Init+0x94>)
 80015c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015c2:	4b21      	ldr	r3, [pc, #132]	; (8001648 <MX_USART3_UART_Init+0x90>)
 80015c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015ca:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <MX_USART3_UART_Init+0x90>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015d0:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <MX_USART3_UART_Init+0x90>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <MX_USART3_UART_Init+0x90>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015dc:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <MX_USART3_UART_Init+0x90>)
 80015de:	220c      	movs	r2, #12
 80015e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <MX_USART3_UART_Init+0x90>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <MX_USART3_UART_Init+0x90>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <MX_USART3_UART_Init+0x90>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <MX_USART3_UART_Init+0x90>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <MX_USART3_UART_Init+0x90>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001600:	4811      	ldr	r0, [pc, #68]	; (8001648 <MX_USART3_UART_Init+0x90>)
 8001602:	f00b f81b 	bl	800c63c <HAL_UART_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800160c:	f000 fa00 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001610:	2100      	movs	r1, #0
 8001612:	480d      	ldr	r0, [pc, #52]	; (8001648 <MX_USART3_UART_Init+0x90>)
 8001614:	f00c f8ae 	bl	800d774 <HAL_UARTEx_SetTxFifoThreshold>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800161e:	f000 f9f7 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001622:	2100      	movs	r1, #0
 8001624:	4808      	ldr	r0, [pc, #32]	; (8001648 <MX_USART3_UART_Init+0x90>)
 8001626:	f00c f8e3 	bl	800d7f0 <HAL_UARTEx_SetRxFifoThreshold>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001630:	f000 f9ee 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001634:	4804      	ldr	r0, [pc, #16]	; (8001648 <MX_USART3_UART_Init+0x90>)
 8001636:	f00c f864 	bl	800d702 <HAL_UARTEx_DisableFifoMode>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001640:	f000 f9e6 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	240001b0 	.word	0x240001b0
 800164c:	40004800 	.word	0x40004800

08001650 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b090      	sub	sp, #64	; 0x40
 8001664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001666:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001676:	4bc0      	ldr	r3, [pc, #768]	; (8001978 <MX_GPIO_Init+0x318>)
 8001678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800167c:	4abe      	ldr	r2, [pc, #760]	; (8001978 <MX_GPIO_Init+0x318>)
 800167e:	f043 0302 	orr.w	r3, r3, #2
 8001682:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001686:	4bbc      	ldr	r3, [pc, #752]	; (8001978 <MX_GPIO_Init+0x318>)
 8001688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28
 8001692:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001694:	4bb8      	ldr	r3, [pc, #736]	; (8001978 <MX_GPIO_Init+0x318>)
 8001696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800169a:	4ab7      	ldr	r2, [pc, #732]	; (8001978 <MX_GPIO_Init+0x318>)
 800169c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016a4:	4bb4      	ldr	r3, [pc, #720]	; (8001978 <MX_GPIO_Init+0x318>)
 80016a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b2:	4bb1      	ldr	r3, [pc, #708]	; (8001978 <MX_GPIO_Init+0x318>)
 80016b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b8:	4aaf      	ldr	r2, [pc, #700]	; (8001978 <MX_GPIO_Init+0x318>)
 80016ba:	f043 0308 	orr.w	r3, r3, #8
 80016be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c2:	4bad      	ldr	r3, [pc, #692]	; (8001978 <MX_GPIO_Init+0x318>)
 80016c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c8:	f003 0308 	and.w	r3, r3, #8
 80016cc:	623b      	str	r3, [r7, #32]
 80016ce:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d0:	4ba9      	ldr	r3, [pc, #676]	; (8001978 <MX_GPIO_Init+0x318>)
 80016d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d6:	4aa8      	ldr	r2, [pc, #672]	; (8001978 <MX_GPIO_Init+0x318>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e0:	4ba5      	ldr	r3, [pc, #660]	; (8001978 <MX_GPIO_Init+0x318>)
 80016e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	61fb      	str	r3, [r7, #28]
 80016ec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ee:	4ba2      	ldr	r3, [pc, #648]	; (8001978 <MX_GPIO_Init+0x318>)
 80016f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f4:	4aa0      	ldr	r2, [pc, #640]	; (8001978 <MX_GPIO_Init+0x318>)
 80016f6:	f043 0310 	orr.w	r3, r3, #16
 80016fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016fe:	4b9e      	ldr	r3, [pc, #632]	; (8001978 <MX_GPIO_Init+0x318>)
 8001700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001704:	f003 0310 	and.w	r3, r3, #16
 8001708:	61bb      	str	r3, [r7, #24]
 800170a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800170c:	4b9a      	ldr	r3, [pc, #616]	; (8001978 <MX_GPIO_Init+0x318>)
 800170e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001712:	4a99      	ldr	r2, [pc, #612]	; (8001978 <MX_GPIO_Init+0x318>)
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800171c:	4b96      	ldr	r3, [pc, #600]	; (8001978 <MX_GPIO_Init+0x318>)
 800171e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800172a:	4b93      	ldr	r3, [pc, #588]	; (8001978 <MX_GPIO_Init+0x318>)
 800172c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001730:	4a91      	ldr	r2, [pc, #580]	; (8001978 <MX_GPIO_Init+0x318>)
 8001732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001736:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800173a:	4b8f      	ldr	r3, [pc, #572]	; (8001978 <MX_GPIO_Init+0x318>)
 800173c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001748:	4b8b      	ldr	r3, [pc, #556]	; (8001978 <MX_GPIO_Init+0x318>)
 800174a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174e:	4a8a      	ldr	r2, [pc, #552]	; (8001978 <MX_GPIO_Init+0x318>)
 8001750:	f043 0320 	orr.w	r3, r3, #32
 8001754:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001758:	4b87      	ldr	r3, [pc, #540]	; (8001978 <MX_GPIO_Init+0x318>)
 800175a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175e:	f003 0320 	and.w	r3, r3, #32
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001766:	4b84      	ldr	r3, [pc, #528]	; (8001978 <MX_GPIO_Init+0x318>)
 8001768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176c:	4a82      	ldr	r2, [pc, #520]	; (8001978 <MX_GPIO_Init+0x318>)
 800176e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001772:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001776:	4b80      	ldr	r3, [pc, #512]	; (8001978 <MX_GPIO_Init+0x318>)
 8001778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800177c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001784:	4b7c      	ldr	r3, [pc, #496]	; (8001978 <MX_GPIO_Init+0x318>)
 8001786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800178a:	4a7b      	ldr	r2, [pc, #492]	; (8001978 <MX_GPIO_Init+0x318>)
 800178c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001790:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001794:	4b78      	ldr	r3, [pc, #480]	; (8001978 <MX_GPIO_Init+0x318>)
 8001796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800179a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Detectn_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	f240 4102 	movw	r1, #1026	; 0x402
 80017a8:	4874      	ldr	r0, [pc, #464]	; (800197c <MX_GPIO_Init+0x31c>)
 80017aa:	f004 fb31 	bl	8005e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 61d1 	mov.w	r1, #1672	; 0x688
 80017b4:	4872      	ldr	r0, [pc, #456]	; (8001980 <MX_GPIO_Init+0x320>)
 80017b6:	f004 fb2b 	bl	8005e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin|ARD_D4_Pin
 80017ba:	2200      	movs	r2, #0
 80017bc:	f248 1138 	movw	r1, #33080	; 0x8138
 80017c0:	4870      	ldr	r0, [pc, #448]	; (8001984 <MX_GPIO_Init+0x324>)
 80017c2:	f004 fb25 	bl	8005e10 <HAL_GPIO_WritePin>
                          |ARD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USER_LED2_Pin|USER_LED1_Pin, GPIO_PIN_RESET);
 80017c6:	2200      	movs	r2, #0
 80017c8:	210c      	movs	r1, #12
 80017ca:	486f      	ldr	r0, [pc, #444]	; (8001988 <MX_GPIO_Init+0x328>)
 80017cc:	f004 fb20 	bl	8005e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STMOD_20_GPIO_Port, STMOD_20_Pin, GPIO_PIN_RESET);
 80017d0:	2200      	movs	r2, #0
 80017d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017d6:	486d      	ldr	r0, [pc, #436]	; (800198c <MX_GPIO_Init+0x32c>)
 80017d8:	f004 fb1a 	bl	8005e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LCD_RST_Pin|USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80017dc:	2200      	movs	r2, #0
 80017de:	2160      	movs	r1, #96	; 0x60
 80017e0:	486b      	ldr	r0, [pc, #428]	; (8001990 <MX_GPIO_Init+0x330>)
 80017e2:	f004 fb15 	bl	8005e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Detectn_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = Detectn_Pin|LCD_DISP_Pin;
 80017e6:	f240 4302 	movw	r3, #1026	; 0x402
 80017ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ec:	2301      	movs	r3, #1
 80017ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017fc:	4619      	mov	r1, r3
 80017fe:	485f      	ldr	r0, [pc, #380]	; (800197c <MX_GPIO_Init+0x31c>)
 8001800:	f004 f95e 	bl	8005ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI4_D2_Pin SAI4_CK2_Pin */
  GPIO_InitStruct.Pin = SAI4_D2_Pin|SAI4_CK2_Pin;
 8001804:	2330      	movs	r3, #48	; 0x30
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2300      	movs	r3, #0
 8001812:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001814:	230a      	movs	r3, #10
 8001816:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001818:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800181c:	4619      	mov	r1, r3
 800181e:	4858      	ldr	r0, [pc, #352]	; (8001980 <MX_GPIO_Init+0x320>)
 8001820:	f004 f94e 	bl	8005ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin STMOD_17_Pin STMOD_19_Pin STMOD_18_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin;
 8001824:	f44f 63d1 	mov.w	r3, #1672	; 0x688
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182a:	2301      	movs	r3, #1
 800182c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001836:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800183a:	4619      	mov	r1, r3
 800183c:	4850      	ldr	r0, [pc, #320]	; (8001980 <MX_GPIO_Init+0x320>)
 800183e:	f004 f93f 	bl	8005ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_OVCR_Pin CTP_INT_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin|CTP_INT_Pin;
 8001842:	f242 0304 	movw	r3, #8196	; 0x2004
 8001846:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001848:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800184c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001852:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001856:	4619      	mov	r1, r3
 8001858:	484a      	ldr	r0, [pc, #296]	; (8001984 <MX_GPIO_Init+0x324>)
 800185a:	f004 f931 	bl	8005ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Blue_button_B2_used_for_wakeup_Pin */
  GPIO_InitStruct.Pin = Blue_button_B2_used_for_wakeup_Pin;
 800185e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001864:	2300      	movs	r3, #0
 8001866:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Blue_button_B2_used_for_wakeup_GPIO_Port, &GPIO_InitStruct);
 800186c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001870:	4619      	mov	r1, r3
 8001872:	4845      	ldr	r0, [pc, #276]	; (8001988 <MX_GPIO_Init+0x328>)
 8001874:	f004 f924 	bl	8005ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800188a:	230a      	movs	r3, #10
 800188c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800188e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001892:	4619      	mov	r1, r3
 8001894:	483f      	ldr	r0, [pc, #252]	; (8001994 <MX_GPIO_Init+0x334>)
 8001896:	f004 f913 	bl	8005ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_CTRL_Pin ARD_D7_Pin MEMS_LED_Pin ARD_D4_Pin
                           ARD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin|ARD_D4_Pin
 800189a:	f248 1338 	movw	r3, #33080	; 0x8138
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a0:	2301      	movs	r3, #1
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2300      	movs	r3, #0
 80018aa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b0:	4619      	mov	r1, r3
 80018b2:	4834      	ldr	r0, [pc, #208]	; (8001984 <MX_GPIO_Init+0x324>)
 80018b4:	f004 f904 	bl	8005ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80018b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018be:	2300      	movs	r3, #0
 80018c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ca:	4619      	mov	r1, r3
 80018cc:	4831      	ldr	r0, [pc, #196]	; (8001994 <MX_GPIO_Init+0x334>)
 80018ce:	f004 f8f7 	bl	8005ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80018d2:	2320      	movs	r3, #32
 80018d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80018e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e4:	4619      	mov	r1, r3
 80018e6:	4829      	ldr	r0, [pc, #164]	; (800198c <MX_GPIO_Init+0x32c>)
 80018e8:	f004 f8ea 	bl	8005ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED2_Pin USER_LED1_Pin */
  GPIO_InitStruct.Pin = USER_LED2_Pin|USER_LED1_Pin;
 80018ec:	230c      	movs	r3, #12
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f0:	2301      	movs	r3, #1
 80018f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	2300      	movs	r3, #0
 80018fa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001900:	4619      	mov	r1, r3
 8001902:	4821      	ldr	r0, [pc, #132]	; (8001988 <MX_GPIO_Init+0x328>)
 8001904:	f004 f8dc 	bl	8005ac0 <HAL_GPIO_Init>
  /*Configure GPIO pins : EXT GPIOD pin 7 led */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190c:	2301      	movs	r3, #1
 800190e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001918:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800191c:	4619      	mov	r1, r3
 800191e:	4817      	ldr	r0, [pc, #92]	; (800197c <MX_GPIO_Init+0x31c>)
 8001920:	f004 f8ce 	bl	8005ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI5_MISO_Pin */
  GPIO_InitStruct.Pin = SPI5_MISO_Pin;
 8001924:	2380      	movs	r3, #128	; 0x80
 8001926:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001930:	2300      	movs	r3, #0
 8001932:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001934:	2305      	movs	r3, #5
 8001936:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI5_MISO_GPIO_Port, &GPIO_InitStruct);
 8001938:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800193c:	4619      	mov	r1, r3
 800193e:	4814      	ldr	r0, [pc, #80]	; (8001990 <MX_GPIO_Init+0x330>)
 8001940:	f004 f8be 	bl	8005ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_MOSI_Pin;
 8001944:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2300      	movs	r3, #0
 8001954:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001956:	2305      	movs	r3, #5
 8001958:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI5_MOSI_GPIO_Port, &GPIO_InitStruct);
 800195a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800195e:	4619      	mov	r1, r3
 8001960:	480a      	ldr	r0, [pc, #40]	; (800198c <MX_GPIO_Init+0x32c>)
 8001962:	f004 f8ad 	bl	8005ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_Int_Pin */
  GPIO_InitStruct.Pin = Audio_Int_Pin;
 8001966:	f44f 7380 	mov.w	r3, #256	; 0x100
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800196c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001970:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	637b      	str	r3, [r7, #52]	; 0x34
 8001976:	e00f      	b.n	8001998 <MX_GPIO_Init+0x338>
 8001978:	58024400 	.word	0x58024400
 800197c:	58020c00 	.word	0x58020c00
 8001980:	58021000 	.word	0x58021000
 8001984:	58021800 	.word	0x58021800
 8001988:	58020800 	.word	0x58020800
 800198c:	58021400 	.word	0x58021400
 8001990:	58021c00 	.word	0x58021c00
 8001994:	58020000 	.word	0x58020000
  HAL_GPIO_Init(Audio_Int_GPIO_Port, &GPIO_InitStruct);
 8001998:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800199c:	4619      	mov	r1, r3
 800199e:	4819      	ldr	r0, [pc, #100]	; (8001a04 <MX_GPIO_Init+0x3a4>)
 80019a0:	f004 f88e 	bl	8005ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_20_Pin */
  GPIO_InitStruct.Pin = STMOD_20_Pin;
 80019a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019aa:	2301      	movs	r3, #1
 80019ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	2300      	movs	r3, #0
 80019b4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(STMOD_20_GPIO_Port, &GPIO_InitStruct);
 80019b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ba:	4619      	mov	r1, r3
 80019bc:	4812      	ldr	r0, [pc, #72]	; (8001a08 <MX_GPIO_Init+0x3a8>)
 80019be:	f004 f87f 	bl	8005ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_11_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_11_INT_Pin;
 80019c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(STMOD_11_INT_GPIO_Port, &GPIO_InitStruct);
 80019d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019d6:	4619      	mov	r1, r3
 80019d8:	480c      	ldr	r0, [pc, #48]	; (8001a0c <MX_GPIO_Init+0x3ac>)
 80019da:	f004 f871 	bl	8005ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|USB_FS_PWR_EN_Pin;
 80019de:	2360      	movs	r3, #96	; 0x60
 80019e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e2:	2301      	movs	r3, #1
 80019e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019f2:	4619      	mov	r1, r3
 80019f4:	4805      	ldr	r0, [pc, #20]	; (8001a0c <MX_GPIO_Init+0x3ac>)
 80019f6:	f004 f863 	bl	8005ac0 <HAL_GPIO_Init>

}
 80019fa:	bf00      	nop
 80019fc:	3740      	adds	r7, #64	; 0x40
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	58021000 	.word	0x58021000
 8001a08:	58021400 	.word	0x58021400
 8001a0c:	58021c00 	.word	0x58021c00

08001a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a14:	b672      	cpsid	i
}
 8001a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <Error_Handler+0x8>
	...

08001a1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_MspInit+0x30>)
 8001a24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a28:	4a08      	ldr	r2, [pc, #32]	; (8001a4c <HAL_MspInit+0x30>)
 8001a2a:	f043 0302 	orr.w	r3, r3, #2
 8001a2e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_MspInit+0x30>)
 8001a34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	58024400 	.word	0x58024400

08001a50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b090      	sub	sp, #64	; 0x40
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a6c      	ldr	r2, [pc, #432]	; (8001c20 <HAL_ADC_MspInit+0x1d0>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d14e      	bne.n	8001b10 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a72:	4b6c      	ldr	r3, [pc, #432]	; (8001c24 <HAL_ADC_MspInit+0x1d4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	3301      	adds	r3, #1
 8001a78:	4a6a      	ldr	r2, [pc, #424]	; (8001c24 <HAL_ADC_MspInit+0x1d4>)
 8001a7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a7c:	4b69      	ldr	r3, [pc, #420]	; (8001c24 <HAL_ADC_MspInit+0x1d4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d10e      	bne.n	8001aa2 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a84:	4b68      	ldr	r3, [pc, #416]	; (8001c28 <HAL_ADC_MspInit+0x1d8>)
 8001a86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a8a:	4a67      	ldr	r2, [pc, #412]	; (8001c28 <HAL_ADC_MspInit+0x1d8>)
 8001a8c:	f043 0320 	orr.w	r3, r3, #32
 8001a90:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a94:	4b64      	ldr	r3, [pc, #400]	; (8001c28 <HAL_ADC_MspInit+0x1d8>)
 8001a96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a9a:	f003 0320 	and.w	r3, r3, #32
 8001a9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa2:	4b61      	ldr	r3, [pc, #388]	; (8001c28 <HAL_ADC_MspInit+0x1d8>)
 8001aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa8:	4a5f      	ldr	r2, [pc, #380]	; (8001c28 <HAL_ADC_MspInit+0x1d8>)
 8001aaa:	f043 0304 	orr.w	r3, r3, #4
 8001aae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ab2:	4b5d      	ldr	r3, [pc, #372]	; (8001c28 <HAL_ADC_MspInit+0x1d8>)
 8001ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac0:	4b59      	ldr	r3, [pc, #356]	; (8001c28 <HAL_ADC_MspInit+0x1d8>)
 8001ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac6:	4a58      	ldr	r2, [pc, #352]	; (8001c28 <HAL_ADC_MspInit+0x1d8>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ad0:	4b55      	ldr	r3, [pc, #340]	; (8001c28 <HAL_ADC_MspInit+0x1d8>)
 8001ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	623b      	str	r3, [r7, #32]
 8001adc:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA1_C     ------> ADC1_INP1
    PA0_C     ------> ADC1_INP0
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARD_A0_GPIO_Port, &GPIO_InitStruct);
 8001aea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aee:	4619      	mov	r1, r3
 8001af0:	484e      	ldr	r0, [pc, #312]	; (8001c2c <HAL_ADC_MspInit+0x1dc>)
 8001af2:	f003 ffe5 	bl	8005ac0 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001af6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001afa:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001afe:	f001 faa7 	bl	8003050 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001b02:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001b06:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001b0a:	f001 faa1 	bl	8003050 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001b0e:	e082      	b.n	8001c16 <HAL_ADC_MspInit+0x1c6>
  else if(hadc->Instance==ADC2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a46      	ldr	r2, [pc, #280]	; (8001c30 <HAL_ADC_MspInit+0x1e0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d133      	bne.n	8001b82 <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001b1a:	4b42      	ldr	r3, [pc, #264]	; (8001c24 <HAL_ADC_MspInit+0x1d4>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	4a40      	ldr	r2, [pc, #256]	; (8001c24 <HAL_ADC_MspInit+0x1d4>)
 8001b22:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001b24:	4b3f      	ldr	r3, [pc, #252]	; (8001c24 <HAL_ADC_MspInit+0x1d4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d10e      	bne.n	8001b4a <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b2c:	4b3e      	ldr	r3, [pc, #248]	; (8001c28 <HAL_ADC_MspInit+0x1d8>)
 8001b2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b32:	4a3d      	ldr	r2, [pc, #244]	; (8001c28 <HAL_ADC_MspInit+0x1d8>)
 8001b34:	f043 0320 	orr.w	r3, r3, #32
 8001b38:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b3c:	4b3a      	ldr	r3, [pc, #232]	; (8001c28 <HAL_ADC_MspInit+0x1d8>)
 8001b3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b42:	f003 0320 	and.w	r3, r3, #32
 8001b46:	61fb      	str	r3, [r7, #28]
 8001b48:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4a:	4b37      	ldr	r3, [pc, #220]	; (8001c28 <HAL_ADC_MspInit+0x1d8>)
 8001b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b50:	4a35      	ldr	r2, [pc, #212]	; (8001c28 <HAL_ADC_MspInit+0x1d8>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b5a:	4b33      	ldr	r3, [pc, #204]	; (8001c28 <HAL_ADC_MspInit+0x1d8>)
 8001b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	61bb      	str	r3, [r7, #24]
 8001b66:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001b68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b6c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001b70:	f001 fa6e 	bl	8003050 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001b74:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001b78:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001b7c:	f001 fa68 	bl	8003050 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001b80:	e049      	b.n	8001c16 <HAL_ADC_MspInit+0x1c6>
  else if(hadc->Instance==ADC3)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a2b      	ldr	r2, [pc, #172]	; (8001c34 <HAL_ADC_MspInit+0x1e4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d144      	bne.n	8001c16 <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001b8c:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <HAL_ADC_MspInit+0x1d8>)
 8001b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b92:	4a25      	ldr	r2, [pc, #148]	; (8001c28 <HAL_ADC_MspInit+0x1d8>)
 8001b94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b9c:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <HAL_ADC_MspInit+0x1d8>)
 8001b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001baa:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <HAL_ADC_MspInit+0x1d8>)
 8001bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb0:	4a1d      	ldr	r2, [pc, #116]	; (8001c28 <HAL_ADC_MspInit+0x1d8>)
 8001bb2:	f043 0304 	orr.w	r3, r3, #4
 8001bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bba:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <HAL_ADC_MspInit+0x1d8>)
 8001bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bc8:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <HAL_ADC_MspInit+0x1d8>)
 8001bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bce:	4a16      	ldr	r2, [pc, #88]	; (8001c28 <HAL_ADC_MspInit+0x1d8>)
 8001bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bd8:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <HAL_ADC_MspInit+0x1d8>)
 8001bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001be6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001bea:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001bee:	f001 fa2f 	bl	8003050 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001bf2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001bf6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001bfa:	f001 fa29 	bl	8003050 <HAL_SYSCFG_AnalogSwitchConfig>
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 8001bfe:	2304      	movs	r3, #4
 8001c00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c02:	2303      	movs	r3, #3
 8001c04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8001c0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4809      	ldr	r0, [pc, #36]	; (8001c38 <HAL_ADC_MspInit+0x1e8>)
 8001c12:	f003 ff55 	bl	8005ac0 <HAL_GPIO_Init>
}
 8001c16:	bf00      	nop
 8001c18:	3740      	adds	r7, #64	; 0x40
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40022000 	.word	0x40022000
 8001c24:	240000f4 	.word	0x240000f4
 8001c28:	58024400 	.word	0x58024400
 8001c2c:	58020800 	.word	0x58020800
 8001c30:	40022100 	.word	0x40022100
 8001c34:	58026000 	.word	0x58026000
 8001c38:	58021c00 	.word	0x58021c00

08001c3c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a18      	ldr	r2, [pc, #96]	; (8001cbc <HAL_DAC_MspInit+0x80>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d129      	bne.n	8001cb2 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001c5e:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <HAL_DAC_MspInit+0x84>)
 8001c60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c64:	4a16      	ldr	r2, [pc, #88]	; (8001cc0 <HAL_DAC_MspInit+0x84>)
 8001c66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c6e:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <HAL_DAC_MspInit+0x84>)
 8001c70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7c:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <HAL_DAC_MspInit+0x84>)
 8001c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c82:	4a0f      	ldr	r2, [pc, #60]	; (8001cc0 <HAL_DAC_MspInit+0x84>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <HAL_DAC_MspInit+0x84>)
 8001c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = DAC1_OUT2_Pin;
 8001c9a:	2320      	movs	r3, #32
 8001c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC1_OUT2_GPIO_Port, &GPIO_InitStruct);
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	4619      	mov	r1, r3
 8001cac:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <HAL_DAC_MspInit+0x88>)
 8001cae:	f003 ff07 	bl	8005ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001cb2:	bf00      	nop
 8001cb4:	3728      	adds	r7, #40	; 0x28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40007400 	.word	0x40007400
 8001cc0:	58024400 	.word	0x58024400
 8001cc4:	58020000 	.word	0x58020000

08001cc8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08e      	sub	sp, #56	; 0x38
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a49      	ldr	r2, [pc, #292]	; (8001e0c <HAL_ETH_MspInit+0x144>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	f040 808b 	bne.w	8001e02 <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001cec:	4b48      	ldr	r3, [pc, #288]	; (8001e10 <HAL_ETH_MspInit+0x148>)
 8001cee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cf2:	4a47      	ldr	r2, [pc, #284]	; (8001e10 <HAL_ETH_MspInit+0x148>)
 8001cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cf8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001cfc:	4b44      	ldr	r3, [pc, #272]	; (8001e10 <HAL_ETH_MspInit+0x148>)
 8001cfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d06:	623b      	str	r3, [r7, #32]
 8001d08:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001d0a:	4b41      	ldr	r3, [pc, #260]	; (8001e10 <HAL_ETH_MspInit+0x148>)
 8001d0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d10:	4a3f      	ldr	r2, [pc, #252]	; (8001e10 <HAL_ETH_MspInit+0x148>)
 8001d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d16:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d1a:	4b3d      	ldr	r3, [pc, #244]	; (8001e10 <HAL_ETH_MspInit+0x148>)
 8001d1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001d28:	4b39      	ldr	r3, [pc, #228]	; (8001e10 <HAL_ETH_MspInit+0x148>)
 8001d2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d2e:	4a38      	ldr	r2, [pc, #224]	; (8001e10 <HAL_ETH_MspInit+0x148>)
 8001d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d34:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d38:	4b35      	ldr	r3, [pc, #212]	; (8001e10 <HAL_ETH_MspInit+0x148>)
 8001d3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d42:	61bb      	str	r3, [r7, #24]
 8001d44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d46:	4b32      	ldr	r3, [pc, #200]	; (8001e10 <HAL_ETH_MspInit+0x148>)
 8001d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d4c:	4a30      	ldr	r2, [pc, #192]	; (8001e10 <HAL_ETH_MspInit+0x148>)
 8001d4e:	f043 0304 	orr.w	r3, r3, #4
 8001d52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d56:	4b2e      	ldr	r3, [pc, #184]	; (8001e10 <HAL_ETH_MspInit+0x148>)
 8001d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d64:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <HAL_ETH_MspInit+0x148>)
 8001d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d6a:	4a29      	ldr	r2, [pc, #164]	; (8001e10 <HAL_ETH_MspInit+0x148>)
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d74:	4b26      	ldr	r3, [pc, #152]	; (8001e10 <HAL_ETH_MspInit+0x148>)
 8001d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	4b23      	ldr	r3, [pc, #140]	; (8001e10 <HAL_ETH_MspInit+0x148>)
 8001d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d88:	4a21      	ldr	r2, [pc, #132]	; (8001e10 <HAL_ETH_MspInit+0x148>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d92:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <HAL_ETH_MspInit+0x148>)
 8001d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PB11     ------> ETH_TX_EN
    PA2     ------> ETH_MDIO
    PC4     ------> ETH_RXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD1_Pin|RMII_RXD0_Pin;
 8001da0:	2332      	movs	r3, #50	; 0x32
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001db0:	230b      	movs	r3, #11
 8001db2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db8:	4619      	mov	r1, r3
 8001dba:	4816      	ldr	r0, [pc, #88]	; (8001e14 <HAL_ETH_MspInit+0x14c>)
 8001dbc:	f003 fe80 	bl	8005ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_RX_ER_Pin|RMII_TX_EN_Pin;
 8001dc0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dd2:	230b      	movs	r3, #11
 8001dd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dda:	4619      	mov	r1, r3
 8001ddc:	480e      	ldr	r0, [pc, #56]	; (8001e18 <HAL_ETH_MspInit+0x150>)
 8001dde:	f003 fe6f 	bl	8005ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_CRS_DV_Pin|RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8001de2:	2386      	movs	r3, #134	; 0x86
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001df2:	230b      	movs	r3, #11
 8001df4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4807      	ldr	r0, [pc, #28]	; (8001e1c <HAL_ETH_MspInit+0x154>)
 8001dfe:	f003 fe5f 	bl	8005ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001e02:	bf00      	nop
 8001e04:	3738      	adds	r7, #56	; 0x38
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40028000 	.word	0x40028000
 8001e10:	58024400 	.word	0x58024400
 8001e14:	58020800 	.word	0x58020800
 8001e18:	58020400 	.word	0x58020400
 8001e1c:	58020000 	.word	0x58020000

08001e20 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b0b8      	sub	sp, #224	; 0xe0
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e38:	f107 0318 	add.w	r3, r7, #24
 8001e3c:	22b4      	movs	r2, #180	; 0xb4
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f00c fa81 	bl	800e348 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a54      	ldr	r2, [pc, #336]	; (8001f9c <HAL_FDCAN_MspInit+0x17c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d14e      	bne.n	8001eee <HAL_FDCAN_MspInit+0xce>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001e50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e54:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001e56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001e5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e5e:	f107 0318 	add.w	r3, r7, #24
 8001e62:	4618      	mov	r0, r3
 8001e64:	f006 fa7e 	bl	8008364 <HAL_RCCEx_PeriphCLKConfig>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8001e6e:	f7ff fdcf 	bl	8001a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001e72:	4b4b      	ldr	r3, [pc, #300]	; (8001fa0 <HAL_FDCAN_MspInit+0x180>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	3301      	adds	r3, #1
 8001e78:	4a49      	ldr	r2, [pc, #292]	; (8001fa0 <HAL_FDCAN_MspInit+0x180>)
 8001e7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001e7c:	4b48      	ldr	r3, [pc, #288]	; (8001fa0 <HAL_FDCAN_MspInit+0x180>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d10e      	bne.n	8001ea2 <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e84:	4b47      	ldr	r3, [pc, #284]	; (8001fa4 <HAL_FDCAN_MspInit+0x184>)
 8001e86:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e8a:	4a46      	ldr	r2, [pc, #280]	; (8001fa4 <HAL_FDCAN_MspInit+0x184>)
 8001e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e90:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001e94:	4b43      	ldr	r3, [pc, #268]	; (8001fa4 <HAL_FDCAN_MspInit+0x184>)
 8001e96:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ea2:	4b40      	ldr	r3, [pc, #256]	; (8001fa4 <HAL_FDCAN_MspInit+0x184>)
 8001ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea8:	4a3e      	ldr	r2, [pc, #248]	; (8001fa4 <HAL_FDCAN_MspInit+0x184>)
 8001eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eb2:	4b3c      	ldr	r3, [pc, #240]	; (8001fa4 <HAL_FDCAN_MspInit+0x184>)
 8001eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001ec0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001ec4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001eda:	2309      	movs	r3, #9
 8001edc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ee0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4830      	ldr	r0, [pc, #192]	; (8001fa8 <HAL_FDCAN_MspInit+0x188>)
 8001ee8:	f003 fdea 	bl	8005ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001eec:	e051      	b.n	8001f92 <HAL_FDCAN_MspInit+0x172>
  else if(hfdcan->Instance==FDCAN2)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a2e      	ldr	r2, [pc, #184]	; (8001fac <HAL_FDCAN_MspInit+0x18c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d14c      	bne.n	8001f92 <HAL_FDCAN_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001ef8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001efc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001efe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f06:	f107 0318 	add.w	r3, r7, #24
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f006 fa2a 	bl	8008364 <HAL_RCCEx_PeriphCLKConfig>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_FDCAN_MspInit+0xfa>
      Error_Handler();
 8001f16:	f7ff fd7b 	bl	8001a10 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001f1a:	4b21      	ldr	r3, [pc, #132]	; (8001fa0 <HAL_FDCAN_MspInit+0x180>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	4a1f      	ldr	r2, [pc, #124]	; (8001fa0 <HAL_FDCAN_MspInit+0x180>)
 8001f22:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001f24:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <HAL_FDCAN_MspInit+0x180>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d10e      	bne.n	8001f4a <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <HAL_FDCAN_MspInit+0x184>)
 8001f2e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001f32:	4a1c      	ldr	r2, [pc, #112]	; (8001fa4 <HAL_FDCAN_MspInit+0x184>)
 8001f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f38:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001f3c:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <HAL_FDCAN_MspInit+0x184>)
 8001f3e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4a:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <HAL_FDCAN_MspInit+0x184>)
 8001f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f50:	4a14      	ldr	r2, [pc, #80]	; (8001fa4 <HAL_FDCAN_MspInit+0x184>)
 8001f52:	f043 0302 	orr.w	r3, r3, #2
 8001f56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f5a:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_FDCAN_MspInit+0x184>)
 8001f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_TX_Pin|FDCAN2_RX_Pin;
 8001f68:	2360      	movs	r3, #96	; 0x60
 8001f6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001f80:	2309      	movs	r3, #9
 8001f82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f86:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4808      	ldr	r0, [pc, #32]	; (8001fb0 <HAL_FDCAN_MspInit+0x190>)
 8001f8e:	f003 fd97 	bl	8005ac0 <HAL_GPIO_Init>
}
 8001f92:	bf00      	nop
 8001f94:	37e0      	adds	r7, #224	; 0xe0
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	4000a000 	.word	0x4000a000
 8001fa0:	240000f8 	.word	0x240000f8
 8001fa4:	58024400 	.word	0x58024400
 8001fa8:	58021c00 	.word	0x58021c00
 8001fac:	4000a400 	.word	0x4000a400
 8001fb0:	58020400 	.word	0x58020400

08001fb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b0b6      	sub	sp, #216	; 0xd8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fcc:	f107 0310 	add.w	r3, r7, #16
 8001fd0:	22b4      	movs	r2, #180	; 0xb4
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f00c f9b7 	bl	800e348 <memset>
  if(hi2c->Instance==I2C4)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a25      	ldr	r2, [pc, #148]	; (8002074 <HAL_I2C_MspInit+0xc0>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d142      	bne.n	800206a <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001fe4:	2310      	movs	r3, #16
 8001fe6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fee:	f107 0310 	add.w	r3, r7, #16
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f006 f9b6 	bl	8008364 <HAL_RCCEx_PeriphCLKConfig>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001ffe:	f7ff fd07 	bl	8001a10 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002002:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <HAL_I2C_MspInit+0xc4>)
 8002004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002008:	4a1b      	ldr	r2, [pc, #108]	; (8002078 <HAL_I2C_MspInit+0xc4>)
 800200a:	f043 0320 	orr.w	r3, r3, #32
 800200e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002012:	4b19      	ldr	r3, [pc, #100]	; (8002078 <HAL_I2C_MspInit+0xc4>)
 8002014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002018:	f003 0320 	and.w	r3, r3, #32
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF15     ------> I2C4_SDA
    PF14     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8002020:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002024:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002028:	2312      	movs	r3, #18
 800202a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800202e:	2301      	movs	r3, #1
 8002030:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002034:	2300      	movs	r3, #0
 8002036:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800203a:	2304      	movs	r3, #4
 800203c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002040:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002044:	4619      	mov	r1, r3
 8002046:	480d      	ldr	r0, [pc, #52]	; (800207c <HAL_I2C_MspInit+0xc8>)
 8002048:	f003 fd3a 	bl	8005ac0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800204c:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <HAL_I2C_MspInit+0xc4>)
 800204e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002052:	4a09      	ldr	r2, [pc, #36]	; (8002078 <HAL_I2C_MspInit+0xc4>)
 8002054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002058:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_I2C_MspInit+0xc4>)
 800205e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800206a:	bf00      	nop
 800206c:	37d8      	adds	r7, #216	; 0xd8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	58001c00 	.word	0x58001c00
 8002078:	58024400 	.word	0x58024400
 800207c:	58021400 	.word	0x58021400

08002080 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b0bc      	sub	sp, #240	; 0xf0
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002098:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800209c:	22b4      	movs	r2, #180	; 0xb4
 800209e:	2100      	movs	r1, #0
 80020a0:	4618      	mov	r0, r3
 80020a2:	f00c f951 	bl	800e348 <memset>
  if(hltdc->Instance==LTDC)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4ab0      	ldr	r2, [pc, #704]	; (800236c <HAL_LTDC_MspInit+0x2ec>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	f040 8158 	bne.w	8002362 <HAL_LTDC_MspInit+0x2e2>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80020b2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80020b6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 80020b8:	2320      	movs	r3, #32
 80020ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 80020bc:	2381      	movs	r3, #129	; 0x81
 80020be:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80020c0:	2302      	movs	r3, #2
 80020c2:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80020c4:	2302      	movs	r3, #2
 80020c6:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80020c8:	2302      	movs	r3, #2
 80020ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80020cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020d0:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	667b      	str	r3, [r7, #100]	; 0x64
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020de:	4618      	mov	r0, r3
 80020e0:	f006 f940 	bl	8008364 <HAL_RCCEx_PeriphCLKConfig>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 80020ea:	f7ff fc91 	bl	8001a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80020ee:	4ba0      	ldr	r3, [pc, #640]	; (8002370 <HAL_LTDC_MspInit+0x2f0>)
 80020f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80020f4:	4a9e      	ldr	r2, [pc, #632]	; (8002370 <HAL_LTDC_MspInit+0x2f0>)
 80020f6:	f043 0308 	orr.w	r3, r3, #8
 80020fa:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80020fe:	4b9c      	ldr	r3, [pc, #624]	; (8002370 <HAL_LTDC_MspInit+0x2f0>)
 8002100:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210c:	4b98      	ldr	r3, [pc, #608]	; (8002370 <HAL_LTDC_MspInit+0x2f0>)
 800210e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002112:	4a97      	ldr	r2, [pc, #604]	; (8002370 <HAL_LTDC_MspInit+0x2f0>)
 8002114:	f043 0302 	orr.w	r3, r3, #2
 8002118:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800211c:	4b94      	ldr	r3, [pc, #592]	; (8002370 <HAL_LTDC_MspInit+0x2f0>)
 800211e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	623b      	str	r3, [r7, #32]
 8002128:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800212a:	4b91      	ldr	r3, [pc, #580]	; (8002370 <HAL_LTDC_MspInit+0x2f0>)
 800212c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002130:	4a8f      	ldr	r2, [pc, #572]	; (8002370 <HAL_LTDC_MspInit+0x2f0>)
 8002132:	f043 0308 	orr.w	r3, r3, #8
 8002136:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800213a:	4b8d      	ldr	r3, [pc, #564]	; (8002370 <HAL_LTDC_MspInit+0x2f0>)
 800213c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002148:	4b89      	ldr	r3, [pc, #548]	; (8002370 <HAL_LTDC_MspInit+0x2f0>)
 800214a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800214e:	4a88      	ldr	r2, [pc, #544]	; (8002370 <HAL_LTDC_MspInit+0x2f0>)
 8002150:	f043 0310 	orr.w	r3, r3, #16
 8002154:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002158:	4b85      	ldr	r3, [pc, #532]	; (8002370 <HAL_LTDC_MspInit+0x2f0>)
 800215a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	61bb      	str	r3, [r7, #24]
 8002164:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002166:	4b82      	ldr	r3, [pc, #520]	; (8002370 <HAL_LTDC_MspInit+0x2f0>)
 8002168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800216c:	4a80      	ldr	r2, [pc, #512]	; (8002370 <HAL_LTDC_MspInit+0x2f0>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002176:	4b7e      	ldr	r3, [pc, #504]	; (8002370 <HAL_LTDC_MspInit+0x2f0>)
 8002178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002184:	4b7a      	ldr	r3, [pc, #488]	; (8002370 <HAL_LTDC_MspInit+0x2f0>)
 8002186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800218a:	4a79      	ldr	r2, [pc, #484]	; (8002370 <HAL_LTDC_MspInit+0x2f0>)
 800218c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002190:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002194:	4b76      	ldr	r3, [pc, #472]	; (8002370 <HAL_LTDC_MspInit+0x2f0>)
 8002196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800219a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80021a2:	4b73      	ldr	r3, [pc, #460]	; (8002370 <HAL_LTDC_MspInit+0x2f0>)
 80021a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a8:	4a71      	ldr	r2, [pc, #452]	; (8002370 <HAL_LTDC_MspInit+0x2f0>)
 80021aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021b2:	4b6f      	ldr	r3, [pc, #444]	; (8002370 <HAL_LTDC_MspInit+0x2f0>)
 80021b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c0:	4b6b      	ldr	r3, [pc, #428]	; (8002370 <HAL_LTDC_MspInit+0x2f0>)
 80021c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c6:	4a6a      	ldr	r2, [pc, #424]	; (8002370 <HAL_LTDC_MspInit+0x2f0>)
 80021c8:	f043 0304 	orr.w	r3, r3, #4
 80021cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021d0:	4b67      	ldr	r3, [pc, #412]	; (8002370 <HAL_LTDC_MspInit+0x2f0>)
 80021d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
    PH3     ------> LTDC_R1
    PA6     ------> LTDC_G2
    PB0     ------> LTDC_G1
    PE11     ------> LTDC_G3
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_G0_Pin|LCD_G1_Pin;
 80021de:	f240 3303 	movw	r3, #771	; 0x303
 80021e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2300      	movs	r3, #0
 80021f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021f8:	230e      	movs	r3, #14
 80021fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002202:	4619      	mov	r1, r3
 8002204:	485b      	ldr	r0, [pc, #364]	; (8002374 <HAL_LTDC_MspInit+0x2f4>)
 8002206:	f003 fc5b 	bl	8005ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_G7_Pin|LCD_B1_Pin|LCD_B2_Pin;
 800220a:	2349      	movs	r3, #73	; 0x49
 800220c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002210:	2302      	movs	r3, #2
 8002212:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002222:	230e      	movs	r3, #14
 8002224:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002228:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800222c:	4619      	mov	r1, r3
 800222e:	4852      	ldr	r0, [pc, #328]	; (8002378 <HAL_LTDC_MspInit+0x2f8>)
 8002230:	f003 fc46 	bl	8005ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_R0_Pin|LCD_R6_Pin|LCD_B4_Pin|LCD_DE_Pin
 8002234:	f64b 0303 	movw	r3, #47107	; 0xb803
 8002238:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_R7_Pin|LCD_G3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223c:	2302      	movs	r3, #2
 800223e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800224e:	230e      	movs	r3, #14
 8002250:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002254:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002258:	4619      	mov	r1, r3
 800225a:	4848      	ldr	r0, [pc, #288]	; (800237c <HAL_LTDC_MspInit+0x2fc>)
 800225c:	f003 fc30 	bl	8005ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin;
 8002260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002264:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002274:	2300      	movs	r3, #0
 8002276:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 800227a:	230d      	movs	r3, #13
 800227c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(LCD_B3_GPIO_Port, &GPIO_InitStruct);
 8002280:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002284:	4619      	mov	r1, r3
 8002286:	483e      	ldr	r0, [pc, #248]	; (8002380 <HAL_LTDC_MspInit+0x300>)
 8002288:	f003 fc1a 	bl	8005ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B0_Pin|LCD_CLK_Pin;
 800228c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8002290:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022a6:	230e      	movs	r3, #14
 80022a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022b0:	4619      	mov	r1, r3
 80022b2:	4834      	ldr	r0, [pc, #208]	; (8002384 <HAL_LTDC_MspInit+0x304>)
 80022b4:	f003 fc04 	bl	8005ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_G4_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R2_Pin
 80022b8:	f648 7308 	movw	r3, #36616	; 0x8f08
 80022bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_R4_Pin|LCD_R1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c0:	2302      	movs	r3, #2
 80022c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022cc:	2300      	movs	r3, #0
 80022ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022d2:	230e      	movs	r3, #14
 80022d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80022d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022dc:	4619      	mov	r1, r3
 80022de:	482a      	ldr	r0, [pc, #168]	; (8002388 <HAL_LTDC_MspInit+0x308>)
 80022e0:	f003 fbee 	bl	8005ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_G6_Pin|LCD_HSYNC_Pin;
 80022e4:	23c0      	movs	r3, #192	; 0xc0
 80022e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ea:	2302      	movs	r3, #2
 80022ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f6:	2300      	movs	r3, #0
 80022f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022fc:	230e      	movs	r3, #14
 80022fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002302:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002306:	4619      	mov	r1, r3
 8002308:	4820      	ldr	r0, [pc, #128]	; (800238c <HAL_LTDC_MspInit+0x30c>)
 800230a:	f003 fbd9 	bl	8005ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B5_Pin|LCD_VSYNC_Pin|LCD_G2_Pin;
 800230e:	2358      	movs	r3, #88	; 0x58
 8002310:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002314:	2302      	movs	r3, #2
 8002316:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002320:	2300      	movs	r3, #0
 8002322:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002326:	230e      	movs	r3, #14
 8002328:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002330:	4619      	mov	r1, r3
 8002332:	4813      	ldr	r0, [pc, #76]	; (8002380 <HAL_LTDC_MspInit+0x300>)
 8002334:	f003 fbc4 	bl	8005ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_G5_Pin;
 8002338:	2310      	movs	r3, #16
 800233a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233e:	2302      	movs	r3, #2
 8002340:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234a:	2300      	movs	r3, #0
 800234c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002350:	2309      	movs	r3, #9
 8002352:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(LCD_G5_GPIO_Port, &GPIO_InitStruct);
 8002356:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800235a:	4619      	mov	r1, r3
 800235c:	480a      	ldr	r0, [pc, #40]	; (8002388 <HAL_LTDC_MspInit+0x308>)
 800235e:	f003 fbaf 	bl	8005ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002362:	bf00      	nop
 8002364:	37f0      	adds	r7, #240	; 0xf0
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	50001000 	.word	0x50001000
 8002370:	58024400 	.word	0x58024400
 8002374:	58020400 	.word	0x58020400
 8002378:	58020c00 	.word	0x58020c00
 800237c:	58021000 	.word	0x58021000
 8002380:	58020000 	.word	0x58020000
 8002384:	58021800 	.word	0x58021800
 8002388:	58021c00 	.word	0x58021c00
 800238c:	58020800 	.word	0x58020800

08002390 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b0c0      	sub	sp, #256	; 0x100
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002398:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023ac:	22b4      	movs	r2, #180	; 0xb4
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f00b ffc9 	bl	800e348 <memset>
  if(hospi->Instance==OCTOSPI1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a8e      	ldr	r2, [pc, #568]	; (80025f4 <HAL_OSPI_MspInit+0x264>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	f040 8129 	bne.w	8002614 <HAL_OSPI_MspInit+0x284>
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80023c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023c6:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023d2:	4618      	mov	r0, r3
 80023d4:	f005 ffc6 	bl	8008364 <HAL_RCCEx_PeriphCLKConfig>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_OSPI_MspInit+0x52>
    {
      Error_Handler();
 80023de:	f7ff fb17 	bl	8001a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 80023e2:	4b85      	ldr	r3, [pc, #532]	; (80025f8 <HAL_OSPI_MspInit+0x268>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	3301      	adds	r3, #1
 80023e8:	4a83      	ldr	r2, [pc, #524]	; (80025f8 <HAL_OSPI_MspInit+0x268>)
 80023ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 80023ec:	4b82      	ldr	r3, [pc, #520]	; (80025f8 <HAL_OSPI_MspInit+0x268>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d10e      	bne.n	8002412 <HAL_OSPI_MspInit+0x82>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80023f4:	4b81      	ldr	r3, [pc, #516]	; (80025fc <HAL_OSPI_MspInit+0x26c>)
 80023f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80023fa:	4a80      	ldr	r2, [pc, #512]	; (80025fc <HAL_OSPI_MspInit+0x26c>)
 80023fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002400:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002404:	4b7d      	ldr	r3, [pc, #500]	; (80025fc <HAL_OSPI_MspInit+0x26c>)
 8002406:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800240a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800240e:	637b      	str	r3, [r7, #52]	; 0x34
 8002410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002412:	4b7a      	ldr	r3, [pc, #488]	; (80025fc <HAL_OSPI_MspInit+0x26c>)
 8002414:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002418:	4a78      	ldr	r2, [pc, #480]	; (80025fc <HAL_OSPI_MspInit+0x26c>)
 800241a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800241e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002422:	4b76      	ldr	r3, [pc, #472]	; (80025fc <HAL_OSPI_MspInit+0x26c>)
 8002424:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242c:	633b      	str	r3, [r7, #48]	; 0x30
 800242e:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002430:	4b72      	ldr	r3, [pc, #456]	; (80025fc <HAL_OSPI_MspInit+0x26c>)
 8002432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002436:	4a71      	ldr	r2, [pc, #452]	; (80025fc <HAL_OSPI_MspInit+0x26c>)
 8002438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800243c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002440:	4b6e      	ldr	r3, [pc, #440]	; (80025fc <HAL_OSPI_MspInit+0x26c>)
 8002442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800244c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800244e:	4b6b      	ldr	r3, [pc, #428]	; (80025fc <HAL_OSPI_MspInit+0x26c>)
 8002450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002454:	4a69      	ldr	r2, [pc, #420]	; (80025fc <HAL_OSPI_MspInit+0x26c>)
 8002456:	f043 0308 	orr.w	r3, r3, #8
 800245a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800245e:	4b67      	ldr	r3, [pc, #412]	; (80025fc <HAL_OSPI_MspInit+0x26c>)
 8002460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	62bb      	str	r3, [r7, #40]	; 0x28
 800246a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800246c:	4b63      	ldr	r3, [pc, #396]	; (80025fc <HAL_OSPI_MspInit+0x26c>)
 800246e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002472:	4a62      	ldr	r2, [pc, #392]	; (80025fc <HAL_OSPI_MspInit+0x26c>)
 8002474:	f043 0310 	orr.w	r3, r3, #16
 8002478:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800247c:	4b5f      	ldr	r3, [pc, #380]	; (80025fc <HAL_OSPI_MspInit+0x26c>)
 800247e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002482:	f003 0310 	and.w	r3, r3, #16
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800248a:	4b5c      	ldr	r3, [pc, #368]	; (80025fc <HAL_OSPI_MspInit+0x26c>)
 800248c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002490:	4a5a      	ldr	r2, [pc, #360]	; (80025fc <HAL_OSPI_MspInit+0x26c>)
 8002492:	f043 0320 	orr.w	r3, r3, #32
 8002496:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800249a:	4b58      	ldr	r3, [pc, #352]	; (80025fc <HAL_OSPI_MspInit+0x26c>)
 800249c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024a0:	f003 0320 	and.w	r3, r3, #32
 80024a4:	623b      	str	r3, [r7, #32]
 80024a6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a8:	4b54      	ldr	r3, [pc, #336]	; (80025fc <HAL_OSPI_MspInit+0x26c>)
 80024aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ae:	4a53      	ldr	r2, [pc, #332]	; (80025fc <HAL_OSPI_MspInit+0x26c>)
 80024b0:	f043 0302 	orr.w	r3, r3, #2
 80024b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024b8:	4b50      	ldr	r3, [pc, #320]	; (80025fc <HAL_OSPI_MspInit+0x26c>)
 80024ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	61fb      	str	r3, [r7, #28]
 80024c4:	69fb      	ldr	r3, [r7, #28]
    PD11     ------> OCTOSPIM_P1_IO0
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 80024c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ce:	2302      	movs	r3, #2
 80024d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024da:	2303      	movs	r3, #3
 80024dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80024e0:	2309      	movs	r3, #9
 80024e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 80024e6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80024ea:	4619      	mov	r1, r3
 80024ec:	4844      	ldr	r0, [pc, #272]	; (8002600 <HAL_OSPI_MspInit+0x270>)
 80024ee:	f003 fae7 	bl	8005ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO7_Pin|OCSPI1_IO5_Pin|OCSPI1_IO4_Pin;
 80024f2:	23b0      	movs	r3, #176	; 0xb0
 80024f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f8:	2302      	movs	r3, #2
 80024fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002504:	2303      	movs	r3, #3
 8002506:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800250a:	230a      	movs	r3, #10
 800250c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002510:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002514:	4619      	mov	r1, r3
 8002516:	483b      	ldr	r0, [pc, #236]	; (8002604 <HAL_OSPI_MspInit+0x274>)
 8002518:	f003 fad2 	bl	8005ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO2_Pin;
 800251c:	2304      	movs	r3, #4
 800251e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002522:	2302      	movs	r3, #2
 8002524:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002528:	2300      	movs	r3, #0
 800252a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252e:	2303      	movs	r3, #3
 8002530:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8002534:	2309      	movs	r3, #9
 8002536:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(OCSPI1_IO2_GPIO_Port, &GPIO_InitStruct);
 800253a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800253e:	4619      	mov	r1, r3
 8002540:	4831      	ldr	r0, [pc, #196]	; (8002608 <HAL_OSPI_MspInit+0x278>)
 8002542:	f003 fabd 	bl	8005ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8002546:	2340      	movs	r3, #64	; 0x40
 8002548:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254c:	2302      	movs	r3, #2
 800254e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002558:	2303      	movs	r3, #3
 800255a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800255e:	230a      	movs	r3, #10
 8002560:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8002564:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002568:	4619      	mov	r1, r3
 800256a:	4825      	ldr	r0, [pc, #148]	; (8002600 <HAL_OSPI_MspInit+0x270>)
 800256c:	f003 faa8 	bl	8005ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO3_Pin|OCSPI1_IO0_Pin|OCSPI1_IO1_Pin;
 8002570:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002574:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002578:	2302      	movs	r3, #2
 800257a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002584:	2303      	movs	r3, #3
 8002586:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800258a:	2309      	movs	r3, #9
 800258c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002590:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002594:	4619      	mov	r1, r3
 8002596:	481b      	ldr	r0, [pc, #108]	; (8002604 <HAL_OSPI_MspInit+0x274>)
 8002598:	f003 fa92 	bl	8005ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 800259c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a4:	2302      	movs	r3, #2
 80025a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b0:	2303      	movs	r3, #3
 80025b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80025b6:	2309      	movs	r3, #9
 80025b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 80025bc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80025c0:	4619      	mov	r1, r3
 80025c2:	4812      	ldr	r0, [pc, #72]	; (800260c <HAL_OSPI_MspInit+0x27c>)
 80025c4:	f003 fa7c 	bl	8005ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_DQS_Pin;
 80025c8:	2304      	movs	r3, #4
 80025ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ce:	2302      	movs	r3, #2
 80025d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025da:	2303      	movs	r3, #3
 80025dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80025e0:	230a      	movs	r3, #10
 80025e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(OCSPI1_DQS_GPIO_Port, &GPIO_InitStruct);
 80025e6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80025ea:	4619      	mov	r1, r3
 80025ec:	4808      	ldr	r0, [pc, #32]	; (8002610 <HAL_OSPI_MspInit+0x280>)
 80025ee:	f003 fa67 	bl	8005ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 80025f2:	e0ac      	b.n	800274e <HAL_OSPI_MspInit+0x3be>
 80025f4:	52005000 	.word	0x52005000
 80025f8:	240000fc 	.word	0x240000fc
 80025fc:	58024400 	.word	0x58024400
 8002600:	58021800 	.word	0x58021800
 8002604:	58020c00 	.word	0x58020c00
 8002608:	58021000 	.word	0x58021000
 800260c:	58021400 	.word	0x58021400
 8002610:	58020400 	.word	0x58020400
  else if(hospi->Instance==OCTOSPI2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a4f      	ldr	r2, [pc, #316]	; (8002758 <HAL_OSPI_MspInit+0x3c8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	f040 8097 	bne.w	800274e <HAL_OSPI_MspInit+0x3be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002620:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002624:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8002626:	2300      	movs	r3, #0
 8002628:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800262c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002630:	4618      	mov	r0, r3
 8002632:	f005 fe97 	bl	8008364 <HAL_RCCEx_PeriphCLKConfig>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_OSPI_MspInit+0x2b0>
      Error_Handler();
 800263c:	f7ff f9e8 	bl	8001a10 <Error_Handler>
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8002640:	4b46      	ldr	r3, [pc, #280]	; (800275c <HAL_OSPI_MspInit+0x3cc>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	3301      	adds	r3, #1
 8002646:	4a45      	ldr	r2, [pc, #276]	; (800275c <HAL_OSPI_MspInit+0x3cc>)
 8002648:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 800264a:	4b44      	ldr	r3, [pc, #272]	; (800275c <HAL_OSPI_MspInit+0x3cc>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d10e      	bne.n	8002670 <HAL_OSPI_MspInit+0x2e0>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8002652:	4b43      	ldr	r3, [pc, #268]	; (8002760 <HAL_OSPI_MspInit+0x3d0>)
 8002654:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002658:	4a41      	ldr	r2, [pc, #260]	; (8002760 <HAL_OSPI_MspInit+0x3d0>)
 800265a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800265e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002662:	4b3f      	ldr	r3, [pc, #252]	; (8002760 <HAL_OSPI_MspInit+0x3d0>)
 8002664:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800266c:	61bb      	str	r3, [r7, #24]
 800266e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8002670:	4b3b      	ldr	r3, [pc, #236]	; (8002760 <HAL_OSPI_MspInit+0x3d0>)
 8002672:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002676:	4a3a      	ldr	r2, [pc, #232]	; (8002760 <HAL_OSPI_MspInit+0x3d0>)
 8002678:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800267c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002680:	4b37      	ldr	r3, [pc, #220]	; (8002760 <HAL_OSPI_MspInit+0x3d0>)
 8002682:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800268e:	4b34      	ldr	r3, [pc, #208]	; (8002760 <HAL_OSPI_MspInit+0x3d0>)
 8002690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002694:	4a32      	ldr	r2, [pc, #200]	; (8002760 <HAL_OSPI_MspInit+0x3d0>)
 8002696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800269a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800269e:	4b30      	ldr	r3, [pc, #192]	; (8002760 <HAL_OSPI_MspInit+0x3d0>)
 80026a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80026ac:	4b2c      	ldr	r3, [pc, #176]	; (8002760 <HAL_OSPI_MspInit+0x3d0>)
 80026ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b2:	4a2b      	ldr	r2, [pc, #172]	; (8002760 <HAL_OSPI_MspInit+0x3d0>)
 80026b4:	f043 0320 	orr.w	r3, r3, #32
 80026b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026bc:	4b28      	ldr	r3, [pc, #160]	; (8002760 <HAL_OSPI_MspInit+0x3d0>)
 80026be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c2:	f003 0320 	and.w	r3, r3, #32
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = OCSPI2_IO7_Pin|OCSPI2_IO5_Pin|OCSPI2_IO4_Pin;
 80026ca:	f640 0303 	movw	r3, #2051	; 0x803
 80026ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026de:	2303      	movs	r3, #3
 80026e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 80026e4:	2309      	movs	r3, #9
 80026e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026ea:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80026ee:	4619      	mov	r1, r3
 80026f0:	481c      	ldr	r0, [pc, #112]	; (8002764 <HAL_OSPI_MspInit+0x3d4>)
 80026f2:	f003 f9e5 	bl	8005ac0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCSPI2_IO6_Pin|OCSPI2_NCS_Pin;
 80026f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80026fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fe:	2302      	movs	r3, #2
 8002700:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270a:	2303      	movs	r3, #3
 800270c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 8002710:	2303      	movs	r3, #3
 8002712:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002716:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800271a:	4619      	mov	r1, r3
 800271c:	4811      	ldr	r0, [pc, #68]	; (8002764 <HAL_OSPI_MspInit+0x3d4>)
 800271e:	f003 f9cf 	bl	8005ac0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCSPI2_IO1_Pin|OCSPI2_IO0_Pin|OCSPI2_IO2_Pin|OCSPI2_CLK_Pin
 8002722:	f241 031f 	movw	r3, #4127	; 0x101f
 8002726:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272a:	2302      	movs	r3, #2
 800272c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002736:	2303      	movs	r3, #3
 8002738:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 800273c:	2309      	movs	r3, #9
 800273e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002742:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002746:	4619      	mov	r1, r3
 8002748:	4807      	ldr	r0, [pc, #28]	; (8002768 <HAL_OSPI_MspInit+0x3d8>)
 800274a:	f003 f9b9 	bl	8005ac0 <HAL_GPIO_Init>
}
 800274e:	bf00      	nop
 8002750:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	5200a000 	.word	0x5200a000
 800275c:	240000fc 	.word	0x240000fc
 8002760:	58024400 	.word	0x58024400
 8002764:	58021800 	.word	0x58021800
 8002768:	58021400 	.word	0x58021400

0800276c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b0b8      	sub	sp, #224	; 0xe0
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002774:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002784:	f107 0318 	add.w	r3, r7, #24
 8002788:	22b4      	movs	r2, #180	; 0xb4
 800278a:	2100      	movs	r1, #0
 800278c:	4618      	mov	r0, r3
 800278e:	f00b fddb 	bl	800e348 <memset>
  if(hsd->Instance==SDMMC1)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a37      	ldr	r2, [pc, #220]	; (8002874 <HAL_SD_MspInit+0x108>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d166      	bne.n	800286a <HAL_SD_MspInit+0xfe>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800279c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027a6:	f107 0318 	add.w	r3, r7, #24
 80027aa:	4618      	mov	r0, r3
 80027ac:	f005 fdda 	bl	8008364 <HAL_RCCEx_PeriphCLKConfig>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 80027b6:	f7ff f92b 	bl	8001a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80027ba:	4b2f      	ldr	r3, [pc, #188]	; (8002878 <HAL_SD_MspInit+0x10c>)
 80027bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80027c0:	4a2d      	ldr	r2, [pc, #180]	; (8002878 <HAL_SD_MspInit+0x10c>)
 80027c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80027ca:	4b2b      	ldr	r3, [pc, #172]	; (8002878 <HAL_SD_MspInit+0x10c>)
 80027cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80027d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027d8:	4b27      	ldr	r3, [pc, #156]	; (8002878 <HAL_SD_MspInit+0x10c>)
 80027da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027de:	4a26      	ldr	r2, [pc, #152]	; (8002878 <HAL_SD_MspInit+0x10c>)
 80027e0:	f043 0308 	orr.w	r3, r3, #8
 80027e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027e8:	4b23      	ldr	r3, [pc, #140]	; (8002878 <HAL_SD_MspInit+0x10c>)
 80027ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f6:	4b20      	ldr	r3, [pc, #128]	; (8002878 <HAL_SD_MspInit+0x10c>)
 80027f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027fc:	4a1e      	ldr	r2, [pc, #120]	; (8002878 <HAL_SD_MspInit+0x10c>)
 80027fe:	f043 0304 	orr.w	r3, r3, #4
 8002802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002806:	4b1c      	ldr	r3, [pc, #112]	; (8002878 <HAL_SD_MspInit+0x10c>)
 8002808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC10     ------> SDMMC1_D2
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8002814:	2304      	movs	r3, #4
 8002816:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281a:	2302      	movs	r3, #2
 800281c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002826:	2303      	movs	r3, #3
 8002828:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800282c:	230c      	movs	r3, #12
 800282e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8002832:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002836:	4619      	mov	r1, r3
 8002838:	4810      	ldr	r0, [pc, #64]	; (800287c <HAL_SD_MspInit+0x110>)
 800283a:	f003 f941 	bl	8005ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CK_Pin|SDIO1_D3_Pin|SDIO1_D2_Pin|SDIO1_D0_Pin
 800283e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002842:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002846:	2302      	movs	r3, #2
 8002848:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002852:	2303      	movs	r3, #3
 8002854:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002858:	230c      	movs	r3, #12
 800285a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800285e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002862:	4619      	mov	r1, r3
 8002864:	4806      	ldr	r0, [pc, #24]	; (8002880 <HAL_SD_MspInit+0x114>)
 8002866:	f003 f92b 	bl	8005ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800286a:	bf00      	nop
 800286c:	37e0      	adds	r7, #224	; 0xe0
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	52007000 	.word	0x52007000
 8002878:	58024400 	.word	0x58024400
 800287c:	58020c00 	.word	0x58020c00
 8002880:	58020800 	.word	0x58020800

08002884 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a20      	ldr	r2, [pc, #128]	; (8002914 <HAL_TIM_PWM_MspInit+0x90>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d10f      	bne.n	80028b6 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002896:	4b20      	ldr	r3, [pc, #128]	; (8002918 <HAL_TIM_PWM_MspInit+0x94>)
 8002898:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800289c:	4a1e      	ldr	r2, [pc, #120]	; (8002918 <HAL_TIM_PWM_MspInit+0x94>)
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028a6:	4b1c      	ldr	r3, [pc, #112]	; (8002918 <HAL_TIM_PWM_MspInit+0x94>)
 80028a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80028b4:	e028      	b.n	8002908 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM4)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a18      	ldr	r2, [pc, #96]	; (800291c <HAL_TIM_PWM_MspInit+0x98>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d10f      	bne.n	80028e0 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028c0:	4b15      	ldr	r3, [pc, #84]	; (8002918 <HAL_TIM_PWM_MspInit+0x94>)
 80028c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028c6:	4a14      	ldr	r2, [pc, #80]	; (8002918 <HAL_TIM_PWM_MspInit+0x94>)
 80028c8:	f043 0304 	orr.w	r3, r3, #4
 80028cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80028d0:	4b11      	ldr	r3, [pc, #68]	; (8002918 <HAL_TIM_PWM_MspInit+0x94>)
 80028d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]
}
 80028de:	e013      	b.n	8002908 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM5)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a0e      	ldr	r2, [pc, #56]	; (8002920 <HAL_TIM_PWM_MspInit+0x9c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d10e      	bne.n	8002908 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80028ea:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <HAL_TIM_PWM_MspInit+0x94>)
 80028ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028f0:	4a09      	ldr	r2, [pc, #36]	; (8002918 <HAL_TIM_PWM_MspInit+0x94>)
 80028f2:	f043 0308 	orr.w	r3, r3, #8
 80028f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80028fa:	4b07      	ldr	r3, [pc, #28]	; (8002918 <HAL_TIM_PWM_MspInit+0x94>)
 80028fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002900:	f003 0308 	and.w	r3, r3, #8
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	68fb      	ldr	r3, [r7, #12]
}
 8002908:	bf00      	nop
 800290a:	371c      	adds	r7, #28
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	40010000 	.word	0x40010000
 8002918:	58024400 	.word	0x58024400
 800291c:	40000800 	.word	0x40000800
 8002920:	40000c00 	.word	0x40000c00

08002924 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08c      	sub	sp, #48	; 0x30
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292c:	f107 031c 	add.w	r3, r7, #28
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	60da      	str	r2, [r3, #12]
 800293a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a48      	ldr	r2, [pc, #288]	; (8002a64 <HAL_TIM_MspPostInit+0x140>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d120      	bne.n	8002988 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002946:	4b48      	ldr	r3, [pc, #288]	; (8002a68 <HAL_TIM_MspPostInit+0x144>)
 8002948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800294c:	4a46      	ldr	r2, [pc, #280]	; (8002a68 <HAL_TIM_MspPostInit+0x144>)
 800294e:	f043 0310 	orr.w	r3, r3, #16
 8002952:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002956:	4b44      	ldr	r3, [pc, #272]	; (8002a68 <HAL_TIM_MspPostInit+0x144>)
 8002958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800295c:	f003 0310 	and.w	r3, r3, #16
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = ARD_D5_Pin;
 8002964:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002972:	2300      	movs	r3, #0
 8002974:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002976:	2301      	movs	r3, #1
 8002978:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 800297a:	f107 031c 	add.w	r3, r7, #28
 800297e:	4619      	mov	r1, r3
 8002980:	483a      	ldr	r0, [pc, #232]	; (8002a6c <HAL_TIM_MspPostInit+0x148>)
 8002982:	f003 f89d 	bl	8005ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002986:	e068      	b.n	8002a5a <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a38      	ldr	r2, [pc, #224]	; (8002a70 <HAL_TIM_MspPostInit+0x14c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d13f      	bne.n	8002a12 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002992:	4b35      	ldr	r3, [pc, #212]	; (8002a68 <HAL_TIM_MspPostInit+0x144>)
 8002994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002998:	4a33      	ldr	r2, [pc, #204]	; (8002a68 <HAL_TIM_MspPostInit+0x144>)
 800299a:	f043 0302 	orr.w	r3, r3, #2
 800299e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029a2:	4b31      	ldr	r3, [pc, #196]	; (8002a68 <HAL_TIM_MspPostInit+0x144>)
 80029a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029b0:	4b2d      	ldr	r3, [pc, #180]	; (8002a68 <HAL_TIM_MspPostInit+0x144>)
 80029b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029b6:	4a2c      	ldr	r2, [pc, #176]	; (8002a68 <HAL_TIM_MspPostInit+0x144>)
 80029b8:	f043 0308 	orr.w	r3, r3, #8
 80029bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029c0:	4b29      	ldr	r3, [pc, #164]	; (8002a68 <HAL_TIM_MspPostInit+0x144>)
 80029c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 80029ce:	2380      	movs	r3, #128	; 0x80
 80029d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029da:	2300      	movs	r3, #0
 80029dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029de:	2302      	movs	r3, #2
 80029e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 80029e2:	f107 031c 	add.w	r3, r7, #28
 80029e6:	4619      	mov	r1, r3
 80029e8:	4822      	ldr	r0, [pc, #136]	; (8002a74 <HAL_TIM_MspPostInit+0x150>)
 80029ea:	f003 f869 	bl	8005ac0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_14_PWM_Pin|ARD_D6_Pin;
 80029ee:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80029f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f4:	2302      	movs	r3, #2
 80029f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a00:	2302      	movs	r3, #2
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a04:	f107 031c 	add.w	r3, r7, #28
 8002a08:	4619      	mov	r1, r3
 8002a0a:	481b      	ldr	r0, [pc, #108]	; (8002a78 <HAL_TIM_MspPostInit+0x154>)
 8002a0c:	f003 f858 	bl	8005ac0 <HAL_GPIO_Init>
}
 8002a10:	e023      	b.n	8002a5a <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM5)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a19      	ldr	r2, [pc, #100]	; (8002a7c <HAL_TIM_MspPostInit+0x158>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d11e      	bne.n	8002a5a <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1c:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <HAL_TIM_MspPostInit+0x144>)
 8002a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a22:	4a11      	ldr	r2, [pc, #68]	; (8002a68 <HAL_TIM_MspPostInit+0x144>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a2c:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <HAL_TIM_MspPostInit+0x144>)
 8002a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a46:	2300      	movs	r3, #0
 8002a48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002a4e:	f107 031c 	add.w	r3, r7, #28
 8002a52:	4619      	mov	r1, r3
 8002a54:	480a      	ldr	r0, [pc, #40]	; (8002a80 <HAL_TIM_MspPostInit+0x15c>)
 8002a56:	f003 f833 	bl	8005ac0 <HAL_GPIO_Init>
}
 8002a5a:	bf00      	nop
 8002a5c:	3730      	adds	r7, #48	; 0x30
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40010000 	.word	0x40010000
 8002a68:	58024400 	.word	0x58024400
 8002a6c:	58021000 	.word	0x58021000
 8002a70:	40000800 	.word	0x40000800
 8002a74:	58020400 	.word	0x58020400
 8002a78:	58020c00 	.word	0x58020c00
 8002a7c:	40000c00 	.word	0x40000c00
 8002a80:	58020000 	.word	0x58020000

08002a84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b0b8      	sub	sp, #224	; 0xe0
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a9c:	f107 0318 	add.w	r3, r7, #24
 8002aa0:	22b4      	movs	r2, #180	; 0xb4
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f00b fc4f 	bl	800e348 <memset>
  if(huart->Instance==USART1)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a49      	ldr	r2, [pc, #292]	; (8002bd4 <HAL_UART_MspInit+0x150>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d143      	bne.n	8002b3c <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002abe:	f107 0318 	add.w	r3, r7, #24
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f005 fc4e 	bl	8008364 <HAL_RCCEx_PeriphCLKConfig>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002ace:	f7fe ff9f 	bl	8001a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ad2:	4b41      	ldr	r3, [pc, #260]	; (8002bd8 <HAL_UART_MspInit+0x154>)
 8002ad4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ad8:	4a3f      	ldr	r2, [pc, #252]	; (8002bd8 <HAL_UART_MspInit+0x154>)
 8002ada:	f043 0310 	orr.w	r3, r3, #16
 8002ade:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002ae2:	4b3d      	ldr	r3, [pc, #244]	; (8002bd8 <HAL_UART_MspInit+0x154>)
 8002ae4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af0:	4b39      	ldr	r3, [pc, #228]	; (8002bd8 <HAL_UART_MspInit+0x154>)
 8002af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af6:	4a38      	ldr	r2, [pc, #224]	; (8002bd8 <HAL_UART_MspInit+0x154>)
 8002af8:	f043 0302 	orr.w	r3, r3, #2
 8002afc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b00:	4b35      	ldr	r3, [pc, #212]	; (8002bd8 <HAL_UART_MspInit+0x154>)
 8002b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB14     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8002b0e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002b12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b16:	2302      	movs	r3, #2
 8002b18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b22:	2300      	movs	r3, #0
 8002b24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002b28:	2304      	movs	r3, #4
 8002b2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b32:	4619      	mov	r1, r3
 8002b34:	4829      	ldr	r0, [pc, #164]	; (8002bdc <HAL_UART_MspInit+0x158>)
 8002b36:	f002 ffc3 	bl	8005ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b3a:	e047      	b.n	8002bcc <HAL_UART_MspInit+0x148>
  else if(huart->Instance==USART3)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a27      	ldr	r2, [pc, #156]	; (8002be0 <HAL_UART_MspInit+0x15c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d142      	bne.n	8002bcc <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002b46:	2302      	movs	r3, #2
 8002b48:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b50:	f107 0318 	add.w	r3, r7, #24
 8002b54:	4618      	mov	r0, r3
 8002b56:	f005 fc05 	bl	8008364 <HAL_RCCEx_PeriphCLKConfig>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002b60:	f7fe ff56 	bl	8001a10 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b64:	4b1c      	ldr	r3, [pc, #112]	; (8002bd8 <HAL_UART_MspInit+0x154>)
 8002b66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b6a:	4a1b      	ldr	r2, [pc, #108]	; (8002bd8 <HAL_UART_MspInit+0x154>)
 8002b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b70:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b74:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <HAL_UART_MspInit+0x154>)
 8002b76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b82:	4b15      	ldr	r3, [pc, #84]	; (8002bd8 <HAL_UART_MspInit+0x154>)
 8002b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b88:	4a13      	ldr	r2, [pc, #76]	; (8002bd8 <HAL_UART_MspInit+0x154>)
 8002b8a:	f043 0308 	orr.w	r3, r3, #8
 8002b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b92:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <HAL_UART_MspInit+0x154>)
 8002b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8002ba0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ba4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002bba:	2307      	movs	r3, #7
 8002bbc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4807      	ldr	r0, [pc, #28]	; (8002be4 <HAL_UART_MspInit+0x160>)
 8002bc8:	f002 ff7a 	bl	8005ac0 <HAL_GPIO_Init>
}
 8002bcc:	bf00      	nop
 8002bce:	37e0      	adds	r7, #224	; 0xe0
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40011000 	.word	0x40011000
 8002bd8:	58024400 	.word	0x58024400
 8002bdc:	58020400 	.word	0x58020400
 8002be0:	40004800 	.word	0x40004800
 8002be4:	58020c00 	.word	0x58020c00

08002be8 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b0b6      	sub	sp, #216	; 0xd8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bf0:	f107 0310 	add.w	r3, r7, #16
 8002bf4:	22b4      	movs	r2, #180	; 0xb4
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f00b fba5 	bl	800e348 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a42      	ldr	r2, [pc, #264]	; (8002d0c <HAL_SAI_MspInit+0x124>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d13b      	bne.n	8002c80 <HAL_SAI_MspInit+0x98>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8002c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c0c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c12:	f107 0310 	add.w	r3, r7, #16
 8002c16:	4618      	mov	r0, r3
 8002c18:	f005 fba4 	bl	8008364 <HAL_RCCEx_PeriphCLKConfig>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_SAI_MspInit+0x3e>
    {
      Error_Handler();
 8002c22:	f7fe fef5 	bl	8001a10 <Error_Handler>
    }

    if (SAI1_client == 0)
 8002c26:	4b3a      	ldr	r3, [pc, #232]	; (8002d10 <HAL_SAI_MspInit+0x128>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10e      	bne.n	8002c4c <HAL_SAI_MspInit+0x64>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002c2e:	4b39      	ldr	r3, [pc, #228]	; (8002d14 <HAL_SAI_MspInit+0x12c>)
 8002c30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c34:	4a37      	ldr	r2, [pc, #220]	; (8002d14 <HAL_SAI_MspInit+0x12c>)
 8002c36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c3a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c3e:	4b35      	ldr	r3, [pc, #212]	; (8002d14 <HAL_SAI_MspInit+0x12c>)
 8002c40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8002c4c:	4b30      	ldr	r3, [pc, #192]	; (8002d10 <HAL_SAI_MspInit+0x128>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	3301      	adds	r3, #1
 8002c52:	4a2f      	ldr	r2, [pc, #188]	; (8002d10 <HAL_SAI_MspInit+0x128>)
 8002c54:	6013      	str	r3, [r2, #0]

    /**SAI1_A_Block_A GPIO Configuration
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = SAI1_SD_A_Pin;
 8002c56:	2340      	movs	r3, #64	; 0x40
 8002c58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002c6e:	2306      	movs	r3, #6
 8002c70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(SAI1_SD_A_GPIO_Port, &GPIO_InitStruct);
 8002c74:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4827      	ldr	r0, [pc, #156]	; (8002d18 <HAL_SAI_MspInit+0x130>)
 8002c7c:	f002 ff20 	bl	8005ac0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a25      	ldr	r2, [pc, #148]	; (8002d1c <HAL_SAI_MspInit+0x134>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d13c      	bne.n	8002d04 <HAL_SAI_MspInit+0x11c>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8002c8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c8e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c94:	f107 0310 	add.w	r3, r7, #16
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f005 fb63 	bl	8008364 <HAL_RCCEx_PeriphCLKConfig>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <HAL_SAI_MspInit+0xc0>
    {
      Error_Handler();
 8002ca4:	f7fe feb4 	bl	8001a10 <Error_Handler>
    }

      if (SAI1_client == 0)
 8002ca8:	4b19      	ldr	r3, [pc, #100]	; (8002d10 <HAL_SAI_MspInit+0x128>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10e      	bne.n	8002cce <HAL_SAI_MspInit+0xe6>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002cb0:	4b18      	ldr	r3, [pc, #96]	; (8002d14 <HAL_SAI_MspInit+0x12c>)
 8002cb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cb6:	4a17      	ldr	r2, [pc, #92]	; (8002d14 <HAL_SAI_MspInit+0x12c>)
 8002cb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cbc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002cc0:	4b14      	ldr	r3, [pc, #80]	; (8002d14 <HAL_SAI_MspInit+0x12c>)
 8002cc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <HAL_SAI_MspInit+0x128>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	4a0e      	ldr	r2, [pc, #56]	; (8002d10 <HAL_SAI_MspInit+0x128>)
 8002cd6:	6013      	str	r3, [r2, #0]
    PF6     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF7     ------> SAI1_MCLK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin|SAI1_SCK_B_Pin|SAI1_MCLK_B_Pin|SAI1_FS_B_Pin;
 8002cd8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002cdc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cec:	2300      	movs	r3, #0
 8002cee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002cf2:	2306      	movs	r3, #6
 8002cf4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002cf8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4808      	ldr	r0, [pc, #32]	; (8002d20 <HAL_SAI_MspInit+0x138>)
 8002d00:	f002 fede 	bl	8005ac0 <HAL_GPIO_Init>

    }
}
 8002d04:	bf00      	nop
 8002d06:	37d8      	adds	r7, #216	; 0xd8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40015804 	.word	0x40015804
 8002d10:	24000100 	.word	0x24000100
 8002d14:	58024400 	.word	0x58024400
 8002d18:	58021000 	.word	0x58021000
 8002d1c:	40015824 	.word	0x40015824
 8002d20:	58021400 	.word	0x58021400

08002d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d28:	e7fe      	b.n	8002d28 <NMI_Handler+0x4>

08002d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d2e:	e7fe      	b.n	8002d2e <HardFault_Handler+0x4>

08002d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d34:	e7fe      	b.n	8002d34 <MemManage_Handler+0x4>

08002d36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d36:	b480      	push	{r7}
 8002d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d3a:	e7fe      	b.n	8002d3a <BusFault_Handler+0x4>

08002d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d40:	e7fe      	b.n	8002d40 <UsageFault_Handler+0x4>

08002d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d42:	b480      	push	{r7}
 8002d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d62:	bf00      	nop
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d70:	f000 f916 	bl	8002fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d74:	bf00      	nop
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d7c:	4b32      	ldr	r3, [pc, #200]	; (8002e48 <SystemInit+0xd0>)
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d82:	4a31      	ldr	r2, [pc, #196]	; (8002e48 <SystemInit+0xd0>)
 8002d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d8c:	4b2f      	ldr	r3, [pc, #188]	; (8002e4c <SystemInit+0xd4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 030f 	and.w	r3, r3, #15
 8002d94:	2b06      	cmp	r3, #6
 8002d96:	d807      	bhi.n	8002da8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d98:	4b2c      	ldr	r3, [pc, #176]	; (8002e4c <SystemInit+0xd4>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f023 030f 	bic.w	r3, r3, #15
 8002da0:	4a2a      	ldr	r2, [pc, #168]	; (8002e4c <SystemInit+0xd4>)
 8002da2:	f043 0307 	orr.w	r3, r3, #7
 8002da6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002da8:	4b29      	ldr	r3, [pc, #164]	; (8002e50 <SystemInit+0xd8>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a28      	ldr	r2, [pc, #160]	; (8002e50 <SystemInit+0xd8>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002db4:	4b26      	ldr	r3, [pc, #152]	; (8002e50 <SystemInit+0xd8>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002dba:	4b25      	ldr	r3, [pc, #148]	; (8002e50 <SystemInit+0xd8>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4924      	ldr	r1, [pc, #144]	; (8002e50 <SystemInit+0xd8>)
 8002dc0:	4b24      	ldr	r3, [pc, #144]	; (8002e54 <SystemInit+0xdc>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002dc6:	4b21      	ldr	r3, [pc, #132]	; (8002e4c <SystemInit+0xd4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d007      	beq.n	8002de2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002dd2:	4b1e      	ldr	r3, [pc, #120]	; (8002e4c <SystemInit+0xd4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 030f 	bic.w	r3, r3, #15
 8002dda:	4a1c      	ldr	r2, [pc, #112]	; (8002e4c <SystemInit+0xd4>)
 8002ddc:	f043 0307 	orr.w	r3, r3, #7
 8002de0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002de2:	4b1b      	ldr	r3, [pc, #108]	; (8002e50 <SystemInit+0xd8>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002de8:	4b19      	ldr	r3, [pc, #100]	; (8002e50 <SystemInit+0xd8>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002dee:	4b18      	ldr	r3, [pc, #96]	; (8002e50 <SystemInit+0xd8>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002df4:	4b16      	ldr	r3, [pc, #88]	; (8002e50 <SystemInit+0xd8>)
 8002df6:	4a18      	ldr	r2, [pc, #96]	; (8002e58 <SystemInit+0xe0>)
 8002df8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002dfa:	4b15      	ldr	r3, [pc, #84]	; (8002e50 <SystemInit+0xd8>)
 8002dfc:	4a17      	ldr	r2, [pc, #92]	; (8002e5c <SystemInit+0xe4>)
 8002dfe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002e00:	4b13      	ldr	r3, [pc, #76]	; (8002e50 <SystemInit+0xd8>)
 8002e02:	4a17      	ldr	r2, [pc, #92]	; (8002e60 <SystemInit+0xe8>)
 8002e04:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002e06:	4b12      	ldr	r3, [pc, #72]	; (8002e50 <SystemInit+0xd8>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002e0c:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <SystemInit+0xd8>)
 8002e0e:	4a14      	ldr	r2, [pc, #80]	; (8002e60 <SystemInit+0xe8>)
 8002e10:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002e12:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <SystemInit+0xd8>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002e18:	4b0d      	ldr	r3, [pc, #52]	; (8002e50 <SystemInit+0xd8>)
 8002e1a:	4a11      	ldr	r2, [pc, #68]	; (8002e60 <SystemInit+0xe8>)
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002e1e:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <SystemInit+0xd8>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e24:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <SystemInit+0xd8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a09      	ldr	r2, [pc, #36]	; (8002e50 <SystemInit+0xd8>)
 8002e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e30:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <SystemInit+0xd8>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002e36:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <SystemInit+0xec>)
 8002e38:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002e3c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002e3e:	bf00      	nop
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	e000ed00 	.word	0xe000ed00
 8002e4c:	52002000 	.word	0x52002000
 8002e50:	58024400 	.word	0x58024400
 8002e54:	eaf6ed7f 	.word	0xeaf6ed7f
 8002e58:	02020200 	.word	0x02020200
 8002e5c:	01ff0000 	.word	0x01ff0000
 8002e60:	01010280 	.word	0x01010280
 8002e64:	52004000 	.word	0x52004000

08002e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002e68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ea0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e6c:	f7ff ff84 	bl	8002d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e70:	480c      	ldr	r0, [pc, #48]	; (8002ea4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e72:	490d      	ldr	r1, [pc, #52]	; (8002ea8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e74:	4a0d      	ldr	r2, [pc, #52]	; (8002eac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e78:	e002      	b.n	8002e80 <LoopCopyDataInit>

08002e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e7e:	3304      	adds	r3, #4

08002e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e84:	d3f9      	bcc.n	8002e7a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e86:	4a0a      	ldr	r2, [pc, #40]	; (8002eb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e88:	4c0a      	ldr	r4, [pc, #40]	; (8002eb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e8c:	e001      	b.n	8002e92 <LoopFillZerobss>

08002e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e90:	3204      	adds	r2, #4

08002e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e94:	d3fb      	bcc.n	8002e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e96:	f00b fa25 	bl	800e2e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e9a:	f7fd fbb3 	bl	8000604 <main>
  bx  lr
 8002e9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ea0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002ea4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002ea8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8002eac:	0800e404 	.word	0x0800e404
  ldr r2, =_sbss
 8002eb0:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8002eb4:	240009cc 	.word	0x240009cc

08002eb8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002eb8:	e7fe      	b.n	8002eb8 <ADC3_IRQHandler>
	...

08002ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ec2:	2003      	movs	r0, #3
 8002ec4:	f001 fcfa 	bl	80048bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ec8:	f005 f876 	bl	8007fb8 <HAL_RCC_GetSysClockFreq>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <HAL_Init+0x68>)
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	0a1b      	lsrs	r3, r3, #8
 8002ed4:	f003 030f 	and.w	r3, r3, #15
 8002ed8:	4913      	ldr	r1, [pc, #76]	; (8002f28 <HAL_Init+0x6c>)
 8002eda:	5ccb      	ldrb	r3, [r1, r3]
 8002edc:	f003 031f 	and.w	r3, r3, #31
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ee6:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <HAL_Init+0x68>)
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	4a0e      	ldr	r2, [pc, #56]	; (8002f28 <HAL_Init+0x6c>)
 8002ef0:	5cd3      	ldrb	r3, [r2, r3]
 8002ef2:	f003 031f 	and.w	r3, r3, #31
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8002efc:	4a0b      	ldr	r2, [pc, #44]	; (8002f2c <HAL_Init+0x70>)
 8002efe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f00:	4a0b      	ldr	r2, [pc, #44]	; (8002f30 <HAL_Init+0x74>)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f06:	2000      	movs	r0, #0
 8002f08:	f000 f814 	bl	8002f34 <HAL_InitTick>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e002      	b.n	8002f1c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f16:	f7fe fd81 	bl	8001a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	58024400 	.word	0x58024400
 8002f28:	0800e3bc 	.word	0x0800e3bc
 8002f2c:	24000004 	.word	0x24000004
 8002f30:	24000000 	.word	0x24000000

08002f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002f3c:	4b15      	ldr	r3, [pc, #84]	; (8002f94 <HAL_InitTick+0x60>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e021      	b.n	8002f8c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002f48:	4b13      	ldr	r3, [pc, #76]	; (8002f98 <HAL_InitTick+0x64>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <HAL_InitTick+0x60>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	4619      	mov	r1, r3
 8002f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f001 fcd1 	bl	8004906 <HAL_SYSTICK_Config>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e00e      	b.n	8002f8c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b0f      	cmp	r3, #15
 8002f72:	d80a      	bhi.n	8002f8a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f74:	2200      	movs	r2, #0
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	f04f 30ff 	mov.w	r0, #4294967295
 8002f7c:	f001 fca9 	bl	80048d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f80:	4a06      	ldr	r2, [pc, #24]	; (8002f9c <HAL_InitTick+0x68>)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	e000      	b.n	8002f8c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	2400000c 	.word	0x2400000c
 8002f98:	24000000 	.word	0x24000000
 8002f9c:	24000008 	.word	0x24000008

08002fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_IncTick+0x20>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_IncTick+0x24>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4413      	add	r3, r2
 8002fb0:	4a04      	ldr	r2, [pc, #16]	; (8002fc4 <HAL_IncTick+0x24>)
 8002fb2:	6013      	str	r3, [r2, #0]
}
 8002fb4:	bf00      	nop
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	2400000c 	.word	0x2400000c
 8002fc4:	240009c8 	.word	0x240009c8

08002fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return uwTick;
 8002fcc:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <HAL_GetTick+0x14>)
 8002fce:	681b      	ldr	r3, [r3, #0]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	240009c8 	.word	0x240009c8

08002fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe8:	f7ff ffee 	bl	8002fc8 <HAL_GetTick>
 8002fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff8:	d005      	beq.n	8003006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <HAL_Delay+0x44>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	461a      	mov	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4413      	add	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003006:	bf00      	nop
 8003008:	f7ff ffde 	bl	8002fc8 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	429a      	cmp	r2, r3
 8003016:	d8f7      	bhi.n	8003008 <HAL_Delay+0x28>
  {
  }
}
 8003018:	bf00      	nop
 800301a:	bf00      	nop
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	2400000c 	.word	0x2400000c

08003028 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003038:	4904      	ldr	r1, [pc, #16]	; (800304c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4313      	orrs	r3, r2
 800303e:	604b      	str	r3, [r1, #4]
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	58000400 	.word	0x58000400

08003050 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800305a:	4b07      	ldr	r3, [pc, #28]	; (8003078 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	43db      	mvns	r3, r3
 8003062:	401a      	ands	r2, r3
 8003064:	4904      	ldr	r1, [pc, #16]	; (8003078 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	4313      	orrs	r3, r2
 800306a:	604b      	str	r3, [r1, #4]
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	58000400 	.word	0x58000400

0800307c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	609a      	str	r2, [r3, #8]
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	609a      	str	r2, [r3, #8]
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
 80030f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	3360      	adds	r3, #96	; 0x60
 80030f6:	461a      	mov	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4a10      	ldr	r2, [pc, #64]	; (8003144 <LL_ADC_SetOffset+0x60>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d10b      	bne.n	8003120 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	4313      	orrs	r3, r2
 8003116:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800311e:	e00b      	b.n	8003138 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	430b      	orrs	r3, r1
 8003132:	431a      	orrs	r2, r3
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	601a      	str	r2, [r3, #0]
}
 8003138:	bf00      	nop
 800313a:	371c      	adds	r7, #28
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	58026000 	.word	0x58026000

08003148 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	3360      	adds	r3, #96	; 0x60
 8003156:	461a      	mov	r2, r3
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003168:	4618      	mov	r0, r3
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f003 031f 	and.w	r3, r3, #31
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	fa01 f303 	lsl.w	r3, r1, r3
 8003194:	431a      	orrs	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	611a      	str	r2, [r3, #16]
}
 800319a:	bf00      	nop
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
	...

080031a8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4a0c      	ldr	r2, [pc, #48]	; (80031e8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d00e      	beq.n	80031da <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	3360      	adds	r3, #96	; 0x60
 80031c0:	461a      	mov	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	431a      	orrs	r2, r3
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	601a      	str	r2, [r3, #0]
  }
}
 80031da:	bf00      	nop
 80031dc:	371c      	adds	r7, #28
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	58026000 	.word	0x58026000

080031ec <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4a0c      	ldr	r2, [pc, #48]	; (800322c <LL_ADC_SetOffsetSaturation+0x40>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d10e      	bne.n	800321e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	3360      	adds	r3, #96	; 0x60
 8003204:	461a      	mov	r2, r3
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	431a      	orrs	r2, r3
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800321e:	bf00      	nop
 8003220:	371c      	adds	r7, #28
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	58026000 	.word	0x58026000

08003230 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003230:	b480      	push	{r7}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4a0c      	ldr	r2, [pc, #48]	; (8003270 <LL_ADC_SetOffsetSign+0x40>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d10e      	bne.n	8003262 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	3360      	adds	r3, #96	; 0x60
 8003248:	461a      	mov	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	431a      	orrs	r2, r3
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003262:	bf00      	nop
 8003264:	371c      	adds	r7, #28
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	58026000 	.word	0x58026000

08003274 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3360      	adds	r3, #96	; 0x60
 8003284:	461a      	mov	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4a0c      	ldr	r2, [pc, #48]	; (80032c4 <LL_ADC_SetOffsetState+0x50>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d108      	bne.n	80032a8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	431a      	orrs	r2, r3
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80032a6:	e007      	b.n	80032b8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	601a      	str	r2, [r3, #0]
}
 80032b8:	bf00      	nop
 80032ba:	371c      	adds	r7, #28
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	58026000 	.word	0x58026000

080032c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	3330      	adds	r3, #48	; 0x30
 80032d8:	461a      	mov	r2, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	0a1b      	lsrs	r3, r3, #8
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	f003 030c 	and.w	r3, r3, #12
 80032e4:	4413      	add	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f003 031f 	and.w	r3, r3, #31
 80032f2:	211f      	movs	r1, #31
 80032f4:	fa01 f303 	lsl.w	r3, r1, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	401a      	ands	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	0e9b      	lsrs	r3, r3, #26
 8003300:	f003 011f 	and.w	r1, r3, #31
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f003 031f 	and.w	r3, r3, #31
 800330a:	fa01 f303 	lsl.w	r3, r1, r3
 800330e:	431a      	orrs	r2, r3
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003314:	bf00      	nop
 8003316:	371c      	adds	r7, #28
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003320:	b480      	push	{r7}
 8003322:	b087      	sub	sp, #28
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	3314      	adds	r3, #20
 8003330:	461a      	mov	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	0e5b      	lsrs	r3, r3, #25
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	4413      	add	r3, r2
 800333e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	0d1b      	lsrs	r3, r3, #20
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	2107      	movs	r1, #7
 800334e:	fa01 f303 	lsl.w	r3, r1, r3
 8003352:	43db      	mvns	r3, r3
 8003354:	401a      	ands	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	0d1b      	lsrs	r3, r3, #20
 800335a:	f003 031f 	and.w	r3, r3, #31
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	fa01 f303 	lsl.w	r3, r1, r3
 8003364:	431a      	orrs	r2, r3
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
	...

08003378 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4a1a      	ldr	r2, [pc, #104]	; (80033f0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d115      	bne.n	80033b8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003398:	43db      	mvns	r3, r3
 800339a:	401a      	ands	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f003 0318 	and.w	r3, r3, #24
 80033a2:	4914      	ldr	r1, [pc, #80]	; (80033f4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80033a4:	40d9      	lsrs	r1, r3
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	400b      	ands	r3, r1
 80033aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033ae:	431a      	orrs	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80033b6:	e014      	b.n	80033e2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033c4:	43db      	mvns	r3, r3
 80033c6:	401a      	ands	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f003 0318 	and.w	r3, r3, #24
 80033ce:	4909      	ldr	r1, [pc, #36]	; (80033f4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80033d0:	40d9      	lsrs	r1, r3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	400b      	ands	r3, r1
 80033d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033da:	431a      	orrs	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80033e2:	bf00      	nop
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	58026000 	.word	0x58026000
 80033f4:	000fffff 	.word	0x000fffff

080033f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	4b04      	ldr	r3, [pc, #16]	; (8003418 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003406:	4013      	ands	r3, r2
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6093      	str	r3, [r2, #8]
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	5fffffc0 	.word	0x5fffffc0

0800341c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800342c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003430:	d101      	bne.n	8003436 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <LL_ADC_EnableInternalRegulator+0x24>)
 8003452:	4013      	ands	r3, r2
 8003454:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	6fffffc0 	.word	0x6fffffc0

0800346c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003480:	d101      	bne.n	8003486 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <LL_ADC_IsEnabled+0x18>
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <LL_ADC_IsEnabled+0x1a>
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d101      	bne.n	80034d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d101      	bne.n	80034f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80034f4:	2301      	movs	r3, #1
 80034f6:	e000      	b.n	80034fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
	...

08003508 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003508:	b590      	push	{r4, r7, lr}
 800350a:	b089      	sub	sp, #36	; 0x24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003514:	2300      	movs	r3, #0
 8003516:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e1ee      	b.n	8003900 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800352c:	2b00      	cmp	r3, #0
 800352e:	d109      	bne.n	8003544 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7fe fa8d 	bl	8001a50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff ff67 	bl	800341c <LL_ADC_IsDeepPowerDownEnabled>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d004      	beq.n	800355e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff ff4d 	bl	80033f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff ff82 	bl	800346c <LL_ADC_IsInternalRegulatorEnabled>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d114      	bne.n	8003598 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff ff66 	bl	8003444 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003578:	4b8e      	ldr	r3, [pc, #568]	; (80037b4 <HAL_ADC_Init+0x2ac>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	099b      	lsrs	r3, r3, #6
 800357e:	4a8e      	ldr	r2, [pc, #568]	; (80037b8 <HAL_ADC_Init+0x2b0>)
 8003580:	fba2 2303 	umull	r2, r3, r2, r3
 8003584:	099b      	lsrs	r3, r3, #6
 8003586:	3301      	adds	r3, #1
 8003588:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800358a:	e002      	b.n	8003592 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	3b01      	subs	r3, #1
 8003590:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f9      	bne.n	800358c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff ff65 	bl	800346c <LL_ADC_IsInternalRegulatorEnabled>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10d      	bne.n	80035c4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ac:	f043 0210 	orr.w	r2, r3, #16
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035b8:	f043 0201 	orr.w	r2, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff ff76 	bl	80034ba <LL_ADC_REG_IsConversionOngoing>
 80035ce:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f040 8188 	bne.w	80038ee <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f040 8184 	bne.w	80038ee <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ea:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80035ee:	f043 0202 	orr.w	r2, r3, #2
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff ff4a 	bl	8003494 <LL_ADC_IsEnabled>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d136      	bne.n	8003674 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a6c      	ldr	r2, [pc, #432]	; (80037bc <HAL_ADC_Init+0x2b4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d004      	beq.n	800361a <HAL_ADC_Init+0x112>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a6a      	ldr	r2, [pc, #424]	; (80037c0 <HAL_ADC_Init+0x2b8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d10e      	bne.n	8003638 <HAL_ADC_Init+0x130>
 800361a:	4868      	ldr	r0, [pc, #416]	; (80037bc <HAL_ADC_Init+0x2b4>)
 800361c:	f7ff ff3a 	bl	8003494 <LL_ADC_IsEnabled>
 8003620:	4604      	mov	r4, r0
 8003622:	4867      	ldr	r0, [pc, #412]	; (80037c0 <HAL_ADC_Init+0x2b8>)
 8003624:	f7ff ff36 	bl	8003494 <LL_ADC_IsEnabled>
 8003628:	4603      	mov	r3, r0
 800362a:	4323      	orrs	r3, r4
 800362c:	2b00      	cmp	r3, #0
 800362e:	bf0c      	ite	eq
 8003630:	2301      	moveq	r3, #1
 8003632:	2300      	movne	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	e008      	b.n	800364a <HAL_ADC_Init+0x142>
 8003638:	4862      	ldr	r0, [pc, #392]	; (80037c4 <HAL_ADC_Init+0x2bc>)
 800363a:	f7ff ff2b 	bl	8003494 <LL_ADC_IsEnabled>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	bf0c      	ite	eq
 8003644:	2301      	moveq	r3, #1
 8003646:	2300      	movne	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d012      	beq.n	8003674 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a5a      	ldr	r2, [pc, #360]	; (80037bc <HAL_ADC_Init+0x2b4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d004      	beq.n	8003662 <HAL_ADC_Init+0x15a>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a58      	ldr	r2, [pc, #352]	; (80037c0 <HAL_ADC_Init+0x2b8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d101      	bne.n	8003666 <HAL_ADC_Init+0x15e>
 8003662:	4a59      	ldr	r2, [pc, #356]	; (80037c8 <HAL_ADC_Init+0x2c0>)
 8003664:	e000      	b.n	8003668 <HAL_ADC_Init+0x160>
 8003666:	4a59      	ldr	r2, [pc, #356]	; (80037cc <HAL_ADC_Init+0x2c4>)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	4619      	mov	r1, r3
 800366e:	4610      	mov	r0, r2
 8003670:	f7ff fd04 	bl	800307c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a52      	ldr	r2, [pc, #328]	; (80037c4 <HAL_ADC_Init+0x2bc>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d129      	bne.n	80036d2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	7e5b      	ldrb	r3, [r3, #25]
 8003682:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003688:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800368e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2b08      	cmp	r3, #8
 8003696:	d013      	beq.n	80036c0 <HAL_ADC_Init+0x1b8>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b0c      	cmp	r3, #12
 800369e:	d00d      	beq.n	80036bc <HAL_ADC_Init+0x1b4>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b1c      	cmp	r3, #28
 80036a6:	d007      	beq.n	80036b8 <HAL_ADC_Init+0x1b0>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b18      	cmp	r3, #24
 80036ae:	d101      	bne.n	80036b4 <HAL_ADC_Init+0x1ac>
 80036b0:	2318      	movs	r3, #24
 80036b2:	e006      	b.n	80036c2 <HAL_ADC_Init+0x1ba>
 80036b4:	2300      	movs	r3, #0
 80036b6:	e004      	b.n	80036c2 <HAL_ADC_Init+0x1ba>
 80036b8:	2310      	movs	r3, #16
 80036ba:	e002      	b.n	80036c2 <HAL_ADC_Init+0x1ba>
 80036bc:	2308      	movs	r3, #8
 80036be:	e000      	b.n	80036c2 <HAL_ADC_Init+0x1ba>
 80036c0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80036c2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036ca:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80036cc:	4313      	orrs	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
 80036d0:	e00e      	b.n	80036f0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	7e5b      	ldrb	r3, [r3, #25]
 80036d6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036dc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80036e2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036ea:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036ec:	4313      	orrs	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d106      	bne.n	8003708 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	3b01      	subs	r3, #1
 8003700:	045b      	lsls	r3, r3, #17
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4313      	orrs	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370c:	2b00      	cmp	r3, #0
 800370e:	d009      	beq.n	8003724 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003714:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4313      	orrs	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a26      	ldr	r2, [pc, #152]	; (80037c4 <HAL_ADC_Init+0x2bc>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d115      	bne.n	800375a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	4b26      	ldr	r3, [pc, #152]	; (80037d0 <HAL_ADC_Init+0x2c8>)
 8003736:	4013      	ands	r3, r2
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6812      	ldr	r2, [r2, #0]
 800373c:	69b9      	ldr	r1, [r7, #24]
 800373e:	430b      	orrs	r3, r1
 8003740:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	611a      	str	r2, [r3, #16]
 8003758:	e009      	b.n	800376e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	4b1c      	ldr	r3, [pc, #112]	; (80037d4 <HAL_ADC_Init+0x2cc>)
 8003762:	4013      	ands	r3, r2
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	69b9      	ldr	r1, [r7, #24]
 800376a:	430b      	orrs	r3, r1
 800376c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff fea1 	bl	80034ba <LL_ADC_REG_IsConversionOngoing>
 8003778:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff feae 	bl	80034e0 <LL_ADC_INJ_IsConversionOngoing>
 8003784:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	f040 808e 	bne.w	80038aa <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2b00      	cmp	r3, #0
 8003792:	f040 808a 	bne.w	80038aa <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a0a      	ldr	r2, [pc, #40]	; (80037c4 <HAL_ADC_Init+0x2bc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d11b      	bne.n	80037d8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	7e1b      	ldrb	r3, [r3, #24]
 80037a4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037ac:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
 80037b2:	e018      	b.n	80037e6 <HAL_ADC_Init+0x2de>
 80037b4:	24000000 	.word	0x24000000
 80037b8:	053e2d63 	.word	0x053e2d63
 80037bc:	40022000 	.word	0x40022000
 80037c0:	40022100 	.word	0x40022100
 80037c4:	58026000 	.word	0x58026000
 80037c8:	40022300 	.word	0x40022300
 80037cc:	58026300 	.word	0x58026300
 80037d0:	fff04007 	.word	0xfff04007
 80037d4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	7e1b      	ldrb	r3, [r3, #24]
 80037dc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	4b46      	ldr	r3, [pc, #280]	; (8003908 <HAL_ADC_Init+0x400>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6812      	ldr	r2, [r2, #0]
 80037f4:	69b9      	ldr	r1, [r7, #24]
 80037f6:	430b      	orrs	r3, r1
 80037f8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003800:	2b01      	cmp	r3, #1
 8003802:	d137      	bne.n	8003874 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003808:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a3f      	ldr	r2, [pc, #252]	; (800390c <HAL_ADC_Init+0x404>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d116      	bne.n	8003842 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691a      	ldr	r2, [r3, #16]
 800381a:	4b3d      	ldr	r3, [pc, #244]	; (8003910 <HAL_ADC_Init+0x408>)
 800381c:	4013      	ands	r3, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003826:	4311      	orrs	r1, r2
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800382c:	4311      	orrs	r1, r2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003832:	430a      	orrs	r2, r1
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 0201 	orr.w	r2, r2, #1
 800383e:	611a      	str	r2, [r3, #16]
 8003840:	e020      	b.n	8003884 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	691a      	ldr	r2, [r3, #16]
 8003848:	4b32      	ldr	r3, [pc, #200]	; (8003914 <HAL_ADC_Init+0x40c>)
 800384a:	4013      	ands	r3, r2
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003850:	3a01      	subs	r2, #1
 8003852:	0411      	lsls	r1, r2, #16
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003858:	4311      	orrs	r1, r2
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800385e:	4311      	orrs	r1, r2
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003864:	430a      	orrs	r2, r1
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0201 	orr.w	r2, r2, #1
 8003870:	611a      	str	r2, [r3, #16]
 8003872:	e007      	b.n	8003884 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691a      	ldr	r2, [r3, #16]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0201 	bic.w	r2, r2, #1
 8003882:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a1b      	ldr	r2, [pc, #108]	; (800390c <HAL_ADC_Init+0x404>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d002      	beq.n	80038aa <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 fd63 	bl	8004370 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d10c      	bne.n	80038cc <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b8:	f023 010f 	bic.w	r1, r3, #15
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	1e5a      	subs	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	631a      	str	r2, [r3, #48]	; 0x30
 80038ca:	e007      	b.n	80038dc <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 020f 	bic.w	r2, r2, #15
 80038da:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e0:	f023 0303 	bic.w	r3, r3, #3
 80038e4:	f043 0201 	orr.w	r2, r3, #1
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	661a      	str	r2, [r3, #96]	; 0x60
 80038ec:	e007      	b.n	80038fe <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f2:	f043 0210 	orr.w	r2, r3, #16
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80038fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3724      	adds	r7, #36	; 0x24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd90      	pop	{r4, r7, pc}
 8003908:	ffffbffc 	.word	0xffffbffc
 800390c:	58026000 	.word	0x58026000
 8003910:	fc00f81f 	.word	0xfc00f81f
 8003914:	fc00f81e 	.word	0xfc00f81e

08003918 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003918:	b590      	push	{r4, r7, lr}
 800391a:	b0b9      	sub	sp, #228	; 0xe4
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003928:	2300      	movs	r3, #0
 800392a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003932:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	4ab3      	ldr	r2, [pc, #716]	; (8003c08 <HAL_ADC_ConfigChannel+0x2f0>)
 800393a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003942:	2b01      	cmp	r3, #1
 8003944:	d102      	bne.n	800394c <HAL_ADC_ConfigChannel+0x34>
 8003946:	2302      	movs	r3, #2
 8003948:	f000 bcfa 	b.w	8004340 <HAL_ADC_ConfigChannel+0xa28>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff fdae 	bl	80034ba <LL_ADC_REG_IsConversionOngoing>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	f040 84de 	bne.w	8004322 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4aa8      	ldr	r2, [pc, #672]	; (8003c0c <HAL_ADC_ConfigChannel+0x2f4>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d033      	beq.n	80039d8 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003978:	2b00      	cmp	r3, #0
 800397a:	d108      	bne.n	800398e <HAL_ADC_ConfigChannel+0x76>
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	0e9b      	lsrs	r3, r3, #26
 8003982:	f003 031f 	and.w	r3, r3, #31
 8003986:	2201      	movs	r2, #1
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	e01d      	b.n	80039ca <HAL_ADC_ConfigChannel+0xb2>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003996:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800399a:	fa93 f3a3 	rbit	r3, r3
 800399e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80039a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80039a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80039aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80039b2:	2320      	movs	r3, #32
 80039b4:	e004      	b.n	80039c0 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80039b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80039ba:	fab3 f383 	clz	r3, r3
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	f003 031f 	and.w	r3, r3, #31
 80039c4:	2201      	movs	r2, #1
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6812      	ldr	r2, [r2, #0]
 80039ce:	69d1      	ldr	r1, [r2, #28]
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	430b      	orrs	r3, r1
 80039d6:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6818      	ldr	r0, [r3, #0]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	6859      	ldr	r1, [r3, #4]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	461a      	mov	r2, r3
 80039e6:	f7ff fc6f 	bl	80032c8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff fd63 	bl	80034ba <LL_ADC_REG_IsConversionOngoing>
 80039f4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fd6f 	bl	80034e0 <LL_ADC_INJ_IsConversionOngoing>
 8003a02:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f040 8270 	bne.w	8003ef0 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a10:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f040 826b 	bne.w	8003ef0 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	6819      	ldr	r1, [r3, #0]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	461a      	mov	r2, r3
 8003a28:	f7ff fc7a 	bl	8003320 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a76      	ldr	r2, [pc, #472]	; (8003c0c <HAL_ADC_ConfigChannel+0x2f4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d10d      	bne.n	8003a52 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	695a      	ldr	r2, [r3, #20]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	08db      	lsrs	r3, r3, #3
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a50:	e032      	b.n	8003ab8 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a52:	4b6f      	ldr	r3, [pc, #444]	; (8003c10 <HAL_ADC_ConfigChannel+0x2f8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003a5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a5e:	d10b      	bne.n	8003a78 <HAL_ADC_ConfigChannel+0x160>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	695a      	ldr	r2, [r3, #20]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	089b      	lsrs	r3, r3, #2
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	e01d      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0x19c>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0310 	and.w	r3, r3, #16
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10b      	bne.n	8003a9e <HAL_ADC_ConfigChannel+0x186>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	695a      	ldr	r2, [r3, #20]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	089b      	lsrs	r3, r3, #2
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	e00a      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0x19c>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	695a      	ldr	r2, [r3, #20]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	089b      	lsrs	r3, r3, #2
 8003aaa:	f003 0304 	and.w	r3, r3, #4
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d048      	beq.n	8003b52 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6818      	ldr	r0, [r3, #0]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	6919      	ldr	r1, [r3, #16]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ad0:	f7ff fb08 	bl	80030e4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a4c      	ldr	r2, [pc, #304]	; (8003c0c <HAL_ADC_ConfigChannel+0x2f4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d119      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	6919      	ldr	r1, [r3, #16]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	461a      	mov	r2, r3
 8003aec:	f7ff fba0 	bl	8003230 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6818      	ldr	r0, [r3, #0]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	6919      	ldr	r1, [r3, #16]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d102      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x1f0>
 8003b02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b06:	e000      	b.n	8003b0a <HAL_ADC_ConfigChannel+0x1f2>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f7ff fb6e 	bl	80031ec <LL_ADC_SetOffsetSaturation>
 8003b10:	e1ee      	b.n	8003ef0 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6818      	ldr	r0, [r3, #0]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	6919      	ldr	r1, [r3, #16]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d102      	bne.n	8003b2a <HAL_ADC_ConfigChannel+0x212>
 8003b24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b28:	e000      	b.n	8003b2c <HAL_ADC_ConfigChannel+0x214>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	f7ff fb3b 	bl	80031a8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	6919      	ldr	r1, [r3, #16]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	7e1b      	ldrb	r3, [r3, #24]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d102      	bne.n	8003b48 <HAL_ADC_ConfigChannel+0x230>
 8003b42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b46:	e000      	b.n	8003b4a <HAL_ADC_ConfigChannel+0x232>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f7ff fb12 	bl	8003174 <LL_ADC_SetDataRightShift>
 8003b50:	e1ce      	b.n	8003ef0 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a2d      	ldr	r2, [pc, #180]	; (8003c0c <HAL_ADC_ConfigChannel+0x2f4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	f040 8181 	bne.w	8003e60 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2100      	movs	r1, #0
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff faef 	bl	8003148 <LL_ADC_GetOffsetChannel>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10a      	bne.n	8003b8a <HAL_ADC_ConfigChannel+0x272>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff fae4 	bl	8003148 <LL_ADC_GetOffsetChannel>
 8003b80:	4603      	mov	r3, r0
 8003b82:	0e9b      	lsrs	r3, r3, #26
 8003b84:	f003 021f 	and.w	r2, r3, #31
 8003b88:	e01e      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x2b0>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2100      	movs	r1, #0
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff fad9 	bl	8003148 <LL_ADC_GetOffsetChannel>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ba0:	fa93 f3a3 	rbit	r3, r3
 8003ba4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003ba8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003bb0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8003bb8:	2320      	movs	r3, #32
 8003bba:	e004      	b.n	8003bc6 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8003bbc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003bc0:	fab3 f383 	clz	r3, r3
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d105      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x2c8>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	0e9b      	lsrs	r3, r3, #26
 8003bda:	f003 031f 	and.w	r3, r3, #31
 8003bde:	e01e      	b.n	8003c1e <HAL_ADC_ConfigChannel+0x306>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bec:	fa93 f3a3 	rbit	r3, r3
 8003bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003bf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003bfc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d107      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003c04:	2320      	movs	r3, #32
 8003c06:	e00a      	b.n	8003c1e <HAL_ADC_ConfigChannel+0x306>
 8003c08:	47ff0000 	.word	0x47ff0000
 8003c0c:	58026000 	.word	0x58026000
 8003c10:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8003c14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c18:	fab3 f383 	clz	r3, r3
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d106      	bne.n	8003c30 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2200      	movs	r2, #0
 8003c28:	2100      	movs	r1, #0
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff fb22 	bl	8003274 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2101      	movs	r1, #1
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff fa86 	bl	8003148 <LL_ADC_GetOffsetChannel>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10a      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x344>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff fa7b 	bl	8003148 <LL_ADC_GetOffsetChannel>
 8003c52:	4603      	mov	r3, r0
 8003c54:	0e9b      	lsrs	r3, r3, #26
 8003c56:	f003 021f 	and.w	r2, r3, #31
 8003c5a:	e01e      	b.n	8003c9a <HAL_ADC_ConfigChannel+0x382>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2101      	movs	r1, #1
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff fa70 	bl	8003148 <LL_ADC_GetOffsetChannel>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c72:	fa93 f3a3 	rbit	r3, r3
 8003c76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003c7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003c82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8003c8a:	2320      	movs	r3, #32
 8003c8c:	e004      	b.n	8003c98 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8003c8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c92:	fab3 f383 	clz	r3, r3
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d105      	bne.n	8003cb2 <HAL_ADC_ConfigChannel+0x39a>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	0e9b      	lsrs	r3, r3, #26
 8003cac:	f003 031f 	and.w	r3, r3, #31
 8003cb0:	e018      	b.n	8003ce4 <HAL_ADC_ConfigChannel+0x3cc>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003cbe:	fa93 f3a3 	rbit	r3, r3
 8003cc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003cc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003cca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003cce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8003cd6:	2320      	movs	r3, #32
 8003cd8:	e004      	b.n	8003ce4 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8003cda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cde:	fab3 f383 	clz	r3, r3
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d106      	bne.n	8003cf6 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2200      	movs	r2, #0
 8003cee:	2101      	movs	r1, #1
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff fabf 	bl	8003274 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2102      	movs	r1, #2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff fa23 	bl	8003148 <LL_ADC_GetOffsetChannel>
 8003d02:	4603      	mov	r3, r0
 8003d04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10a      	bne.n	8003d22 <HAL_ADC_ConfigChannel+0x40a>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2102      	movs	r1, #2
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff fa18 	bl	8003148 <LL_ADC_GetOffsetChannel>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	0e9b      	lsrs	r3, r3, #26
 8003d1c:	f003 021f 	and.w	r2, r3, #31
 8003d20:	e01e      	b.n	8003d60 <HAL_ADC_ConfigChannel+0x448>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2102      	movs	r1, #2
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff fa0d 	bl	8003148 <LL_ADC_GetOffsetChannel>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d38:	fa93 f3a3 	rbit	r3, r3
 8003d3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003d40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8003d50:	2320      	movs	r3, #32
 8003d52:	e004      	b.n	8003d5e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8003d54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d58:	fab3 f383 	clz	r3, r3
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d105      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x460>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	0e9b      	lsrs	r3, r3, #26
 8003d72:	f003 031f 	and.w	r3, r3, #31
 8003d76:	e014      	b.n	8003da2 <HAL_ADC_ConfigChannel+0x48a>
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d80:	fa93 f3a3 	rbit	r3, r3
 8003d84:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003d86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003d8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003d94:	2320      	movs	r3, #32
 8003d96:	e004      	b.n	8003da2 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8003d98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d9c:	fab3 f383 	clz	r3, r3
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d106      	bne.n	8003db4 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2200      	movs	r2, #0
 8003dac:	2102      	movs	r1, #2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff fa60 	bl	8003274 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2103      	movs	r1, #3
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff f9c4 	bl	8003148 <LL_ADC_GetOffsetChannel>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10a      	bne.n	8003de0 <HAL_ADC_ConfigChannel+0x4c8>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2103      	movs	r1, #3
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff f9b9 	bl	8003148 <LL_ADC_GetOffsetChannel>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	0e9b      	lsrs	r3, r3, #26
 8003dda:	f003 021f 	and.w	r2, r3, #31
 8003dde:	e017      	b.n	8003e10 <HAL_ADC_ConfigChannel+0x4f8>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2103      	movs	r1, #3
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff f9ae 	bl	8003148 <LL_ADC_GetOffsetChannel>
 8003dec:	4603      	mov	r3, r0
 8003dee:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003df2:	fa93 f3a3 	rbit	r3, r3
 8003df6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfa:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003dfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003e02:	2320      	movs	r3, #32
 8003e04:	e003      	b.n	8003e0e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003e06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e08:	fab3 f383 	clz	r3, r3
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	461a      	mov	r2, r3
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d105      	bne.n	8003e28 <HAL_ADC_ConfigChannel+0x510>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	0e9b      	lsrs	r3, r3, #26
 8003e22:	f003 031f 	and.w	r3, r3, #31
 8003e26:	e011      	b.n	8003e4c <HAL_ADC_ConfigChannel+0x534>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e30:	fa93 f3a3 	rbit	r3, r3
 8003e34:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e38:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003e3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8003e40:	2320      	movs	r3, #32
 8003e42:	e003      	b.n	8003e4c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8003e44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e46:	fab3 f383 	clz	r3, r3
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d14f      	bne.n	8003ef0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2200      	movs	r2, #0
 8003e56:	2103      	movs	r1, #3
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff fa0b 	bl	8003274 <LL_ADC_SetOffsetState>
 8003e5e:	e047      	b.n	8003ef0 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	069b      	lsls	r3, r3, #26
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d107      	bne.n	8003e84 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e82:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	069b      	lsls	r3, r3, #26
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d107      	bne.n	8003ea8 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ea6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	069b      	lsls	r3, r3, #26
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d107      	bne.n	8003ecc <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003eca:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ed2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	069b      	lsls	r3, r3, #26
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d107      	bne.n	8003ef0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003eee:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff facd 	bl	8003494 <LL_ADC_IsEnabled>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f040 8219 	bne.w	8004334 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6818      	ldr	r0, [r3, #0]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	6819      	ldr	r1, [r3, #0]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f7ff fa32 	bl	8003378 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	4aa1      	ldr	r2, [pc, #644]	; (80041a0 <HAL_ADC_ConfigChannel+0x888>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	f040 812e 	bne.w	800417c <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10b      	bne.n	8003f48 <HAL_ADC_ConfigChannel+0x630>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	0e9b      	lsrs	r3, r3, #26
 8003f36:	3301      	adds	r3, #1
 8003f38:	f003 031f 	and.w	r3, r3, #31
 8003f3c:	2b09      	cmp	r3, #9
 8003f3e:	bf94      	ite	ls
 8003f40:	2301      	movls	r3, #1
 8003f42:	2300      	movhi	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	e019      	b.n	8003f7c <HAL_ADC_ConfigChannel+0x664>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f50:	fa93 f3a3 	rbit	r3, r3
 8003f54:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f58:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003f5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8003f60:	2320      	movs	r3, #32
 8003f62:	e003      	b.n	8003f6c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8003f64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f66:	fab3 f383 	clz	r3, r3
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	f003 031f 	and.w	r3, r3, #31
 8003f72:	2b09      	cmp	r3, #9
 8003f74:	bf94      	ite	ls
 8003f76:	2301      	movls	r3, #1
 8003f78:	2300      	movhi	r3, #0
 8003f7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d079      	beq.n	8004074 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d107      	bne.n	8003f9c <HAL_ADC_ConfigChannel+0x684>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	0e9b      	lsrs	r3, r3, #26
 8003f92:	3301      	adds	r3, #1
 8003f94:	069b      	lsls	r3, r3, #26
 8003f96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f9a:	e015      	b.n	8003fc8 <HAL_ADC_ConfigChannel+0x6b0>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa4:	fa93 f3a3 	rbit	r3, r3
 8003fa8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fac:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8003fb4:	2320      	movs	r3, #32
 8003fb6:	e003      	b.n	8003fc0 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8003fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fba:	fab3 f383 	clz	r3, r3
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	069b      	lsls	r3, r3, #26
 8003fc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d109      	bne.n	8003fe8 <HAL_ADC_ConfigChannel+0x6d0>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	0e9b      	lsrs	r3, r3, #26
 8003fda:	3301      	adds	r3, #1
 8003fdc:	f003 031f 	and.w	r3, r3, #31
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe6:	e017      	b.n	8004018 <HAL_ADC_ConfigChannel+0x700>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ff0:	fa93 f3a3 	rbit	r3, r3
 8003ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ff8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004000:	2320      	movs	r3, #32
 8004002:	e003      	b.n	800400c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004006:	fab3 f383 	clz	r3, r3
 800400a:	b2db      	uxtb	r3, r3
 800400c:	3301      	adds	r3, #1
 800400e:	f003 031f 	and.w	r3, r3, #31
 8004012:	2101      	movs	r1, #1
 8004014:	fa01 f303 	lsl.w	r3, r1, r3
 8004018:	ea42 0103 	orr.w	r1, r2, r3
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10a      	bne.n	800403e <HAL_ADC_ConfigChannel+0x726>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	0e9b      	lsrs	r3, r3, #26
 800402e:	3301      	adds	r3, #1
 8004030:	f003 021f 	and.w	r2, r3, #31
 8004034:	4613      	mov	r3, r2
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	4413      	add	r3, r2
 800403a:	051b      	lsls	r3, r3, #20
 800403c:	e018      	b.n	8004070 <HAL_ADC_ConfigChannel+0x758>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004046:	fa93 f3a3 	rbit	r3, r3
 800404a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800404c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004056:	2320      	movs	r3, #32
 8004058:	e003      	b.n	8004062 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800405a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405c:	fab3 f383 	clz	r3, r3
 8004060:	b2db      	uxtb	r3, r3
 8004062:	3301      	adds	r3, #1
 8004064:	f003 021f 	and.w	r2, r3, #31
 8004068:	4613      	mov	r3, r2
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	4413      	add	r3, r2
 800406e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004070:	430b      	orrs	r3, r1
 8004072:	e07e      	b.n	8004172 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800407c:	2b00      	cmp	r3, #0
 800407e:	d107      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x778>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	0e9b      	lsrs	r3, r3, #26
 8004086:	3301      	adds	r3, #1
 8004088:	069b      	lsls	r3, r3, #26
 800408a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800408e:	e015      	b.n	80040bc <HAL_ADC_ConfigChannel+0x7a4>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004098:	fa93 f3a3 	rbit	r3, r3
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80040a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80040a8:	2320      	movs	r3, #32
 80040aa:	e003      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80040ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ae:	fab3 f383 	clz	r3, r3
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	3301      	adds	r3, #1
 80040b6:	069b      	lsls	r3, r3, #26
 80040b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d109      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x7c4>
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	0e9b      	lsrs	r3, r3, #26
 80040ce:	3301      	adds	r3, #1
 80040d0:	f003 031f 	and.w	r3, r3, #31
 80040d4:	2101      	movs	r1, #1
 80040d6:	fa01 f303 	lsl.w	r3, r1, r3
 80040da:	e017      	b.n	800410c <HAL_ADC_ConfigChannel+0x7f4>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	fa93 f3a3 	rbit	r3, r3
 80040e8:	61bb      	str	r3, [r7, #24]
  return result;
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80040f4:	2320      	movs	r3, #32
 80040f6:	e003      	b.n	8004100 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80040f8:	6a3b      	ldr	r3, [r7, #32]
 80040fa:	fab3 f383 	clz	r3, r3
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	3301      	adds	r3, #1
 8004102:	f003 031f 	and.w	r3, r3, #31
 8004106:	2101      	movs	r1, #1
 8004108:	fa01 f303 	lsl.w	r3, r1, r3
 800410c:	ea42 0103 	orr.w	r1, r2, r3
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10d      	bne.n	8004138 <HAL_ADC_ConfigChannel+0x820>
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	0e9b      	lsrs	r3, r3, #26
 8004122:	3301      	adds	r3, #1
 8004124:	f003 021f 	and.w	r2, r3, #31
 8004128:	4613      	mov	r3, r2
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	4413      	add	r3, r2
 800412e:	3b1e      	subs	r3, #30
 8004130:	051b      	lsls	r3, r3, #20
 8004132:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004136:	e01b      	b.n	8004170 <HAL_ADC_ConfigChannel+0x858>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	fa93 f3a3 	rbit	r3, r3
 8004144:	60fb      	str	r3, [r7, #12]
  return result;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004150:	2320      	movs	r3, #32
 8004152:	e003      	b.n	800415c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	fab3 f383 	clz	r3, r3
 800415a:	b2db      	uxtb	r3, r3
 800415c:	3301      	adds	r3, #1
 800415e:	f003 021f 	and.w	r2, r3, #31
 8004162:	4613      	mov	r3, r2
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	4413      	add	r3, r2
 8004168:	3b1e      	subs	r3, #30
 800416a:	051b      	lsls	r3, r3, #20
 800416c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004170:	430b      	orrs	r3, r1
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	6892      	ldr	r2, [r2, #8]
 8004176:	4619      	mov	r1, r3
 8004178:	f7ff f8d2 	bl	8003320 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	f280 80d7 	bge.w	8004334 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a06      	ldr	r2, [pc, #24]	; (80041a4 <HAL_ADC_ConfigChannel+0x88c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d004      	beq.n	800419a <HAL_ADC_ConfigChannel+0x882>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a04      	ldr	r2, [pc, #16]	; (80041a8 <HAL_ADC_ConfigChannel+0x890>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d10a      	bne.n	80041b0 <HAL_ADC_ConfigChannel+0x898>
 800419a:	4b04      	ldr	r3, [pc, #16]	; (80041ac <HAL_ADC_ConfigChannel+0x894>)
 800419c:	e009      	b.n	80041b2 <HAL_ADC_ConfigChannel+0x89a>
 800419e:	bf00      	nop
 80041a0:	47ff0000 	.word	0x47ff0000
 80041a4:	40022000 	.word	0x40022000
 80041a8:	40022100 	.word	0x40022100
 80041ac:	40022300 	.word	0x40022300
 80041b0:	4b65      	ldr	r3, [pc, #404]	; (8004348 <HAL_ADC_ConfigChannel+0xa30>)
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fe ff88 	bl	80030c8 <LL_ADC_GetCommonPathInternalCh>
 80041b8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a62      	ldr	r2, [pc, #392]	; (800434c <HAL_ADC_ConfigChannel+0xa34>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d004      	beq.n	80041d0 <HAL_ADC_ConfigChannel+0x8b8>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a61      	ldr	r2, [pc, #388]	; (8004350 <HAL_ADC_ConfigChannel+0xa38>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d10e      	bne.n	80041ee <HAL_ADC_ConfigChannel+0x8d6>
 80041d0:	485e      	ldr	r0, [pc, #376]	; (800434c <HAL_ADC_ConfigChannel+0xa34>)
 80041d2:	f7ff f95f 	bl	8003494 <LL_ADC_IsEnabled>
 80041d6:	4604      	mov	r4, r0
 80041d8:	485d      	ldr	r0, [pc, #372]	; (8004350 <HAL_ADC_ConfigChannel+0xa38>)
 80041da:	f7ff f95b 	bl	8003494 <LL_ADC_IsEnabled>
 80041de:	4603      	mov	r3, r0
 80041e0:	4323      	orrs	r3, r4
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	bf0c      	ite	eq
 80041e6:	2301      	moveq	r3, #1
 80041e8:	2300      	movne	r3, #0
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	e008      	b.n	8004200 <HAL_ADC_ConfigChannel+0x8e8>
 80041ee:	4859      	ldr	r0, [pc, #356]	; (8004354 <HAL_ADC_ConfigChannel+0xa3c>)
 80041f0:	f7ff f950 	bl	8003494 <LL_ADC_IsEnabled>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	bf0c      	ite	eq
 80041fa:	2301      	moveq	r3, #1
 80041fc:	2300      	movne	r3, #0
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 8084 	beq.w	800430e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a53      	ldr	r2, [pc, #332]	; (8004358 <HAL_ADC_ConfigChannel+0xa40>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d132      	bne.n	8004276 <HAL_ADC_ConfigChannel+0x95e>
 8004210:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004214:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d12c      	bne.n	8004276 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a4c      	ldr	r2, [pc, #304]	; (8004354 <HAL_ADC_ConfigChannel+0xa3c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	f040 8086 	bne.w	8004334 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a47      	ldr	r2, [pc, #284]	; (800434c <HAL_ADC_ConfigChannel+0xa34>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d004      	beq.n	800423c <HAL_ADC_ConfigChannel+0x924>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a46      	ldr	r2, [pc, #280]	; (8004350 <HAL_ADC_ConfigChannel+0xa38>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d101      	bne.n	8004240 <HAL_ADC_ConfigChannel+0x928>
 800423c:	4a47      	ldr	r2, [pc, #284]	; (800435c <HAL_ADC_ConfigChannel+0xa44>)
 800423e:	e000      	b.n	8004242 <HAL_ADC_ConfigChannel+0x92a>
 8004240:	4a41      	ldr	r2, [pc, #260]	; (8004348 <HAL_ADC_ConfigChannel+0xa30>)
 8004242:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004246:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800424a:	4619      	mov	r1, r3
 800424c:	4610      	mov	r0, r2
 800424e:	f7fe ff28 	bl	80030a2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004252:	4b43      	ldr	r3, [pc, #268]	; (8004360 <HAL_ADC_ConfigChannel+0xa48>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	099b      	lsrs	r3, r3, #6
 8004258:	4a42      	ldr	r2, [pc, #264]	; (8004364 <HAL_ADC_ConfigChannel+0xa4c>)
 800425a:	fba2 2303 	umull	r2, r3, r2, r3
 800425e:	099b      	lsrs	r3, r3, #6
 8004260:	3301      	adds	r3, #1
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004266:	e002      	b.n	800426e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	3b01      	subs	r3, #1
 800426c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1f9      	bne.n	8004268 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004274:	e05e      	b.n	8004334 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a3b      	ldr	r2, [pc, #236]	; (8004368 <HAL_ADC_ConfigChannel+0xa50>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d120      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x9aa>
 8004280:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004284:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d11a      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a30      	ldr	r2, [pc, #192]	; (8004354 <HAL_ADC_ConfigChannel+0xa3c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d14e      	bne.n	8004334 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a2c      	ldr	r2, [pc, #176]	; (800434c <HAL_ADC_ConfigChannel+0xa34>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d004      	beq.n	80042aa <HAL_ADC_ConfigChannel+0x992>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a2a      	ldr	r2, [pc, #168]	; (8004350 <HAL_ADC_ConfigChannel+0xa38>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d101      	bne.n	80042ae <HAL_ADC_ConfigChannel+0x996>
 80042aa:	4a2c      	ldr	r2, [pc, #176]	; (800435c <HAL_ADC_ConfigChannel+0xa44>)
 80042ac:	e000      	b.n	80042b0 <HAL_ADC_ConfigChannel+0x998>
 80042ae:	4a26      	ldr	r2, [pc, #152]	; (8004348 <HAL_ADC_ConfigChannel+0xa30>)
 80042b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042b8:	4619      	mov	r1, r3
 80042ba:	4610      	mov	r0, r2
 80042bc:	f7fe fef1 	bl	80030a2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042c0:	e038      	b.n	8004334 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a29      	ldr	r2, [pc, #164]	; (800436c <HAL_ADC_ConfigChannel+0xa54>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d133      	bne.n	8004334 <HAL_ADC_ConfigChannel+0xa1c>
 80042cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d12d      	bne.n	8004334 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a1d      	ldr	r2, [pc, #116]	; (8004354 <HAL_ADC_ConfigChannel+0xa3c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d128      	bne.n	8004334 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a19      	ldr	r2, [pc, #100]	; (800434c <HAL_ADC_ConfigChannel+0xa34>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d004      	beq.n	80042f6 <HAL_ADC_ConfigChannel+0x9de>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a17      	ldr	r2, [pc, #92]	; (8004350 <HAL_ADC_ConfigChannel+0xa38>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d101      	bne.n	80042fa <HAL_ADC_ConfigChannel+0x9e2>
 80042f6:	4a19      	ldr	r2, [pc, #100]	; (800435c <HAL_ADC_ConfigChannel+0xa44>)
 80042f8:	e000      	b.n	80042fc <HAL_ADC_ConfigChannel+0x9e4>
 80042fa:	4a13      	ldr	r2, [pc, #76]	; (8004348 <HAL_ADC_ConfigChannel+0xa30>)
 80042fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004300:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004304:	4619      	mov	r1, r3
 8004306:	4610      	mov	r0, r2
 8004308:	f7fe fecb 	bl	80030a2 <LL_ADC_SetCommonPathInternalCh>
 800430c:	e012      	b.n	8004334 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004312:	f043 0220 	orr.w	r2, r3, #32
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004320:	e008      	b.n	8004334 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004326:	f043 0220 	orr.w	r2, r3, #32
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800433c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004340:	4618      	mov	r0, r3
 8004342:	37e4      	adds	r7, #228	; 0xe4
 8004344:	46bd      	mov	sp, r7
 8004346:	bd90      	pop	{r4, r7, pc}
 8004348:	58026300 	.word	0x58026300
 800434c:	40022000 	.word	0x40022000
 8004350:	40022100 	.word	0x40022100
 8004354:	58026000 	.word	0x58026000
 8004358:	c7520000 	.word	0xc7520000
 800435c:	40022300 	.word	0x40022300
 8004360:	24000000 	.word	0x24000000
 8004364:	053e2d63 	.word	0x053e2d63
 8004368:	c3210000 	.word	0xc3210000
 800436c:	cb840000 	.word	0xcb840000

08004370 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a6b      	ldr	r2, [pc, #428]	; (800452c <ADC_ConfigureBoostMode+0x1bc>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d004      	beq.n	800438c <ADC_ConfigureBoostMode+0x1c>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a6a      	ldr	r2, [pc, #424]	; (8004530 <ADC_ConfigureBoostMode+0x1c0>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d109      	bne.n	80043a0 <ADC_ConfigureBoostMode+0x30>
 800438c:	4b69      	ldr	r3, [pc, #420]	; (8004534 <ADC_ConfigureBoostMode+0x1c4>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004394:	2b00      	cmp	r3, #0
 8004396:	bf14      	ite	ne
 8004398:	2301      	movne	r3, #1
 800439a:	2300      	moveq	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	e008      	b.n	80043b2 <ADC_ConfigureBoostMode+0x42>
 80043a0:	4b65      	ldr	r3, [pc, #404]	; (8004538 <ADC_ConfigureBoostMode+0x1c8>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	bf14      	ite	ne
 80043ac:	2301      	movne	r3, #1
 80043ae:	2300      	moveq	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d01c      	beq.n	80043f0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80043b6:	f003 ff79 	bl	80082ac <HAL_RCC_GetHCLKFreq>
 80043ba:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043c4:	d010      	beq.n	80043e8 <ADC_ConfigureBoostMode+0x78>
 80043c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043ca:	d871      	bhi.n	80044b0 <ADC_ConfigureBoostMode+0x140>
 80043cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d0:	d002      	beq.n	80043d8 <ADC_ConfigureBoostMode+0x68>
 80043d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043d6:	d16b      	bne.n	80044b0 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	0c1b      	lsrs	r3, r3, #16
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e4:	60fb      	str	r3, [r7, #12]
        break;
 80043e6:	e066      	b.n	80044b6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	089b      	lsrs	r3, r3, #2
 80043ec:	60fb      	str	r3, [r7, #12]
        break;
 80043ee:	e062      	b.n	80044b6 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80043f0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80043f4:	f004 feb0 	bl	8009158 <HAL_RCCEx_GetPeriphCLKFreq>
 80043f8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004402:	d051      	beq.n	80044a8 <ADC_ConfigureBoostMode+0x138>
 8004404:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004408:	d854      	bhi.n	80044b4 <ADC_ConfigureBoostMode+0x144>
 800440a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800440e:	d047      	beq.n	80044a0 <ADC_ConfigureBoostMode+0x130>
 8004410:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004414:	d84e      	bhi.n	80044b4 <ADC_ConfigureBoostMode+0x144>
 8004416:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800441a:	d03d      	beq.n	8004498 <ADC_ConfigureBoostMode+0x128>
 800441c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004420:	d848      	bhi.n	80044b4 <ADC_ConfigureBoostMode+0x144>
 8004422:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004426:	d033      	beq.n	8004490 <ADC_ConfigureBoostMode+0x120>
 8004428:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800442c:	d842      	bhi.n	80044b4 <ADC_ConfigureBoostMode+0x144>
 800442e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004432:	d029      	beq.n	8004488 <ADC_ConfigureBoostMode+0x118>
 8004434:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004438:	d83c      	bhi.n	80044b4 <ADC_ConfigureBoostMode+0x144>
 800443a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800443e:	d01a      	beq.n	8004476 <ADC_ConfigureBoostMode+0x106>
 8004440:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004444:	d836      	bhi.n	80044b4 <ADC_ConfigureBoostMode+0x144>
 8004446:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800444a:	d014      	beq.n	8004476 <ADC_ConfigureBoostMode+0x106>
 800444c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004450:	d830      	bhi.n	80044b4 <ADC_ConfigureBoostMode+0x144>
 8004452:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004456:	d00e      	beq.n	8004476 <ADC_ConfigureBoostMode+0x106>
 8004458:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800445c:	d82a      	bhi.n	80044b4 <ADC_ConfigureBoostMode+0x144>
 800445e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004462:	d008      	beq.n	8004476 <ADC_ConfigureBoostMode+0x106>
 8004464:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004468:	d824      	bhi.n	80044b4 <ADC_ConfigureBoostMode+0x144>
 800446a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800446e:	d002      	beq.n	8004476 <ADC_ConfigureBoostMode+0x106>
 8004470:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004474:	d11e      	bne.n	80044b4 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	0c9b      	lsrs	r3, r3, #18
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	fbb2 f3f3 	udiv	r3, r2, r3
 8004484:	60fb      	str	r3, [r7, #12]
        break;
 8004486:	e016      	b.n	80044b6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	091b      	lsrs	r3, r3, #4
 800448c:	60fb      	str	r3, [r7, #12]
        break;
 800448e:	e012      	b.n	80044b6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	60fb      	str	r3, [r7, #12]
        break;
 8004496:	e00e      	b.n	80044b6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	099b      	lsrs	r3, r3, #6
 800449c:	60fb      	str	r3, [r7, #12]
        break;
 800449e:	e00a      	b.n	80044b6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	09db      	lsrs	r3, r3, #7
 80044a4:	60fb      	str	r3, [r7, #12]
        break;
 80044a6:	e006      	b.n	80044b6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	0a1b      	lsrs	r3, r3, #8
 80044ac:	60fb      	str	r3, [r7, #12]
        break;
 80044ae:	e002      	b.n	80044b6 <ADC_ConfigureBoostMode+0x146>
        break;
 80044b0:	bf00      	nop
 80044b2:	e000      	b.n	80044b6 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80044b4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	085b      	lsrs	r3, r3, #1
 80044ba:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4a1f      	ldr	r2, [pc, #124]	; (800453c <ADC_ConfigureBoostMode+0x1cc>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d808      	bhi.n	80044d6 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80044d2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80044d4:	e025      	b.n	8004522 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4a19      	ldr	r2, [pc, #100]	; (8004540 <ADC_ConfigureBoostMode+0x1d0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d80a      	bhi.n	80044f4 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044f0:	609a      	str	r2, [r3, #8]
}
 80044f2:	e016      	b.n	8004522 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4a13      	ldr	r2, [pc, #76]	; (8004544 <ADC_ConfigureBoostMode+0x1d4>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d80a      	bhi.n	8004512 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800450e:	609a      	str	r2, [r3, #8]
}
 8004510:	e007      	b.n	8004522 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004520:	609a      	str	r2, [r3, #8]
}
 8004522:	bf00      	nop
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	40022000 	.word	0x40022000
 8004530:	40022100 	.word	0x40022100
 8004534:	40022300 	.word	0x40022300
 8004538:	58026300 	.word	0x58026300
 800453c:	005f5e10 	.word	0x005f5e10
 8004540:	00bebc20 	.word	0x00bebc20
 8004544:	017d7840 	.word	0x017d7840

08004548 <LL_ADC_IsEnabled>:
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <LL_ADC_IsEnabled+0x18>
 800455c:	2301      	movs	r3, #1
 800455e:	e000      	b.n	8004562 <LL_ADC_IsEnabled+0x1a>
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <LL_ADC_REG_IsConversionOngoing>:
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b04      	cmp	r3, #4
 8004580:	d101      	bne.n	8004586 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004594:	b590      	push	{r4, r7, lr}
 8004596:	b0a3      	sub	sp, #140	; 0x8c
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d101      	bne.n	80045b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80045ae:	2302      	movs	r3, #2
 80045b0:	e0c1      	b.n	8004736 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80045ba:	2300      	movs	r3, #0
 80045bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80045be:	2300      	movs	r3, #0
 80045c0:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a5e      	ldr	r2, [pc, #376]	; (8004740 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d102      	bne.n	80045d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80045cc:	4b5d      	ldr	r3, [pc, #372]	; (8004744 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	e001      	b.n	80045d6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10b      	bne.n	80045f4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e0:	f043 0220 	orr.w	r2, r3, #32
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e0a0      	b.n	8004736 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff ffb9 	bl	800456e <LL_ADC_REG_IsConversionOngoing>
 80045fc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4618      	mov	r0, r3
 8004606:	f7ff ffb2 	bl	800456e <LL_ADC_REG_IsConversionOngoing>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	f040 8081 	bne.w	8004714 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004612:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004616:	2b00      	cmp	r3, #0
 8004618:	d17c      	bne.n	8004714 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a48      	ldr	r2, [pc, #288]	; (8004740 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d004      	beq.n	800462e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a46      	ldr	r2, [pc, #280]	; (8004744 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d101      	bne.n	8004632 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800462e:	4b46      	ldr	r3, [pc, #280]	; (8004748 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004630:	e000      	b.n	8004634 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004632:	4b46      	ldr	r3, [pc, #280]	; (800474c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004634:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d039      	beq.n	80046b2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800463e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	431a      	orrs	r2, r3
 800464c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800464e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a3a      	ldr	r2, [pc, #232]	; (8004740 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d004      	beq.n	8004664 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a39      	ldr	r2, [pc, #228]	; (8004744 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d10e      	bne.n	8004682 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004664:	4836      	ldr	r0, [pc, #216]	; (8004740 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004666:	f7ff ff6f 	bl	8004548 <LL_ADC_IsEnabled>
 800466a:	4604      	mov	r4, r0
 800466c:	4835      	ldr	r0, [pc, #212]	; (8004744 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800466e:	f7ff ff6b 	bl	8004548 <LL_ADC_IsEnabled>
 8004672:	4603      	mov	r3, r0
 8004674:	4323      	orrs	r3, r4
 8004676:	2b00      	cmp	r3, #0
 8004678:	bf0c      	ite	eq
 800467a:	2301      	moveq	r3, #1
 800467c:	2300      	movne	r3, #0
 800467e:	b2db      	uxtb	r3, r3
 8004680:	e008      	b.n	8004694 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004682:	4833      	ldr	r0, [pc, #204]	; (8004750 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004684:	f7ff ff60 	bl	8004548 <LL_ADC_IsEnabled>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	bf0c      	ite	eq
 800468e:	2301      	moveq	r3, #1
 8004690:	2300      	movne	r3, #0
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d047      	beq.n	8004728 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004698:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	4b2d      	ldr	r3, [pc, #180]	; (8004754 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800469e:	4013      	ands	r3, r2
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	6811      	ldr	r1, [r2, #0]
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	6892      	ldr	r2, [r2, #8]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	431a      	orrs	r2, r3
 80046ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80046ae:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046b0:	e03a      	b.n	8004728 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80046b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80046bc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a1f      	ldr	r2, [pc, #124]	; (8004740 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d004      	beq.n	80046d2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a1d      	ldr	r2, [pc, #116]	; (8004744 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d10e      	bne.n	80046f0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80046d2:	481b      	ldr	r0, [pc, #108]	; (8004740 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80046d4:	f7ff ff38 	bl	8004548 <LL_ADC_IsEnabled>
 80046d8:	4604      	mov	r4, r0
 80046da:	481a      	ldr	r0, [pc, #104]	; (8004744 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80046dc:	f7ff ff34 	bl	8004548 <LL_ADC_IsEnabled>
 80046e0:	4603      	mov	r3, r0
 80046e2:	4323      	orrs	r3, r4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	bf0c      	ite	eq
 80046e8:	2301      	moveq	r3, #1
 80046ea:	2300      	movne	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	e008      	b.n	8004702 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80046f0:	4817      	ldr	r0, [pc, #92]	; (8004750 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80046f2:	f7ff ff29 	bl	8004548 <LL_ADC_IsEnabled>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	bf0c      	ite	eq
 80046fc:	2301      	moveq	r3, #1
 80046fe:	2300      	movne	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d010      	beq.n	8004728 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004706:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	4b12      	ldr	r3, [pc, #72]	; (8004754 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800470c:	4013      	ands	r3, r2
 800470e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004710:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004712:	e009      	b.n	8004728 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004718:	f043 0220 	orr.w	r2, r3, #32
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8004726:	e000      	b.n	800472a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004728:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004732:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8004736:	4618      	mov	r0, r3
 8004738:	378c      	adds	r7, #140	; 0x8c
 800473a:	46bd      	mov	sp, r7
 800473c:	bd90      	pop	{r4, r7, pc}
 800473e:	bf00      	nop
 8004740:	40022000 	.word	0x40022000
 8004744:	40022100 	.word	0x40022100
 8004748:	40022300 	.word	0x40022300
 800474c:	58026300 	.word	0x58026300
 8004750:	58026000 	.word	0x58026000
 8004754:	fffff0e0 	.word	0xfffff0e0

08004758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004768:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <__NVIC_SetPriorityGrouping+0x40>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004774:	4013      	ands	r3, r2
 8004776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004780:	4b06      	ldr	r3, [pc, #24]	; (800479c <__NVIC_SetPriorityGrouping+0x44>)
 8004782:	4313      	orrs	r3, r2
 8004784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004786:	4a04      	ldr	r2, [pc, #16]	; (8004798 <__NVIC_SetPriorityGrouping+0x40>)
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	60d3      	str	r3, [r2, #12]
}
 800478c:	bf00      	nop
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	e000ed00 	.word	0xe000ed00
 800479c:	05fa0000 	.word	0x05fa0000

080047a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047a4:	4b04      	ldr	r3, [pc, #16]	; (80047b8 <__NVIC_GetPriorityGrouping+0x18>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	0a1b      	lsrs	r3, r3, #8
 80047aa:	f003 0307 	and.w	r3, r3, #7
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	e000ed00 	.word	0xe000ed00

080047bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	4603      	mov	r3, r0
 80047c4:	6039      	str	r1, [r7, #0]
 80047c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80047c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	db0a      	blt.n	80047e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	490c      	ldr	r1, [pc, #48]	; (8004808 <__NVIC_SetPriority+0x4c>)
 80047d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047da:	0112      	lsls	r2, r2, #4
 80047dc:	b2d2      	uxtb	r2, r2
 80047de:	440b      	add	r3, r1
 80047e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047e4:	e00a      	b.n	80047fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	4908      	ldr	r1, [pc, #32]	; (800480c <__NVIC_SetPriority+0x50>)
 80047ec:	88fb      	ldrh	r3, [r7, #6]
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	3b04      	subs	r3, #4
 80047f4:	0112      	lsls	r2, r2, #4
 80047f6:	b2d2      	uxtb	r2, r2
 80047f8:	440b      	add	r3, r1
 80047fa:	761a      	strb	r2, [r3, #24]
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	e000e100 	.word	0xe000e100
 800480c:	e000ed00 	.word	0xe000ed00

08004810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004810:	b480      	push	{r7}
 8004812:	b089      	sub	sp, #36	; 0x24
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	f1c3 0307 	rsb	r3, r3, #7
 800482a:	2b04      	cmp	r3, #4
 800482c:	bf28      	it	cs
 800482e:	2304      	movcs	r3, #4
 8004830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	3304      	adds	r3, #4
 8004836:	2b06      	cmp	r3, #6
 8004838:	d902      	bls.n	8004840 <NVIC_EncodePriority+0x30>
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	3b03      	subs	r3, #3
 800483e:	e000      	b.n	8004842 <NVIC_EncodePriority+0x32>
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004844:	f04f 32ff 	mov.w	r2, #4294967295
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	43da      	mvns	r2, r3
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	401a      	ands	r2, r3
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004858:	f04f 31ff 	mov.w	r1, #4294967295
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	fa01 f303 	lsl.w	r3, r1, r3
 8004862:	43d9      	mvns	r1, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004868:	4313      	orrs	r3, r2
         );
}
 800486a:	4618      	mov	r0, r3
 800486c:	3724      	adds	r7, #36	; 0x24
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
	...

08004878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3b01      	subs	r3, #1
 8004884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004888:	d301      	bcc.n	800488e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800488a:	2301      	movs	r3, #1
 800488c:	e00f      	b.n	80048ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800488e:	4a0a      	ldr	r2, [pc, #40]	; (80048b8 <SysTick_Config+0x40>)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	3b01      	subs	r3, #1
 8004894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004896:	210f      	movs	r1, #15
 8004898:	f04f 30ff 	mov.w	r0, #4294967295
 800489c:	f7ff ff8e 	bl	80047bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <SysTick_Config+0x40>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048a6:	4b04      	ldr	r3, [pc, #16]	; (80048b8 <SysTick_Config+0x40>)
 80048a8:	2207      	movs	r2, #7
 80048aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	e000e010 	.word	0xe000e010

080048bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff ff47 	bl	8004758 <__NVIC_SetPriorityGrouping>
}
 80048ca:	bf00      	nop
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b086      	sub	sp, #24
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	4603      	mov	r3, r0
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	607a      	str	r2, [r7, #4]
 80048de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048e0:	f7ff ff5e 	bl	80047a0 <__NVIC_GetPriorityGrouping>
 80048e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	68b9      	ldr	r1, [r7, #8]
 80048ea:	6978      	ldr	r0, [r7, #20]
 80048ec:	f7ff ff90 	bl	8004810 <NVIC_EncodePriority>
 80048f0:	4602      	mov	r2, r0
 80048f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80048f6:	4611      	mov	r1, r2
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7ff ff5f 	bl	80047bc <__NVIC_SetPriority>
}
 80048fe:	bf00      	nop
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b082      	sub	sp, #8
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff ffb2 	bl	8004878 <SysTick_Config>
 8004914:	4603      	mov	r3, r0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b082      	sub	sp, #8
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e014      	b.n	800495a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	791b      	ldrb	r3, [r3, #4]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d105      	bne.n	8004946 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f7fd f97b 	bl	8001c3c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2202      	movs	r2, #2
 800494a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
	...

08004964 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	795b      	ldrb	r3, [r3, #5]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d101      	bne.n	800497c <HAL_DAC_ConfigChannel+0x18>
 8004978:	2302      	movs	r3, #2
 800497a:	e11d      	b.n	8004bb8 <HAL_DAC_ConfigChannel+0x254>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2201      	movs	r2, #1
 8004980:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2202      	movs	r2, #2
 8004986:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2b04      	cmp	r3, #4
 800498e:	d174      	bne.n	8004a7a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004990:	f7fe fb1a 	bl	8002fc8 <HAL_GetTick>
 8004994:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d134      	bne.n	8004a06 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800499c:	e011      	b.n	80049c2 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800499e:	f7fe fb13 	bl	8002fc8 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d90a      	bls.n	80049c2 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	f043 0208 	orr.w	r2, r3, #8
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2203      	movs	r2, #3
 80049bc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e0fa      	b.n	8004bb8 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049c8:	4b7d      	ldr	r3, [pc, #500]	; (8004bc0 <HAL_DAC_ConfigChannel+0x25c>)
 80049ca:	4013      	ands	r3, r2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e6      	bne.n	800499e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80049d0:	2001      	movs	r0, #1
 80049d2:	f7fe fb05 	bl	8002fe0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	6992      	ldr	r2, [r2, #24]
 80049de:	641a      	str	r2, [r3, #64]	; 0x40
 80049e0:	e01e      	b.n	8004a20 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80049e2:	f7fe faf1 	bl	8002fc8 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d90a      	bls.n	8004a06 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	f043 0208 	orr.w	r2, r3, #8
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2203      	movs	r2, #3
 8004a00:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e0d8      	b.n	8004bb8 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	dbe8      	blt.n	80049e2 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004a10:	2001      	movs	r0, #1
 8004a12:	f7fe fae5 	bl	8002fe0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	6992      	ldr	r2, [r2, #24]
 8004a1e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f003 0310 	and.w	r3, r3, #16
 8004a2c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004a30:	fa01 f303 	lsl.w	r3, r1, r3
 8004a34:	43db      	mvns	r3, r3
 8004a36:	ea02 0103 	and.w	r1, r2, r3
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	69da      	ldr	r2, [r3, #28]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f003 0310 	and.w	r3, r3, #16
 8004a44:	409a      	lsls	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f003 0310 	and.w	r3, r3, #16
 8004a5a:	21ff      	movs	r1, #255	; 0xff
 8004a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a60:	43db      	mvns	r3, r3
 8004a62:	ea02 0103 	and.w	r1, r2, r3
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	6a1a      	ldr	r2, [r3, #32]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f003 0310 	and.w	r3, r3, #16
 8004a70:	409a      	lsls	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d11d      	bne.n	8004abe <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a88:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f003 0310 	and.w	r3, r3, #16
 8004a90:	221f      	movs	r2, #31
 8004a92:	fa02 f303 	lsl.w	r3, r2, r3
 8004a96:	43db      	mvns	r3, r3
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f003 0310 	and.w	r3, r3, #16
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f003 0310 	and.w	r3, r3, #16
 8004acc:	2207      	movs	r2, #7
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	43db      	mvns	r3, r3
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d102      	bne.n	8004ae8 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	61fb      	str	r3, [r7, #28]
 8004ae6:	e00f      	b.n	8004b08 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d102      	bne.n	8004af6 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004af0:	2301      	movs	r3, #1
 8004af2:	61fb      	str	r3, [r7, #28]
 8004af4:	e008      	b.n	8004b08 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d102      	bne.n	8004b04 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004afe:	2301      	movs	r3, #1
 8004b00:	61fb      	str	r3, [r7, #28]
 8004b02:	e001      	b.n	8004b08 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004b04:	2300      	movs	r3, #0
 8004b06:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	69fa      	ldr	r2, [r7, #28]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f003 0310 	and.w	r3, r3, #16
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	fa02 f303 	lsl.w	r3, r2, r3
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6819      	ldr	r1, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f003 0310 	and.w	r3, r3, #16
 8004b3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b42:	fa02 f303 	lsl.w	r3, r2, r3
 8004b46:	43da      	mvns	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	400a      	ands	r2, r1
 8004b4e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f003 0310 	and.w	r3, r3, #16
 8004b5e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004b62:	fa02 f303 	lsl.w	r3, r2, r3
 8004b66:	43db      	mvns	r3, r3
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f003 0310 	and.w	r3, r3, #16
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6819      	ldr	r1, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f003 0310 	and.w	r3, r3, #16
 8004b9a:	22c0      	movs	r2, #192	; 0xc0
 8004b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba0:	43da      	mvns	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	400a      	ands	r2, r1
 8004ba8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2201      	movs	r2, #1
 8004bae:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3720      	adds	r7, #32
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	20008000 	.word	0x20008000

08004bc4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e0c6      	b.n	8004d64 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d102      	bne.n	8004be4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7fd f872 	bl	8001cc8 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2223      	movs	r2, #35	; 0x23
 8004be8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bea:	4b60      	ldr	r3, [pc, #384]	; (8004d6c <HAL_ETH_Init+0x1a8>)
 8004bec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004bf0:	4a5e      	ldr	r2, [pc, #376]	; (8004d6c <HAL_ETH_Init+0x1a8>)
 8004bf2:	f043 0302 	orr.w	r3, r3, #2
 8004bf6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004bfa:	4b5c      	ldr	r3, [pc, #368]	; (8004d6c <HAL_ETH_Init+0x1a8>)
 8004bfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	60bb      	str	r3, [r7, #8]
 8004c06:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	7a1b      	ldrb	r3, [r3, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d103      	bne.n	8004c18 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004c10:	2000      	movs	r0, #0
 8004c12:	f7fe fa09 	bl	8003028 <HAL_SYSCFG_ETHInterfaceSelect>
 8004c16:	e003      	b.n	8004c20 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004c18:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004c1c:	f7fe fa04 	bl	8003028 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0201 	orr.w	r2, r2, #1
 8004c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c38:	f7fe f9c6 	bl	8002fc8 <HAL_GetTick>
 8004c3c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004c3e:	e00f      	b.n	8004c60 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8004c40:	f7fe f9c2 	bl	8002fc8 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c4e:	d907      	bls.n	8004c60 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2204      	movs	r2, #4
 8004c54:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	22e0      	movs	r2, #224	; 0xe0
 8004c5a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e081      	b.n	8004d64 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1e6      	bne.n	8004c40 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fac0 	bl	80051f8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004c78:	f003 fb18 	bl	80082ac <HAL_RCC_GetHCLKFreq>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	4a3c      	ldr	r2, [pc, #240]	; (8004d70 <HAL_ETH_Init+0x1ac>)
 8004c80:	fba2 2303 	umull	r2, r3, r2, r3
 8004c84:	0c9a      	lsrs	r2, r3, #18
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3a01      	subs	r2, #1
 8004c8c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 fa13 	bl	80050bc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004cac:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004cb0:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d007      	beq.n	8004cce <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	22e0      	movs	r2, #224	; 0xe0
 8004cc8:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e04a      	b.n	8004d64 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	f241 1308 	movw	r3, #4360	; 0x1108
 8004cd6:	4413      	add	r3, r2
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	4b26      	ldr	r3, [pc, #152]	; (8004d74 <HAL_ETH_Init+0x1b0>)
 8004cdc:	4013      	ands	r3, r2
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6952      	ldr	r2, [r2, #20]
 8004ce2:	0052      	lsls	r2, r2, #1
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	6809      	ldr	r1, [r1, #0]
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	f241 1308 	movw	r3, #4360	; 0x1108
 8004cee:	440b      	add	r3, r1
 8004cf0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fad8 	bl	80052a8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 fb1c 	bl	8005336 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	3305      	adds	r3, #5
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	021a      	lsls	r2, r3, #8
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	4619      	mov	r1, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	3303      	adds	r3, #3
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	061a      	lsls	r2, r3, #24
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	3302      	adds	r3, #2
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	041b      	lsls	r3, r3, #16
 8004d30:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	3301      	adds	r3, #1
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004d3c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004d4a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004d4c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2210      	movs	r2, #16
 8004d5a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2210      	movs	r2, #16
 8004d60:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	58024400 	.word	0x58024400
 8004d70:	431bde83 	.word	0x431bde83
 8004d74:	ffff8001 	.word	0xffff8001

08004d78 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8004d8a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	791b      	ldrb	r3, [r3, #4]
 8004d90:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8004d92:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	7b1b      	ldrb	r3, [r3, #12]
 8004d98:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004d9a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	7b5b      	ldrb	r3, [r3, #13]
 8004da0:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004da2:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	7b9b      	ldrb	r3, [r3, #14]
 8004da8:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004daa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	7bdb      	ldrb	r3, [r3, #15]
 8004db0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004db2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	7c12      	ldrb	r2, [r2, #16]
 8004db8:	2a00      	cmp	r2, #0
 8004dba:	d102      	bne.n	8004dc2 <ETH_SetMACConfig+0x4a>
 8004dbc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004dc0:	e000      	b.n	8004dc4 <ETH_SetMACConfig+0x4c>
 8004dc2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004dc4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	7c52      	ldrb	r2, [r2, #17]
 8004dca:	2a00      	cmp	r2, #0
 8004dcc:	d102      	bne.n	8004dd4 <ETH_SetMACConfig+0x5c>
 8004dce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004dd2:	e000      	b.n	8004dd6 <ETH_SetMACConfig+0x5e>
 8004dd4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004dd6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	7c9b      	ldrb	r3, [r3, #18]
 8004ddc:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004dde:	431a      	orrs	r2, r3
                                macconf->Speed |
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004de4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8004dea:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	7f1b      	ldrb	r3, [r3, #28]
 8004df0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8004df2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	7f5b      	ldrb	r3, [r3, #29]
 8004df8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004dfa:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	7f92      	ldrb	r2, [r2, #30]
 8004e00:	2a00      	cmp	r2, #0
 8004e02:	d102      	bne.n	8004e0a <ETH_SetMACConfig+0x92>
 8004e04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e08:	e000      	b.n	8004e0c <ETH_SetMACConfig+0x94>
 8004e0a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004e0c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	7fdb      	ldrb	r3, [r3, #31]
 8004e12:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004e14:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004e1c:	2a00      	cmp	r2, #0
 8004e1e:	d102      	bne.n	8004e26 <ETH_SetMACConfig+0xae>
 8004e20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e24:	e000      	b.n	8004e28 <ETH_SetMACConfig+0xb0>
 8004e26:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004e28:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004e2e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e36:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8004e38:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	4b56      	ldr	r3, [pc, #344]	; (8004fa4 <ETH_SetMACConfig+0x22c>)
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	6812      	ldr	r2, [r2, #0]
 8004e50:	68f9      	ldr	r1, [r7, #12]
 8004e52:	430b      	orrs	r3, r1
 8004e54:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e62:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004e64:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e6c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004e6e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004e76:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004e78:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004e80:	2a00      	cmp	r2, #0
 8004e82:	d102      	bne.n	8004e8a <ETH_SetMACConfig+0x112>
 8004e84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004e88:	e000      	b.n	8004e8c <ETH_SetMACConfig+0x114>
 8004e8a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004e8c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	4b42      	ldr	r3, [pc, #264]	; (8004fa8 <ETH_SetMACConfig+0x230>)
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6812      	ldr	r2, [r2, #0]
 8004ea4:	68f9      	ldr	r1, [r7, #12]
 8004ea6:	430b      	orrs	r3, r1
 8004ea8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eb0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68da      	ldr	r2, [r3, #12]
 8004ec0:	4b3a      	ldr	r3, [pc, #232]	; (8004fac <ETH_SetMACConfig+0x234>)
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6812      	ldr	r2, [r2, #0]
 8004ec8:	68f9      	ldr	r1, [r7, #12]
 8004eca:	430b      	orrs	r3, r1
 8004ecc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004ed4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004eda:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004ee2:	2a00      	cmp	r2, #0
 8004ee4:	d101      	bne.n	8004eea <ETH_SetMACConfig+0x172>
 8004ee6:	2280      	movs	r2, #128	; 0x80
 8004ee8:	e000      	b.n	8004eec <ETH_SetMACConfig+0x174>
 8004eea:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004eec:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ef2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004efe:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004f02:	4013      	ands	r3, r2
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6812      	ldr	r2, [r2, #0]
 8004f08:	68f9      	ldr	r1, [r7, #12]
 8004f0a:	430b      	orrs	r3, r1
 8004f0c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004f14:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004f1c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2a:	f023 0103 	bic.w	r1, r3, #3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004f42:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004f5e:	2a00      	cmp	r2, #0
 8004f60:	d101      	bne.n	8004f66 <ETH_SetMACConfig+0x1ee>
 8004f62:	2240      	movs	r2, #64	; 0x40
 8004f64:	e000      	b.n	8004f68 <ETH_SetMACConfig+0x1f0>
 8004f66:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004f68:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004f70:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004f72:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004f7a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004f88:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004f98:	bf00      	nop
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	00048083 	.word	0x00048083
 8004fa8:	c0f88000 	.word	0xc0f88000
 8004fac:	fffffef0 	.word	0xfffffef0

08004fb0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	4b38      	ldr	r3, [pc, #224]	; (80050a8 <ETH_SetDMAConfig+0xf8>)
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	6879      	ldr	r1, [r7, #4]
 8004fce:	6809      	ldr	r1, [r1, #0]
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8004fd6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	791b      	ldrb	r3, [r3, #4]
 8004fdc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004fe2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	7b1b      	ldrb	r3, [r3, #12]
 8004fe8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	f241 0304 	movw	r3, #4100	; 0x1004
 8004ff6:	4413      	add	r3, r2
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	4b2c      	ldr	r3, [pc, #176]	; (80050ac <ETH_SetDMAConfig+0xfc>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6811      	ldr	r1, [r2, #0]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	431a      	orrs	r2, r3
 8005006:	f241 0304 	movw	r3, #4100	; 0x1004
 800500a:	440b      	add	r3, r1
 800500c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	7b5b      	ldrb	r3, [r3, #13]
 8005012:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005018:	4313      	orrs	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	4b22      	ldr	r3, [pc, #136]	; (80050b0 <ETH_SetDMAConfig+0x100>)
 8005028:	4013      	ands	r3, r2
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6811      	ldr	r1, [r2, #0]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	431a      	orrs	r2, r3
 8005032:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8005036:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	7d1b      	ldrb	r3, [r3, #20]
 8005040:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005042:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	7f5b      	ldrb	r3, [r3, #29]
 8005048:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	f241 1304 	movw	r3, #4356	; 0x1104
 8005056:	4413      	add	r3, r2
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	4b16      	ldr	r3, [pc, #88]	; (80050b4 <ETH_SetDMAConfig+0x104>)
 800505c:	4013      	ands	r3, r2
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6811      	ldr	r1, [r2, #0]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	431a      	orrs	r2, r3
 8005066:	f241 1304 	movw	r3, #4356	; 0x1104
 800506a:	440b      	add	r3, r1
 800506c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	7f1b      	ldrb	r3, [r3, #28]
 8005072:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005078:	4313      	orrs	r3, r2
 800507a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	f241 1308 	movw	r3, #4360	; 0x1108
 8005084:	4413      	add	r3, r2
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	4b0b      	ldr	r3, [pc, #44]	; (80050b8 <ETH_SetDMAConfig+0x108>)
 800508a:	4013      	ands	r3, r2
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6811      	ldr	r1, [r2, #0]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	431a      	orrs	r2, r3
 8005094:	f241 1308 	movw	r3, #4360	; 0x1108
 8005098:	440b      	add	r3, r1
 800509a:	601a      	str	r2, [r3, #0]
}
 800509c:	bf00      	nop
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	ffff87fd 	.word	0xffff87fd
 80050ac:	ffff2ffe 	.word	0xffff2ffe
 80050b0:	fffec000 	.word	0xfffec000
 80050b4:	ffc0efef 	.word	0xffc0efef
 80050b8:	7fc0ffff 	.word	0x7fc0ffff

080050bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b0a4      	sub	sp, #144	; 0x90
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80050c4:	2301      	movs	r3, #1
 80050c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80050ca:	2300      	movs	r3, #0
 80050cc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80050ce:	2300      	movs	r3, #0
 80050d0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80050d4:	2300      	movs	r3, #0
 80050d6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80050da:	2301      	movs	r3, #1
 80050dc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80050e0:	2301      	movs	r3, #1
 80050e2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80050e6:	2301      	movs	r3, #1
 80050e8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80050ec:	2300      	movs	r3, #0
 80050ee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80050f2:	2301      	movs	r3, #1
 80050f4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80050f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050fc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80050fe:	2300      	movs	r3, #0
 8005100:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005104:	2300      	movs	r3, #0
 8005106:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005108:	2300      	movs	r3, #0
 800510a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800510e:	2300      	movs	r3, #0
 8005110:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005114:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005118:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800511a:	2300      	movs	r3, #0
 800511c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005120:	2300      	movs	r3, #0
 8005122:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005124:	2301      	movs	r3, #1
 8005126:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800512a:	2300      	movs	r3, #0
 800512c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005130:	2300      	movs	r3, #0
 8005132:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005136:	2300      	movs	r3, #0
 8005138:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800513a:	2300      	movs	r3, #0
 800513c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800513e:	2300      	movs	r3, #0
 8005140:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005142:	2300      	movs	r3, #0
 8005144:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005148:	2300      	movs	r3, #0
 800514a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800514e:	2301      	movs	r3, #1
 8005150:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005154:	2320      	movs	r3, #32
 8005156:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800515a:	2301      	movs	r3, #1
 800515c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005160:	2300      	movs	r3, #0
 8005162:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005166:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800516a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800516c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005170:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005172:	2300      	movs	r3, #0
 8005174:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005178:	2302      	movs	r3, #2
 800517a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800517e:	2300      	movs	r3, #0
 8005180:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005184:	2300      	movs	r3, #0
 8005186:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800518a:	2300      	movs	r3, #0
 800518c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005190:	2301      	movs	r3, #1
 8005192:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005196:	2300      	movs	r3, #0
 8005198:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800519a:	2301      	movs	r3, #1
 800519c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80051a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051a4:	4619      	mov	r1, r3
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7ff fde6 	bl	8004d78 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80051ac:	2301      	movs	r3, #1
 80051ae:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80051b0:	2301      	movs	r3, #1
 80051b2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80051b4:	2300      	movs	r3, #0
 80051b6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80051b8:	2300      	movs	r3, #0
 80051ba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80051be:	2300      	movs	r3, #0
 80051c0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80051c2:	2300      	movs	r3, #0
 80051c4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80051c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80051ca:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80051cc:	2300      	movs	r3, #0
 80051ce:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80051d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80051d4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80051d6:	2300      	movs	r3, #0
 80051d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80051dc:	f44f 7306 	mov.w	r3, #536	; 0x218
 80051e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80051e2:	f107 0308 	add.w	r3, r7, #8
 80051e6:	4619      	mov	r1, r3
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f7ff fee1 	bl	8004fb0 <ETH_SetDMAConfig>
}
 80051ee:	bf00      	nop
 80051f0:	3790      	adds	r7, #144	; 0x90
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
	...

080051f8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005208:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005210:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005212:	f003 f84b 	bl	80082ac <HAL_RCC_GetHCLKFreq>
 8005216:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4a1e      	ldr	r2, [pc, #120]	; (8005294 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d908      	bls.n	8005232 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	4a1d      	ldr	r2, [pc, #116]	; (8005298 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d804      	bhi.n	8005232 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	e027      	b.n	8005282 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	4a18      	ldr	r2, [pc, #96]	; (8005298 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d908      	bls.n	800524c <ETH_MAC_MDIO_ClkConfig+0x54>
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	4a17      	ldr	r2, [pc, #92]	; (800529c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d204      	bcs.n	800524c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005248:	60fb      	str	r3, [r7, #12]
 800524a:	e01a      	b.n	8005282 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4a13      	ldr	r2, [pc, #76]	; (800529c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d303      	bcc.n	800525c <ETH_MAC_MDIO_ClkConfig+0x64>
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	4a12      	ldr	r2, [pc, #72]	; (80052a0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d911      	bls.n	8005280 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	4a10      	ldr	r2, [pc, #64]	; (80052a0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d908      	bls.n	8005276 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	4a0f      	ldr	r2, [pc, #60]	; (80052a4 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d804      	bhi.n	8005276 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	e005      	b.n	8005282 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	e000      	b.n	8005282 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005280:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800528c:	bf00      	nop
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	01312cff 	.word	0x01312cff
 8005298:	02160ebf 	.word	0x02160ebf
 800529c:	03938700 	.word	0x03938700
 80052a0:	05f5e0ff 	.word	0x05f5e0ff
 80052a4:	08f0d17f 	.word	0x08f0d17f

080052a8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80052b0:	2300      	movs	r3, #0
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	e01d      	b.n	80052f2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68d9      	ldr	r1, [r3, #12]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	4613      	mov	r3, r2
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	4413      	add	r3, r2
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	440b      	add	r3, r1
 80052c6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	2200      	movs	r2, #0
 80052d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2200      	movs	r2, #0
 80052d8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2200      	movs	r2, #0
 80052de:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80052e0:	68b9      	ldr	r1, [r7, #8]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	3206      	adds	r2, #6
 80052e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3301      	adds	r3, #1
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2b03      	cmp	r3, #3
 80052f6:	d9de      	bls.n	80052b6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	f241 132c 	movw	r3, #4396	; 0x112c
 8005306:	4413      	add	r3, r2
 8005308:	2203      	movs	r2, #3
 800530a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68d9      	ldr	r1, [r3, #12]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	f241 1314 	movw	r3, #4372	; 0x1114
 8005318:	4413      	add	r3, r2
 800531a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68da      	ldr	r2, [r3, #12]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005328:	601a      	str	r2, [r3, #0]
}
 800532a:	bf00      	nop
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005336:	b480      	push	{r7}
 8005338:	b085      	sub	sp, #20
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800533e:	2300      	movs	r3, #0
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	e024      	b.n	800538e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6919      	ldr	r1, [r3, #16]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4613      	mov	r3, r2
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	4413      	add	r3, r2
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	440b      	add	r3, r1
 8005354:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	2200      	movs	r2, #0
 800535a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2200      	movs	r2, #0
 8005360:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2200      	movs	r2, #0
 8005366:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2200      	movs	r2, #0
 800536c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2200      	movs	r2, #0
 8005372:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2200      	movs	r2, #0
 8005378:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	6879      	ldr	r1, [r7, #4]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	3310      	adds	r3, #16
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	440b      	add	r3, r1
 8005386:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	3301      	adds	r3, #1
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2b03      	cmp	r3, #3
 8005392:	d9d7      	bls.n	8005344 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	f241 1330 	movw	r3, #4400	; 0x1130
 80053ba:	4413      	add	r3, r2
 80053bc:	2203      	movs	r2, #3
 80053be:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6919      	ldr	r1, [r3, #16]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	f241 131c 	movw	r3, #4380	; 0x111c
 80053cc:	4413      	add	r3, r2
 80053ce:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	f241 1328 	movw	r3, #4392	; 0x1128
 80053e0:	4413      	add	r3, r2
 80053e2:	6019      	str	r1, [r3, #0]
}
 80053e4:	bf00      	nop
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b098      	sub	sp, #96	; 0x60
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80053f8:	4a84      	ldr	r2, [pc, #528]	; (800560c <HAL_FDCAN_Init+0x21c>)
 80053fa:	f107 030c 	add.w	r3, r7, #12
 80053fe:	4611      	mov	r1, r2
 8005400:	224c      	movs	r2, #76	; 0x4c
 8005402:	4618      	mov	r0, r3
 8005404:	f008 ff92 	bl	800e32c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e1ca      	b.n	80057a8 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a7e      	ldr	r2, [pc, #504]	; (8005610 <HAL_FDCAN_Init+0x220>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d106      	bne.n	800542a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005424:	461a      	mov	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d106      	bne.n	8005444 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fc fcee 	bl	8001e20 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	699a      	ldr	r2, [r3, #24]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0210 	bic.w	r2, r2, #16
 8005452:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005454:	f7fd fdb8 	bl	8002fc8 <HAL_GetTick>
 8005458:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800545a:	e014      	b.n	8005486 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800545c:	f7fd fdb4 	bl	8002fc8 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b0a      	cmp	r3, #10
 8005468:	d90d      	bls.n	8005486 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005470:	f043 0201 	orr.w	r2, r3, #1
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2203      	movs	r2, #3
 800547e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e190      	b.n	80057a8 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	f003 0308 	and.w	r3, r3, #8
 8005490:	2b08      	cmp	r3, #8
 8005492:	d0e3      	beq.n	800545c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699a      	ldr	r2, [r3, #24]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f042 0201 	orr.w	r2, r2, #1
 80054a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054a4:	f7fd fd90 	bl	8002fc8 <HAL_GetTick>
 80054a8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80054aa:	e014      	b.n	80054d6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80054ac:	f7fd fd8c 	bl	8002fc8 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b0a      	cmp	r3, #10
 80054b8:	d90d      	bls.n	80054d6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054c0:	f043 0201 	orr.w	r2, r3, #1
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2203      	movs	r2, #3
 80054ce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e168      	b.n	80057a8 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0e3      	beq.n	80054ac <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699a      	ldr	r2, [r3, #24]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0202 	orr.w	r2, r2, #2
 80054f2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	7c1b      	ldrb	r3, [r3, #16]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d108      	bne.n	800550e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	699a      	ldr	r2, [r3, #24]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800550a:	619a      	str	r2, [r3, #24]
 800550c:	e007      	b.n	800551e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	699a      	ldr	r2, [r3, #24]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800551c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	7c5b      	ldrb	r3, [r3, #17]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d108      	bne.n	8005538 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	699a      	ldr	r2, [r3, #24]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005534:	619a      	str	r2, [r3, #24]
 8005536:	e007      	b.n	8005548 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005546:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	7c9b      	ldrb	r3, [r3, #18]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d108      	bne.n	8005562 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699a      	ldr	r2, [r3, #24]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800555e:	619a      	str	r2, [r3, #24]
 8005560:	e007      	b.n	8005572 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	699a      	ldr	r2, [r3, #24]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005570:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005596:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	691a      	ldr	r2, [r3, #16]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0210 	bic.w	r2, r2, #16
 80055a6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d108      	bne.n	80055c2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f042 0204 	orr.w	r2, r2, #4
 80055be:	619a      	str	r2, [r3, #24]
 80055c0:	e030      	b.n	8005624 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d02c      	beq.n	8005624 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d020      	beq.n	8005614 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	699a      	ldr	r2, [r3, #24]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055e0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f042 0210 	orr.w	r2, r2, #16
 80055f0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	2b03      	cmp	r3, #3
 80055f8:	d114      	bne.n	8005624 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	699a      	ldr	r2, [r3, #24]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f042 0220 	orr.w	r2, r2, #32
 8005608:	619a      	str	r2, [r3, #24]
 800560a:	e00b      	b.n	8005624 <HAL_FDCAN_Init+0x234>
 800560c:	0800e370 	.word	0x0800e370
 8005610:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699a      	ldr	r2, [r3, #24]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0220 	orr.w	r2, r2, #32
 8005622:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	3b01      	subs	r3, #1
 800562a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	69db      	ldr	r3, [r3, #28]
 8005630:	3b01      	subs	r3, #1
 8005632:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005634:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800563c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	3b01      	subs	r3, #1
 8005646:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800564c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800564e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005658:	d115      	bne.n	8005686 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005664:	3b01      	subs	r3, #1
 8005666:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005668:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566e:	3b01      	subs	r3, #1
 8005670:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005672:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	3b01      	subs	r3, #1
 800567c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005682:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005684:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ac:	4413      	add	r3, r2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d012      	beq.n	80056d8 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80056ba:	f023 0107 	bic.w	r1, r3, #7
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80056c8:	4413      	add	r3, r2
 80056ca:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d012      	beq.n	8005706 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80056e8:	f023 0107 	bic.w	r1, r3, #7
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80056f6:	4413      	add	r3, r2
 80056f8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800570a:	2b00      	cmp	r3, #0
 800570c:	d013      	beq.n	8005736 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005716:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005724:	4413      	add	r3, r2
 8005726:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800572a:	011a      	lsls	r2, r3, #4
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800573a:	2b00      	cmp	r3, #0
 800573c:	d013      	beq.n	8005766 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005746:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005754:	4413      	add	r3, r2
 8005756:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800575a:	021a      	lsls	r2, r3, #8
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	430a      	orrs	r2, r1
 8005762:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a11      	ldr	r2, [pc, #68]	; (80057b0 <HAL_FDCAN_Init+0x3c0>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d107      	bne.n	8005780 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f022 0203 	bic.w	r2, r2, #3
 800577e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f80b 	bl	80057b4 <FDCAN_CalcultateRamBlockAddresses>
 800579e:	4603      	mov	r3, r0
 80057a0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80057a4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3760      	adds	r7, #96	; 0x60
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	4000a000 	.word	0x4000a000

080057b4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80057ca:	4ba7      	ldr	r3, [pc, #668]	; (8005a68 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80057cc:	4013      	ands	r3, r2
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	0091      	lsls	r1, r2, #2
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	6812      	ldr	r2, [r2, #0]
 80057d6:	430b      	orrs	r3, r1
 80057d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057e4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ec:	041a      	lsls	r2, r3, #16
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	4413      	add	r3, r2
 8005800:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800580a:	4b97      	ldr	r3, [pc, #604]	; (8005a68 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800580c:	4013      	ands	r3, r2
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	0091      	lsls	r1, r2, #2
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	6812      	ldr	r2, [r2, #0]
 8005816:	430b      	orrs	r3, r1
 8005818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005824:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800582c:	041a      	lsls	r2, r3, #16
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	4413      	add	r3, r2
 8005842:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800584c:	4b86      	ldr	r3, [pc, #536]	; (8005a68 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800584e:	4013      	ands	r3, r2
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	0091      	lsls	r1, r2, #2
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	6812      	ldr	r2, [r2, #0]
 8005858:	430b      	orrs	r3, r1
 800585a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005866:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586e:	041a      	lsls	r2, r3, #16
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	430a      	orrs	r2, r1
 8005876:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005882:	fb02 f303 	mul.w	r3, r2, r3
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	4413      	add	r3, r2
 800588a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005894:	4b74      	ldr	r3, [pc, #464]	; (8005a68 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005896:	4013      	ands	r3, r2
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	0091      	lsls	r1, r2, #2
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6812      	ldr	r2, [r2, #0]
 80058a0:	430b      	orrs	r3, r1
 80058a2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058ae:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058b6:	041a      	lsls	r2, r3, #16
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80058ca:	fb02 f303 	mul.w	r3, r2, r3
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	4413      	add	r3, r2
 80058d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80058dc:	4b62      	ldr	r3, [pc, #392]	; (8005a68 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80058de:	4013      	ands	r3, r2
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	0091      	lsls	r1, r2, #2
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6812      	ldr	r2, [r2, #0]
 80058e8:	430b      	orrs	r3, r1
 80058ea:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80058f6:	fb02 f303 	mul.w	r3, r2, r3
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	4413      	add	r3, r2
 80058fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005908:	4b57      	ldr	r3, [pc, #348]	; (8005a68 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800590a:	4013      	ands	r3, r2
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	0091      	lsls	r1, r2, #2
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	6812      	ldr	r2, [r2, #0]
 8005914:	430b      	orrs	r3, r1
 8005916:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005922:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592a:	041a      	lsls	r2, r3, #16
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	4413      	add	r3, r2
 8005940:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800594a:	4b47      	ldr	r3, [pc, #284]	; (8005a68 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800594c:	4013      	ands	r3, r2
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	0091      	lsls	r1, r2, #2
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	6812      	ldr	r2, [r2, #0]
 8005956:	430b      	orrs	r3, r1
 8005958:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005964:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800596c:	041a      	lsls	r2, r3, #16
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005980:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005988:	061a      	lsls	r2, r3, #24
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005998:	4b34      	ldr	r3, [pc, #208]	; (8005a6c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800599a:	4413      	add	r3, r2
 800599c:	009a      	lsls	r2, r3, #2
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	441a      	add	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	441a      	add	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	6879      	ldr	r1, [r7, #4]
 80059cc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80059ce:	fb01 f303 	mul.w	r3, r1, r3
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	441a      	add	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e2:	6879      	ldr	r1, [r7, #4]
 80059e4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80059e6:	fb01 f303 	mul.w	r3, r1, r3
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	441a      	add	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fa:	6879      	ldr	r1, [r7, #4]
 80059fc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80059fe:	fb01 f303 	mul.w	r3, r1, r3
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	441a      	add	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	441a      	add	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a2a:	6879      	ldr	r1, [r7, #4]
 8005a2c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005a2e:	fb01 f303 	mul.w	r3, r1, r3
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	441a      	add	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a46:	6879      	ldr	r1, [r7, #4]
 8005a48:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005a4a:	fb01 f303 	mul.w	r3, r1, r3
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	441a      	add	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a5e:	4a04      	ldr	r2, [pc, #16]	; (8005a70 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d915      	bls.n	8005a90 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005a64:	e006      	b.n	8005a74 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005a66:	bf00      	nop
 8005a68:	ffff0003 	.word	0xffff0003
 8005a6c:	10002b00 	.word	0x10002b00
 8005a70:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a7a:	f043 0220 	orr.w	r2, r3, #32
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2203      	movs	r2, #3
 8005a88:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e010      	b.n	8005ab2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a94:	60fb      	str	r3, [r7, #12]
 8005a96:	e005      	b.n	8005aa4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	60fb      	str	r3, [r7, #12]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d3f3      	bcc.n	8005a98 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop

08005ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b089      	sub	sp, #36	; 0x24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005aca:	2300      	movs	r3, #0
 8005acc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005ace:	4b86      	ldr	r3, [pc, #536]	; (8005ce8 <HAL_GPIO_Init+0x228>)
 8005ad0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005ad2:	e18c      	b.n	8005dee <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	2101      	movs	r1, #1
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f000 817e 	beq.w	8005de8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f003 0303 	and.w	r3, r3, #3
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d005      	beq.n	8005b04 <HAL_GPIO_Init+0x44>
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f003 0303 	and.w	r3, r3, #3
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d130      	bne.n	8005b66 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	005b      	lsls	r3, r3, #1
 8005b0e:	2203      	movs	r2, #3
 8005b10:	fa02 f303 	lsl.w	r3, r2, r3
 8005b14:	43db      	mvns	r3, r3
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	68da      	ldr	r2, [r3, #12]
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	fa02 f303 	lsl.w	r3, r2, r3
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b42:	43db      	mvns	r3, r3
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	4013      	ands	r3, r2
 8005b48:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	091b      	lsrs	r3, r3, #4
 8005b50:	f003 0201 	and.w	r2, r3, #1
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f003 0303 	and.w	r3, r3, #3
 8005b6e:	2b03      	cmp	r3, #3
 8005b70:	d017      	beq.n	8005ba2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	005b      	lsls	r3, r3, #1
 8005b7c:	2203      	movs	r2, #3
 8005b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b82:	43db      	mvns	r3, r3
 8005b84:	69ba      	ldr	r2, [r7, #24]
 8005b86:	4013      	ands	r3, r2
 8005b88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	689a      	ldr	r2, [r3, #8]
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	005b      	lsls	r3, r3, #1
 8005b92:	fa02 f303 	lsl.w	r3, r2, r3
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f003 0303 	and.w	r3, r3, #3
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d123      	bne.n	8005bf6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	08da      	lsrs	r2, r3, #3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	3208      	adds	r2, #8
 8005bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	220f      	movs	r2, #15
 8005bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bca:	43db      	mvns	r3, r3
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	4013      	ands	r3, r2
 8005bd0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	691a      	ldr	r2, [r3, #16]
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	fa02 f303 	lsl.w	r3, r2, r3
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	08da      	lsrs	r2, r3, #3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	3208      	adds	r2, #8
 8005bf0:	69b9      	ldr	r1, [r7, #24]
 8005bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	2203      	movs	r2, #3
 8005c02:	fa02 f303 	lsl.w	r3, r2, r3
 8005c06:	43db      	mvns	r3, r3
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f003 0203 	and.w	r2, r3, #3
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f000 80d8 	beq.w	8005de8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c38:	4b2c      	ldr	r3, [pc, #176]	; (8005cec <HAL_GPIO_Init+0x22c>)
 8005c3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c3e:	4a2b      	ldr	r2, [pc, #172]	; (8005cec <HAL_GPIO_Init+0x22c>)
 8005c40:	f043 0302 	orr.w	r3, r3, #2
 8005c44:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005c48:	4b28      	ldr	r3, [pc, #160]	; (8005cec <HAL_GPIO_Init+0x22c>)
 8005c4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c56:	4a26      	ldr	r2, [pc, #152]	; (8005cf0 <HAL_GPIO_Init+0x230>)
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	089b      	lsrs	r3, r3, #2
 8005c5c:	3302      	adds	r3, #2
 8005c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	220f      	movs	r2, #15
 8005c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c72:	43db      	mvns	r3, r3
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	4013      	ands	r3, r2
 8005c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a1d      	ldr	r2, [pc, #116]	; (8005cf4 <HAL_GPIO_Init+0x234>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d04a      	beq.n	8005d18 <HAL_GPIO_Init+0x258>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a1c      	ldr	r2, [pc, #112]	; (8005cf8 <HAL_GPIO_Init+0x238>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d02b      	beq.n	8005ce2 <HAL_GPIO_Init+0x222>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a1b      	ldr	r2, [pc, #108]	; (8005cfc <HAL_GPIO_Init+0x23c>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d025      	beq.n	8005cde <HAL_GPIO_Init+0x21e>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a1a      	ldr	r2, [pc, #104]	; (8005d00 <HAL_GPIO_Init+0x240>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d01f      	beq.n	8005cda <HAL_GPIO_Init+0x21a>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a19      	ldr	r2, [pc, #100]	; (8005d04 <HAL_GPIO_Init+0x244>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d019      	beq.n	8005cd6 <HAL_GPIO_Init+0x216>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a18      	ldr	r2, [pc, #96]	; (8005d08 <HAL_GPIO_Init+0x248>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d013      	beq.n	8005cd2 <HAL_GPIO_Init+0x212>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a17      	ldr	r2, [pc, #92]	; (8005d0c <HAL_GPIO_Init+0x24c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00d      	beq.n	8005cce <HAL_GPIO_Init+0x20e>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a16      	ldr	r2, [pc, #88]	; (8005d10 <HAL_GPIO_Init+0x250>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d007      	beq.n	8005cca <HAL_GPIO_Init+0x20a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a15      	ldr	r2, [pc, #84]	; (8005d14 <HAL_GPIO_Init+0x254>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d101      	bne.n	8005cc6 <HAL_GPIO_Init+0x206>
 8005cc2:	2309      	movs	r3, #9
 8005cc4:	e029      	b.n	8005d1a <HAL_GPIO_Init+0x25a>
 8005cc6:	230a      	movs	r3, #10
 8005cc8:	e027      	b.n	8005d1a <HAL_GPIO_Init+0x25a>
 8005cca:	2307      	movs	r3, #7
 8005ccc:	e025      	b.n	8005d1a <HAL_GPIO_Init+0x25a>
 8005cce:	2306      	movs	r3, #6
 8005cd0:	e023      	b.n	8005d1a <HAL_GPIO_Init+0x25a>
 8005cd2:	2305      	movs	r3, #5
 8005cd4:	e021      	b.n	8005d1a <HAL_GPIO_Init+0x25a>
 8005cd6:	2304      	movs	r3, #4
 8005cd8:	e01f      	b.n	8005d1a <HAL_GPIO_Init+0x25a>
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e01d      	b.n	8005d1a <HAL_GPIO_Init+0x25a>
 8005cde:	2302      	movs	r3, #2
 8005ce0:	e01b      	b.n	8005d1a <HAL_GPIO_Init+0x25a>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e019      	b.n	8005d1a <HAL_GPIO_Init+0x25a>
 8005ce6:	bf00      	nop
 8005ce8:	58000080 	.word	0x58000080
 8005cec:	58024400 	.word	0x58024400
 8005cf0:	58000400 	.word	0x58000400
 8005cf4:	58020000 	.word	0x58020000
 8005cf8:	58020400 	.word	0x58020400
 8005cfc:	58020800 	.word	0x58020800
 8005d00:	58020c00 	.word	0x58020c00
 8005d04:	58021000 	.word	0x58021000
 8005d08:	58021400 	.word	0x58021400
 8005d0c:	58021800 	.word	0x58021800
 8005d10:	58021c00 	.word	0x58021c00
 8005d14:	58022400 	.word	0x58022400
 8005d18:	2300      	movs	r3, #0
 8005d1a:	69fa      	ldr	r2, [r7, #28]
 8005d1c:	f002 0203 	and.w	r2, r2, #3
 8005d20:	0092      	lsls	r2, r2, #2
 8005d22:	4093      	lsls	r3, r2
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d2a:	4938      	ldr	r1, [pc, #224]	; (8005e0c <HAL_GPIO_Init+0x34c>)
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	089b      	lsrs	r3, r3, #2
 8005d30:	3302      	adds	r3, #2
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	43db      	mvns	r3, r3
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	4013      	ands	r3, r2
 8005d48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005d5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	43db      	mvns	r3, r3
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	4013      	ands	r3, r2
 8005d76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d003      	beq.n	8005d8c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005d8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	43db      	mvns	r3, r3
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	4013      	ands	r3, r2
 8005da2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d003      	beq.n	8005db8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	43db      	mvns	r3, r3
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	3301      	adds	r3, #1
 8005dec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	fa22 f303 	lsr.w	r3, r2, r3
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f47f ae6b 	bne.w	8005ad4 <HAL_GPIO_Init+0x14>
  }
}
 8005dfe:	bf00      	nop
 8005e00:	bf00      	nop
 8005e02:	3724      	adds	r7, #36	; 0x24
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	58000400 	.word	0x58000400

08005e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	807b      	strh	r3, [r7, #2]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e20:	787b      	ldrb	r3, [r7, #1]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e26:	887a      	ldrh	r2, [r7, #2]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005e2c:	e003      	b.n	8005e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005e2e:	887b      	ldrh	r3, [r7, #2]
 8005e30:	041a      	lsls	r2, r3, #16
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	619a      	str	r2, [r3, #24]
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr

08005e42 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b085      	sub	sp, #20
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005e54:	887a      	ldrh	r2, [r7, #2]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	4013      	ands	r3, r2
 8005e5a:	041a      	lsls	r2, r3, #16
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	43d9      	mvns	r1, r3
 8005e60:	887b      	ldrh	r3, [r7, #2]
 8005e62:	400b      	ands	r3, r1
 8005e64:	431a      	orrs	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	619a      	str	r2, [r3, #24]
}
 8005e6a:	bf00      	nop
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
	...

08005e78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e07f      	b.n	8005f8a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d106      	bne.n	8005ea4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7fc f888 	bl	8001fb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2224      	movs	r2, #36	; 0x24
 8005ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0201 	bic.w	r2, r2, #1
 8005eba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ec8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ed8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d107      	bne.n	8005ef2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	689a      	ldr	r2, [r3, #8]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005eee:	609a      	str	r2, [r3, #8]
 8005ef0:	e006      	b.n	8005f00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689a      	ldr	r2, [r3, #8]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005efe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d104      	bne.n	8005f12 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6859      	ldr	r1, [r3, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	4b1d      	ldr	r3, [pc, #116]	; (8005f94 <HAL_I2C_Init+0x11c>)
 8005f1e:	430b      	orrs	r3, r1
 8005f20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68da      	ldr	r2, [r3, #12]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691a      	ldr	r2, [r3, #16]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	69d9      	ldr	r1, [r3, #28]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a1a      	ldr	r2, [r3, #32]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f042 0201 	orr.w	r2, r2, #1
 8005f6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2220      	movs	r2, #32
 8005f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	02008000 	.word	0x02008000

08005f98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b20      	cmp	r3, #32
 8005fac:	d138      	bne.n	8006020 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d101      	bne.n	8005fbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	e032      	b.n	8006022 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2224      	movs	r2, #36	; 0x24
 8005fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 0201 	bic.w	r2, r2, #1
 8005fda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005fea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6819      	ldr	r1, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f042 0201 	orr.w	r2, r2, #1
 800600a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2220      	movs	r2, #32
 8006010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800601c:	2300      	movs	r3, #0
 800601e:	e000      	b.n	8006022 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006020:	2302      	movs	r3, #2
  }
}
 8006022:	4618      	mov	r0, r3
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800602e:	b480      	push	{r7}
 8006030:	b085      	sub	sp, #20
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b20      	cmp	r3, #32
 8006042:	d139      	bne.n	80060b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800604a:	2b01      	cmp	r3, #1
 800604c:	d101      	bne.n	8006052 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800604e:	2302      	movs	r3, #2
 8006050:	e033      	b.n	80060ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2224      	movs	r2, #36	; 0x24
 800605e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 0201 	bic.w	r2, r2, #1
 8006070:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006080:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	021b      	lsls	r3, r3, #8
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	4313      	orrs	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0201 	orr.w	r2, r2, #1
 80060a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	e000      	b.n	80060ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80060b8:	2302      	movs	r3, #2
  }
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
	...

080060c8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e0bf      	b.n	800625a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d106      	bne.n	80060f4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7fb ffc6 	bl	8002080 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2202      	movs	r2, #2
 80060f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	699a      	ldr	r2, [r3, #24]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800610a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6999      	ldr	r1, [r3, #24]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006120:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	430a      	orrs	r2, r1
 800612e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6899      	ldr	r1, [r3, #8]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	4b4a      	ldr	r3, [pc, #296]	; (8006264 <HAL_LTDC_Init+0x19c>)
 800613c:	400b      	ands	r3, r1
 800613e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	041b      	lsls	r3, r3, #16
 8006146:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6899      	ldr	r1, [r3, #8]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	699a      	ldr	r2, [r3, #24]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	431a      	orrs	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	430a      	orrs	r2, r1
 800615c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68d9      	ldr	r1, [r3, #12]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	4b3e      	ldr	r3, [pc, #248]	; (8006264 <HAL_LTDC_Init+0x19c>)
 800616a:	400b      	ands	r3, r1
 800616c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	041b      	lsls	r3, r3, #16
 8006174:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68d9      	ldr	r1, [r3, #12]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a1a      	ldr	r2, [r3, #32]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	431a      	orrs	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6919      	ldr	r1, [r3, #16]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	4b33      	ldr	r3, [pc, #204]	; (8006264 <HAL_LTDC_Init+0x19c>)
 8006198:	400b      	ands	r3, r1
 800619a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	041b      	lsls	r3, r3, #16
 80061a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6919      	ldr	r1, [r3, #16]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	431a      	orrs	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6959      	ldr	r1, [r3, #20]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	4b27      	ldr	r3, [pc, #156]	; (8006264 <HAL_LTDC_Init+0x19c>)
 80061c6:	400b      	ands	r3, r1
 80061c8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ce:	041b      	lsls	r3, r3, #16
 80061d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6959      	ldr	r1, [r3, #20]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	431a      	orrs	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061ee:	021b      	lsls	r3, r3, #8
 80061f0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80061f8:	041b      	lsls	r3, r3, #16
 80061fa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800620a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4313      	orrs	r3, r2
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800621e:	431a      	orrs	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	430a      	orrs	r2, r1
 8006226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0206 	orr.w	r2, r2, #6
 8006236:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699a      	ldr	r2, [r3, #24]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f042 0201 	orr.w	r2, r2, #1
 8006246:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	f000f800 	.word	0xf000f800

08006268 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006268:	b5b0      	push	{r4, r5, r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800627a:	2b01      	cmp	r3, #1
 800627c:	d101      	bne.n	8006282 <HAL_LTDC_ConfigLayer+0x1a>
 800627e:	2302      	movs	r3, #2
 8006280:	e02c      	b.n	80062dc <HAL_LTDC_ConfigLayer+0x74>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2202      	movs	r2, #2
 800628e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2134      	movs	r1, #52	; 0x34
 8006298:	fb01 f303 	mul.w	r3, r1, r3
 800629c:	4413      	add	r3, r2
 800629e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	4614      	mov	r4, r2
 80062a6:	461d      	mov	r5, r3
 80062a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062b4:	682b      	ldr	r3, [r5, #0]
 80062b6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	68b9      	ldr	r1, [r7, #8]
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f000 f811 	bl	80062e4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2201      	movs	r2, #1
 80062c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bdb0      	pop	{r4, r5, r7, pc}

080062e4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b089      	sub	sp, #36	; 0x24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	0c1b      	lsrs	r3, r3, #16
 80062fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006300:	4413      	add	r3, r2
 8006302:	041b      	lsls	r3, r3, #16
 8006304:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	461a      	mov	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	01db      	lsls	r3, r3, #7
 8006310:	4413      	add	r3, r2
 8006312:	3384      	adds	r3, #132	; 0x84
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	6812      	ldr	r2, [r2, #0]
 800631a:	4611      	mov	r1, r2
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	01d2      	lsls	r2, r2, #7
 8006320:	440a      	add	r2, r1
 8006322:	3284      	adds	r2, #132	; 0x84
 8006324:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006328:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	0c1b      	lsrs	r3, r3, #16
 8006336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800633a:	4413      	add	r3, r2
 800633c:	1c5a      	adds	r2, r3, #1
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4619      	mov	r1, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	01db      	lsls	r3, r3, #7
 8006348:	440b      	add	r3, r1
 800634a:	3384      	adds	r3, #132	; 0x84
 800634c:	4619      	mov	r1, r3
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	4313      	orrs	r3, r2
 8006352:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	68da      	ldr	r2, [r3, #12]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006362:	4413      	add	r3, r2
 8006364:	041b      	lsls	r3, r3, #16
 8006366:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	461a      	mov	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	01db      	lsls	r3, r3, #7
 8006372:	4413      	add	r3, r2
 8006374:	3384      	adds	r3, #132	; 0x84
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	6812      	ldr	r2, [r2, #0]
 800637c:	4611      	mov	r1, r2
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	01d2      	lsls	r2, r2, #7
 8006382:	440a      	add	r2, r1
 8006384:	3284      	adds	r2, #132	; 0x84
 8006386:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800638a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800639a:	4413      	add	r3, r2
 800639c:	1c5a      	adds	r2, r3, #1
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4619      	mov	r1, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	01db      	lsls	r3, r3, #7
 80063a8:	440b      	add	r3, r1
 80063aa:	3384      	adds	r3, #132	; 0x84
 80063ac:	4619      	mov	r1, r3
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	461a      	mov	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	01db      	lsls	r3, r3, #7
 80063be:	4413      	add	r3, r2
 80063c0:	3384      	adds	r3, #132	; 0x84
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	6812      	ldr	r2, [r2, #0]
 80063c8:	4611      	mov	r1, r2
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	01d2      	lsls	r2, r2, #7
 80063ce:	440a      	add	r2, r1
 80063d0:	3284      	adds	r2, #132	; 0x84
 80063d2:	f023 0307 	bic.w	r3, r3, #7
 80063d6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	461a      	mov	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	01db      	lsls	r3, r3, #7
 80063e2:	4413      	add	r3, r2
 80063e4:	3384      	adds	r3, #132	; 0x84
 80063e6:	461a      	mov	r2, r3
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80063f4:	021b      	lsls	r3, r3, #8
 80063f6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80063fe:	041b      	lsls	r3, r3, #16
 8006400:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	061b      	lsls	r3, r3, #24
 8006408:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	461a      	mov	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	01db      	lsls	r3, r3, #7
 8006414:	4413      	add	r3, r2
 8006416:	3384      	adds	r3, #132	; 0x84
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	01db      	lsls	r3, r3, #7
 8006424:	4413      	add	r3, r2
 8006426:	3384      	adds	r3, #132	; 0x84
 8006428:	461a      	mov	r2, r3
 800642a:	2300      	movs	r3, #0
 800642c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006434:	461a      	mov	r2, r3
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	431a      	orrs	r2, r3
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	431a      	orrs	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4619      	mov	r1, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	01db      	lsls	r3, r3, #7
 8006448:	440b      	add	r3, r1
 800644a:	3384      	adds	r3, #132	; 0x84
 800644c:	4619      	mov	r1, r3
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	4313      	orrs	r3, r2
 8006452:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	461a      	mov	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	01db      	lsls	r3, r3, #7
 800645e:	4413      	add	r3, r2
 8006460:	3384      	adds	r3, #132	; 0x84
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	6812      	ldr	r2, [r2, #0]
 8006468:	4611      	mov	r1, r2
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	01d2      	lsls	r2, r2, #7
 800646e:	440a      	add	r2, r1
 8006470:	3284      	adds	r2, #132	; 0x84
 8006472:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006476:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	461a      	mov	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	01db      	lsls	r3, r3, #7
 8006482:	4413      	add	r3, r2
 8006484:	3384      	adds	r3, #132	; 0x84
 8006486:	461a      	mov	r2, r3
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	695b      	ldr	r3, [r3, #20]
 800648c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	461a      	mov	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	01db      	lsls	r3, r3, #7
 8006498:	4413      	add	r3, r2
 800649a:	3384      	adds	r3, #132	; 0x84
 800649c:	69da      	ldr	r2, [r3, #28]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4619      	mov	r1, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	01db      	lsls	r3, r3, #7
 80064a8:	440b      	add	r3, r1
 80064aa:	3384      	adds	r3, #132	; 0x84
 80064ac:	4619      	mov	r1, r3
 80064ae:	4b58      	ldr	r3, [pc, #352]	; (8006610 <LTDC_SetConfig+0x32c>)
 80064b0:	4013      	ands	r3, r2
 80064b2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	69da      	ldr	r2, [r3, #28]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	6a1b      	ldr	r3, [r3, #32]
 80064bc:	68f9      	ldr	r1, [r7, #12]
 80064be:	6809      	ldr	r1, [r1, #0]
 80064c0:	4608      	mov	r0, r1
 80064c2:	6879      	ldr	r1, [r7, #4]
 80064c4:	01c9      	lsls	r1, r1, #7
 80064c6:	4401      	add	r1, r0
 80064c8:	3184      	adds	r1, #132	; 0x84
 80064ca:	4313      	orrs	r3, r2
 80064cc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	461a      	mov	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	01db      	lsls	r3, r3, #7
 80064d8:	4413      	add	r3, r2
 80064da:	3384      	adds	r3, #132	; 0x84
 80064dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	461a      	mov	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	01db      	lsls	r3, r3, #7
 80064e8:	4413      	add	r3, r2
 80064ea:	3384      	adds	r3, #132	; 0x84
 80064ec:	461a      	mov	r2, r3
 80064ee:	2300      	movs	r3, #0
 80064f0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	461a      	mov	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	01db      	lsls	r3, r3, #7
 80064fc:	4413      	add	r3, r2
 80064fe:	3384      	adds	r3, #132	; 0x84
 8006500:	461a      	mov	r2, r3
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006506:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d102      	bne.n	8006516 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006510:	2304      	movs	r3, #4
 8006512:	61fb      	str	r3, [r7, #28]
 8006514:	e01b      	b.n	800654e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d102      	bne.n	8006524 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800651e:	2303      	movs	r3, #3
 8006520:	61fb      	str	r3, [r7, #28]
 8006522:	e014      	b.n	800654e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	2b04      	cmp	r3, #4
 800652a:	d00b      	beq.n	8006544 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006530:	2b02      	cmp	r3, #2
 8006532:	d007      	beq.n	8006544 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006538:	2b03      	cmp	r3, #3
 800653a:	d003      	beq.n	8006544 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006540:	2b07      	cmp	r3, #7
 8006542:	d102      	bne.n	800654a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006544:	2302      	movs	r3, #2
 8006546:	61fb      	str	r3, [r7, #28]
 8006548:	e001      	b.n	800654e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800654a:	2301      	movs	r3, #1
 800654c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	461a      	mov	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	01db      	lsls	r3, r3, #7
 8006558:	4413      	add	r3, r2
 800655a:	3384      	adds	r3, #132	; 0x84
 800655c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	6812      	ldr	r2, [r2, #0]
 8006562:	4611      	mov	r1, r2
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	01d2      	lsls	r2, r2, #7
 8006568:	440a      	add	r2, r1
 800656a:	3284      	adds	r2, #132	; 0x84
 800656c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006570:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006576:	69fa      	ldr	r2, [r7, #28]
 8006578:	fb02 f303 	mul.w	r3, r2, r3
 800657c:	041a      	lsls	r2, r3, #16
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	6859      	ldr	r1, [r3, #4]
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	1acb      	subs	r3, r1, r3
 8006588:	69f9      	ldr	r1, [r7, #28]
 800658a:	fb01 f303 	mul.w	r3, r1, r3
 800658e:	3307      	adds	r3, #7
 8006590:	68f9      	ldr	r1, [r7, #12]
 8006592:	6809      	ldr	r1, [r1, #0]
 8006594:	4608      	mov	r0, r1
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	01c9      	lsls	r1, r1, #7
 800659a:	4401      	add	r1, r0
 800659c:	3184      	adds	r1, #132	; 0x84
 800659e:	4313      	orrs	r3, r2
 80065a0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	461a      	mov	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	01db      	lsls	r3, r3, #7
 80065ac:	4413      	add	r3, r2
 80065ae:	3384      	adds	r3, #132	; 0x84
 80065b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4619      	mov	r1, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	01db      	lsls	r3, r3, #7
 80065bc:	440b      	add	r3, r1
 80065be:	3384      	adds	r3, #132	; 0x84
 80065c0:	4619      	mov	r1, r3
 80065c2:	4b14      	ldr	r3, [pc, #80]	; (8006614 <LTDC_SetConfig+0x330>)
 80065c4:	4013      	ands	r3, r2
 80065c6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	461a      	mov	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	01db      	lsls	r3, r3, #7
 80065d2:	4413      	add	r3, r2
 80065d4:	3384      	adds	r3, #132	; 0x84
 80065d6:	461a      	mov	r2, r3
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065dc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	461a      	mov	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	01db      	lsls	r3, r3, #7
 80065e8:	4413      	add	r3, r2
 80065ea:	3384      	adds	r3, #132	; 0x84
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	6812      	ldr	r2, [r2, #0]
 80065f2:	4611      	mov	r1, r2
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	01d2      	lsls	r2, r2, #7
 80065f8:	440a      	add	r2, r1
 80065fa:	3284      	adds	r2, #132	; 0x84
 80065fc:	f043 0301 	orr.w	r3, r3, #1
 8006600:	6013      	str	r3, [r2, #0]
}
 8006602:	bf00      	nop
 8006604:	3724      	adds	r7, #36	; 0x24
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	fffff8f8 	.word	0xfffff8f8
 8006614:	fffff800 	.word	0xfffff800

08006618 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af02      	add	r7, sp, #8
 800661e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006624:	f7fc fcd0 	bl	8002fc8 <HAL_GetTick>
 8006628:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d102      	bne.n	8006636 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	73fb      	strb	r3, [r7, #15]
 8006634:	e0a6      	b.n	8006784 <HAL_OSPI_Init+0x16c>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_CKCSHT         (hospi->Init.ClkChipSelectHighTime));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006640:	2b00      	cmp	r3, #0
 8006642:	f040 809f 	bne.w	8006784 <HAL_OSPI_Init+0x16c>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7fb fea2 	bl	8002390 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800664c:	f241 3188 	movw	r1, #5000	; 0x1388
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f8de 	bl	8006812 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, clocked chip select high time, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689a      	ldr	r2, [r3, #8]
 800665c:	4b4c      	ldr	r3, [pc, #304]	; (8006790 <HAL_OSPI_Init+0x178>)
 800665e:	4013      	ands	r3, r2
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	68d1      	ldr	r1, [r2, #12]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	6912      	ldr	r2, [r2, #16]
 8006668:	3a01      	subs	r2, #1
 800666a:	0412      	lsls	r2, r2, #16
 800666c:	4311      	orrs	r1, r2
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	6952      	ldr	r2, [r2, #20]
 8006672:	3a01      	subs	r2, #1
 8006674:	0212      	lsls	r2, r2, #8
 8006676:	4311      	orrs	r1, r2
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800667c:	0112      	lsls	r2, r2, #4
 800667e:	4311      	orrs	r1, r2
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	69d2      	ldr	r2, [r2, #28]
 8006684:	4311      	orrs	r1, r2
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	6812      	ldr	r2, [r2, #0]
 800668a:	430b      	orrs	r3, r1
 800668c:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  (hospi->Init.ClkChipSelectHighTime << OCTOSPI_DCR1_CKCSHT_Pos) | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a1a      	ldr	r2, [r3, #32]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	430a      	orrs	r2, r1
 80066a2:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a8:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80066be:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	021a      	lsls	r2, r3, #8
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	2200      	movs	r2, #0
 80066e4:	2120      	movs	r1, #32
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fdb8 	bl	800725c <OSPI_WaitFlagStateUntilTimeout>
 80066ec:	4603      	mov	r3, r0
 80066ee:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d146      	bne.n	8006784 <HAL_OSPI_Init+0x16c>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006704:	1e5a      	subs	r2, r3, #1
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689a      	ldr	r2, [r3, #8]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800672c:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006738:	431a      	orrs	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f042 0201 	orr.w	r2, r2, #1
 8006752:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	2b02      	cmp	r3, #2
 800675a:	d107      	bne.n	800676c <HAL_OSPI_Init+0x154>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689a      	ldr	r2, [r3, #8]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f042 0202 	orr.w	r2, r2, #2
 800676a:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006774:	d103      	bne.n	800677e <HAL_OSPI_Init+0x166>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	655a      	str	r2, [r3, #84]	; 0x54
 800677c:	e002      	b.n	8006784 <HAL_OSPI_Init+0x16c>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2202      	movs	r2, #2
 8006782:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Return function status */
  return status;
 8006784:	7bfb      	ldrb	r3, [r7, #15]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	f8e0f88c 	.word	0xf8e0f88c

08006794 <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b08a      	sub	sp, #40	; 0x28
 8006798:	af02      	add	r7, sp, #8
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 80067a0:	f7fc fc12 	bl	8002fc8 <HAL_GetTick>
 80067a4:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME       (cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE      (cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067aa:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d002      	beq.n	80067b8 <HAL_OSPI_HyperbusCfg+0x24>
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d122      	bne.n	80067fe <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	2200      	movs	r2, #0
 80067c0:	2120      	movs	r1, #32
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f000 fd4a 	bl	800725c <OSPI_WaitFlagStateUntilTimeout>
 80067c8:	4603      	mov	r3, r0
 80067ca:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80067cc:	7ffb      	ldrb	r3, [r7, #31]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d11a      	bne.n	8006808 <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	041a      	lsls	r2, r3, #16
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	021b      	lsls	r3, r3, #8
 80067de:	431a      	orrs	r2, r3
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	ea42 0103 	orr.w	r1, r2, r3
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	68da      	ldr	r2, [r3, #12]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	430a      	orrs	r2, r1
 80067f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2202      	movs	r2, #2
 80067fa:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80067fc:	e004      	b.n	8006808 <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2210      	movs	r2, #16
 8006806:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Return function status */
  return status;
 8006808:	7ffb      	ldrb	r3, [r7, #31]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3720      	adds	r7, #32
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8006812:	b480      	push	{r7}
 8006814:	b083      	sub	sp, #12
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	65da      	str	r2, [r3, #92]	; 0x5c
  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b094      	sub	sp, #80	; 0x50
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800683c:	2300      	movs	r3, #0
 800683e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8006842:	2300      	movs	r3, #0
 8006844:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4aa3      	ldr	r2, [pc, #652]	; (8006adc <HAL_OSPIM_Config+0x2ac>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d105      	bne.n	800685e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8006852:	2300      	movs	r3, #0
 8006854:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8006856:	2301      	movs	r3, #1
 8006858:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800685c:	e004      	b.n	8006868 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800685e:	2301      	movs	r3, #1
 8006860:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8006862:	2300      	movs	r3, #0
 8006864:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006868:	2300      	movs	r3, #0
 800686a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800686e:	e01d      	b.n	80068ac <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8006870:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006874:	3301      	adds	r3, #1
 8006876:	b2d8      	uxtb	r0, r3
 8006878:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800687c:	f107 0114 	add.w	r1, r7, #20
 8006880:	4613      	mov	r3, r2
 8006882:	005b      	lsls	r3, r3, #1
 8006884:	4413      	add	r3, r2
 8006886:	00db      	lsls	r3, r3, #3
 8006888:	440b      	add	r3, r1
 800688a:	4619      	mov	r1, r3
 800688c:	f000 fd1e 	bl	80072cc <OSPIM_GetConfig>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d005      	beq.n	80068a2 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2208      	movs	r2, #8
 80068a0:	659a      	str	r2, [r3, #88]	; 0x58
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80068a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80068a6:	3301      	adds	r3, #1
 80068a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80068ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d9dd      	bls.n	8006870 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 80068b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f040 84c3 	bne.w	8007244 <HAL_OSPIM_Config+0xa14>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80068be:	4b87      	ldr	r3, [pc, #540]	; (8006adc <HAL_OSPIM_Config+0x2ac>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00b      	beq.n	80068e2 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80068ca:	4b84      	ldr	r3, [pc, #528]	; (8006adc <HAL_OSPIM_Config+0x2ac>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a83      	ldr	r2, [pc, #524]	; (8006adc <HAL_OSPIM_Config+0x2ac>)
 80068d0:	f023 0301 	bic.w	r3, r3, #1
 80068d4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80068d6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80068da:	f043 0301 	orr.w	r3, r3, #1
 80068de:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80068e2:	4b7f      	ldr	r3, [pc, #508]	; (8006ae0 <HAL_OSPIM_Config+0x2b0>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00b      	beq.n	8006906 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80068ee:	4b7c      	ldr	r3, [pc, #496]	; (8006ae0 <HAL_OSPIM_Config+0x2b0>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a7b      	ldr	r2, [pc, #492]	; (8006ae0 <HAL_OSPIM_Config+0x2b0>)
 80068f4:	f023 0301 	bic.w	r3, r3, #1
 80068f8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80068fa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80068fe:	f043 0302 	orr.w	r3, r3, #2
 8006902:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8006906:	4977      	ldr	r1, [pc, #476]	; (8006ae4 <HAL_OSPIM_Config+0x2b4>)
 8006908:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800690a:	4613      	mov	r3, r2
 800690c:	005b      	lsls	r3, r3, #1
 800690e:	4413      	add	r3, r2
 8006910:	00db      	lsls	r3, r3, #3
 8006912:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006916:	4413      	add	r3, r2
 8006918:	3b34      	subs	r3, #52	; 0x34
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	3b01      	subs	r3, #1
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	440b      	add	r3, r1
 8006922:	6859      	ldr	r1, [r3, #4]
 8006924:	486f      	ldr	r0, [pc, #444]	; (8006ae4 <HAL_OSPIM_Config+0x2b4>)
 8006926:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006928:	4613      	mov	r3, r2
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	4413      	add	r3, r2
 800692e:	00db      	lsls	r3, r3, #3
 8006930:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006934:	4413      	add	r3, r2
 8006936:	3b34      	subs	r3, #52	; 0x34
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3b01      	subs	r3, #1
 800693c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4403      	add	r3, r0
 8006944:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006946:	4b67      	ldr	r3, [pc, #412]	; (8006ae4 <HAL_OSPIM_Config+0x2b4>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	f000 80ca 	beq.w	8006ae8 <HAL_OSPIM_Config+0x2b8>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006954:	4b63      	ldr	r3, [pc, #396]	; (8006ae4 <HAL_OSPIM_Config+0x2b4>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a62      	ldr	r2, [pc, #392]	; (8006ae4 <HAL_OSPIM_Config+0x2b4>)
 800695a:	f023 0301 	bic.w	r3, r3, #1
 800695e:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8006960:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006964:	2b01      	cmp	r3, #1
 8006966:	f040 8178 	bne.w	8006c5a <HAL_OSPIM_Config+0x42a>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 800696a:	495e      	ldr	r1, [pc, #376]	; (8006ae4 <HAL_OSPIM_Config+0x2b4>)
 800696c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006970:	4613      	mov	r3, r2
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	4413      	add	r3, r2
 8006976:	00db      	lsls	r3, r3, #3
 8006978:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800697c:	4413      	add	r3, r2
 800697e:	3b3c      	subs	r3, #60	; 0x3c
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3b01      	subs	r3, #1
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	440b      	add	r3, r1
 8006988:	6859      	ldr	r1, [r3, #4]
 800698a:	4856      	ldr	r0, [pc, #344]	; (8006ae4 <HAL_OSPIM_Config+0x2b4>)
 800698c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006990:	4613      	mov	r3, r2
 8006992:	005b      	lsls	r3, r3, #1
 8006994:	4413      	add	r3, r2
 8006996:	00db      	lsls	r3, r3, #3
 8006998:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800699c:	4413      	add	r3, r2
 800699e:	3b3c      	subs	r3, #60	; 0x3c
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	3b01      	subs	r3, #1
 80069a4:	f041 0202 	orr.w	r2, r1, #2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4403      	add	r3, r0
 80069ac:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80069ae:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80069b2:	4613      	mov	r3, r2
 80069b4:	005b      	lsls	r3, r3, #1
 80069b6:	4413      	add	r3, r2
 80069b8:	00db      	lsls	r3, r3, #3
 80069ba:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80069be:	4413      	add	r3, r2
 80069c0:	3b38      	subs	r3, #56	; 0x38
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d021      	beq.n	8006a0c <HAL_OSPIM_Config+0x1dc>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 80069c8:	4946      	ldr	r1, [pc, #280]	; (8006ae4 <HAL_OSPIM_Config+0x2b4>)
 80069ca:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80069ce:	4613      	mov	r3, r2
 80069d0:	005b      	lsls	r3, r3, #1
 80069d2:	4413      	add	r3, r2
 80069d4:	00db      	lsls	r3, r3, #3
 80069d6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80069da:	4413      	add	r3, r2
 80069dc:	3b38      	subs	r3, #56	; 0x38
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3b01      	subs	r3, #1
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	440b      	add	r3, r1
 80069e6:	6859      	ldr	r1, [r3, #4]
 80069e8:	483e      	ldr	r0, [pc, #248]	; (8006ae4 <HAL_OSPIM_Config+0x2b4>)
 80069ea:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80069ee:	4613      	mov	r3, r2
 80069f0:	005b      	lsls	r3, r3, #1
 80069f2:	4413      	add	r3, r2
 80069f4:	00db      	lsls	r3, r3, #3
 80069f6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80069fa:	4413      	add	r3, r2
 80069fc:	3b38      	subs	r3, #56	; 0x38
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3b01      	subs	r3, #1
 8006a02:	f041 0220 	orr.w	r2, r1, #32
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4403      	add	r3, r0
 8006a0a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006a0c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006a10:	4613      	mov	r3, r2
 8006a12:	005b      	lsls	r3, r3, #1
 8006a14:	4413      	add	r3, r2
 8006a16:	00db      	lsls	r3, r3, #3
 8006a18:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006a1c:	4413      	add	r3, r2
 8006a1e:	3b30      	subs	r3, #48	; 0x30
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d025      	beq.n	8006a72 <HAL_OSPIM_Config+0x242>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 8006a26:	492f      	ldr	r1, [pc, #188]	; (8006ae4 <HAL_OSPIM_Config+0x2b4>)
 8006a28:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	005b      	lsls	r3, r3, #1
 8006a30:	4413      	add	r3, r2
 8006a32:	00db      	lsls	r3, r3, #3
 8006a34:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006a38:	4413      	add	r3, r2
 8006a3a:	3b30      	subs	r3, #48	; 0x30
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	440b      	add	r3, r1
 8006a48:	6859      	ldr	r1, [r3, #4]
 8006a4a:	4826      	ldr	r0, [pc, #152]	; (8006ae4 <HAL_OSPIM_Config+0x2b4>)
 8006a4c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006a50:	4613      	mov	r3, r2
 8006a52:	005b      	lsls	r3, r3, #1
 8006a54:	4413      	add	r3, r2
 8006a56:	00db      	lsls	r3, r3, #3
 8006a58:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006a5c:	4413      	add	r3, r2
 8006a5e:	3b30      	subs	r3, #48	; 0x30
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3b01      	subs	r3, #1
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4403      	add	r3, r0
 8006a70:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006a72:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006a76:	4613      	mov	r3, r2
 8006a78:	005b      	lsls	r3, r3, #1
 8006a7a:	4413      	add	r3, r2
 8006a7c:	00db      	lsls	r3, r3, #3
 8006a7e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006a82:	4413      	add	r3, r2
 8006a84:	3b2c      	subs	r3, #44	; 0x2c
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 80e6 	beq.w	8006c5a <HAL_OSPIM_Config+0x42a>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 8006a8e:	4915      	ldr	r1, [pc, #84]	; (8006ae4 <HAL_OSPIM_Config+0x2b4>)
 8006a90:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006a94:	4613      	mov	r3, r2
 8006a96:	005b      	lsls	r3, r3, #1
 8006a98:	4413      	add	r3, r2
 8006a9a:	00db      	lsls	r3, r3, #3
 8006a9c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006aa0:	4413      	add	r3, r2
 8006aa2:	3b2c      	subs	r3, #44	; 0x2c
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	440b      	add	r3, r1
 8006ab0:	6859      	ldr	r1, [r3, #4]
 8006ab2:	480c      	ldr	r0, [pc, #48]	; (8006ae4 <HAL_OSPIM_Config+0x2b4>)
 8006ab4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006ab8:	4613      	mov	r3, r2
 8006aba:	005b      	lsls	r3, r3, #1
 8006abc:	4413      	add	r3, r2
 8006abe:	00db      	lsls	r3, r3, #3
 8006ac0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006ac4:	4413      	add	r3, r2
 8006ac6:	3b2c      	subs	r3, #44	; 0x2c
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	f003 0301 	and.w	r3, r3, #1
 8006ad0:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4403      	add	r3, r0
 8006ad8:	605a      	str	r2, [r3, #4]
 8006ada:	e0be      	b.n	8006c5a <HAL_OSPIM_Config+0x42a>
 8006adc:	52005000 	.word	0x52005000
 8006ae0:	5200a000 	.word	0x5200a000
 8006ae4:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8006ae8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aea:	4613      	mov	r3, r2
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	4413      	add	r3, r2
 8006af0:	00db      	lsls	r3, r3, #3
 8006af2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006af6:	4413      	add	r3, r2
 8006af8:	3b3c      	subs	r3, #60	; 0x3c
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f000 80ac 	beq.w	8006c5a <HAL_OSPIM_Config+0x42a>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8006b02:	499d      	ldr	r1, [pc, #628]	; (8006d78 <HAL_OSPIM_Config+0x548>)
 8006b04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b06:	4613      	mov	r3, r2
 8006b08:	005b      	lsls	r3, r3, #1
 8006b0a:	4413      	add	r3, r2
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006b12:	4413      	add	r3, r2
 8006b14:	3b3c      	subs	r3, #60	; 0x3c
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	440b      	add	r3, r1
 8006b1e:	6859      	ldr	r1, [r3, #4]
 8006b20:	4895      	ldr	r0, [pc, #596]	; (8006d78 <HAL_OSPIM_Config+0x548>)
 8006b22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b24:	4613      	mov	r3, r2
 8006b26:	005b      	lsls	r3, r3, #1
 8006b28:	4413      	add	r3, r2
 8006b2a:	00db      	lsls	r3, r3, #3
 8006b2c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006b30:	4413      	add	r3, r2
 8006b32:	3b3c      	subs	r3, #60	; 0x3c
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	f021 0201 	bic.w	r2, r1, #1
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4403      	add	r3, r0
 8006b40:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8006b42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b44:	4613      	mov	r3, r2
 8006b46:	005b      	lsls	r3, r3, #1
 8006b48:	4413      	add	r3, r2
 8006b4a:	00db      	lsls	r3, r3, #3
 8006b4c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006b50:	4413      	add	r3, r2
 8006b52:	3b38      	subs	r3, #56	; 0x38
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d01f      	beq.n	8006b9a <HAL_OSPIM_Config+0x36a>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8006b5a:	4987      	ldr	r1, [pc, #540]	; (8006d78 <HAL_OSPIM_Config+0x548>)
 8006b5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b5e:	4613      	mov	r3, r2
 8006b60:	005b      	lsls	r3, r3, #1
 8006b62:	4413      	add	r3, r2
 8006b64:	00db      	lsls	r3, r3, #3
 8006b66:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006b6a:	4413      	add	r3, r2
 8006b6c:	3b38      	subs	r3, #56	; 0x38
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3b01      	subs	r3, #1
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	440b      	add	r3, r1
 8006b76:	6859      	ldr	r1, [r3, #4]
 8006b78:	487f      	ldr	r0, [pc, #508]	; (8006d78 <HAL_OSPIM_Config+0x548>)
 8006b7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	005b      	lsls	r3, r3, #1
 8006b80:	4413      	add	r3, r2
 8006b82:	00db      	lsls	r3, r3, #3
 8006b84:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006b88:	4413      	add	r3, r2
 8006b8a:	3b38      	subs	r3, #56	; 0x38
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	f021 0210 	bic.w	r2, r1, #16
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4403      	add	r3, r0
 8006b98:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006b9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	005b      	lsls	r3, r3, #1
 8006ba0:	4413      	add	r3, r2
 8006ba2:	00db      	lsls	r3, r3, #3
 8006ba4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006ba8:	4413      	add	r3, r2
 8006baa:	3b30      	subs	r3, #48	; 0x30
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d023      	beq.n	8006bfa <HAL_OSPIM_Config+0x3ca>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8006bb2:	4971      	ldr	r1, [pc, #452]	; (8006d78 <HAL_OSPIM_Config+0x548>)
 8006bb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	005b      	lsls	r3, r3, #1
 8006bba:	4413      	add	r3, r2
 8006bbc:	00db      	lsls	r3, r3, #3
 8006bbe:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006bc2:	4413      	add	r3, r2
 8006bc4:	3b30      	subs	r3, #48	; 0x30
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	440b      	add	r3, r1
 8006bd2:	6859      	ldr	r1, [r3, #4]
 8006bd4:	4868      	ldr	r0, [pc, #416]	; (8006d78 <HAL_OSPIM_Config+0x548>)
 8006bd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bd8:	4613      	mov	r3, r2
 8006bda:	005b      	lsls	r3, r3, #1
 8006bdc:	4413      	add	r3, r2
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006be4:	4413      	add	r3, r2
 8006be6:	3b30      	subs	r3, #48	; 0x30
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	3b01      	subs	r3, #1
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4403      	add	r3, r0
 8006bf8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006bfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	005b      	lsls	r3, r3, #1
 8006c00:	4413      	add	r3, r2
 8006c02:	00db      	lsls	r3, r3, #3
 8006c04:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006c08:	4413      	add	r3, r2
 8006c0a:	3b2c      	subs	r3, #44	; 0x2c
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d023      	beq.n	8006c5a <HAL_OSPIM_Config+0x42a>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006c12:	4959      	ldr	r1, [pc, #356]	; (8006d78 <HAL_OSPIM_Config+0x548>)
 8006c14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c16:	4613      	mov	r3, r2
 8006c18:	005b      	lsls	r3, r3, #1
 8006c1a:	4413      	add	r3, r2
 8006c1c:	00db      	lsls	r3, r3, #3
 8006c1e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006c22:	4413      	add	r3, r2
 8006c24:	3b2c      	subs	r3, #44	; 0x2c
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	f003 0301 	and.w	r3, r3, #1
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	440b      	add	r3, r1
 8006c32:	6859      	ldr	r1, [r3, #4]
 8006c34:	4850      	ldr	r0, [pc, #320]	; (8006d78 <HAL_OSPIM_Config+0x548>)
 8006c36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c38:	4613      	mov	r3, r2
 8006c3a:	005b      	lsls	r3, r3, #1
 8006c3c:	4413      	add	r3, r2
 8006c3e:	00db      	lsls	r3, r3, #3
 8006c40:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006c44:	4413      	add	r3, r2
 8006c46:	3b2c      	subs	r3, #44	; 0x2c
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	f003 0301 	and.w	r3, r3, #1
 8006c50:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4403      	add	r3, r0
 8006c58:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	6819      	ldr	r1, [r3, #0]
 8006c5e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006c62:	4613      	mov	r3, r2
 8006c64:	005b      	lsls	r3, r3, #1
 8006c66:	4413      	add	r3, r2
 8006c68:	00db      	lsls	r3, r3, #3
 8006c6a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006c6e:	4413      	add	r3, r2
 8006c70:	3b3c      	subs	r3, #60	; 0x3c
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4299      	cmp	r1, r3
 8006c76:	d03c      	beq.n	8006cf2 <HAL_OSPIM_Config+0x4c2>
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	6859      	ldr	r1, [r3, #4]
 8006c7c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006c80:	4613      	mov	r3, r2
 8006c82:	005b      	lsls	r3, r3, #1
 8006c84:	4413      	add	r3, r2
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006c8c:	4413      	add	r3, r2
 8006c8e:	3b38      	subs	r3, #56	; 0x38
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4299      	cmp	r1, r3
 8006c94:	d02d      	beq.n	8006cf2 <HAL_OSPIM_Config+0x4c2>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	6899      	ldr	r1, [r3, #8]
 8006c9a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	005b      	lsls	r3, r3, #1
 8006ca2:	4413      	add	r3, r2
 8006ca4:	00db      	lsls	r3, r3, #3
 8006ca6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006caa:	4413      	add	r3, r2
 8006cac:	3b34      	subs	r3, #52	; 0x34
 8006cae:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006cb0:	4299      	cmp	r1, r3
 8006cb2:	d01e      	beq.n	8006cf2 <HAL_OSPIM_Config+0x4c2>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	68d9      	ldr	r1, [r3, #12]
 8006cb8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	005b      	lsls	r3, r3, #1
 8006cc0:	4413      	add	r3, r2
 8006cc2:	00db      	lsls	r3, r3, #3
 8006cc4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006cc8:	4413      	add	r3, r2
 8006cca:	3b30      	subs	r3, #48	; 0x30
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4299      	cmp	r1, r3
 8006cd0:	d00f      	beq.n	8006cf2 <HAL_OSPIM_Config+0x4c2>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	6919      	ldr	r1, [r3, #16]
 8006cd6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006cda:	4613      	mov	r3, r2
 8006cdc:	005b      	lsls	r3, r3, #1
 8006cde:	4413      	add	r3, r2
 8006ce0:	00db      	lsls	r3, r3, #3
 8006ce2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006ce6:	4413      	add	r3, r2
 8006ce8:	3b2c      	subs	r3, #44	; 0x2c
 8006cea:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006cec:	4299      	cmp	r1, r3
 8006cee:	f040 811e 	bne.w	8006f2e <HAL_OSPIM_Config+0x6fe>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	6819      	ldr	r1, [r3, #0]
 8006cf6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	4413      	add	r3, r2
 8006d00:	00db      	lsls	r3, r3, #3
 8006d02:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006d06:	4413      	add	r3, r2
 8006d08:	3b3c      	subs	r3, #60	; 0x3c
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4299      	cmp	r1, r3
 8006d0e:	d135      	bne.n	8006d7c <HAL_OSPIM_Config+0x54c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	6859      	ldr	r1, [r3, #4]
 8006d14:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006d18:	4613      	mov	r3, r2
 8006d1a:	005b      	lsls	r3, r3, #1
 8006d1c:	4413      	add	r3, r2
 8006d1e:	00db      	lsls	r3, r3, #3
 8006d20:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006d24:	4413      	add	r3, r2
 8006d26:	3b38      	subs	r3, #56	; 0x38
 8006d28:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8006d2a:	4299      	cmp	r1, r3
 8006d2c:	d126      	bne.n	8006d7c <HAL_OSPIM_Config+0x54c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	68d9      	ldr	r1, [r3, #12]
 8006d32:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006d36:	4613      	mov	r3, r2
 8006d38:	005b      	lsls	r3, r3, #1
 8006d3a:	4413      	add	r3, r2
 8006d3c:	00db      	lsls	r3, r3, #3
 8006d3e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006d42:	4413      	add	r3, r2
 8006d44:	3b30      	subs	r3, #48	; 0x30
 8006d46:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8006d48:	4299      	cmp	r1, r3
 8006d4a:	d117      	bne.n	8006d7c <HAL_OSPIM_Config+0x54c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	6919      	ldr	r1, [r3, #16]
 8006d50:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006d54:	4613      	mov	r3, r2
 8006d56:	005b      	lsls	r3, r3, #1
 8006d58:	4413      	add	r3, r2
 8006d5a:	00db      	lsls	r3, r3, #3
 8006d5c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006d60:	4413      	add	r3, r2
 8006d62:	3b2c      	subs	r3, #44	; 0x2c
 8006d64:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8006d66:	4299      	cmp	r1, r3
 8006d68:	d108      	bne.n	8006d7c <HAL_OSPIM_Config+0x54c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006d6a:	4b03      	ldr	r3, [pc, #12]	; (8006d78 <HAL_OSPIM_Config+0x548>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a02      	ldr	r2, [pc, #8]	; (8006d78 <HAL_OSPIM_Config+0x548>)
 8006d70:	f043 0301 	orr.w	r3, r3, #1
 8006d74:	6013      	str	r3, [r2, #0]
 8006d76:	e0da      	b.n	8006f2e <HAL_OSPIM_Config+0x6fe>
 8006d78:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8006d7c:	49c2      	ldr	r1, [pc, #776]	; (8007088 <HAL_OSPIM_Config+0x858>)
 8006d7e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006d82:	4613      	mov	r3, r2
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	4413      	add	r3, r2
 8006d88:	00db      	lsls	r3, r3, #3
 8006d8a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006d8e:	4413      	add	r3, r2
 8006d90:	3b3c      	subs	r3, #60	; 0x3c
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	3b01      	subs	r3, #1
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	440b      	add	r3, r1
 8006d9a:	6859      	ldr	r1, [r3, #4]
 8006d9c:	48ba      	ldr	r0, [pc, #744]	; (8007088 <HAL_OSPIM_Config+0x858>)
 8006d9e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006da2:	4613      	mov	r3, r2
 8006da4:	005b      	lsls	r3, r3, #1
 8006da6:	4413      	add	r3, r2
 8006da8:	00db      	lsls	r3, r3, #3
 8006daa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006dae:	4413      	add	r3, r2
 8006db0:	3b3c      	subs	r3, #60	; 0x3c
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3b01      	subs	r3, #1
 8006db6:	f021 0201 	bic.w	r2, r1, #1
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4403      	add	r3, r0
 8006dbe:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006dc0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	005b      	lsls	r3, r3, #1
 8006dc8:	4413      	add	r3, r2
 8006dca:	00db      	lsls	r3, r3, #3
 8006dcc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006dd0:	4413      	add	r3, r2
 8006dd2:	3b38      	subs	r3, #56	; 0x38
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d021      	beq.n	8006e1e <HAL_OSPIM_Config+0x5ee>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8006dda:	49ab      	ldr	r1, [pc, #684]	; (8007088 <HAL_OSPIM_Config+0x858>)
 8006ddc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006de0:	4613      	mov	r3, r2
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	4413      	add	r3, r2
 8006de6:	00db      	lsls	r3, r3, #3
 8006de8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006dec:	4413      	add	r3, r2
 8006dee:	3b38      	subs	r3, #56	; 0x38
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	3b01      	subs	r3, #1
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	440b      	add	r3, r1
 8006df8:	6859      	ldr	r1, [r3, #4]
 8006dfa:	48a3      	ldr	r0, [pc, #652]	; (8007088 <HAL_OSPIM_Config+0x858>)
 8006dfc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006e00:	4613      	mov	r3, r2
 8006e02:	005b      	lsls	r3, r3, #1
 8006e04:	4413      	add	r3, r2
 8006e06:	00db      	lsls	r3, r3, #3
 8006e08:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006e0c:	4413      	add	r3, r2
 8006e0e:	3b38      	subs	r3, #56	; 0x38
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	3b01      	subs	r3, #1
 8006e14:	f021 0210 	bic.w	r2, r1, #16
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4403      	add	r3, r0
 8006e1c:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8006e1e:	499a      	ldr	r1, [pc, #616]	; (8007088 <HAL_OSPIM_Config+0x858>)
 8006e20:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006e24:	4613      	mov	r3, r2
 8006e26:	005b      	lsls	r3, r3, #1
 8006e28:	4413      	add	r3, r2
 8006e2a:	00db      	lsls	r3, r3, #3
 8006e2c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006e30:	4413      	add	r3, r2
 8006e32:	3b34      	subs	r3, #52	; 0x34
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	3b01      	subs	r3, #1
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	440b      	add	r3, r1
 8006e3c:	6859      	ldr	r1, [r3, #4]
 8006e3e:	4892      	ldr	r0, [pc, #584]	; (8007088 <HAL_OSPIM_Config+0x858>)
 8006e40:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006e44:	4613      	mov	r3, r2
 8006e46:	005b      	lsls	r3, r3, #1
 8006e48:	4413      	add	r3, r2
 8006e4a:	00db      	lsls	r3, r3, #3
 8006e4c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006e50:	4413      	add	r3, r2
 8006e52:	3b34      	subs	r3, #52	; 0x34
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4403      	add	r3, r0
 8006e60:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006e62:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006e66:	4613      	mov	r3, r2
 8006e68:	005b      	lsls	r3, r3, #1
 8006e6a:	4413      	add	r3, r2
 8006e6c:	00db      	lsls	r3, r3, #3
 8006e6e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006e72:	4413      	add	r3, r2
 8006e74:	3b30      	subs	r3, #48	; 0x30
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d025      	beq.n	8006ec8 <HAL_OSPIM_Config+0x698>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8006e7c:	4982      	ldr	r1, [pc, #520]	; (8007088 <HAL_OSPIM_Config+0x858>)
 8006e7e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006e82:	4613      	mov	r3, r2
 8006e84:	005b      	lsls	r3, r3, #1
 8006e86:	4413      	add	r3, r2
 8006e88:	00db      	lsls	r3, r3, #3
 8006e8a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006e8e:	4413      	add	r3, r2
 8006e90:	3b30      	subs	r3, #48	; 0x30
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3b01      	subs	r3, #1
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	440b      	add	r3, r1
 8006e9e:	6859      	ldr	r1, [r3, #4]
 8006ea0:	4879      	ldr	r0, [pc, #484]	; (8007088 <HAL_OSPIM_Config+0x858>)
 8006ea2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	4413      	add	r3, r2
 8006eac:	00db      	lsls	r3, r3, #3
 8006eae:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006eb2:	4413      	add	r3, r2
 8006eb4:	3b30      	subs	r3, #48	; 0x30
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4403      	add	r3, r0
 8006ec6:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006ec8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006ecc:	4613      	mov	r3, r2
 8006ece:	005b      	lsls	r3, r3, #1
 8006ed0:	4413      	add	r3, r2
 8006ed2:	00db      	lsls	r3, r3, #3
 8006ed4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006ed8:	4413      	add	r3, r2
 8006eda:	3b2c      	subs	r3, #44	; 0x2c
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d025      	beq.n	8006f2e <HAL_OSPIM_Config+0x6fe>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8006ee2:	4969      	ldr	r1, [pc, #420]	; (8007088 <HAL_OSPIM_Config+0x858>)
 8006ee4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006ee8:	4613      	mov	r3, r2
 8006eea:	005b      	lsls	r3, r3, #1
 8006eec:	4413      	add	r3, r2
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006ef4:	4413      	add	r3, r2
 8006ef6:	3b2c      	subs	r3, #44	; 0x2c
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	3b01      	subs	r3, #1
 8006efc:	f003 0301 	and.w	r3, r3, #1
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	440b      	add	r3, r1
 8006f04:	6859      	ldr	r1, [r3, #4]
 8006f06:	4860      	ldr	r0, [pc, #384]	; (8007088 <HAL_OSPIM_Config+0x858>)
 8006f08:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	005b      	lsls	r3, r3, #1
 8006f10:	4413      	add	r3, r2
 8006f12:	00db      	lsls	r3, r3, #3
 8006f14:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006f18:	4413      	add	r3, r2
 8006f1a:	3b2c      	subs	r3, #44	; 0x2c
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4403      	add	r3, r0
 8006f2c:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8006f2e:	4a56      	ldr	r2, [pc, #344]	; (8007088 <HAL_OSPIM_Config+0x858>)
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	3b01      	subs	r3, #1
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f42:	025b      	lsls	r3, r3, #9
 8006f44:	431a      	orrs	r2, r3
 8006f46:	4950      	ldr	r1, [pc, #320]	; (8007088 <HAL_OSPIM_Config+0x858>)
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	440b      	add	r3, r1
 8006f56:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	695b      	ldr	r3, [r3, #20]
 8006f5c:	1e5a      	subs	r2, r3, #1
 8006f5e:	4b4a      	ldr	r3, [pc, #296]	; (8007088 <HAL_OSPIM_Config+0x858>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	0c1b      	lsrs	r3, r3, #16
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d90a      	bls.n	8006f80 <HAL_OSPIM_Config+0x750>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8006f6a:	4b47      	ldr	r3, [pc, #284]	; (8007088 <HAL_OSPIM_Config+0x858>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	041b      	lsls	r3, r3, #16
 8006f7a:	4943      	ldr	r1, [pc, #268]	; (8007088 <HAL_OSPIM_Config+0x858>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006f80:	4b41      	ldr	r3, [pc, #260]	; (8007088 <HAL_OSPIM_Config+0x858>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0301 	and.w	r3, r3, #1
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 809b 	beq.w	80070c4 <HAL_OSPIM_Config+0x894>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8006f8e:	4a3e      	ldr	r2, [pc, #248]	; (8007088 <HAL_OSPIM_Config+0x858>)
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3b01      	subs	r3, #1
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f023 0203 	bic.w	r2, r3, #3
 8006fa0:	4939      	ldr	r1, [pc, #228]	; (8007088 <HAL_OSPIM_Config+0x858>)
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	f042 0201 	orr.w	r2, r2, #1
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	440b      	add	r3, r1
 8006fb0:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d011      	beq.n	8006fde <HAL_OSPIM_Config+0x7ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8006fba:	4a33      	ldr	r2, [pc, #204]	; (8007088 <HAL_OSPIM_Config+0x858>)
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4413      	add	r3, r2
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006fcc:	492e      	ldr	r1, [pc, #184]	; (8007088 <HAL_OSPIM_Config+0x858>)
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	f042 0210 	orr.w	r2, r2, #16
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	440b      	add	r3, r1
 8006fdc:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d016      	beq.n	8007018 <HAL_OSPIM_Config+0x7e8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8006fea:	4a27      	ldr	r2, [pc, #156]	; (8007088 <HAL_OSPIM_Config+0x858>)
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	4413      	add	r3, r2
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007000:	4921      	ldr	r1, [pc, #132]	; (8007088 <HAL_OSPIM_Config+0x858>)
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	3b01      	subs	r3, #1
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	440b      	add	r3, r1
 8007014:	605a      	str	r2, [r3, #4]
 8007016:	e019      	b.n	800704c <HAL_OSPIM_Config+0x81c>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d015      	beq.n	800704c <HAL_OSPIM_Config+0x81c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8007020:	4a19      	ldr	r2, [pc, #100]	; (8007088 <HAL_OSPIM_Config+0x858>)
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	3b01      	subs	r3, #1
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007036:	4914      	ldr	r1, [pc, #80]	; (8007088 <HAL_OSPIM_Config+0x858>)
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	3b01      	subs	r3, #1
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	440b      	add	r3, r1
 800704a:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d019      	beq.n	800708c <HAL_OSPIM_Config+0x85c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8007058:	4a0b      	ldr	r2, [pc, #44]	; (8007088 <HAL_OSPIM_Config+0x858>)
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	3b01      	subs	r3, #1
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800706e:	4906      	ldr	r1, [pc, #24]	; (8007088 <HAL_OSPIM_Config+0x858>)
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	3b01      	subs	r3, #1
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	440b      	add	r3, r1
 8007082:	605a      	str	r2, [r3, #4]
 8007084:	e0c6      	b.n	8007214 <HAL_OSPIM_Config+0x9e4>
 8007086:	bf00      	nop
 8007088:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	f000 80bf 	beq.w	8007214 <HAL_OSPIM_Config+0x9e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8007096:	4a6e      	ldr	r2, [pc, #440]	; (8007250 <HAL_OSPIM_Config+0xa20>)
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	3b01      	subs	r3, #1
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	4413      	add	r3, r2
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80070ac:	4968      	ldr	r1, [pc, #416]	; (8007250 <HAL_OSPIM_Config+0xa20>)
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	f003 0301 	and.w	r3, r3, #1
 80070b8:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	440b      	add	r3, r1
 80070c0:	605a      	str	r2, [r3, #4]
 80070c2:	e0a7      	b.n	8007214 <HAL_OSPIM_Config+0x9e4>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80070c4:	4a62      	ldr	r2, [pc, #392]	; (8007250 <HAL_OSPIM_Config+0xa20>)
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3b01      	subs	r3, #1
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4413      	add	r3, r2
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f023 0203 	bic.w	r2, r3, #3
 80070d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070d8:	005b      	lsls	r3, r3, #1
 80070da:	431a      	orrs	r2, r3
 80070dc:	495c      	ldr	r1, [pc, #368]	; (8007250 <HAL_OSPIM_Config+0xa20>)
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	f042 0201 	orr.w	r2, r2, #1
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	440b      	add	r3, r1
 80070ec:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d014      	beq.n	8007120 <HAL_OSPIM_Config+0x8f0>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80070f6:	4a56      	ldr	r2, [pc, #344]	; (8007250 <HAL_OSPIM_Config+0xa20>)
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	3b01      	subs	r3, #1
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800710a:	015b      	lsls	r3, r3, #5
 800710c:	431a      	orrs	r2, r3
 800710e:	4950      	ldr	r1, [pc, #320]	; (8007250 <HAL_OSPIM_Config+0xa20>)
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	3b01      	subs	r3, #1
 8007116:	f042 0210 	orr.w	r2, r2, #16
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	440b      	add	r3, r1
 800711e:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d019      	beq.n	8007160 <HAL_OSPIM_Config+0x930>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800712c:	4a48      	ldr	r2, [pc, #288]	; (8007250 <HAL_OSPIM_Config+0xa20>)
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	3b01      	subs	r3, #1
 8007134:	f003 0301 	and.w	r3, r3, #1
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007144:	049b      	lsls	r3, r3, #18
 8007146:	431a      	orrs	r2, r3
 8007148:	4941      	ldr	r1, [pc, #260]	; (8007250 <HAL_OSPIM_Config+0xa20>)
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	3b01      	subs	r3, #1
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	440b      	add	r3, r1
 800715c:	605a      	str	r2, [r3, #4]
 800715e:	e01c      	b.n	800719a <HAL_OSPIM_Config+0x96a>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d018      	beq.n	800719a <HAL_OSPIM_Config+0x96a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8007168:	4a39      	ldr	r2, [pc, #228]	; (8007250 <HAL_OSPIM_Config+0xa20>)
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	3b01      	subs	r3, #1
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800717e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007180:	069b      	lsls	r3, r3, #26
 8007182:	431a      	orrs	r2, r3
 8007184:	4932      	ldr	r1, [pc, #200]	; (8007250 <HAL_OSPIM_Config+0xa20>)
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	3b01      	subs	r3, #1
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	440b      	add	r3, r1
 8007198:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d019      	beq.n	80071da <HAL_OSPIM_Config+0x9aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80071a6:	4a2a      	ldr	r2, [pc, #168]	; (8007250 <HAL_OSPIM_Config+0xa20>)
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	3b01      	subs	r3, #1
 80071ae:	f003 0301 	and.w	r3, r3, #1
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4413      	add	r3, r2
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80071bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071be:	049b      	lsls	r3, r3, #18
 80071c0:	431a      	orrs	r2, r3
 80071c2:	4923      	ldr	r1, [pc, #140]	; (8007250 <HAL_OSPIM_Config+0xa20>)
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	3b01      	subs	r3, #1
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	440b      	add	r3, r1
 80071d6:	605a      	str	r2, [r3, #4]
 80071d8:	e01c      	b.n	8007214 <HAL_OSPIM_Config+0x9e4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d018      	beq.n	8007214 <HAL_OSPIM_Config+0x9e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80071e2:	4a1b      	ldr	r2, [pc, #108]	; (8007250 <HAL_OSPIM_Config+0xa20>)
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	3b01      	subs	r3, #1
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4413      	add	r3, r2
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80071f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071fa:	069b      	lsls	r3, r3, #26
 80071fc:	431a      	orrs	r2, r3
 80071fe:	4914      	ldr	r1, [pc, #80]	; (8007250 <HAL_OSPIM_Config+0xa20>)
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	3b01      	subs	r3, #1
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	440b      	add	r3, r1
 8007212:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8007214:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	2b00      	cmp	r3, #0
 800721e:	d005      	beq.n	800722c <HAL_OSPIM_Config+0x9fc>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8007220:	4b0c      	ldr	r3, [pc, #48]	; (8007254 <HAL_OSPIM_Config+0xa24>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a0b      	ldr	r2, [pc, #44]	; (8007254 <HAL_OSPIM_Config+0xa24>)
 8007226:	f043 0301 	orr.w	r3, r3, #1
 800722a:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800722c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d005      	beq.n	8007244 <HAL_OSPIM_Config+0xa14>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007238:	4b07      	ldr	r3, [pc, #28]	; (8007258 <HAL_OSPIM_Config+0xa28>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a06      	ldr	r2, [pc, #24]	; (8007258 <HAL_OSPIM_Config+0xa28>)
 800723e:	f043 0301 	orr.w	r3, r3, #1
 8007242:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8007244:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007248:	4618      	mov	r0, r3
 800724a:	3750      	adds	r7, #80	; 0x50
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	5200b400 	.word	0x5200b400
 8007254:	52005000 	.word	0x52005000
 8007258:	5200a000 	.word	0x5200a000

0800725c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	603b      	str	r3, [r7, #0]
 8007268:	4613      	mov	r3, r2
 800726a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800726c:	e01a      	b.n	80072a4 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007274:	d016      	beq.n	80072a4 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007276:	f7fb fea7 	bl	8002fc8 <HAL_GetTick>
 800727a:	4602      	mov	r2, r0
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	69ba      	ldr	r2, [r7, #24]
 8007282:	429a      	cmp	r2, r3
 8007284:	d302      	bcc.n	800728c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10b      	bne.n	80072a4 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007292:	655a      	str	r2, [r3, #84]	; 0x54
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007298:	f043 0201 	orr.w	r2, r3, #1
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e00e      	b.n	80072c2 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6a1a      	ldr	r2, [r3, #32]
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	4013      	ands	r3, r2
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	bf14      	ite	ne
 80072b2:	2301      	movne	r3, #1
 80072b4:	2300      	moveq	r3, #0
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	461a      	mov	r2, r3
 80072ba:	79fb      	ldrb	r3, [r7, #7]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d1d6      	bne.n	800726e <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
	...

080072cc <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	4603      	mov	r3, r0
 80072d4:	6039      	str	r1, [r7, #0]
 80072d6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80072d8:	2300      	movs	r3, #0
 80072da:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80072dc:	2300      	movs	r3, #0
 80072de:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80072e0:	79fb      	ldrb	r3, [r7, #7]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d005      	beq.n	80072f2 <OSPIM_GetConfig+0x26>
 80072e6:	79fb      	ldrb	r3, [r7, #7]
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d802      	bhi.n	80072f2 <OSPIM_GetConfig+0x26>
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d102      	bne.n	80072f8 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	75fb      	strb	r3, [r7, #23]
 80072f6:	e098      	b.n	800742a <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	2200      	movs	r2, #0
 80072fc:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2200      	movs	r2, #0
 8007302:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	2200      	movs	r2, #0
 8007308:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2200      	movs	r2, #0
 800730e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	2200      	movs	r2, #0
 8007314:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8007316:	79fb      	ldrb	r3, [r7, #7]
 8007318:	2b02      	cmp	r3, #2
 800731a:	d10b      	bne.n	8007334 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800731c:	4b46      	ldr	r3, [pc, #280]	; (8007438 <OSPIM_GetConfig+0x16c>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0301 	and.w	r3, r3, #1
 8007324:	2b00      	cmp	r3, #0
 8007326:	d102      	bne.n	800732e <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8007328:	4b44      	ldr	r3, [pc, #272]	; (800743c <OSPIM_GetConfig+0x170>)
 800732a:	613b      	str	r3, [r7, #16]
 800732c:	e002      	b.n	8007334 <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800732e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007332:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007334:	2300      	movs	r3, #0
 8007336:	60fb      	str	r3, [r7, #12]
 8007338:	e074      	b.n	8007424 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800733a:	4a3f      	ldr	r2, [pc, #252]	; (8007438 <OSPIM_GetConfig+0x16c>)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00a      	beq.n	8007366 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	4053      	eors	r3, r2
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b00      	cmp	r3, #0
 800735c:	d103      	bne.n	8007366 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	1c5a      	adds	r2, r3, #1
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	f003 0310 	and.w	r3, r3, #16
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00a      	beq.n	8007386 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	4053      	eors	r3, r2
 8007376:	f003 0320 	and.w	r3, r3, #32
 800737a:	2b00      	cmp	r3, #0
 800737c:	d103      	bne.n	8007386 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	1c5a      	adds	r2, r3, #1
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00a      	beq.n	80073a6 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	4053      	eors	r3, r2
 8007396:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800739a:	2b00      	cmp	r3, #0
 800739c:	d103      	bne.n	80073a6 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	1c5a      	adds	r2, r3, #1
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d018      	beq.n	80073e2 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	4053      	eors	r3, r2
 80073b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d111      	bne.n	80073e2 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d106      	bne.n	80073d6 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	3301      	adds	r3, #1
 80073cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	60da      	str	r2, [r3, #12]
 80073d4:	e005      	b.n	80073e2 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	3301      	adds	r3, #1
 80073da:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d018      	beq.n	800741e <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	4053      	eors	r3, r2
 80073f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d111      	bne.n	800741e <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d106      	bne.n	8007412 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	3301      	adds	r3, #1
 8007408:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	611a      	str	r2, [r3, #16]
 8007410:	e005      	b.n	800741e <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3301      	adds	r3, #1
 8007416:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	3301      	adds	r3, #1
 8007422:	60fb      	str	r3, [r7, #12]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d987      	bls.n	800733a <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800742a:	7dfb      	ldrb	r3, [r7, #23]
}
 800742c:	4618      	mov	r0, r3
 800742e:	371c      	adds	r7, #28
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr
 8007438:	5200b400 	.word	0x5200b400
 800743c:	04040222 	.word	0x04040222

08007440 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007448:	4b29      	ldr	r3, [pc, #164]	; (80074f0 <HAL_PWREx_ConfigSupply+0xb0>)
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	f003 0307 	and.w	r3, r3, #7
 8007450:	2b06      	cmp	r3, #6
 8007452:	d00a      	beq.n	800746a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007454:	4b26      	ldr	r3, [pc, #152]	; (80074f0 <HAL_PWREx_ConfigSupply+0xb0>)
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	429a      	cmp	r2, r3
 8007460:	d001      	beq.n	8007466 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e03f      	b.n	80074e6 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007466:	2300      	movs	r3, #0
 8007468:	e03d      	b.n	80074e6 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800746a:	4b21      	ldr	r3, [pc, #132]	; (80074f0 <HAL_PWREx_ConfigSupply+0xb0>)
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8007472:	491f      	ldr	r1, [pc, #124]	; (80074f0 <HAL_PWREx_ConfigSupply+0xb0>)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4313      	orrs	r3, r2
 8007478:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800747a:	f7fb fda5 	bl	8002fc8 <HAL_GetTick>
 800747e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007480:	e009      	b.n	8007496 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007482:	f7fb fda1 	bl	8002fc8 <HAL_GetTick>
 8007486:	4602      	mov	r2, r0
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007490:	d901      	bls.n	8007496 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e027      	b.n	80074e6 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007496:	4b16      	ldr	r3, [pc, #88]	; (80074f0 <HAL_PWREx_ConfigSupply+0xb0>)
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800749e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074a2:	d1ee      	bne.n	8007482 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b1e      	cmp	r3, #30
 80074a8:	d008      	beq.n	80074bc <HAL_PWREx_ConfigSupply+0x7c>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2b2e      	cmp	r3, #46	; 0x2e
 80074ae:	d005      	beq.n	80074bc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b1d      	cmp	r3, #29
 80074b4:	d002      	beq.n	80074bc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b2d      	cmp	r3, #45	; 0x2d
 80074ba:	d113      	bne.n	80074e4 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80074bc:	f7fb fd84 	bl	8002fc8 <HAL_GetTick>
 80074c0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80074c2:	e009      	b.n	80074d8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80074c4:	f7fb fd80 	bl	8002fc8 <HAL_GetTick>
 80074c8:	4602      	mov	r2, r0
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074d2:	d901      	bls.n	80074d8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e006      	b.n	80074e6 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80074d8:	4b05      	ldr	r3, [pc, #20]	; (80074f0 <HAL_PWREx_ConfigSupply+0xb0>)
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	f003 0311 	and.w	r3, r3, #17
 80074e0:	2b11      	cmp	r3, #17
 80074e2:	d1ef      	bne.n	80074c4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	58024800 	.word	0x58024800

080074f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b08c      	sub	sp, #48	; 0x30
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d101      	bne.n	8007506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e397      	b.n	8007c36 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b00      	cmp	r3, #0
 8007510:	f000 8087 	beq.w	8007622 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007514:	4b9e      	ldr	r3, [pc, #632]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800751c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800751e:	4b9c      	ldr	r3, [pc, #624]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 8007520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007522:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007526:	2b10      	cmp	r3, #16
 8007528:	d007      	beq.n	800753a <HAL_RCC_OscConfig+0x46>
 800752a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752c:	2b18      	cmp	r3, #24
 800752e:	d110      	bne.n	8007552 <HAL_RCC_OscConfig+0x5e>
 8007530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007532:	f003 0303 	and.w	r3, r3, #3
 8007536:	2b02      	cmp	r3, #2
 8007538:	d10b      	bne.n	8007552 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800753a:	4b95      	ldr	r3, [pc, #596]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d06c      	beq.n	8007620 <HAL_RCC_OscConfig+0x12c>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d168      	bne.n	8007620 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e371      	b.n	8007c36 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800755a:	d106      	bne.n	800756a <HAL_RCC_OscConfig+0x76>
 800755c:	4b8c      	ldr	r3, [pc, #560]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a8b      	ldr	r2, [pc, #556]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 8007562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007566:	6013      	str	r3, [r2, #0]
 8007568:	e02e      	b.n	80075c8 <HAL_RCC_OscConfig+0xd4>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10c      	bne.n	800758c <HAL_RCC_OscConfig+0x98>
 8007572:	4b87      	ldr	r3, [pc, #540]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a86      	ldr	r2, [pc, #536]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 8007578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800757c:	6013      	str	r3, [r2, #0]
 800757e:	4b84      	ldr	r3, [pc, #528]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a83      	ldr	r2, [pc, #524]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 8007584:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007588:	6013      	str	r3, [r2, #0]
 800758a:	e01d      	b.n	80075c8 <HAL_RCC_OscConfig+0xd4>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007594:	d10c      	bne.n	80075b0 <HAL_RCC_OscConfig+0xbc>
 8007596:	4b7e      	ldr	r3, [pc, #504]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a7d      	ldr	r2, [pc, #500]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 800759c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075a0:	6013      	str	r3, [r2, #0]
 80075a2:	4b7b      	ldr	r3, [pc, #492]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a7a      	ldr	r2, [pc, #488]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 80075a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075ac:	6013      	str	r3, [r2, #0]
 80075ae:	e00b      	b.n	80075c8 <HAL_RCC_OscConfig+0xd4>
 80075b0:	4b77      	ldr	r3, [pc, #476]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a76      	ldr	r2, [pc, #472]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 80075b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075ba:	6013      	str	r3, [r2, #0]
 80075bc:	4b74      	ldr	r3, [pc, #464]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a73      	ldr	r2, [pc, #460]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 80075c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d013      	beq.n	80075f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d0:	f7fb fcfa 	bl	8002fc8 <HAL_GetTick>
 80075d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80075d6:	e008      	b.n	80075ea <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075d8:	f7fb fcf6 	bl	8002fc8 <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	2b64      	cmp	r3, #100	; 0x64
 80075e4:	d901      	bls.n	80075ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e325      	b.n	8007c36 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80075ea:	4b69      	ldr	r3, [pc, #420]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0f0      	beq.n	80075d8 <HAL_RCC_OscConfig+0xe4>
 80075f6:	e014      	b.n	8007622 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075f8:	f7fb fce6 	bl	8002fc8 <HAL_GetTick>
 80075fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80075fe:	e008      	b.n	8007612 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007600:	f7fb fce2 	bl	8002fc8 <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	2b64      	cmp	r3, #100	; 0x64
 800760c:	d901      	bls.n	8007612 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e311      	b.n	8007c36 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007612:	4b5f      	ldr	r3, [pc, #380]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1f0      	bne.n	8007600 <HAL_RCC_OscConfig+0x10c>
 800761e:	e000      	b.n	8007622 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 0302 	and.w	r3, r3, #2
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 808a 	beq.w	8007744 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007630:	4b57      	ldr	r3, [pc, #348]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007638:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800763a:	4b55      	ldr	r3, [pc, #340]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 800763c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d007      	beq.n	8007656 <HAL_RCC_OscConfig+0x162>
 8007646:	6a3b      	ldr	r3, [r7, #32]
 8007648:	2b18      	cmp	r3, #24
 800764a:	d137      	bne.n	80076bc <HAL_RCC_OscConfig+0x1c8>
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	f003 0303 	and.w	r3, r3, #3
 8007652:	2b00      	cmp	r3, #0
 8007654:	d132      	bne.n	80076bc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007656:	4b4e      	ldr	r3, [pc, #312]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0304 	and.w	r3, r3, #4
 800765e:	2b00      	cmp	r3, #0
 8007660:	d005      	beq.n	800766e <HAL_RCC_OscConfig+0x17a>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d101      	bne.n	800766e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e2e3      	b.n	8007c36 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800766e:	4b48      	ldr	r3, [pc, #288]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f023 0219 	bic.w	r2, r3, #25
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	4945      	ldr	r1, [pc, #276]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 800767c:	4313      	orrs	r3, r2
 800767e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007680:	f7fb fca2 	bl	8002fc8 <HAL_GetTick>
 8007684:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007686:	e008      	b.n	800769a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007688:	f7fb fc9e 	bl	8002fc8 <HAL_GetTick>
 800768c:	4602      	mov	r2, r0
 800768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	2b02      	cmp	r3, #2
 8007694:	d901      	bls.n	800769a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e2cd      	b.n	8007c36 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800769a:	4b3d      	ldr	r3, [pc, #244]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0304 	and.w	r3, r3, #4
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d0f0      	beq.n	8007688 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076a6:	4b3a      	ldr	r3, [pc, #232]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	061b      	lsls	r3, r3, #24
 80076b4:	4936      	ldr	r1, [pc, #216]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076ba:	e043      	b.n	8007744 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d026      	beq.n	8007712 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80076c4:	4b32      	ldr	r3, [pc, #200]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f023 0219 	bic.w	r2, r3, #25
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	492f      	ldr	r1, [pc, #188]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076d6:	f7fb fc77 	bl	8002fc8 <HAL_GetTick>
 80076da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076dc:	e008      	b.n	80076f0 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076de:	f7fb fc73 	bl	8002fc8 <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d901      	bls.n	80076f0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e2a2      	b.n	8007c36 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076f0:	4b27      	ldr	r3, [pc, #156]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 0304 	and.w	r3, r3, #4
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d0f0      	beq.n	80076de <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076fc:	4b24      	ldr	r3, [pc, #144]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	061b      	lsls	r3, r3, #24
 800770a:	4921      	ldr	r1, [pc, #132]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 800770c:	4313      	orrs	r3, r2
 800770e:	604b      	str	r3, [r1, #4]
 8007710:	e018      	b.n	8007744 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007712:	4b1f      	ldr	r3, [pc, #124]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a1e      	ldr	r2, [pc, #120]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 8007718:	f023 0301 	bic.w	r3, r3, #1
 800771c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800771e:	f7fb fc53 	bl	8002fc8 <HAL_GetTick>
 8007722:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007724:	e008      	b.n	8007738 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007726:	f7fb fc4f 	bl	8002fc8 <HAL_GetTick>
 800772a:	4602      	mov	r2, r0
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	2b02      	cmp	r3, #2
 8007732:	d901      	bls.n	8007738 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e27e      	b.n	8007c36 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007738:	4b15      	ldr	r3, [pc, #84]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0304 	and.w	r3, r3, #4
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1f0      	bne.n	8007726 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0310 	and.w	r3, r3, #16
 800774c:	2b00      	cmp	r3, #0
 800774e:	d06d      	beq.n	800782c <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007750:	4b0f      	ldr	r3, [pc, #60]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007758:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800775a:	4b0d      	ldr	r3, [pc, #52]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 800775c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	2b08      	cmp	r3, #8
 8007764:	d007      	beq.n	8007776 <HAL_RCC_OscConfig+0x282>
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	2b18      	cmp	r3, #24
 800776a:	d11e      	bne.n	80077aa <HAL_RCC_OscConfig+0x2b6>
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	f003 0303 	and.w	r3, r3, #3
 8007772:	2b01      	cmp	r3, #1
 8007774:	d119      	bne.n	80077aa <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007776:	4b06      	ldr	r3, [pc, #24]	; (8007790 <HAL_RCC_OscConfig+0x29c>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800777e:	2b00      	cmp	r3, #0
 8007780:	d008      	beq.n	8007794 <HAL_RCC_OscConfig+0x2a0>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	69db      	ldr	r3, [r3, #28]
 8007786:	2b80      	cmp	r3, #128	; 0x80
 8007788:	d004      	beq.n	8007794 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e253      	b.n	8007c36 <HAL_RCC_OscConfig+0x742>
 800778e:	bf00      	nop
 8007790:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007794:	4ba3      	ldr	r3, [pc, #652]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a1b      	ldr	r3, [r3, #32]
 80077a0:	061b      	lsls	r3, r3, #24
 80077a2:	49a0      	ldr	r1, [pc, #640]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 80077a4:	4313      	orrs	r3, r2
 80077a6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80077a8:	e040      	b.n	800782c <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	69db      	ldr	r3, [r3, #28]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d023      	beq.n	80077fa <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80077b2:	4b9c      	ldr	r3, [pc, #624]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a9b      	ldr	r2, [pc, #620]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 80077b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077be:	f7fb fc03 	bl	8002fc8 <HAL_GetTick>
 80077c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80077c4:	e008      	b.n	80077d8 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80077c6:	f7fb fbff 	bl	8002fc8 <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d901      	bls.n	80077d8 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e22e      	b.n	8007c36 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80077d8:	4b92      	ldr	r3, [pc, #584]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d0f0      	beq.n	80077c6 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80077e4:	4b8f      	ldr	r3, [pc, #572]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a1b      	ldr	r3, [r3, #32]
 80077f0:	061b      	lsls	r3, r3, #24
 80077f2:	498c      	ldr	r1, [pc, #560]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 80077f4:	4313      	orrs	r3, r2
 80077f6:	60cb      	str	r3, [r1, #12]
 80077f8:	e018      	b.n	800782c <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80077fa:	4b8a      	ldr	r3, [pc, #552]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a89      	ldr	r2, [pc, #548]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 8007800:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007806:	f7fb fbdf 	bl	8002fc8 <HAL_GetTick>
 800780a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800780c:	e008      	b.n	8007820 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800780e:	f7fb fbdb 	bl	8002fc8 <HAL_GetTick>
 8007812:	4602      	mov	r2, r0
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	2b02      	cmp	r3, #2
 800781a:	d901      	bls.n	8007820 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e20a      	b.n	8007c36 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007820:	4b80      	ldr	r3, [pc, #512]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1f0      	bne.n	800780e <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0308 	and.w	r3, r3, #8
 8007834:	2b00      	cmp	r3, #0
 8007836:	d036      	beq.n	80078a6 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	695b      	ldr	r3, [r3, #20]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d019      	beq.n	8007874 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007840:	4b78      	ldr	r3, [pc, #480]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 8007842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007844:	4a77      	ldr	r2, [pc, #476]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 8007846:	f043 0301 	orr.w	r3, r3, #1
 800784a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800784c:	f7fb fbbc 	bl	8002fc8 <HAL_GetTick>
 8007850:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007852:	e008      	b.n	8007866 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007854:	f7fb fbb8 	bl	8002fc8 <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	2b02      	cmp	r3, #2
 8007860:	d901      	bls.n	8007866 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e1e7      	b.n	8007c36 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007866:	4b6f      	ldr	r3, [pc, #444]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 8007868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800786a:	f003 0302 	and.w	r3, r3, #2
 800786e:	2b00      	cmp	r3, #0
 8007870:	d0f0      	beq.n	8007854 <HAL_RCC_OscConfig+0x360>
 8007872:	e018      	b.n	80078a6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007874:	4b6b      	ldr	r3, [pc, #428]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 8007876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007878:	4a6a      	ldr	r2, [pc, #424]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 800787a:	f023 0301 	bic.w	r3, r3, #1
 800787e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007880:	f7fb fba2 	bl	8002fc8 <HAL_GetTick>
 8007884:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007886:	e008      	b.n	800789a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007888:	f7fb fb9e 	bl	8002fc8 <HAL_GetTick>
 800788c:	4602      	mov	r2, r0
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	2b02      	cmp	r3, #2
 8007894:	d901      	bls.n	800789a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e1cd      	b.n	8007c36 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800789a:	4b62      	ldr	r3, [pc, #392]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 800789c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800789e:	f003 0302 	and.w	r3, r3, #2
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1f0      	bne.n	8007888 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 0320 	and.w	r3, r3, #32
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d036      	beq.n	8007920 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d019      	beq.n	80078ee <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80078ba:	4b5a      	ldr	r3, [pc, #360]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a59      	ldr	r2, [pc, #356]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 80078c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80078c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80078c6:	f7fb fb7f 	bl	8002fc8 <HAL_GetTick>
 80078ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80078cc:	e008      	b.n	80078e0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80078ce:	f7fb fb7b 	bl	8002fc8 <HAL_GetTick>
 80078d2:	4602      	mov	r2, r0
 80078d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d901      	bls.n	80078e0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	e1aa      	b.n	8007c36 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80078e0:	4b50      	ldr	r3, [pc, #320]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d0f0      	beq.n	80078ce <HAL_RCC_OscConfig+0x3da>
 80078ec:	e018      	b.n	8007920 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80078ee:	4b4d      	ldr	r3, [pc, #308]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a4c      	ldr	r2, [pc, #304]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 80078f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80078fa:	f7fb fb65 	bl	8002fc8 <HAL_GetTick>
 80078fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007900:	e008      	b.n	8007914 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007902:	f7fb fb61 	bl	8002fc8 <HAL_GetTick>
 8007906:	4602      	mov	r2, r0
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	2b02      	cmp	r3, #2
 800790e:	d901      	bls.n	8007914 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e190      	b.n	8007c36 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007914:	4b43      	ldr	r3, [pc, #268]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1f0      	bne.n	8007902 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 0304 	and.w	r3, r3, #4
 8007928:	2b00      	cmp	r3, #0
 800792a:	f000 8085 	beq.w	8007a38 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800792e:	4b3e      	ldr	r3, [pc, #248]	; (8007a28 <HAL_RCC_OscConfig+0x534>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a3d      	ldr	r2, [pc, #244]	; (8007a28 <HAL_RCC_OscConfig+0x534>)
 8007934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007938:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800793a:	f7fb fb45 	bl	8002fc8 <HAL_GetTick>
 800793e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007940:	e008      	b.n	8007954 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007942:	f7fb fb41 	bl	8002fc8 <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	2b64      	cmp	r3, #100	; 0x64
 800794e:	d901      	bls.n	8007954 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e170      	b.n	8007c36 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007954:	4b34      	ldr	r3, [pc, #208]	; (8007a28 <HAL_RCC_OscConfig+0x534>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800795c:	2b00      	cmp	r3, #0
 800795e:	d0f0      	beq.n	8007942 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d106      	bne.n	8007976 <HAL_RCC_OscConfig+0x482>
 8007968:	4b2e      	ldr	r3, [pc, #184]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 800796a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796c:	4a2d      	ldr	r2, [pc, #180]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 800796e:	f043 0301 	orr.w	r3, r3, #1
 8007972:	6713      	str	r3, [r2, #112]	; 0x70
 8007974:	e02d      	b.n	80079d2 <HAL_RCC_OscConfig+0x4de>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10c      	bne.n	8007998 <HAL_RCC_OscConfig+0x4a4>
 800797e:	4b29      	ldr	r3, [pc, #164]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 8007980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007982:	4a28      	ldr	r2, [pc, #160]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 8007984:	f023 0301 	bic.w	r3, r3, #1
 8007988:	6713      	str	r3, [r2, #112]	; 0x70
 800798a:	4b26      	ldr	r3, [pc, #152]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 800798c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800798e:	4a25      	ldr	r2, [pc, #148]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 8007990:	f023 0304 	bic.w	r3, r3, #4
 8007994:	6713      	str	r3, [r2, #112]	; 0x70
 8007996:	e01c      	b.n	80079d2 <HAL_RCC_OscConfig+0x4de>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	2b05      	cmp	r3, #5
 800799e:	d10c      	bne.n	80079ba <HAL_RCC_OscConfig+0x4c6>
 80079a0:	4b20      	ldr	r3, [pc, #128]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 80079a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a4:	4a1f      	ldr	r2, [pc, #124]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 80079a6:	f043 0304 	orr.w	r3, r3, #4
 80079aa:	6713      	str	r3, [r2, #112]	; 0x70
 80079ac:	4b1d      	ldr	r3, [pc, #116]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 80079ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b0:	4a1c      	ldr	r2, [pc, #112]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 80079b2:	f043 0301 	orr.w	r3, r3, #1
 80079b6:	6713      	str	r3, [r2, #112]	; 0x70
 80079b8:	e00b      	b.n	80079d2 <HAL_RCC_OscConfig+0x4de>
 80079ba:	4b1a      	ldr	r3, [pc, #104]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 80079bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079be:	4a19      	ldr	r2, [pc, #100]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 80079c0:	f023 0301 	bic.w	r3, r3, #1
 80079c4:	6713      	str	r3, [r2, #112]	; 0x70
 80079c6:	4b17      	ldr	r3, [pc, #92]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 80079c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ca:	4a16      	ldr	r2, [pc, #88]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 80079cc:	f023 0304 	bic.w	r3, r3, #4
 80079d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d015      	beq.n	8007a06 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079da:	f7fb faf5 	bl	8002fc8 <HAL_GetTick>
 80079de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079e0:	e00a      	b.n	80079f8 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079e2:	f7fb faf1 	bl	8002fc8 <HAL_GetTick>
 80079e6:	4602      	mov	r2, r0
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d901      	bls.n	80079f8 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e11e      	b.n	8007c36 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079f8:	4b0a      	ldr	r3, [pc, #40]	; (8007a24 <HAL_RCC_OscConfig+0x530>)
 80079fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079fc:	f003 0302 	and.w	r3, r3, #2
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d0ee      	beq.n	80079e2 <HAL_RCC_OscConfig+0x4ee>
 8007a04:	e018      	b.n	8007a38 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a06:	f7fb fadf 	bl	8002fc8 <HAL_GetTick>
 8007a0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007a0c:	e00e      	b.n	8007a2c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a0e:	f7fb fadb 	bl	8002fc8 <HAL_GetTick>
 8007a12:	4602      	mov	r2, r0
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d905      	bls.n	8007a2c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007a20:	2303      	movs	r3, #3
 8007a22:	e108      	b.n	8007c36 <HAL_RCC_OscConfig+0x742>
 8007a24:	58024400 	.word	0x58024400
 8007a28:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007a2c:	4b84      	ldr	r3, [pc, #528]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a30:	f003 0302 	and.w	r3, r3, #2
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1ea      	bne.n	8007a0e <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f000 80f9 	beq.w	8007c34 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007a42:	4b7f      	ldr	r3, [pc, #508]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a4a:	2b18      	cmp	r3, #24
 8007a4c:	f000 80b4 	beq.w	8007bb8 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	f040 8095 	bne.w	8007b84 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a5a:	4b79      	ldr	r3, [pc, #484]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a78      	ldr	r2, [pc, #480]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007a60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a66:	f7fb faaf 	bl	8002fc8 <HAL_GetTick>
 8007a6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a6c:	e008      	b.n	8007a80 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a6e:	f7fb faab 	bl	8002fc8 <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d901      	bls.n	8007a80 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e0da      	b.n	8007c36 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a80:	4b6f      	ldr	r3, [pc, #444]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1f0      	bne.n	8007a6e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a8c:	4b6c      	ldr	r3, [pc, #432]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007a8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a90:	4b6c      	ldr	r3, [pc, #432]	; (8007c44 <HAL_RCC_OscConfig+0x750>)
 8007a92:	4013      	ands	r3, r2
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007a9c:	0112      	lsls	r2, r2, #4
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	4967      	ldr	r1, [pc, #412]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	628b      	str	r3, [r1, #40]	; 0x28
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	025b      	lsls	r3, r3, #9
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	431a      	orrs	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	041b      	lsls	r3, r3, #16
 8007ac4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007ac8:	431a      	orrs	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	061b      	lsls	r3, r3, #24
 8007ad2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ad6:	495a      	ldr	r1, [pc, #360]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007adc:	4b58      	ldr	r3, [pc, #352]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae0:	4a57      	ldr	r2, [pc, #348]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007ae2:	f023 0301 	bic.w	r3, r3, #1
 8007ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007ae8:	4b55      	ldr	r3, [pc, #340]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007aea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007aec:	4b56      	ldr	r3, [pc, #344]	; (8007c48 <HAL_RCC_OscConfig+0x754>)
 8007aee:	4013      	ands	r3, r2
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007af4:	00d2      	lsls	r2, r2, #3
 8007af6:	4952      	ldr	r1, [pc, #328]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007afc:	4b50      	ldr	r3, [pc, #320]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b00:	f023 020c 	bic.w	r2, r3, #12
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b08:	494d      	ldr	r1, [pc, #308]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007b0e:	4b4c      	ldr	r3, [pc, #304]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b12:	f023 0202 	bic.w	r2, r3, #2
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b1a:	4949      	ldr	r1, [pc, #292]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007b20:	4b47      	ldr	r3, [pc, #284]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b24:	4a46      	ldr	r2, [pc, #280]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b2c:	4b44      	ldr	r3, [pc, #272]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b30:	4a43      	ldr	r2, [pc, #268]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007b38:	4b41      	ldr	r3, [pc, #260]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3c:	4a40      	ldr	r2, [pc, #256]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007b3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007b44:	4b3e      	ldr	r3, [pc, #248]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b48:	4a3d      	ldr	r2, [pc, #244]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007b4a:	f043 0301 	orr.w	r3, r3, #1
 8007b4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b50:	4b3b      	ldr	r3, [pc, #236]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a3a      	ldr	r2, [pc, #232]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007b56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b5c:	f7fb fa34 	bl	8002fc8 <HAL_GetTick>
 8007b60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b62:	e008      	b.n	8007b76 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b64:	f7fb fa30 	bl	8002fc8 <HAL_GetTick>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d901      	bls.n	8007b76 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	e05f      	b.n	8007c36 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b76:	4b32      	ldr	r3, [pc, #200]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d0f0      	beq.n	8007b64 <HAL_RCC_OscConfig+0x670>
 8007b82:	e057      	b.n	8007c34 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b84:	4b2e      	ldr	r3, [pc, #184]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a2d      	ldr	r2, [pc, #180]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b90:	f7fb fa1a 	bl	8002fc8 <HAL_GetTick>
 8007b94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b96:	e008      	b.n	8007baa <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b98:	f7fb fa16 	bl	8002fc8 <HAL_GetTick>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d901      	bls.n	8007baa <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e045      	b.n	8007c36 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007baa:	4b25      	ldr	r3, [pc, #148]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1f0      	bne.n	8007b98 <HAL_RCC_OscConfig+0x6a4>
 8007bb6:	e03d      	b.n	8007c34 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007bb8:	4b21      	ldr	r3, [pc, #132]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bbc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007bbe:	4b20      	ldr	r3, [pc, #128]	; (8007c40 <HAL_RCC_OscConfig+0x74c>)
 8007bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d031      	beq.n	8007c30 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f003 0203 	and.w	r2, r3, #3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d12a      	bne.n	8007c30 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	091b      	lsrs	r3, r3, #4
 8007bde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d122      	bne.n	8007c30 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d11a      	bne.n	8007c30 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	0a5b      	lsrs	r3, r3, #9
 8007bfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c06:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d111      	bne.n	8007c30 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	0c1b      	lsrs	r3, r3, #16
 8007c10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c18:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d108      	bne.n	8007c30 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	0e1b      	lsrs	r3, r3, #24
 8007c22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c2a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d001      	beq.n	8007c34 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e000      	b.n	8007c36 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3730      	adds	r7, #48	; 0x30
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	58024400 	.word	0x58024400
 8007c44:	fffffc0c 	.word	0xfffffc0c
 8007c48:	ffff0007 	.word	0xffff0007

08007c4c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d101      	bne.n	8007c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e19c      	b.n	8007f9a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c60:	4b8a      	ldr	r3, [pc, #552]	; (8007e8c <HAL_RCC_ClockConfig+0x240>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 030f 	and.w	r3, r3, #15
 8007c68:	683a      	ldr	r2, [r7, #0]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d910      	bls.n	8007c90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c6e:	4b87      	ldr	r3, [pc, #540]	; (8007e8c <HAL_RCC_ClockConfig+0x240>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f023 020f 	bic.w	r2, r3, #15
 8007c76:	4985      	ldr	r1, [pc, #532]	; (8007e8c <HAL_RCC_ClockConfig+0x240>)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c7e:	4b83      	ldr	r3, [pc, #524]	; (8007e8c <HAL_RCC_ClockConfig+0x240>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 030f 	and.w	r3, r3, #15
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d001      	beq.n	8007c90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e184      	b.n	8007f9a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0304 	and.w	r3, r3, #4
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d010      	beq.n	8007cbe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	691a      	ldr	r2, [r3, #16]
 8007ca0:	4b7b      	ldr	r3, [pc, #492]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d908      	bls.n	8007cbe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007cac:	4b78      	ldr	r3, [pc, #480]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	4975      	ldr	r1, [pc, #468]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0308 	and.w	r3, r3, #8
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d010      	beq.n	8007cec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	695a      	ldr	r2, [r3, #20]
 8007cce:	4b70      	ldr	r3, [pc, #448]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007cd0:	69db      	ldr	r3, [r3, #28]
 8007cd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d908      	bls.n	8007cec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007cda:	4b6d      	ldr	r3, [pc, #436]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007cdc:	69db      	ldr	r3, [r3, #28]
 8007cde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	496a      	ldr	r1, [pc, #424]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 0310 	and.w	r3, r3, #16
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d010      	beq.n	8007d1a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	699a      	ldr	r2, [r3, #24]
 8007cfc:	4b64      	ldr	r3, [pc, #400]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007cfe:	69db      	ldr	r3, [r3, #28]
 8007d00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d908      	bls.n	8007d1a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007d08:	4b61      	ldr	r3, [pc, #388]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007d0a:	69db      	ldr	r3, [r3, #28]
 8007d0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	699b      	ldr	r3, [r3, #24]
 8007d14:	495e      	ldr	r1, [pc, #376]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007d16:	4313      	orrs	r3, r2
 8007d18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 0320 	and.w	r3, r3, #32
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d010      	beq.n	8007d48 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	69da      	ldr	r2, [r3, #28]
 8007d2a:	4b59      	ldr	r3, [pc, #356]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
 8007d2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d908      	bls.n	8007d48 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007d36:	4b56      	ldr	r3, [pc, #344]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	69db      	ldr	r3, [r3, #28]
 8007d42:	4953      	ldr	r1, [pc, #332]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007d44:	4313      	orrs	r3, r2
 8007d46:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 0302 	and.w	r3, r3, #2
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d010      	beq.n	8007d76 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	68da      	ldr	r2, [r3, #12]
 8007d58:	4b4d      	ldr	r3, [pc, #308]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	f003 030f 	and.w	r3, r3, #15
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d908      	bls.n	8007d76 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d64:	4b4a      	ldr	r3, [pc, #296]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	f023 020f 	bic.w	r2, r3, #15
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	4947      	ldr	r1, [pc, #284]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007d72:	4313      	orrs	r3, r2
 8007d74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d055      	beq.n	8007e2e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007d82:	4b43      	ldr	r3, [pc, #268]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	4940      	ldr	r1, [pc, #256]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007d90:	4313      	orrs	r3, r2
 8007d92:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d107      	bne.n	8007dac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d9c:	4b3c      	ldr	r3, [pc, #240]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d121      	bne.n	8007dec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e0f6      	b.n	8007f9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	2b03      	cmp	r3, #3
 8007db2:	d107      	bne.n	8007dc4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007db4:	4b36      	ldr	r3, [pc, #216]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d115      	bne.n	8007dec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e0ea      	b.n	8007f9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d107      	bne.n	8007ddc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007dcc:	4b30      	ldr	r3, [pc, #192]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d109      	bne.n	8007dec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e0de      	b.n	8007f9a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ddc:	4b2c      	ldr	r3, [pc, #176]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0304 	and.w	r3, r3, #4
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d101      	bne.n	8007dec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e0d6      	b.n	8007f9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007dec:	4b28      	ldr	r3, [pc, #160]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	f023 0207 	bic.w	r2, r3, #7
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	4925      	ldr	r1, [pc, #148]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dfe:	f7fb f8e3 	bl	8002fc8 <HAL_GetTick>
 8007e02:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e04:	e00a      	b.n	8007e1c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e06:	f7fb f8df 	bl	8002fc8 <HAL_GetTick>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d901      	bls.n	8007e1c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	e0be      	b.n	8007f9a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e1c:	4b1c      	ldr	r3, [pc, #112]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	00db      	lsls	r3, r3, #3
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d1eb      	bne.n	8007e06 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 0302 	and.w	r3, r3, #2
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d010      	beq.n	8007e5c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	68da      	ldr	r2, [r3, #12]
 8007e3e:	4b14      	ldr	r3, [pc, #80]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	f003 030f 	and.w	r3, r3, #15
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d208      	bcs.n	8007e5c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e4a:	4b11      	ldr	r3, [pc, #68]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	f023 020f 	bic.w	r2, r3, #15
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	490e      	ldr	r1, [pc, #56]	; (8007e90 <HAL_RCC_ClockConfig+0x244>)
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e5c:	4b0b      	ldr	r3, [pc, #44]	; (8007e8c <HAL_RCC_ClockConfig+0x240>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 030f 	and.w	r3, r3, #15
 8007e64:	683a      	ldr	r2, [r7, #0]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d214      	bcs.n	8007e94 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e6a:	4b08      	ldr	r3, [pc, #32]	; (8007e8c <HAL_RCC_ClockConfig+0x240>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f023 020f 	bic.w	r2, r3, #15
 8007e72:	4906      	ldr	r1, [pc, #24]	; (8007e8c <HAL_RCC_ClockConfig+0x240>)
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e7a:	4b04      	ldr	r3, [pc, #16]	; (8007e8c <HAL_RCC_ClockConfig+0x240>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 030f 	and.w	r3, r3, #15
 8007e82:	683a      	ldr	r2, [r7, #0]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d005      	beq.n	8007e94 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e086      	b.n	8007f9a <HAL_RCC_ClockConfig+0x34e>
 8007e8c:	52002000 	.word	0x52002000
 8007e90:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 0304 	and.w	r3, r3, #4
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d010      	beq.n	8007ec2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	691a      	ldr	r2, [r3, #16]
 8007ea4:	4b3f      	ldr	r3, [pc, #252]	; (8007fa4 <HAL_RCC_ClockConfig+0x358>)
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d208      	bcs.n	8007ec2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007eb0:	4b3c      	ldr	r3, [pc, #240]	; (8007fa4 <HAL_RCC_ClockConfig+0x358>)
 8007eb2:	699b      	ldr	r3, [r3, #24]
 8007eb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	4939      	ldr	r1, [pc, #228]	; (8007fa4 <HAL_RCC_ClockConfig+0x358>)
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 0308 	and.w	r3, r3, #8
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d010      	beq.n	8007ef0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	695a      	ldr	r2, [r3, #20]
 8007ed2:	4b34      	ldr	r3, [pc, #208]	; (8007fa4 <HAL_RCC_ClockConfig+0x358>)
 8007ed4:	69db      	ldr	r3, [r3, #28]
 8007ed6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d208      	bcs.n	8007ef0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007ede:	4b31      	ldr	r3, [pc, #196]	; (8007fa4 <HAL_RCC_ClockConfig+0x358>)
 8007ee0:	69db      	ldr	r3, [r3, #28]
 8007ee2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	492e      	ldr	r1, [pc, #184]	; (8007fa4 <HAL_RCC_ClockConfig+0x358>)
 8007eec:	4313      	orrs	r3, r2
 8007eee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 0310 	and.w	r3, r3, #16
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d010      	beq.n	8007f1e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	699a      	ldr	r2, [r3, #24]
 8007f00:	4b28      	ldr	r3, [pc, #160]	; (8007fa4 <HAL_RCC_ClockConfig+0x358>)
 8007f02:	69db      	ldr	r3, [r3, #28]
 8007f04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d208      	bcs.n	8007f1e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007f0c:	4b25      	ldr	r3, [pc, #148]	; (8007fa4 <HAL_RCC_ClockConfig+0x358>)
 8007f0e:	69db      	ldr	r3, [r3, #28]
 8007f10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	699b      	ldr	r3, [r3, #24]
 8007f18:	4922      	ldr	r1, [pc, #136]	; (8007fa4 <HAL_RCC_ClockConfig+0x358>)
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 0320 	and.w	r3, r3, #32
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d010      	beq.n	8007f4c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	69da      	ldr	r2, [r3, #28]
 8007f2e:	4b1d      	ldr	r3, [pc, #116]	; (8007fa4 <HAL_RCC_ClockConfig+0x358>)
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d208      	bcs.n	8007f4c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007f3a:	4b1a      	ldr	r3, [pc, #104]	; (8007fa4 <HAL_RCC_ClockConfig+0x358>)
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	69db      	ldr	r3, [r3, #28]
 8007f46:	4917      	ldr	r1, [pc, #92]	; (8007fa4 <HAL_RCC_ClockConfig+0x358>)
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007f4c:	f000 f834 	bl	8007fb8 <HAL_RCC_GetSysClockFreq>
 8007f50:	4602      	mov	r2, r0
 8007f52:	4b14      	ldr	r3, [pc, #80]	; (8007fa4 <HAL_RCC_ClockConfig+0x358>)
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	0a1b      	lsrs	r3, r3, #8
 8007f58:	f003 030f 	and.w	r3, r3, #15
 8007f5c:	4912      	ldr	r1, [pc, #72]	; (8007fa8 <HAL_RCC_ClockConfig+0x35c>)
 8007f5e:	5ccb      	ldrb	r3, [r1, r3]
 8007f60:	f003 031f 	and.w	r3, r3, #31
 8007f64:	fa22 f303 	lsr.w	r3, r2, r3
 8007f68:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f6a:	4b0e      	ldr	r3, [pc, #56]	; (8007fa4 <HAL_RCC_ClockConfig+0x358>)
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	f003 030f 	and.w	r3, r3, #15
 8007f72:	4a0d      	ldr	r2, [pc, #52]	; (8007fa8 <HAL_RCC_ClockConfig+0x35c>)
 8007f74:	5cd3      	ldrb	r3, [r2, r3]
 8007f76:	f003 031f 	and.w	r3, r3, #31
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f80:	4a0a      	ldr	r2, [pc, #40]	; (8007fac <HAL_RCC_ClockConfig+0x360>)
 8007f82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007f84:	4a0a      	ldr	r2, [pc, #40]	; (8007fb0 <HAL_RCC_ClockConfig+0x364>)
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007f8a:	4b0a      	ldr	r3, [pc, #40]	; (8007fb4 <HAL_RCC_ClockConfig+0x368>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fa ffd0 	bl	8002f34 <HAL_InitTick>
 8007f94:	4603      	mov	r3, r0
 8007f96:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3718      	adds	r7, #24
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	58024400 	.word	0x58024400
 8007fa8:	0800e3bc 	.word	0x0800e3bc
 8007fac:	24000004 	.word	0x24000004
 8007fb0:	24000000 	.word	0x24000000
 8007fb4:	24000008 	.word	0x24000008

08007fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b089      	sub	sp, #36	; 0x24
 8007fbc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007fbe:	4bb3      	ldr	r3, [pc, #716]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fc6:	2b18      	cmp	r3, #24
 8007fc8:	f200 8155 	bhi.w	8008276 <HAL_RCC_GetSysClockFreq+0x2be>
 8007fcc:	a201      	add	r2, pc, #4	; (adr r2, 8007fd4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd2:	bf00      	nop
 8007fd4:	08008039 	.word	0x08008039
 8007fd8:	08008277 	.word	0x08008277
 8007fdc:	08008277 	.word	0x08008277
 8007fe0:	08008277 	.word	0x08008277
 8007fe4:	08008277 	.word	0x08008277
 8007fe8:	08008277 	.word	0x08008277
 8007fec:	08008277 	.word	0x08008277
 8007ff0:	08008277 	.word	0x08008277
 8007ff4:	0800805f 	.word	0x0800805f
 8007ff8:	08008277 	.word	0x08008277
 8007ffc:	08008277 	.word	0x08008277
 8008000:	08008277 	.word	0x08008277
 8008004:	08008277 	.word	0x08008277
 8008008:	08008277 	.word	0x08008277
 800800c:	08008277 	.word	0x08008277
 8008010:	08008277 	.word	0x08008277
 8008014:	08008065 	.word	0x08008065
 8008018:	08008277 	.word	0x08008277
 800801c:	08008277 	.word	0x08008277
 8008020:	08008277 	.word	0x08008277
 8008024:	08008277 	.word	0x08008277
 8008028:	08008277 	.word	0x08008277
 800802c:	08008277 	.word	0x08008277
 8008030:	08008277 	.word	0x08008277
 8008034:	0800806b 	.word	0x0800806b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008038:	4b94      	ldr	r3, [pc, #592]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 0320 	and.w	r3, r3, #32
 8008040:	2b00      	cmp	r3, #0
 8008042:	d009      	beq.n	8008058 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008044:	4b91      	ldr	r3, [pc, #580]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	08db      	lsrs	r3, r3, #3
 800804a:	f003 0303 	and.w	r3, r3, #3
 800804e:	4a90      	ldr	r2, [pc, #576]	; (8008290 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008050:	fa22 f303 	lsr.w	r3, r2, r3
 8008054:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008056:	e111      	b.n	800827c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008058:	4b8d      	ldr	r3, [pc, #564]	; (8008290 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800805a:	61bb      	str	r3, [r7, #24]
    break;
 800805c:	e10e      	b.n	800827c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800805e:	4b8d      	ldr	r3, [pc, #564]	; (8008294 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008060:	61bb      	str	r3, [r7, #24]
    break;
 8008062:	e10b      	b.n	800827c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008064:	4b8c      	ldr	r3, [pc, #560]	; (8008298 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008066:	61bb      	str	r3, [r7, #24]
    break;
 8008068:	e108      	b.n	800827c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800806a:	4b88      	ldr	r3, [pc, #544]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800806c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800806e:	f003 0303 	and.w	r3, r3, #3
 8008072:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008074:	4b85      	ldr	r3, [pc, #532]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008078:	091b      	lsrs	r3, r3, #4
 800807a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800807e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008080:	4b82      	ldr	r3, [pc, #520]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008084:	f003 0301 	and.w	r3, r3, #1
 8008088:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800808a:	4b80      	ldr	r3, [pc, #512]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800808c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800808e:	08db      	lsrs	r3, r3, #3
 8008090:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	fb02 f303 	mul.w	r3, r2, r3
 800809a:	ee07 3a90 	vmov	s15, r3
 800809e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f000 80e1 	beq.w	8008270 <HAL_RCC_GetSysClockFreq+0x2b8>
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	f000 8083 	beq.w	80081bc <HAL_RCC_GetSysClockFreq+0x204>
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	f200 80a1 	bhi.w	8008200 <HAL_RCC_GetSysClockFreq+0x248>
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d003      	beq.n	80080cc <HAL_RCC_GetSysClockFreq+0x114>
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d056      	beq.n	8008178 <HAL_RCC_GetSysClockFreq+0x1c0>
 80080ca:	e099      	b.n	8008200 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080cc:	4b6f      	ldr	r3, [pc, #444]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 0320 	and.w	r3, r3, #32
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d02d      	beq.n	8008134 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080d8:	4b6c      	ldr	r3, [pc, #432]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	08db      	lsrs	r3, r3, #3
 80080de:	f003 0303 	and.w	r3, r3, #3
 80080e2:	4a6b      	ldr	r2, [pc, #428]	; (8008290 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80080e4:	fa22 f303 	lsr.w	r3, r2, r3
 80080e8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	ee07 3a90 	vmov	s15, r3
 80080f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	ee07 3a90 	vmov	s15, r3
 80080fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008102:	4b62      	ldr	r3, [pc, #392]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800810a:	ee07 3a90 	vmov	s15, r3
 800810e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008112:	ed97 6a02 	vldr	s12, [r7, #8]
 8008116:	eddf 5a61 	vldr	s11, [pc, #388]	; 800829c <HAL_RCC_GetSysClockFreq+0x2e4>
 800811a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800811e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800812a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800812e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008132:	e087      	b.n	8008244 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	ee07 3a90 	vmov	s15, r3
 800813a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800813e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80082a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008146:	4b51      	ldr	r3, [pc, #324]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800814a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800814e:	ee07 3a90 	vmov	s15, r3
 8008152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008156:	ed97 6a02 	vldr	s12, [r7, #8]
 800815a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800829c <HAL_RCC_GetSysClockFreq+0x2e4>
 800815e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800816a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800816e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008176:	e065      	b.n	8008244 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	ee07 3a90 	vmov	s15, r3
 800817e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008182:	eddf 6a48 	vldr	s13, [pc, #288]	; 80082a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800818a:	4b40      	ldr	r3, [pc, #256]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800818c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008192:	ee07 3a90 	vmov	s15, r3
 8008196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800819a:	ed97 6a02 	vldr	s12, [r7, #8]
 800819e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800829c <HAL_RCC_GetSysClockFreq+0x2e4>
 80081a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081ba:	e043      	b.n	8008244 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	ee07 3a90 	vmov	s15, r3
 80081c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80082a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80081ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ce:	4b2f      	ldr	r3, [pc, #188]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081d6:	ee07 3a90 	vmov	s15, r3
 80081da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081de:	ed97 6a02 	vldr	s12, [r7, #8]
 80081e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800829c <HAL_RCC_GetSysClockFreq+0x2e4>
 80081e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081fe:	e021      	b.n	8008244 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	ee07 3a90 	vmov	s15, r3
 8008206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800820a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80082a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800820e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008212:	4b1e      	ldr	r3, [pc, #120]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800821a:	ee07 3a90 	vmov	s15, r3
 800821e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008222:	ed97 6a02 	vldr	s12, [r7, #8]
 8008226:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800829c <HAL_RCC_GetSysClockFreq+0x2e4>
 800822a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800822e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800823a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800823e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008242:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008244:	4b11      	ldr	r3, [pc, #68]	; (800828c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008248:	0a5b      	lsrs	r3, r3, #9
 800824a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800824e:	3301      	adds	r3, #1
 8008250:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	ee07 3a90 	vmov	s15, r3
 8008258:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800825c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008268:	ee17 3a90 	vmov	r3, s15
 800826c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800826e:	e005      	b.n	800827c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008270:	2300      	movs	r3, #0
 8008272:	61bb      	str	r3, [r7, #24]
    break;
 8008274:	e002      	b.n	800827c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008276:	4b07      	ldr	r3, [pc, #28]	; (8008294 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008278:	61bb      	str	r3, [r7, #24]
    break;
 800827a:	bf00      	nop
  }

  return sysclockfreq;
 800827c:	69bb      	ldr	r3, [r7, #24]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3724      	adds	r7, #36	; 0x24
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	58024400 	.word	0x58024400
 8008290:	03d09000 	.word	0x03d09000
 8008294:	003d0900 	.word	0x003d0900
 8008298:	017d7840 	.word	0x017d7840
 800829c:	46000000 	.word	0x46000000
 80082a0:	4c742400 	.word	0x4c742400
 80082a4:	4a742400 	.word	0x4a742400
 80082a8:	4bbebc20 	.word	0x4bbebc20

080082ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80082b2:	f7ff fe81 	bl	8007fb8 <HAL_RCC_GetSysClockFreq>
 80082b6:	4602      	mov	r2, r0
 80082b8:	4b10      	ldr	r3, [pc, #64]	; (80082fc <HAL_RCC_GetHCLKFreq+0x50>)
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	0a1b      	lsrs	r3, r3, #8
 80082be:	f003 030f 	and.w	r3, r3, #15
 80082c2:	490f      	ldr	r1, [pc, #60]	; (8008300 <HAL_RCC_GetHCLKFreq+0x54>)
 80082c4:	5ccb      	ldrb	r3, [r1, r3]
 80082c6:	f003 031f 	and.w	r3, r3, #31
 80082ca:	fa22 f303 	lsr.w	r3, r2, r3
 80082ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80082d0:	4b0a      	ldr	r3, [pc, #40]	; (80082fc <HAL_RCC_GetHCLKFreq+0x50>)
 80082d2:	699b      	ldr	r3, [r3, #24]
 80082d4:	f003 030f 	and.w	r3, r3, #15
 80082d8:	4a09      	ldr	r2, [pc, #36]	; (8008300 <HAL_RCC_GetHCLKFreq+0x54>)
 80082da:	5cd3      	ldrb	r3, [r2, r3]
 80082dc:	f003 031f 	and.w	r3, r3, #31
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	fa22 f303 	lsr.w	r3, r2, r3
 80082e6:	4a07      	ldr	r2, [pc, #28]	; (8008304 <HAL_RCC_GetHCLKFreq+0x58>)
 80082e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80082ea:	4a07      	ldr	r2, [pc, #28]	; (8008308 <HAL_RCC_GetHCLKFreq+0x5c>)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80082f0:	4b04      	ldr	r3, [pc, #16]	; (8008304 <HAL_RCC_GetHCLKFreq+0x58>)
 80082f2:	681b      	ldr	r3, [r3, #0]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	58024400 	.word	0x58024400
 8008300:	0800e3bc 	.word	0x0800e3bc
 8008304:	24000004 	.word	0x24000004
 8008308:	24000000 	.word	0x24000000

0800830c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008310:	f7ff ffcc 	bl	80082ac <HAL_RCC_GetHCLKFreq>
 8008314:	4602      	mov	r2, r0
 8008316:	4b06      	ldr	r3, [pc, #24]	; (8008330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008318:	69db      	ldr	r3, [r3, #28]
 800831a:	091b      	lsrs	r3, r3, #4
 800831c:	f003 0307 	and.w	r3, r3, #7
 8008320:	4904      	ldr	r1, [pc, #16]	; (8008334 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008322:	5ccb      	ldrb	r3, [r1, r3]
 8008324:	f003 031f 	and.w	r3, r3, #31
 8008328:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800832c:	4618      	mov	r0, r3
 800832e:	bd80      	pop	{r7, pc}
 8008330:	58024400 	.word	0x58024400
 8008334:	0800e3bc 	.word	0x0800e3bc

08008338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800833c:	f7ff ffb6 	bl	80082ac <HAL_RCC_GetHCLKFreq>
 8008340:	4602      	mov	r2, r0
 8008342:	4b06      	ldr	r3, [pc, #24]	; (800835c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008344:	69db      	ldr	r3, [r3, #28]
 8008346:	0a1b      	lsrs	r3, r3, #8
 8008348:	f003 0307 	and.w	r3, r3, #7
 800834c:	4904      	ldr	r1, [pc, #16]	; (8008360 <HAL_RCC_GetPCLK2Freq+0x28>)
 800834e:	5ccb      	ldrb	r3, [r1, r3]
 8008350:	f003 031f 	and.w	r3, r3, #31
 8008354:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008358:	4618      	mov	r0, r3
 800835a:	bd80      	pop	{r7, pc}
 800835c:	58024400 	.word	0x58024400
 8008360:	0800e3bc 	.word	0x0800e3bc

08008364 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800836c:	2300      	movs	r3, #0
 800836e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008370:	2300      	movs	r3, #0
 8008372:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800837c:	2b00      	cmp	r3, #0
 800837e:	d03f      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008384:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008388:	d02a      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800838a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800838e:	d824      	bhi.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008390:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008394:	d018      	beq.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008396:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800839a:	d81e      	bhi.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800839c:	2b00      	cmp	r3, #0
 800839e:	d003      	beq.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80083a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083a4:	d007      	beq.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80083a6:	e018      	b.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083a8:	4bab      	ldr	r3, [pc, #684]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ac:	4aaa      	ldr	r2, [pc, #680]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80083b4:	e015      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	3304      	adds	r3, #4
 80083ba:	2102      	movs	r1, #2
 80083bc:	4618      	mov	r0, r3
 80083be:	f001 feff 	bl	800a1c0 <RCCEx_PLL2_Config>
 80083c2:	4603      	mov	r3, r0
 80083c4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80083c6:	e00c      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	3324      	adds	r3, #36	; 0x24
 80083cc:	2102      	movs	r1, #2
 80083ce:	4618      	mov	r0, r3
 80083d0:	f001 ffa8 	bl	800a324 <RCCEx_PLL3_Config>
 80083d4:	4603      	mov	r3, r0
 80083d6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80083d8:	e003      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	75fb      	strb	r3, [r7, #23]
      break;
 80083de:	e000      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80083e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083e2:	7dfb      	ldrb	r3, [r7, #23]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d109      	bne.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80083e8:	4b9b      	ldr	r3, [pc, #620]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083f4:	4998      	ldr	r1, [pc, #608]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	650b      	str	r3, [r1, #80]	; 0x50
 80083fa:	e001      	b.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083fc:	7dfb      	ldrb	r3, [r7, #23]
 80083fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008408:	2b00      	cmp	r3, #0
 800840a:	d03d      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008410:	2b04      	cmp	r3, #4
 8008412:	d826      	bhi.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008414:	a201      	add	r2, pc, #4	; (adr r2, 800841c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841a:	bf00      	nop
 800841c:	08008431 	.word	0x08008431
 8008420:	0800843f 	.word	0x0800843f
 8008424:	08008451 	.word	0x08008451
 8008428:	08008469 	.word	0x08008469
 800842c:	08008469 	.word	0x08008469
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008430:	4b89      	ldr	r3, [pc, #548]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008434:	4a88      	ldr	r2, [pc, #544]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800843a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800843c:	e015      	b.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	3304      	adds	r3, #4
 8008442:	2100      	movs	r1, #0
 8008444:	4618      	mov	r0, r3
 8008446:	f001 febb 	bl	800a1c0 <RCCEx_PLL2_Config>
 800844a:	4603      	mov	r3, r0
 800844c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800844e:	e00c      	b.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	3324      	adds	r3, #36	; 0x24
 8008454:	2100      	movs	r1, #0
 8008456:	4618      	mov	r0, r3
 8008458:	f001 ff64 	bl	800a324 <RCCEx_PLL3_Config>
 800845c:	4603      	mov	r3, r0
 800845e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008460:	e003      	b.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	75fb      	strb	r3, [r7, #23]
      break;
 8008466:	e000      	b.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008468:	bf00      	nop
    }

    if(ret == HAL_OK)
 800846a:	7dfb      	ldrb	r3, [r7, #23]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d109      	bne.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008470:	4b79      	ldr	r3, [pc, #484]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008474:	f023 0207 	bic.w	r2, r3, #7
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800847c:	4976      	ldr	r1, [pc, #472]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800847e:	4313      	orrs	r3, r2
 8008480:	650b      	str	r3, [r1, #80]	; 0x50
 8008482:	e001      	b.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008484:	7dfb      	ldrb	r3, [r7, #23]
 8008486:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008490:	2b00      	cmp	r3, #0
 8008492:	d051      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800849a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800849e:	d036      	beq.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80084a0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80084a4:	d830      	bhi.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80084a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084aa:	d032      	beq.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80084ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084b0:	d82a      	bhi.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80084b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80084b6:	d02e      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80084b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80084bc:	d824      	bhi.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80084be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084c2:	d018      	beq.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80084c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084c8:	d81e      	bhi.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d003      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80084ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084d2:	d007      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80084d4:	e018      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084d6:	4b60      	ldr	r3, [pc, #384]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084da:	4a5f      	ldr	r2, [pc, #380]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80084e2:	e019      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	3304      	adds	r3, #4
 80084e8:	2100      	movs	r1, #0
 80084ea:	4618      	mov	r0, r3
 80084ec:	f001 fe68 	bl	800a1c0 <RCCEx_PLL2_Config>
 80084f0:	4603      	mov	r3, r0
 80084f2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80084f4:	e010      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	3324      	adds	r3, #36	; 0x24
 80084fa:	2100      	movs	r1, #0
 80084fc:	4618      	mov	r0, r3
 80084fe:	f001 ff11 	bl	800a324 <RCCEx_PLL3_Config>
 8008502:	4603      	mov	r3, r0
 8008504:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008506:	e007      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	75fb      	strb	r3, [r7, #23]
      break;
 800850c:	e004      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800850e:	bf00      	nop
 8008510:	e002      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008512:	bf00      	nop
 8008514:	e000      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008516:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008518:	7dfb      	ldrb	r3, [r7, #23]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10a      	bne.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800851e:	4b4e      	ldr	r3, [pc, #312]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008522:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800852c:	494a      	ldr	r1, [pc, #296]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800852e:	4313      	orrs	r3, r2
 8008530:	658b      	str	r3, [r1, #88]	; 0x58
 8008532:	e001      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008534:	7dfb      	ldrb	r3, [r7, #23]
 8008536:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008540:	2b00      	cmp	r3, #0
 8008542:	d051      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800854a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800854e:	d036      	beq.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8008550:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008554:	d830      	bhi.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008556:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800855a:	d032      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800855c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008560:	d82a      	bhi.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008562:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008566:	d02e      	beq.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8008568:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800856c:	d824      	bhi.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800856e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008572:	d018      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8008574:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008578:	d81e      	bhi.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800857a:	2b00      	cmp	r3, #0
 800857c:	d003      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800857e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008582:	d007      	beq.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008584:	e018      	b.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008586:	4b34      	ldr	r3, [pc, #208]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858a:	4a33      	ldr	r2, [pc, #204]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800858c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008590:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008592:	e019      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	3304      	adds	r3, #4
 8008598:	2100      	movs	r1, #0
 800859a:	4618      	mov	r0, r3
 800859c:	f001 fe10 	bl	800a1c0 <RCCEx_PLL2_Config>
 80085a0:	4603      	mov	r3, r0
 80085a2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80085a4:	e010      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	3324      	adds	r3, #36	; 0x24
 80085aa:	2100      	movs	r1, #0
 80085ac:	4618      	mov	r0, r3
 80085ae:	f001 feb9 	bl	800a324 <RCCEx_PLL3_Config>
 80085b2:	4603      	mov	r3, r0
 80085b4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80085b6:	e007      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	75fb      	strb	r3, [r7, #23]
      break;
 80085bc:	e004      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80085be:	bf00      	nop
 80085c0:	e002      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80085c2:	bf00      	nop
 80085c4:	e000      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80085c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085c8:	7dfb      	ldrb	r3, [r7, #23]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10a      	bne.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80085ce:	4b22      	ldr	r3, [pc, #136]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085d2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80085dc:	491e      	ldr	r1, [pc, #120]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085de:	4313      	orrs	r3, r2
 80085e0:	658b      	str	r3, [r1, #88]	; 0x58
 80085e2:	e001      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085e4:	7dfb      	ldrb	r3, [r7, #23]
 80085e6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d035      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085f8:	2b30      	cmp	r3, #48	; 0x30
 80085fa:	d01c      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80085fc:	2b30      	cmp	r3, #48	; 0x30
 80085fe:	d817      	bhi.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008600:	2b20      	cmp	r3, #32
 8008602:	d00c      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008604:	2b20      	cmp	r3, #32
 8008606:	d813      	bhi.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008608:	2b00      	cmp	r3, #0
 800860a:	d016      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 800860c:	2b10      	cmp	r3, #16
 800860e:	d10f      	bne.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008610:	4b11      	ldr	r3, [pc, #68]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008614:	4a10      	ldr	r2, [pc, #64]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800861a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800861c:	e00e      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	3304      	adds	r3, #4
 8008622:	2102      	movs	r1, #2
 8008624:	4618      	mov	r0, r3
 8008626:	f001 fdcb 	bl	800a1c0 <RCCEx_PLL2_Config>
 800862a:	4603      	mov	r3, r0
 800862c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800862e:	e005      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	75fb      	strb	r3, [r7, #23]
      break;
 8008634:	e002      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8008636:	bf00      	nop
 8008638:	e000      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800863a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800863c:	7dfb      	ldrb	r3, [r7, #23]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10c      	bne.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008642:	4b05      	ldr	r3, [pc, #20]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008646:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800864e:	4902      	ldr	r1, [pc, #8]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008650:	4313      	orrs	r3, r2
 8008652:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008654:	e004      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008656:	bf00      	nop
 8008658:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800865c:	7dfb      	ldrb	r3, [r7, #23]
 800865e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008668:	2b00      	cmp	r3, #0
 800866a:	d047      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008670:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008674:	d030      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8008676:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800867a:	d82a      	bhi.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800867c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008680:	d02c      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x378>
 8008682:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008686:	d824      	bhi.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800868c:	d018      	beq.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800868e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008692:	d81e      	bhi.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008694:	2b00      	cmp	r3, #0
 8008696:	d003      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800869c:	d007      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800869e:	e018      	b.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086a0:	4bac      	ldr	r3, [pc, #688]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80086a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a4:	4aab      	ldr	r2, [pc, #684]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80086a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80086ac:	e017      	b.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	3304      	adds	r3, #4
 80086b2:	2100      	movs	r1, #0
 80086b4:	4618      	mov	r0, r3
 80086b6:	f001 fd83 	bl	800a1c0 <RCCEx_PLL2_Config>
 80086ba:	4603      	mov	r3, r0
 80086bc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80086be:	e00e      	b.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	3324      	adds	r3, #36	; 0x24
 80086c4:	2100      	movs	r1, #0
 80086c6:	4618      	mov	r0, r3
 80086c8:	f001 fe2c 	bl	800a324 <RCCEx_PLL3_Config>
 80086cc:	4603      	mov	r3, r0
 80086ce:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80086d0:	e005      	b.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	75fb      	strb	r3, [r7, #23]
      break;
 80086d6:	e002      	b.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80086d8:	bf00      	nop
 80086da:	e000      	b.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80086dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086de:	7dfb      	ldrb	r3, [r7, #23]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d109      	bne.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80086e4:	4b9b      	ldr	r3, [pc, #620]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80086e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086e8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086f0:	4998      	ldr	r1, [pc, #608]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80086f2:	4313      	orrs	r3, r2
 80086f4:	650b      	str	r3, [r1, #80]	; 0x50
 80086f6:	e001      	b.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086f8:	7dfb      	ldrb	r3, [r7, #23]
 80086fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008704:	2b00      	cmp	r3, #0
 8008706:	d049      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800870c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008710:	d02e      	beq.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8008712:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008716:	d828      	bhi.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008718:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800871c:	d02a      	beq.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800871e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008722:	d822      	bhi.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008724:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008728:	d026      	beq.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800872a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800872e:	d81c      	bhi.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008730:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008734:	d010      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8008736:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800873a:	d816      	bhi.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800873c:	2b00      	cmp	r3, #0
 800873e:	d01d      	beq.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8008740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008744:	d111      	bne.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	3304      	adds	r3, #4
 800874a:	2101      	movs	r1, #1
 800874c:	4618      	mov	r0, r3
 800874e:	f001 fd37 	bl	800a1c0 <RCCEx_PLL2_Config>
 8008752:	4603      	mov	r3, r0
 8008754:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008756:	e012      	b.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	3324      	adds	r3, #36	; 0x24
 800875c:	2101      	movs	r1, #1
 800875e:	4618      	mov	r0, r3
 8008760:	f001 fde0 	bl	800a324 <RCCEx_PLL3_Config>
 8008764:	4603      	mov	r3, r0
 8008766:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008768:	e009      	b.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	75fb      	strb	r3, [r7, #23]
      break;
 800876e:	e006      	b.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008770:	bf00      	nop
 8008772:	e004      	b.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008774:	bf00      	nop
 8008776:	e002      	b.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008778:	bf00      	nop
 800877a:	e000      	b.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800877c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800877e:	7dfb      	ldrb	r3, [r7, #23]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d109      	bne.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008784:	4b73      	ldr	r3, [pc, #460]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008788:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008790:	4970      	ldr	r1, [pc, #448]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008792:	4313      	orrs	r3, r2
 8008794:	650b      	str	r3, [r1, #80]	; 0x50
 8008796:	e001      	b.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008798:	7dfb      	ldrb	r3, [r7, #23]
 800879a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d04b      	beq.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80087ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087b2:	d02e      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80087b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087b8:	d828      	bhi.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80087ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087be:	d02a      	beq.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80087c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087c4:	d822      	bhi.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80087c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087ca:	d026      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80087cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087d0:	d81c      	bhi.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80087d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087d6:	d010      	beq.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x496>
 80087d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087dc:	d816      	bhi.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d01d      	beq.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80087e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087e6:	d111      	bne.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	3304      	adds	r3, #4
 80087ec:	2101      	movs	r1, #1
 80087ee:	4618      	mov	r0, r3
 80087f0:	f001 fce6 	bl	800a1c0 <RCCEx_PLL2_Config>
 80087f4:	4603      	mov	r3, r0
 80087f6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80087f8:	e012      	b.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	3324      	adds	r3, #36	; 0x24
 80087fe:	2101      	movs	r1, #1
 8008800:	4618      	mov	r0, r3
 8008802:	f001 fd8f 	bl	800a324 <RCCEx_PLL3_Config>
 8008806:	4603      	mov	r3, r0
 8008808:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800880a:	e009      	b.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	75fb      	strb	r3, [r7, #23]
      break;
 8008810:	e006      	b.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008812:	bf00      	nop
 8008814:	e004      	b.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008816:	bf00      	nop
 8008818:	e002      	b.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800881a:	bf00      	nop
 800881c:	e000      	b.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800881e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008820:	7dfb      	ldrb	r3, [r7, #23]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d10a      	bne.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008826:	4b4b      	ldr	r3, [pc, #300]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800882a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008834:	4947      	ldr	r1, [pc, #284]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008836:	4313      	orrs	r3, r2
 8008838:	658b      	str	r3, [r1, #88]	; 0x58
 800883a:	e001      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800883c:	7dfb      	ldrb	r3, [r7, #23]
 800883e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008848:	2b00      	cmp	r3, #0
 800884a:	d02f      	beq.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008854:	d00e      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8008856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800885a:	d814      	bhi.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800885c:	2b00      	cmp	r3, #0
 800885e:	d015      	beq.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008860:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008864:	d10f      	bne.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008866:	4b3b      	ldr	r3, [pc, #236]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886a:	4a3a      	ldr	r2, [pc, #232]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800886c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008870:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008872:	e00c      	b.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	3304      	adds	r3, #4
 8008878:	2101      	movs	r1, #1
 800887a:	4618      	mov	r0, r3
 800887c:	f001 fca0 	bl	800a1c0 <RCCEx_PLL2_Config>
 8008880:	4603      	mov	r3, r0
 8008882:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008884:	e003      	b.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	75fb      	strb	r3, [r7, #23]
      break;
 800888a:	e000      	b.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800888c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800888e:	7dfb      	ldrb	r3, [r7, #23]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d109      	bne.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008894:	4b2f      	ldr	r3, [pc, #188]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008898:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088a0:	492c      	ldr	r1, [pc, #176]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80088a2:	4313      	orrs	r3, r2
 80088a4:	650b      	str	r3, [r1, #80]	; 0x50
 80088a6:	e001      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088a8:	7dfb      	ldrb	r3, [r7, #23]
 80088aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d032      	beq.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088bc:	2b03      	cmp	r3, #3
 80088be:	d81b      	bhi.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80088c0:	a201      	add	r2, pc, #4	; (adr r2, 80088c8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80088c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c6:	bf00      	nop
 80088c8:	080088ff 	.word	0x080088ff
 80088cc:	080088d9 	.word	0x080088d9
 80088d0:	080088e7 	.word	0x080088e7
 80088d4:	080088ff 	.word	0x080088ff
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088d8:	4b1e      	ldr	r3, [pc, #120]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80088da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088dc:	4a1d      	ldr	r2, [pc, #116]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80088de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80088e4:	e00c      	b.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	3304      	adds	r3, #4
 80088ea:	2102      	movs	r1, #2
 80088ec:	4618      	mov	r0, r3
 80088ee:	f001 fc67 	bl	800a1c0 <RCCEx_PLL2_Config>
 80088f2:	4603      	mov	r3, r0
 80088f4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80088f6:	e003      	b.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	75fb      	strb	r3, [r7, #23]
      break;
 80088fc:	e000      	b.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80088fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008900:	7dfb      	ldrb	r3, [r7, #23]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d109      	bne.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008906:	4b13      	ldr	r3, [pc, #76]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800890a:	f023 0203 	bic.w	r2, r3, #3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008912:	4910      	ldr	r1, [pc, #64]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008914:	4313      	orrs	r3, r2
 8008916:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008918:	e001      	b.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800891a:	7dfb      	ldrb	r3, [r7, #23]
 800891c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008926:	2b00      	cmp	r3, #0
 8008928:	f000 808a 	beq.w	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800892c:	4b0a      	ldr	r3, [pc, #40]	; (8008958 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a09      	ldr	r2, [pc, #36]	; (8008958 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008936:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008938:	f7fa fb46 	bl	8002fc8 <HAL_GetTick>
 800893c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800893e:	e00d      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008940:	f7fa fb42 	bl	8002fc8 <HAL_GetTick>
 8008944:	4602      	mov	r2, r0
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	1ad3      	subs	r3, r2, r3
 800894a:	2b64      	cmp	r3, #100	; 0x64
 800894c:	d906      	bls.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800894e:	2303      	movs	r3, #3
 8008950:	75fb      	strb	r3, [r7, #23]
        break;
 8008952:	e009      	b.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008954:	58024400 	.word	0x58024400
 8008958:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800895c:	4bb9      	ldr	r3, [pc, #740]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008964:	2b00      	cmp	r3, #0
 8008966:	d0eb      	beq.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8008968:	7dfb      	ldrb	r3, [r7, #23]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d166      	bne.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800896e:	4bb6      	ldr	r3, [pc, #728]	; (8008c48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008970:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008978:	4053      	eors	r3, r2
 800897a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800897e:	2b00      	cmp	r3, #0
 8008980:	d013      	beq.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008982:	4bb1      	ldr	r3, [pc, #708]	; (8008c48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800898a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800898c:	4bae      	ldr	r3, [pc, #696]	; (8008c48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800898e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008990:	4aad      	ldr	r2, [pc, #692]	; (8008c48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008996:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008998:	4bab      	ldr	r3, [pc, #684]	; (8008c48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800899a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800899c:	4aaa      	ldr	r2, [pc, #680]	; (8008c48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800899e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089a2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80089a4:	4aa8      	ldr	r2, [pc, #672]	; (8008c48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80089b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089b4:	d115      	bne.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089b6:	f7fa fb07 	bl	8002fc8 <HAL_GetTick>
 80089ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089bc:	e00b      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089be:	f7fa fb03 	bl	8002fc8 <HAL_GetTick>
 80089c2:	4602      	mov	r2, r0
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d902      	bls.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	75fb      	strb	r3, [r7, #23]
            break;
 80089d4:	e005      	b.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089d6:	4b9c      	ldr	r3, [pc, #624]	; (8008c48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80089d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089da:	f003 0302 	and.w	r3, r3, #2
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d0ed      	beq.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80089e2:	7dfb      	ldrb	r3, [r7, #23]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d126      	bne.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80089ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089f6:	d10d      	bne.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80089f8:	4b93      	ldr	r3, [pc, #588]	; (8008c48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008a06:	0919      	lsrs	r1, r3, #4
 8008a08:	4b90      	ldr	r3, [pc, #576]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008a0a:	400b      	ands	r3, r1
 8008a0c:	498e      	ldr	r1, [pc, #568]	; (8008c48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	610b      	str	r3, [r1, #16]
 8008a12:	e005      	b.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8008a14:	4b8c      	ldr	r3, [pc, #560]	; (8008c48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	4a8b      	ldr	r2, [pc, #556]	; (8008c48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008a1a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008a1e:	6113      	str	r3, [r2, #16]
 8008a20:	4b89      	ldr	r3, [pc, #548]	; (8008c48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008a22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a2e:	4986      	ldr	r1, [pc, #536]	; (8008c48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008a30:	4313      	orrs	r3, r2
 8008a32:	670b      	str	r3, [r1, #112]	; 0x70
 8008a34:	e004      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a36:	7dfb      	ldrb	r3, [r7, #23]
 8008a38:	75bb      	strb	r3, [r7, #22]
 8008a3a:	e001      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a3c:	7dfb      	ldrb	r3, [r7, #23]
 8008a3e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 0301 	and.w	r3, r3, #1
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d07e      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a50:	2b28      	cmp	r3, #40	; 0x28
 8008a52:	d867      	bhi.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8008a54:	a201      	add	r2, pc, #4	; (adr r2, 8008a5c <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8008a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5a:	bf00      	nop
 8008a5c:	08008b2b 	.word	0x08008b2b
 8008a60:	08008b25 	.word	0x08008b25
 8008a64:	08008b25 	.word	0x08008b25
 8008a68:	08008b25 	.word	0x08008b25
 8008a6c:	08008b25 	.word	0x08008b25
 8008a70:	08008b25 	.word	0x08008b25
 8008a74:	08008b25 	.word	0x08008b25
 8008a78:	08008b25 	.word	0x08008b25
 8008a7c:	08008b01 	.word	0x08008b01
 8008a80:	08008b25 	.word	0x08008b25
 8008a84:	08008b25 	.word	0x08008b25
 8008a88:	08008b25 	.word	0x08008b25
 8008a8c:	08008b25 	.word	0x08008b25
 8008a90:	08008b25 	.word	0x08008b25
 8008a94:	08008b25 	.word	0x08008b25
 8008a98:	08008b25 	.word	0x08008b25
 8008a9c:	08008b13 	.word	0x08008b13
 8008aa0:	08008b25 	.word	0x08008b25
 8008aa4:	08008b25 	.word	0x08008b25
 8008aa8:	08008b25 	.word	0x08008b25
 8008aac:	08008b25 	.word	0x08008b25
 8008ab0:	08008b25 	.word	0x08008b25
 8008ab4:	08008b25 	.word	0x08008b25
 8008ab8:	08008b25 	.word	0x08008b25
 8008abc:	08008b2b 	.word	0x08008b2b
 8008ac0:	08008b25 	.word	0x08008b25
 8008ac4:	08008b25 	.word	0x08008b25
 8008ac8:	08008b25 	.word	0x08008b25
 8008acc:	08008b25 	.word	0x08008b25
 8008ad0:	08008b25 	.word	0x08008b25
 8008ad4:	08008b25 	.word	0x08008b25
 8008ad8:	08008b25 	.word	0x08008b25
 8008adc:	08008b2b 	.word	0x08008b2b
 8008ae0:	08008b25 	.word	0x08008b25
 8008ae4:	08008b25 	.word	0x08008b25
 8008ae8:	08008b25 	.word	0x08008b25
 8008aec:	08008b25 	.word	0x08008b25
 8008af0:	08008b25 	.word	0x08008b25
 8008af4:	08008b25 	.word	0x08008b25
 8008af8:	08008b25 	.word	0x08008b25
 8008afc:	08008b2b 	.word	0x08008b2b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	3304      	adds	r3, #4
 8008b04:	2101      	movs	r1, #1
 8008b06:	4618      	mov	r0, r3
 8008b08:	f001 fb5a 	bl	800a1c0 <RCCEx_PLL2_Config>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008b10:	e00c      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	3324      	adds	r3, #36	; 0x24
 8008b16:	2101      	movs	r1, #1
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f001 fc03 	bl	800a324 <RCCEx_PLL3_Config>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008b22:	e003      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	75fb      	strb	r3, [r7, #23]
      break;
 8008b28:	e000      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8008b2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b2c:	7dfb      	ldrb	r3, [r7, #23]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d109      	bne.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008b32:	4b45      	ldr	r3, [pc, #276]	; (8008c48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b36:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b3e:	4942      	ldr	r1, [pc, #264]	; (8008c48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008b40:	4313      	orrs	r3, r2
 8008b42:	654b      	str	r3, [r1, #84]	; 0x54
 8008b44:	e001      	b.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b46:	7dfb      	ldrb	r3, [r7, #23]
 8008b48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 0302 	and.w	r3, r3, #2
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d037      	beq.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b5a:	2b05      	cmp	r3, #5
 8008b5c:	d820      	bhi.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8008b5e:	a201      	add	r2, pc, #4	; (adr r2, 8008b64 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b64:	08008ba7 	.word	0x08008ba7
 8008b68:	08008b7d 	.word	0x08008b7d
 8008b6c:	08008b8f 	.word	0x08008b8f
 8008b70:	08008ba7 	.word	0x08008ba7
 8008b74:	08008ba7 	.word	0x08008ba7
 8008b78:	08008ba7 	.word	0x08008ba7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	3304      	adds	r3, #4
 8008b80:	2101      	movs	r1, #1
 8008b82:	4618      	mov	r0, r3
 8008b84:	f001 fb1c 	bl	800a1c0 <RCCEx_PLL2_Config>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008b8c:	e00c      	b.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	3324      	adds	r3, #36	; 0x24
 8008b92:	2101      	movs	r1, #1
 8008b94:	4618      	mov	r0, r3
 8008b96:	f001 fbc5 	bl	800a324 <RCCEx_PLL3_Config>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008b9e:	e003      	b.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ba4:	e000      	b.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8008ba6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ba8:	7dfb      	ldrb	r3, [r7, #23]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d109      	bne.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008bae:	4b26      	ldr	r3, [pc, #152]	; (8008c48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bb2:	f023 0207 	bic.w	r2, r3, #7
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bba:	4923      	ldr	r1, [pc, #140]	; (8008c48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	654b      	str	r3, [r1, #84]	; 0x54
 8008bc0:	e001      	b.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bc2:	7dfb      	ldrb	r3, [r7, #23]
 8008bc4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f003 0304 	and.w	r3, r3, #4
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d040      	beq.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bd8:	2b05      	cmp	r3, #5
 8008bda:	d821      	bhi.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8008bdc:	a201      	add	r2, pc, #4	; (adr r2, 8008be4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8008bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be2:	bf00      	nop
 8008be4:	08008c27 	.word	0x08008c27
 8008be8:	08008bfd 	.word	0x08008bfd
 8008bec:	08008c0f 	.word	0x08008c0f
 8008bf0:	08008c27 	.word	0x08008c27
 8008bf4:	08008c27 	.word	0x08008c27
 8008bf8:	08008c27 	.word	0x08008c27
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	3304      	adds	r3, #4
 8008c00:	2101      	movs	r1, #1
 8008c02:	4618      	mov	r0, r3
 8008c04:	f001 fadc 	bl	800a1c0 <RCCEx_PLL2_Config>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008c0c:	e00c      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	3324      	adds	r3, #36	; 0x24
 8008c12:	2101      	movs	r1, #1
 8008c14:	4618      	mov	r0, r3
 8008c16:	f001 fb85 	bl	800a324 <RCCEx_PLL3_Config>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008c1e:	e003      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	75fb      	strb	r3, [r7, #23]
      break;
 8008c24:	e000      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8008c26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c28:	7dfb      	ldrb	r3, [r7, #23]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d110      	bne.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008c2e:	4b06      	ldr	r3, [pc, #24]	; (8008c48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c32:	f023 0207 	bic.w	r2, r3, #7
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c3c:	4902      	ldr	r1, [pc, #8]	; (8008c48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	658b      	str	r3, [r1, #88]	; 0x58
 8008c42:	e007      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8008c44:	58024800 	.word	0x58024800
 8008c48:	58024400 	.word	0x58024400
 8008c4c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c50:	7dfb      	ldrb	r3, [r7, #23]
 8008c52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 0320 	and.w	r3, r3, #32
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d04b      	beq.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c6a:	d02e      	beq.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x966>
 8008c6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c70:	d828      	bhi.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c76:	d02a      	beq.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8008c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c7c:	d822      	bhi.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008c7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008c82:	d026      	beq.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008c84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008c88:	d81c      	bhi.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008c8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c8e:	d010      	beq.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8008c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c94:	d816      	bhi.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d01d      	beq.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8008c9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c9e:	d111      	bne.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	3304      	adds	r3, #4
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f001 fa8a 	bl	800a1c0 <RCCEx_PLL2_Config>
 8008cac:	4603      	mov	r3, r0
 8008cae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008cb0:	e012      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	3324      	adds	r3, #36	; 0x24
 8008cb6:	2102      	movs	r1, #2
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f001 fb33 	bl	800a324 <RCCEx_PLL3_Config>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008cc2:	e009      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8008cc8:	e006      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008cca:	bf00      	nop
 8008ccc:	e004      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008cce:	bf00      	nop
 8008cd0:	e002      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008cd2:	bf00      	nop
 8008cd4:	e000      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008cd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cd8:	7dfb      	ldrb	r3, [r7, #23]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d10a      	bne.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008cde:	4bb2      	ldr	r3, [pc, #712]	; (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ce2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cec:	49ae      	ldr	r1, [pc, #696]	; (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	654b      	str	r3, [r1, #84]	; 0x54
 8008cf2:	e001      	b.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cf4:	7dfb      	ldrb	r3, [r7, #23]
 8008cf6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d04b      	beq.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d0a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008d0e:	d02e      	beq.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8008d10:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008d14:	d828      	bhi.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d1a:	d02a      	beq.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8008d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d20:	d822      	bhi.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008d22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d26:	d026      	beq.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008d28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d2c:	d81c      	bhi.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d32:	d010      	beq.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8008d34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d38:	d816      	bhi.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d01d      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8008d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d42:	d111      	bne.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	3304      	adds	r3, #4
 8008d48:	2100      	movs	r1, #0
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f001 fa38 	bl	800a1c0 <RCCEx_PLL2_Config>
 8008d50:	4603      	mov	r3, r0
 8008d52:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008d54:	e012      	b.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	3324      	adds	r3, #36	; 0x24
 8008d5a:	2102      	movs	r1, #2
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f001 fae1 	bl	800a324 <RCCEx_PLL3_Config>
 8008d62:	4603      	mov	r3, r0
 8008d64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008d66:	e009      	b.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d6c:	e006      	b.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008d6e:	bf00      	nop
 8008d70:	e004      	b.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008d72:	bf00      	nop
 8008d74:	e002      	b.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008d76:	bf00      	nop
 8008d78:	e000      	b.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008d7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d7c:	7dfb      	ldrb	r3, [r7, #23]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10a      	bne.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008d82:	4b89      	ldr	r3, [pc, #548]	; (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d86:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d90:	4985      	ldr	r1, [pc, #532]	; (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008d92:	4313      	orrs	r3, r2
 8008d94:	658b      	str	r3, [r1, #88]	; 0x58
 8008d96:	e001      	b.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d98:	7dfb      	ldrb	r3, [r7, #23]
 8008d9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d04b      	beq.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008dae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008db2:	d02e      	beq.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8008db4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008db8:	d828      	bhi.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008dba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dbe:	d02a      	beq.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8008dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dc4:	d822      	bhi.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008dc6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008dca:	d026      	beq.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8008dcc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008dd0:	d81c      	bhi.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008dd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008dd6:	d010      	beq.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8008dd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ddc:	d816      	bhi.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d01d      	beq.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8008de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008de6:	d111      	bne.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	3304      	adds	r3, #4
 8008dec:	2100      	movs	r1, #0
 8008dee:	4618      	mov	r0, r3
 8008df0:	f001 f9e6 	bl	800a1c0 <RCCEx_PLL2_Config>
 8008df4:	4603      	mov	r3, r0
 8008df6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008df8:	e012      	b.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	3324      	adds	r3, #36	; 0x24
 8008dfe:	2102      	movs	r1, #2
 8008e00:	4618      	mov	r0, r3
 8008e02:	f001 fa8f 	bl	800a324 <RCCEx_PLL3_Config>
 8008e06:	4603      	mov	r3, r0
 8008e08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008e0a:	e009      	b.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8008e10:	e006      	b.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008e12:	bf00      	nop
 8008e14:	e004      	b.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008e16:	bf00      	nop
 8008e18:	e002      	b.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008e1a:	bf00      	nop
 8008e1c:	e000      	b.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008e1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e20:	7dfb      	ldrb	r3, [r7, #23]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d10a      	bne.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008e26:	4b60      	ldr	r3, [pc, #384]	; (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e34:	495c      	ldr	r1, [pc, #368]	; (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008e36:	4313      	orrs	r3, r2
 8008e38:	658b      	str	r3, [r1, #88]	; 0x58
 8008e3a:	e001      	b.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e3c:	7dfb      	ldrb	r3, [r7, #23]
 8008e3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 0308 	and.w	r3, r3, #8
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d018      	beq.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e54:	d10a      	bne.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	3324      	adds	r3, #36	; 0x24
 8008e5a:	2102      	movs	r1, #2
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f001 fa61 	bl	800a324 <RCCEx_PLL3_Config>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d001      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008e6c:	4b4e      	ldr	r3, [pc, #312]	; (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e70:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e78:	494b      	ldr	r1, [pc, #300]	; (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f003 0310 	and.w	r3, r3, #16
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d01a      	beq.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e94:	d10a      	bne.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	3324      	adds	r3, #36	; 0x24
 8008e9a:	2102      	movs	r1, #2
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f001 fa41 	bl	800a324 <RCCEx_PLL3_Config>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d001      	beq.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008eac:	4b3e      	ldr	r3, [pc, #248]	; (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eba:	493b      	ldr	r1, [pc, #236]	; (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d034      	beq.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ed2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ed6:	d01d      	beq.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008ed8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008edc:	d817      	bhi.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d003      	beq.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ee6:	d009      	beq.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008ee8:	e011      	b.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	3304      	adds	r3, #4
 8008eee:	2100      	movs	r1, #0
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f001 f965 	bl	800a1c0 <RCCEx_PLL2_Config>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008efa:	e00c      	b.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	3324      	adds	r3, #36	; 0x24
 8008f00:	2102      	movs	r1, #2
 8008f02:	4618      	mov	r0, r3
 8008f04:	f001 fa0e 	bl	800a324 <RCCEx_PLL3_Config>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008f0c:	e003      	b.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	75fb      	strb	r3, [r7, #23]
      break;
 8008f12:	e000      	b.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8008f14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f16:	7dfb      	ldrb	r3, [r7, #23]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d10a      	bne.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008f1c:	4b22      	ldr	r3, [pc, #136]	; (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f2a:	491f      	ldr	r1, [pc, #124]	; (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	658b      	str	r3, [r1, #88]	; 0x58
 8008f30:	e001      	b.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f32:	7dfb      	ldrb	r3, [r7, #23]
 8008f34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d036      	beq.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f4c:	d01c      	beq.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008f4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f52:	d816      	bhi.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008f54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f58:	d003      	beq.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008f5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f5e:	d007      	beq.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8008f60:	e00f      	b.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f62:	4b11      	ldr	r3, [pc, #68]	; (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f66:	4a10      	ldr	r2, [pc, #64]	; (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008f6e:	e00c      	b.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	3324      	adds	r3, #36	; 0x24
 8008f74:	2101      	movs	r1, #1
 8008f76:	4618      	mov	r0, r3
 8008f78:	f001 f9d4 	bl	800a324 <RCCEx_PLL3_Config>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008f80:	e003      	b.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	75fb      	strb	r3, [r7, #23]
      break;
 8008f86:	e000      	b.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8008f88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f8a:	7dfb      	ldrb	r3, [r7, #23]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d10d      	bne.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008f90:	4b05      	ldr	r3, [pc, #20]	; (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f9e:	4902      	ldr	r1, [pc, #8]	; (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	654b      	str	r3, [r1, #84]	; 0x54
 8008fa4:	e004      	b.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8008fa6:	bf00      	nop
 8008fa8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fac:	7dfb      	ldrb	r3, [r7, #23]
 8008fae:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d029      	beq.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d003      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fc8:	d007      	beq.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8008fca:	e00f      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fcc:	4b61      	ldr	r3, [pc, #388]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd0:	4a60      	ldr	r2, [pc, #384]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008fd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008fd8:	e00b      	b.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	3304      	adds	r3, #4
 8008fde:	2102      	movs	r1, #2
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f001 f8ed 	bl	800a1c0 <RCCEx_PLL2_Config>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008fea:	e002      	b.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	75fb      	strb	r3, [r7, #23]
      break;
 8008ff0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ff2:	7dfb      	ldrb	r3, [r7, #23]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d109      	bne.n	800900c <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008ff8:	4b56      	ldr	r3, [pc, #344]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ffc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009004:	4953      	ldr	r1, [pc, #332]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009006:	4313      	orrs	r3, r2
 8009008:	64cb      	str	r3, [r1, #76]	; 0x4c
 800900a:	e001      	b.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800900c:	7dfb      	ldrb	r3, [r7, #23]
 800900e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00a      	beq.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	3324      	adds	r3, #36	; 0x24
 8009020:	2102      	movs	r1, #2
 8009022:	4618      	mov	r0, r3
 8009024:	f001 f97e 	bl	800a324 <RCCEx_PLL3_Config>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d001      	beq.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800903a:	2b00      	cmp	r3, #0
 800903c:	d030      	beq.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009042:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009046:	d017      	beq.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009048:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800904c:	d811      	bhi.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800904e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009052:	d013      	beq.n	800907c <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8009054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009058:	d80b      	bhi.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800905a:	2b00      	cmp	r3, #0
 800905c:	d010      	beq.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800905e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009062:	d106      	bne.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009064:	4b3b      	ldr	r3, [pc, #236]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009068:	4a3a      	ldr	r2, [pc, #232]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800906a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800906e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009070:	e007      	b.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	75fb      	strb	r3, [r7, #23]
      break;
 8009076:	e004      	b.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8009078:	bf00      	nop
 800907a:	e002      	b.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800907c:	bf00      	nop
 800907e:	e000      	b.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8009080:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009082:	7dfb      	ldrb	r3, [r7, #23]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d109      	bne.n	800909c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009088:	4b32      	ldr	r3, [pc, #200]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800908a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800908c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009094:	492f      	ldr	r1, [pc, #188]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009096:	4313      	orrs	r3, r2
 8009098:	654b      	str	r3, [r1, #84]	; 0x54
 800909a:	e001      	b.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800909c:	7dfb      	ldrb	r3, [r7, #23]
 800909e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d008      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80090ac:	4b29      	ldr	r3, [pc, #164]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80090ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090b8:	4926      	ldr	r1, [pc, #152]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80090ba:	4313      	orrs	r3, r2
 80090bc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d008      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80090ca:	4b22      	ldr	r3, [pc, #136]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80090cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090d6:	491f      	ldr	r1, [pc, #124]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80090d8:	4313      	orrs	r3, r2
 80090da:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00d      	beq.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80090e8:	4b1a      	ldr	r3, [pc, #104]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	4a19      	ldr	r2, [pc, #100]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80090ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80090f2:	6113      	str	r3, [r2, #16]
 80090f4:	4b17      	ldr	r3, [pc, #92]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80090f6:	691a      	ldr	r2, [r3, #16]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80090fe:	4915      	ldr	r1, [pc, #84]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009100:	4313      	orrs	r3, r2
 8009102:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	da08      	bge.n	800911e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800910c:	4b11      	ldr	r3, [pc, #68]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800910e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009110:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009118:	490e      	ldr	r1, [pc, #56]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800911a:	4313      	orrs	r3, r2
 800911c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009126:	2b00      	cmp	r3, #0
 8009128:	d009      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800912a:	4b0a      	ldr	r3, [pc, #40]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800912c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800912e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009138:	4906      	ldr	r1, [pc, #24]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800913a:	4313      	orrs	r3, r2
 800913c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800913e:	7dbb      	ldrb	r3, [r7, #22]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d101      	bne.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8009144:	2300      	movs	r3, #0
 8009146:	e000      	b.n	800914a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8009148:	2301      	movs	r3, #1
}
 800914a:	4618      	mov	r0, r3
 800914c:	3718      	adds	r7, #24
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	58024400 	.word	0x58024400

08009158 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b090      	sub	sp, #64	; 0x40
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009166:	f040 8089 	bne.w	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800916a:	4b95      	ldr	r3, [pc, #596]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800916c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800916e:	f003 0307 	and.w	r3, r3, #7
 8009172:	633b      	str	r3, [r7, #48]	; 0x30
 8009174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009176:	2b04      	cmp	r3, #4
 8009178:	d87d      	bhi.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800917a:	a201      	add	r2, pc, #4	; (adr r2, 8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800917c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009180:	08009195 	.word	0x08009195
 8009184:	080091b9 	.word	0x080091b9
 8009188:	080091dd 	.word	0x080091dd
 800918c:	08009271 	.word	0x08009271
 8009190:	08009201 	.word	0x08009201

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009194:	4b8a      	ldr	r3, [pc, #552]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800919c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091a0:	d107      	bne.n	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 feb8 	bl	8009f1c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80091ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091b0:	e3ed      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80091b2:	2300      	movs	r3, #0
 80091b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091b6:	e3ea      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091b8:	4b81      	ldr	r3, [pc, #516]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091c4:	d107      	bne.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091c6:	f107 0318 	add.w	r3, r7, #24
 80091ca:	4618      	mov	r0, r3
 80091cc:	f000 fbfe 	bl	80099cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091d4:	e3db      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80091d6:	2300      	movs	r3, #0
 80091d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091da:	e3d8      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091dc:	4b78      	ldr	r3, [pc, #480]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091e8:	d107      	bne.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091ea:	f107 030c 	add.w	r3, r7, #12
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 fd40 	bl	8009c74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091f8:	e3c9      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80091fa:	2300      	movs	r3, #0
 80091fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091fe:	e3c6      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009200:	4b6f      	ldr	r3, [pc, #444]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009204:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009208:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800920a:	4b6d      	ldr	r3, [pc, #436]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 0304 	and.w	r3, r3, #4
 8009212:	2b04      	cmp	r3, #4
 8009214:	d10c      	bne.n	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8009216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009218:	2b00      	cmp	r3, #0
 800921a:	d109      	bne.n	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800921c:	4b68      	ldr	r3, [pc, #416]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	08db      	lsrs	r3, r3, #3
 8009222:	f003 0303 	and.w	r3, r3, #3
 8009226:	4a67      	ldr	r2, [pc, #412]	; (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8009228:	fa22 f303 	lsr.w	r3, r2, r3
 800922c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800922e:	e01e      	b.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009230:	4b63      	ldr	r3, [pc, #396]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800923c:	d106      	bne.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800923e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009240:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009244:	d102      	bne.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009246:	4b60      	ldr	r3, [pc, #384]	; (80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009248:	63fb      	str	r3, [r7, #60]	; 0x3c
 800924a:	e010      	b.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800924c:	4b5c      	ldr	r3, [pc, #368]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009254:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009258:	d106      	bne.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800925a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800925c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009260:	d102      	bne.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009262:	4b5a      	ldr	r3, [pc, #360]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009264:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009266:	e002      	b.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009268:	2300      	movs	r3, #0
 800926a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800926c:	e38f      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800926e:	e38e      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009270:	4b57      	ldr	r3, [pc, #348]	; (80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009272:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009274:	e38b      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8009276:	2300      	movs	r3, #0
 8009278:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800927a:	e388      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009282:	f040 80a7 	bne.w	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009286:	4b4e      	ldr	r3, [pc, #312]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800928a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800928e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009292:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009296:	d054      	beq.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8009298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800929e:	f200 808b 	bhi.w	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80092a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80092a8:	f000 8083 	beq.w	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80092ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80092b2:	f200 8081 	bhi.w	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80092b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092bc:	d02f      	beq.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 80092be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092c4:	d878      	bhi.n	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80092c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d004      	beq.n	80092d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80092cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092d2:	d012      	beq.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80092d4:	e070      	b.n	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092d6:	4b3a      	ldr	r3, [pc, #232]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092e2:	d107      	bne.n	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092e8:	4618      	mov	r0, r3
 80092ea:	f000 fe17 	bl	8009f1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80092f2:	e34c      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80092f4:	2300      	movs	r3, #0
 80092f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092f8:	e349      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092fa:	4b31      	ldr	r3, [pc, #196]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009302:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009306:	d107      	bne.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009308:	f107 0318 	add.w	r3, r7, #24
 800930c:	4618      	mov	r0, r3
 800930e:	f000 fb5d 	bl	80099cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009316:	e33a      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009318:	2300      	movs	r3, #0
 800931a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800931c:	e337      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800931e:	4b28      	ldr	r3, [pc, #160]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009326:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800932a:	d107      	bne.n	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800932c:	f107 030c 	add.w	r3, r7, #12
 8009330:	4618      	mov	r0, r3
 8009332:	f000 fc9f 	bl	8009c74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800933a:	e328      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800933c:	2300      	movs	r3, #0
 800933e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009340:	e325      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009342:	4b1f      	ldr	r3, [pc, #124]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009346:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800934a:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800934c:	4b1c      	ldr	r3, [pc, #112]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f003 0304 	and.w	r3, r3, #4
 8009354:	2b04      	cmp	r3, #4
 8009356:	d10c      	bne.n	8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8009358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800935a:	2b00      	cmp	r3, #0
 800935c:	d109      	bne.n	8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800935e:	4b18      	ldr	r3, [pc, #96]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	08db      	lsrs	r3, r3, #3
 8009364:	f003 0303 	and.w	r3, r3, #3
 8009368:	4a16      	ldr	r2, [pc, #88]	; (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800936a:	fa22 f303 	lsr.w	r3, r2, r3
 800936e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009370:	e01e      	b.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009372:	4b13      	ldr	r3, [pc, #76]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800937a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800937e:	d106      	bne.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8009380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009382:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009386:	d102      	bne.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009388:	4b0f      	ldr	r3, [pc, #60]	; (80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800938a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800938c:	e010      	b.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800938e:	4b0c      	ldr	r3, [pc, #48]	; (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009396:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800939a:	d106      	bne.n	80093aa <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800939c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800939e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093a2:	d102      	bne.n	80093aa <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80093a4:	4b09      	ldr	r3, [pc, #36]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80093a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093a8:	e002      	b.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80093aa:	2300      	movs	r3, #0
 80093ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80093ae:	e2ee      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80093b0:	e2ed      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80093b2:	4b07      	ldr	r3, [pc, #28]	; (80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80093b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093b6:	e2ea      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80093b8:	2300      	movs	r3, #0
 80093ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093bc:	e2e7      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80093be:	bf00      	nop
 80093c0:	58024400 	.word	0x58024400
 80093c4:	03d09000 	.word	0x03d09000
 80093c8:	003d0900 	.word	0x003d0900
 80093cc:	017d7840 	.word	0x017d7840
 80093d0:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093da:	f040 809c 	bne.w	8009516 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80093de:	4b9e      	ldr	r3, [pc, #632]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80093e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093e2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80093e6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80093e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80093ee:	d054      	beq.n	800949a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80093f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80093f6:	f200 808b 	bhi.w	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80093fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009400:	f000 8083 	beq.w	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009406:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800940a:	f200 8081 	bhi.w	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800940e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009410:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009414:	d02f      	beq.n	8009476 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8009416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009418:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800941c:	d878      	bhi.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800941e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009420:	2b00      	cmp	r3, #0
 8009422:	d004      	beq.n	800942e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8009424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009426:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800942a:	d012      	beq.n	8009452 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800942c:	e070      	b.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800942e:	4b8a      	ldr	r3, [pc, #552]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009436:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800943a:	d107      	bne.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800943c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009440:	4618      	mov	r0, r3
 8009442:	f000 fd6b 	bl	8009f1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009448:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800944a:	e2a0      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800944c:	2300      	movs	r3, #0
 800944e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009450:	e29d      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009452:	4b81      	ldr	r3, [pc, #516]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800945a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800945e:	d107      	bne.n	8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009460:	f107 0318 	add.w	r3, r7, #24
 8009464:	4618      	mov	r0, r3
 8009466:	f000 fab1 	bl	80099cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800946e:	e28e      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009470:	2300      	movs	r3, #0
 8009472:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009474:	e28b      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009476:	4b78      	ldr	r3, [pc, #480]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800947e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009482:	d107      	bne.n	8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009484:	f107 030c 	add.w	r3, r7, #12
 8009488:	4618      	mov	r0, r3
 800948a:	f000 fbf3 	bl	8009c74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009492:	e27c      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009494:	2300      	movs	r3, #0
 8009496:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009498:	e279      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800949a:	4b6f      	ldr	r3, [pc, #444]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800949c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800949e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80094a2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094a4:	4b6c      	ldr	r3, [pc, #432]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 0304 	and.w	r3, r3, #4
 80094ac:	2b04      	cmp	r3, #4
 80094ae:	d10c      	bne.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80094b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d109      	bne.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094b6:	4b68      	ldr	r3, [pc, #416]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	08db      	lsrs	r3, r3, #3
 80094bc:	f003 0303 	and.w	r3, r3, #3
 80094c0:	4a66      	ldr	r2, [pc, #408]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80094c2:	fa22 f303 	lsr.w	r3, r2, r3
 80094c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094c8:	e01e      	b.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80094ca:	4b63      	ldr	r3, [pc, #396]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094d6:	d106      	bne.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80094d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094de:	d102      	bne.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80094e0:	4b5f      	ldr	r3, [pc, #380]	; (8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80094e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094e4:	e010      	b.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094e6:	4b5c      	ldr	r3, [pc, #368]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094f2:	d106      	bne.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80094f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094fa:	d102      	bne.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80094fc:	4b59      	ldr	r3, [pc, #356]	; (8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80094fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009500:	e002      	b.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009502:	2300      	movs	r3, #0
 8009504:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009506:	e242      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009508:	e241      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800950a:	4b57      	ldr	r3, [pc, #348]	; (8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800950c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800950e:	e23e      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8009510:	2300      	movs	r3, #0
 8009512:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009514:	e23b      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800951c:	f040 80a6 	bne.w	800966c <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009520:	4b4d      	ldr	r3, [pc, #308]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009524:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009528:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800952a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009530:	d054      	beq.n	80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8009532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009534:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009538:	f200 808b 	bhi.w	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800953c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009542:	f000 8083 	beq.w	800964c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8009546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009548:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800954c:	f200 8081 	bhi.w	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009556:	d02f      	beq.n	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8009558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800955e:	d878      	bhi.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009562:	2b00      	cmp	r3, #0
 8009564:	d004      	beq.n	8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8009566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800956c:	d012      	beq.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800956e:	e070      	b.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009570:	4b39      	ldr	r3, [pc, #228]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009578:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800957c:	d107      	bne.n	800958e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800957e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009582:	4618      	mov	r0, r3
 8009584:	f000 fcca 	bl	8009f1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800958c:	e1ff      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800958e:	2300      	movs	r3, #0
 8009590:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009592:	e1fc      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009594:	4b30      	ldr	r3, [pc, #192]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800959c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095a0:	d107      	bne.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095a2:	f107 0318 	add.w	r3, r7, #24
 80095a6:	4618      	mov	r0, r3
 80095a8:	f000 fa10 	bl	80099cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80095ac:	69bb      	ldr	r3, [r7, #24]
 80095ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80095b0:	e1ed      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80095b2:	2300      	movs	r3, #0
 80095b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095b6:	e1ea      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095b8:	4b27      	ldr	r3, [pc, #156]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095c4:	d107      	bne.n	80095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095c6:	f107 030c 	add.w	r3, r7, #12
 80095ca:	4618      	mov	r0, r3
 80095cc:	f000 fb52 	bl	8009c74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80095d4:	e1db      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80095d6:	2300      	movs	r3, #0
 80095d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095da:	e1d8      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80095dc:	4b1e      	ldr	r3, [pc, #120]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80095de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80095e4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095e6:	4b1c      	ldr	r3, [pc, #112]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f003 0304 	and.w	r3, r3, #4
 80095ee:	2b04      	cmp	r3, #4
 80095f0:	d10c      	bne.n	800960c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 80095f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d109      	bne.n	800960c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80095f8:	4b17      	ldr	r3, [pc, #92]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	08db      	lsrs	r3, r3, #3
 80095fe:	f003 0303 	and.w	r3, r3, #3
 8009602:	4a16      	ldr	r2, [pc, #88]	; (800965c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009604:	fa22 f303 	lsr.w	r3, r2, r3
 8009608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800960a:	e01e      	b.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800960c:	4b12      	ldr	r3, [pc, #72]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009618:	d106      	bne.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800961a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800961c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009620:	d102      	bne.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009622:	4b0f      	ldr	r3, [pc, #60]	; (8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8009624:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009626:	e010      	b.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009628:	4b0b      	ldr	r3, [pc, #44]	; (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009630:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009634:	d106      	bne.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8009636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009638:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800963c:	d102      	bne.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800963e:	4b09      	ldr	r3, [pc, #36]	; (8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8009640:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009642:	e002      	b.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009644:	2300      	movs	r3, #0
 8009646:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009648:	e1a1      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800964a:	e1a0      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800964c:	4b06      	ldr	r3, [pc, #24]	; (8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800964e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009650:	e19d      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8009652:	2300      	movs	r3, #0
 8009654:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009656:	e19a      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009658:	58024400 	.word	0x58024400
 800965c:	03d09000 	.word	0x03d09000
 8009660:	003d0900 	.word	0x003d0900
 8009664:	017d7840 	.word	0x017d7840
 8009668:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009672:	d173      	bne.n	800975c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009674:	4b9a      	ldr	r3, [pc, #616]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009678:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800967c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800967e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009680:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009684:	d02f      	beq.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8009686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009688:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800968c:	d863      	bhi.n	8009756 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800968e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009690:	2b00      	cmp	r3, #0
 8009692:	d004      	beq.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8009694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800969a:	d012      	beq.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 800969c:	e05b      	b.n	8009756 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800969e:	4b90      	ldr	r3, [pc, #576]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096aa:	d107      	bne.n	80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096ac:	f107 0318 	add.w	r3, r7, #24
 80096b0:	4618      	mov	r0, r3
 80096b2:	f000 f98b 	bl	80099cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80096ba:	e168      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80096bc:	2300      	movs	r3, #0
 80096be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096c0:	e165      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80096c2:	4b87      	ldr	r3, [pc, #540]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096ce:	d107      	bne.n	80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096d0:	f107 030c 	add.w	r3, r7, #12
 80096d4:	4618      	mov	r0, r3
 80096d6:	f000 facd 	bl	8009c74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80096de:	e156      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80096e0:	2300      	movs	r3, #0
 80096e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096e4:	e153      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80096e6:	4b7e      	ldr	r3, [pc, #504]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80096e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80096ee:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80096f0:	4b7b      	ldr	r3, [pc, #492]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f003 0304 	and.w	r3, r3, #4
 80096f8:	2b04      	cmp	r3, #4
 80096fa:	d10c      	bne.n	8009716 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 80096fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d109      	bne.n	8009716 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009702:	4b77      	ldr	r3, [pc, #476]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	08db      	lsrs	r3, r3, #3
 8009708:	f003 0303 	and.w	r3, r3, #3
 800970c:	4a75      	ldr	r2, [pc, #468]	; (80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800970e:	fa22 f303 	lsr.w	r3, r2, r3
 8009712:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009714:	e01e      	b.n	8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009716:	4b72      	ldr	r3, [pc, #456]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800971e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009722:	d106      	bne.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8009724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009726:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800972a:	d102      	bne.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800972c:	4b6e      	ldr	r3, [pc, #440]	; (80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800972e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009730:	e010      	b.n	8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009732:	4b6b      	ldr	r3, [pc, #428]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800973a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800973e:	d106      	bne.n	800974e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8009740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009742:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009746:	d102      	bne.n	800974e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009748:	4b68      	ldr	r3, [pc, #416]	; (80098ec <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800974a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800974c:	e002      	b.n	8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800974e:	2300      	movs	r3, #0
 8009750:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009752:	e11c      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009754:	e11b      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8009756:	2300      	movs	r3, #0
 8009758:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800975a:	e118      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009762:	d133      	bne.n	80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009764:	4b5e      	ldr	r3, [pc, #376]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800976c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800976e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009770:	2b00      	cmp	r3, #0
 8009772:	d004      	beq.n	800977e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8009774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800977a:	d012      	beq.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800977c:	e023      	b.n	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800977e:	4b58      	ldr	r3, [pc, #352]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009786:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800978a:	d107      	bne.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800978c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009790:	4618      	mov	r0, r3
 8009792:	f000 fbc3 	bl	8009f1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009798:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800979a:	e0f8      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800979c:	2300      	movs	r3, #0
 800979e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097a0:	e0f5      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097a2:	4b4f      	ldr	r3, [pc, #316]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80097ae:	d107      	bne.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097b0:	f107 0318 	add.w	r3, r7, #24
 80097b4:	4618      	mov	r0, r3
 80097b6:	f000 f909 	bl	80099cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80097ba:	6a3b      	ldr	r3, [r7, #32]
 80097bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80097be:	e0e6      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80097c0:	2300      	movs	r3, #0
 80097c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097c4:	e0e3      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80097c6:	2300      	movs	r3, #0
 80097c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097ca:	e0e0      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097d2:	f040 808d 	bne.w	80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80097d6:	4b42      	ldr	r3, [pc, #264]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80097d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097da:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80097de:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80097e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097e6:	d06b      	beq.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 80097e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097ee:	d874      	bhi.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80097f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097f6:	d056      	beq.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80097f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097fe:	d86c      	bhi.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8009800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009802:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009806:	d03b      	beq.n	8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8009808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800980e:	d864      	bhi.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8009810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009812:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009816:	d021      	beq.n	800985c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8009818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800981e:	d85c      	bhi.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8009820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009822:	2b00      	cmp	r3, #0
 8009824:	d004      	beq.n	8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8009826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009828:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800982c:	d004      	beq.n	8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800982e:	e054      	b.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009830:	f000 f8b6 	bl	80099a0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009834:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009836:	e0aa      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009838:	4b29      	ldr	r3, [pc, #164]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009840:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009844:	d107      	bne.n	8009856 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009846:	f107 0318 	add.w	r3, r7, #24
 800984a:	4618      	mov	r0, r3
 800984c:	f000 f8be 	bl	80099cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009854:	e09b      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009856:	2300      	movs	r3, #0
 8009858:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800985a:	e098      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800985c:	4b20      	ldr	r3, [pc, #128]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009868:	d107      	bne.n	800987a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800986a:	f107 030c 	add.w	r3, r7, #12
 800986e:	4618      	mov	r0, r3
 8009870:	f000 fa00 	bl	8009c74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009878:	e089      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800987a:	2300      	movs	r3, #0
 800987c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800987e:	e086      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009880:	4b17      	ldr	r3, [pc, #92]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f003 0304 	and.w	r3, r3, #4
 8009888:	2b04      	cmp	r3, #4
 800988a:	d109      	bne.n	80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800988c:	4b14      	ldr	r3, [pc, #80]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	08db      	lsrs	r3, r3, #3
 8009892:	f003 0303 	and.w	r3, r3, #3
 8009896:	4a13      	ldr	r2, [pc, #76]	; (80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009898:	fa22 f303 	lsr.w	r3, r2, r3
 800989c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800989e:	e076      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80098a0:	2300      	movs	r3, #0
 80098a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098a4:	e073      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80098a6:	4b0e      	ldr	r3, [pc, #56]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098b2:	d102      	bne.n	80098ba <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 80098b4:	4b0c      	ldr	r3, [pc, #48]	; (80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80098b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80098b8:	e069      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80098ba:	2300      	movs	r3, #0
 80098bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098be:	e066      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80098c0:	4b07      	ldr	r3, [pc, #28]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098cc:	d102      	bne.n	80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 80098ce:	4b07      	ldr	r3, [pc, #28]	; (80098ec <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80098d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80098d2:	e05c      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80098d4:	2300      	movs	r3, #0
 80098d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098d8:	e059      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80098da:	2300      	movs	r3, #0
 80098dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098de:	e056      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80098e0:	58024400 	.word	0x58024400
 80098e4:	03d09000 	.word	0x03d09000
 80098e8:	003d0900 	.word	0x003d0900
 80098ec:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098f6:	d148      	bne.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80098f8:	4b27      	ldr	r3, [pc, #156]	; (8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80098fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009900:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009908:	d02a      	beq.n	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800990a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009910:	d838      	bhi.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8009912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009914:	2b00      	cmp	r3, #0
 8009916:	d004      	beq.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8009918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800991a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800991e:	d00d      	beq.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8009920:	e030      	b.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009922:	4b1d      	ldr	r3, [pc, #116]	; (8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800992a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800992e:	d102      	bne.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8009930:	4b1a      	ldr	r3, [pc, #104]	; (800999c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009932:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009934:	e02b      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009936:	2300      	movs	r3, #0
 8009938:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800993a:	e028      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800993c:	4b16      	ldr	r3, [pc, #88]	; (8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009944:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009948:	d107      	bne.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800994a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800994e:	4618      	mov	r0, r3
 8009950:	f000 fae4 	bl	8009f1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009956:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009958:	e019      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800995a:	2300      	movs	r3, #0
 800995c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800995e:	e016      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009960:	4b0d      	ldr	r3, [pc, #52]	; (8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009968:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800996c:	d107      	bne.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800996e:	f107 0318 	add.w	r3, r7, #24
 8009972:	4618      	mov	r0, r3
 8009974:	f000 f82a 	bl	80099cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800997c:	e007      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800997e:	2300      	movs	r3, #0
 8009980:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009982:	e004      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8009984:	2300      	movs	r3, #0
 8009986:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009988:	e001      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800998a:	2300      	movs	r3, #0
 800998c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800998e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009990:	4618      	mov	r0, r3
 8009992:	3740      	adds	r7, #64	; 0x40
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	58024400 	.word	0x58024400
 800999c:	017d7840 	.word	0x017d7840

080099a0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80099a4:	f7fe fc82 	bl	80082ac <HAL_RCC_GetHCLKFreq>
 80099a8:	4602      	mov	r2, r0
 80099aa:	4b06      	ldr	r3, [pc, #24]	; (80099c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80099ac:	6a1b      	ldr	r3, [r3, #32]
 80099ae:	091b      	lsrs	r3, r3, #4
 80099b0:	f003 0307 	and.w	r3, r3, #7
 80099b4:	4904      	ldr	r1, [pc, #16]	; (80099c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80099b6:	5ccb      	ldrb	r3, [r1, r3]
 80099b8:	f003 031f 	and.w	r3, r3, #31
 80099bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	58024400 	.word	0x58024400
 80099c8:	0800e3bc 	.word	0x0800e3bc

080099cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b089      	sub	sp, #36	; 0x24
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80099d4:	4ba1      	ldr	r3, [pc, #644]	; (8009c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d8:	f003 0303 	and.w	r3, r3, #3
 80099dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80099de:	4b9f      	ldr	r3, [pc, #636]	; (8009c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e2:	0b1b      	lsrs	r3, r3, #12
 80099e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099e8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80099ea:	4b9c      	ldr	r3, [pc, #624]	; (8009c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ee:	091b      	lsrs	r3, r3, #4
 80099f0:	f003 0301 	and.w	r3, r3, #1
 80099f4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80099f6:	4b99      	ldr	r3, [pc, #612]	; (8009c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099fa:	08db      	lsrs	r3, r3, #3
 80099fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a00:	693a      	ldr	r2, [r7, #16]
 8009a02:	fb02 f303 	mul.w	r3, r2, r3
 8009a06:	ee07 3a90 	vmov	s15, r3
 8009a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f000 8111 	beq.w	8009c3c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	2b02      	cmp	r3, #2
 8009a1e:	f000 8083 	beq.w	8009b28 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009a22:	69bb      	ldr	r3, [r7, #24]
 8009a24:	2b02      	cmp	r3, #2
 8009a26:	f200 80a1 	bhi.w	8009b6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d003      	beq.n	8009a38 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d056      	beq.n	8009ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009a36:	e099      	b.n	8009b6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a38:	4b88      	ldr	r3, [pc, #544]	; (8009c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 0320 	and.w	r3, r3, #32
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d02d      	beq.n	8009aa0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a44:	4b85      	ldr	r3, [pc, #532]	; (8009c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	08db      	lsrs	r3, r3, #3
 8009a4a:	f003 0303 	and.w	r3, r3, #3
 8009a4e:	4a84      	ldr	r2, [pc, #528]	; (8009c60 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009a50:	fa22 f303 	lsr.w	r3, r2, r3
 8009a54:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	ee07 3a90 	vmov	s15, r3
 8009a5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	ee07 3a90 	vmov	s15, r3
 8009a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a6e:	4b7b      	ldr	r3, [pc, #492]	; (8009c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a76:	ee07 3a90 	vmov	s15, r3
 8009a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a82:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a9a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009a9e:	e087      	b.n	8009bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	ee07 3a90 	vmov	s15, r3
 8009aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aaa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009c68 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ab2:	4b6a      	ldr	r3, [pc, #424]	; (8009c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aba:	ee07 3a90 	vmov	s15, r3
 8009abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ac6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ade:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ae2:	e065      	b.n	8009bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	ee07 3a90 	vmov	s15, r3
 8009aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009af6:	4b59      	ldr	r3, [pc, #356]	; (8009c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009afe:	ee07 3a90 	vmov	s15, r3
 8009b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b0a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b26:	e043      	b.n	8009bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	ee07 3a90 	vmov	s15, r3
 8009b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b32:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b3a:	4b48      	ldr	r3, [pc, #288]	; (8009c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b42:	ee07 3a90 	vmov	s15, r3
 8009b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b4e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b6a:	e021      	b.n	8009bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	ee07 3a90 	vmov	s15, r3
 8009b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b76:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b7e:	4b37      	ldr	r3, [pc, #220]	; (8009c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b86:	ee07 3a90 	vmov	s15, r3
 8009b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b92:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009baa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009bb0:	4b2a      	ldr	r3, [pc, #168]	; (8009c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb4:	0a5b      	lsrs	r3, r3, #9
 8009bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bba:	ee07 3a90 	vmov	s15, r3
 8009bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bca:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bd6:	ee17 2a90 	vmov	r2, s15
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009bde:	4b1f      	ldr	r3, [pc, #124]	; (8009c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be2:	0c1b      	lsrs	r3, r3, #16
 8009be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009be8:	ee07 3a90 	vmov	s15, r3
 8009bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bf4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bf8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c04:	ee17 2a90 	vmov	r2, s15
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009c0c:	4b13      	ldr	r3, [pc, #76]	; (8009c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c10:	0e1b      	lsrs	r3, r3, #24
 8009c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c16:	ee07 3a90 	vmov	s15, r3
 8009c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c26:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c32:	ee17 2a90 	vmov	r2, s15
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009c3a:	e008      	b.n	8009c4e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	609a      	str	r2, [r3, #8]
}
 8009c4e:	bf00      	nop
 8009c50:	3724      	adds	r7, #36	; 0x24
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop
 8009c5c:	58024400 	.word	0x58024400
 8009c60:	03d09000 	.word	0x03d09000
 8009c64:	46000000 	.word	0x46000000
 8009c68:	4c742400 	.word	0x4c742400
 8009c6c:	4a742400 	.word	0x4a742400
 8009c70:	4bbebc20 	.word	0x4bbebc20

08009c74 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b089      	sub	sp, #36	; 0x24
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c7c:	4ba1      	ldr	r3, [pc, #644]	; (8009f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c80:	f003 0303 	and.w	r3, r3, #3
 8009c84:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009c86:	4b9f      	ldr	r3, [pc, #636]	; (8009f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c8a:	0d1b      	lsrs	r3, r3, #20
 8009c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c90:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009c92:	4b9c      	ldr	r3, [pc, #624]	; (8009f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c96:	0a1b      	lsrs	r3, r3, #8
 8009c98:	f003 0301 	and.w	r3, r3, #1
 8009c9c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009c9e:	4b99      	ldr	r3, [pc, #612]	; (8009f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ca2:	08db      	lsrs	r3, r3, #3
 8009ca4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ca8:	693a      	ldr	r2, [r7, #16]
 8009caa:	fb02 f303 	mul.w	r3, r2, r3
 8009cae:	ee07 3a90 	vmov	s15, r3
 8009cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cb6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f000 8111 	beq.w	8009ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	2b02      	cmp	r3, #2
 8009cc6:	f000 8083 	beq.w	8009dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	2b02      	cmp	r3, #2
 8009cce:	f200 80a1 	bhi.w	8009e14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d003      	beq.n	8009ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d056      	beq.n	8009d8c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009cde:	e099      	b.n	8009e14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ce0:	4b88      	ldr	r3, [pc, #544]	; (8009f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f003 0320 	and.w	r3, r3, #32
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d02d      	beq.n	8009d48 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009cec:	4b85      	ldr	r3, [pc, #532]	; (8009f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	08db      	lsrs	r3, r3, #3
 8009cf2:	f003 0303 	and.w	r3, r3, #3
 8009cf6:	4a84      	ldr	r2, [pc, #528]	; (8009f08 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8009cfc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	ee07 3a90 	vmov	s15, r3
 8009d04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	ee07 3a90 	vmov	s15, r3
 8009d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d16:	4b7b      	ldr	r3, [pc, #492]	; (8009f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d1e:	ee07 3a90 	vmov	s15, r3
 8009d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d2a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d42:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009d46:	e087      	b.n	8009e58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	ee07 3a90 	vmov	s15, r3
 8009d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d52:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009f10 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d5a:	4b6a      	ldr	r3, [pc, #424]	; (8009f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d62:	ee07 3a90 	vmov	s15, r3
 8009d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d6e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d8a:	e065      	b.n	8009e58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	ee07 3a90 	vmov	s15, r3
 8009d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d96:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009f14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d9e:	4b59      	ldr	r3, [pc, #356]	; (8009f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009da6:	ee07 3a90 	vmov	s15, r3
 8009daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8009db2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009dce:	e043      	b.n	8009e58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	ee07 3a90 	vmov	s15, r3
 8009dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dda:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009f18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009de2:	4b48      	ldr	r3, [pc, #288]	; (8009f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dea:	ee07 3a90 	vmov	s15, r3
 8009dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009df2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009df6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e12:	e021      	b.n	8009e58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	ee07 3a90 	vmov	s15, r3
 8009e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e1e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009f14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e26:	4b37      	ldr	r3, [pc, #220]	; (8009f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e2e:	ee07 3a90 	vmov	s15, r3
 8009e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e36:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e3a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e56:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009e58:	4b2a      	ldr	r3, [pc, #168]	; (8009f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e5c:	0a5b      	lsrs	r3, r3, #9
 8009e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e62:	ee07 3a90 	vmov	s15, r3
 8009e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e72:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e7e:	ee17 2a90 	vmov	r2, s15
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009e86:	4b1f      	ldr	r3, [pc, #124]	; (8009f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8a:	0c1b      	lsrs	r3, r3, #16
 8009e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e90:	ee07 3a90 	vmov	s15, r3
 8009e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ea0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ea4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ea8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eac:	ee17 2a90 	vmov	r2, s15
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009eb4:	4b13      	ldr	r3, [pc, #76]	; (8009f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb8:	0e1b      	lsrs	r3, r3, #24
 8009eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ebe:	ee07 3a90 	vmov	s15, r3
 8009ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ec6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009eca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ece:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ed6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eda:	ee17 2a90 	vmov	r2, s15
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009ee2:	e008      	b.n	8009ef6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	609a      	str	r2, [r3, #8]
}
 8009ef6:	bf00      	nop
 8009ef8:	3724      	adds	r7, #36	; 0x24
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	58024400 	.word	0x58024400
 8009f08:	03d09000 	.word	0x03d09000
 8009f0c:	46000000 	.word	0x46000000
 8009f10:	4c742400 	.word	0x4c742400
 8009f14:	4a742400 	.word	0x4a742400
 8009f18:	4bbebc20 	.word	0x4bbebc20

08009f1c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b089      	sub	sp, #36	; 0x24
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f24:	4ba0      	ldr	r3, [pc, #640]	; (800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f28:	f003 0303 	and.w	r3, r3, #3
 8009f2c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009f2e:	4b9e      	ldr	r3, [pc, #632]	; (800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f32:	091b      	lsrs	r3, r3, #4
 8009f34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f38:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009f3a:	4b9b      	ldr	r3, [pc, #620]	; (800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3e:	f003 0301 	and.w	r3, r3, #1
 8009f42:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009f44:	4b98      	ldr	r3, [pc, #608]	; (800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f48:	08db      	lsrs	r3, r3, #3
 8009f4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f4e:	693a      	ldr	r2, [r7, #16]
 8009f50:	fb02 f303 	mul.w	r3, r2, r3
 8009f54:	ee07 3a90 	vmov	s15, r3
 8009f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f5c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	f000 8111 	beq.w	800a18a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	f000 8083 	beq.w	800a076 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	f200 80a1 	bhi.w	800a0ba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009f78:	69bb      	ldr	r3, [r7, #24]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d003      	beq.n	8009f86 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009f7e:	69bb      	ldr	r3, [r7, #24]
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d056      	beq.n	800a032 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009f84:	e099      	b.n	800a0ba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f86:	4b88      	ldr	r3, [pc, #544]	; (800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f003 0320 	and.w	r3, r3, #32
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d02d      	beq.n	8009fee <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f92:	4b85      	ldr	r3, [pc, #532]	; (800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	08db      	lsrs	r3, r3, #3
 8009f98:	f003 0303 	and.w	r3, r3, #3
 8009f9c:	4a83      	ldr	r2, [pc, #524]	; (800a1ac <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009fa2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	ee07 3a90 	vmov	s15, r3
 8009faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	ee07 3a90 	vmov	s15, r3
 8009fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fbc:	4b7a      	ldr	r3, [pc, #488]	; (800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fc4:	ee07 3a90 	vmov	s15, r3
 8009fc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fcc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fd0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009fd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fe0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fe8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009fec:	e087      	b.n	800a0fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	ee07 3a90 	vmov	s15, r3
 8009ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ff8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a1b4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009ffc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a000:	4b69      	ldr	r3, [pc, #420]	; (800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a008:	ee07 3a90 	vmov	s15, r3
 800a00c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a010:	ed97 6a03 	vldr	s12, [r7, #12]
 800a014:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a018:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a01c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a020:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a024:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a02c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a030:	e065      	b.n	800a0fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	ee07 3a90 	vmov	s15, r3
 800a038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a03c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a1b8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a040:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a044:	4b58      	ldr	r3, [pc, #352]	; (800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a04c:	ee07 3a90 	vmov	s15, r3
 800a050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a054:	ed97 6a03 	vldr	s12, [r7, #12]
 800a058:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a05c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a060:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a064:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a068:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a06c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a070:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a074:	e043      	b.n	800a0fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	ee07 3a90 	vmov	s15, r3
 800a07c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a080:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a1bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a084:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a088:	4b47      	ldr	r3, [pc, #284]	; (800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a08a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a08c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a090:	ee07 3a90 	vmov	s15, r3
 800a094:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a098:	ed97 6a03 	vldr	s12, [r7, #12]
 800a09c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a0a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0b8:	e021      	b.n	800a0fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	ee07 3a90 	vmov	s15, r3
 800a0c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0c4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a1b4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a0c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0cc:	4b36      	ldr	r3, [pc, #216]	; (800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0d4:	ee07 3a90 	vmov	s15, r3
 800a0d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0e0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a0e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0fc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a0fe:	4b2a      	ldr	r3, [pc, #168]	; (800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a102:	0a5b      	lsrs	r3, r3, #9
 800a104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a108:	ee07 3a90 	vmov	s15, r3
 800a10c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a110:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a114:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a118:	edd7 6a07 	vldr	s13, [r7, #28]
 800a11c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a124:	ee17 2a90 	vmov	r2, s15
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a12c:	4b1e      	ldr	r3, [pc, #120]	; (800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a12e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a130:	0c1b      	lsrs	r3, r3, #16
 800a132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a136:	ee07 3a90 	vmov	s15, r3
 800a13a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a13e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a142:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a146:	edd7 6a07 	vldr	s13, [r7, #28]
 800a14a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a14e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a152:	ee17 2a90 	vmov	r2, s15
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a15a:	4b13      	ldr	r3, [pc, #76]	; (800a1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a15c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a15e:	0e1b      	lsrs	r3, r3, #24
 800a160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a164:	ee07 3a90 	vmov	s15, r3
 800a168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a16c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a170:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a174:	edd7 6a07 	vldr	s13, [r7, #28]
 800a178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a17c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a180:	ee17 2a90 	vmov	r2, s15
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a188:	e008      	b.n	800a19c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2200      	movs	r2, #0
 800a18e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2200      	movs	r2, #0
 800a19a:	609a      	str	r2, [r3, #8]
}
 800a19c:	bf00      	nop
 800a19e:	3724      	adds	r7, #36	; 0x24
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr
 800a1a8:	58024400 	.word	0x58024400
 800a1ac:	03d09000 	.word	0x03d09000
 800a1b0:	46000000 	.word	0x46000000
 800a1b4:	4c742400 	.word	0x4c742400
 800a1b8:	4a742400 	.word	0x4a742400
 800a1bc:	4bbebc20 	.word	0x4bbebc20

0800a1c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a1ce:	4b53      	ldr	r3, [pc, #332]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d2:	f003 0303 	and.w	r3, r3, #3
 800a1d6:	2b03      	cmp	r3, #3
 800a1d8:	d101      	bne.n	800a1de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e099      	b.n	800a312 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a1de:	4b4f      	ldr	r3, [pc, #316]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a4e      	ldr	r2, [pc, #312]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a1e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a1e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1ea:	f7f8 feed 	bl	8002fc8 <HAL_GetTick>
 800a1ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a1f0:	e008      	b.n	800a204 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a1f2:	f7f8 fee9 	bl	8002fc8 <HAL_GetTick>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	1ad3      	subs	r3, r2, r3
 800a1fc:	2b02      	cmp	r3, #2
 800a1fe:	d901      	bls.n	800a204 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a200:	2303      	movs	r3, #3
 800a202:	e086      	b.n	800a312 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a204:	4b45      	ldr	r3, [pc, #276]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d1f0      	bne.n	800a1f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a210:	4b42      	ldr	r3, [pc, #264]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a214:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	031b      	lsls	r3, r3, #12
 800a21e:	493f      	ldr	r1, [pc, #252]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a220:	4313      	orrs	r3, r2
 800a222:	628b      	str	r3, [r1, #40]	; 0x28
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	3b01      	subs	r3, #1
 800a22a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	3b01      	subs	r3, #1
 800a234:	025b      	lsls	r3, r3, #9
 800a236:	b29b      	uxth	r3, r3
 800a238:	431a      	orrs	r2, r3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	3b01      	subs	r3, #1
 800a240:	041b      	lsls	r3, r3, #16
 800a242:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a246:	431a      	orrs	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	3b01      	subs	r3, #1
 800a24e:	061b      	lsls	r3, r3, #24
 800a250:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a254:	4931      	ldr	r1, [pc, #196]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a256:	4313      	orrs	r3, r2
 800a258:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a25a:	4b30      	ldr	r3, [pc, #192]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a25e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	695b      	ldr	r3, [r3, #20]
 800a266:	492d      	ldr	r1, [pc, #180]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a268:	4313      	orrs	r3, r2
 800a26a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a26c:	4b2b      	ldr	r3, [pc, #172]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a270:	f023 0220 	bic.w	r2, r3, #32
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	699b      	ldr	r3, [r3, #24]
 800a278:	4928      	ldr	r1, [pc, #160]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a27a:	4313      	orrs	r3, r2
 800a27c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a27e:	4b27      	ldr	r3, [pc, #156]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a282:	4a26      	ldr	r2, [pc, #152]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a284:	f023 0310 	bic.w	r3, r3, #16
 800a288:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a28a:	4b24      	ldr	r3, [pc, #144]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a28c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a28e:	4b24      	ldr	r3, [pc, #144]	; (800a320 <RCCEx_PLL2_Config+0x160>)
 800a290:	4013      	ands	r3, r2
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	69d2      	ldr	r2, [r2, #28]
 800a296:	00d2      	lsls	r2, r2, #3
 800a298:	4920      	ldr	r1, [pc, #128]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a29a:	4313      	orrs	r3, r2
 800a29c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a29e:	4b1f      	ldr	r3, [pc, #124]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a2:	4a1e      	ldr	r2, [pc, #120]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a2a4:	f043 0310 	orr.w	r3, r3, #16
 800a2a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d106      	bne.n	800a2be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a2b0:	4b1a      	ldr	r3, [pc, #104]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b4:	4a19      	ldr	r2, [pc, #100]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a2b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a2ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2bc:	e00f      	b.n	800a2de <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d106      	bne.n	800a2d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a2c4:	4b15      	ldr	r3, [pc, #84]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c8:	4a14      	ldr	r2, [pc, #80]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a2ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2d0:	e005      	b.n	800a2de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a2d2:	4b12      	ldr	r3, [pc, #72]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d6:	4a11      	ldr	r2, [pc, #68]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a2d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a2dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a2de:	4b0f      	ldr	r3, [pc, #60]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a0e      	ldr	r2, [pc, #56]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a2e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a2e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2ea:	f7f8 fe6d 	bl	8002fc8 <HAL_GetTick>
 800a2ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a2f0:	e008      	b.n	800a304 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a2f2:	f7f8 fe69 	bl	8002fc8 <HAL_GetTick>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	1ad3      	subs	r3, r2, r3
 800a2fc:	2b02      	cmp	r3, #2
 800a2fe:	d901      	bls.n	800a304 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a300:	2303      	movs	r3, #3
 800a302:	e006      	b.n	800a312 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a304:	4b05      	ldr	r3, [pc, #20]	; (800a31c <RCCEx_PLL2_Config+0x15c>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d0f0      	beq.n	800a2f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a310:	7bfb      	ldrb	r3, [r7, #15]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	58024400 	.word	0x58024400
 800a320:	ffff0007 	.word	0xffff0007

0800a324 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a32e:	2300      	movs	r3, #0
 800a330:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a332:	4b53      	ldr	r3, [pc, #332]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a336:	f003 0303 	and.w	r3, r3, #3
 800a33a:	2b03      	cmp	r3, #3
 800a33c:	d101      	bne.n	800a342 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a33e:	2301      	movs	r3, #1
 800a340:	e099      	b.n	800a476 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a342:	4b4f      	ldr	r3, [pc, #316]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a4e      	ldr	r2, [pc, #312]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a34c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a34e:	f7f8 fe3b 	bl	8002fc8 <HAL_GetTick>
 800a352:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a354:	e008      	b.n	800a368 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a356:	f7f8 fe37 	bl	8002fc8 <HAL_GetTick>
 800a35a:	4602      	mov	r2, r0
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	1ad3      	subs	r3, r2, r3
 800a360:	2b02      	cmp	r3, #2
 800a362:	d901      	bls.n	800a368 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a364:	2303      	movs	r3, #3
 800a366:	e086      	b.n	800a476 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a368:	4b45      	ldr	r3, [pc, #276]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a370:	2b00      	cmp	r3, #0
 800a372:	d1f0      	bne.n	800a356 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a374:	4b42      	ldr	r3, [pc, #264]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a378:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	051b      	lsls	r3, r3, #20
 800a382:	493f      	ldr	r1, [pc, #252]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a384:	4313      	orrs	r3, r2
 800a386:	628b      	str	r3, [r1, #40]	; 0x28
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	3b01      	subs	r3, #1
 800a38e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	3b01      	subs	r3, #1
 800a398:	025b      	lsls	r3, r3, #9
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	431a      	orrs	r2, r3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	3b01      	subs	r3, #1
 800a3a4:	041b      	lsls	r3, r3, #16
 800a3a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a3aa:	431a      	orrs	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	061b      	lsls	r3, r3, #24
 800a3b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a3b8:	4931      	ldr	r1, [pc, #196]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a3be:	4b30      	ldr	r3, [pc, #192]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	695b      	ldr	r3, [r3, #20]
 800a3ca:	492d      	ldr	r1, [pc, #180]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a3d0:	4b2b      	ldr	r3, [pc, #172]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	699b      	ldr	r3, [r3, #24]
 800a3dc:	4928      	ldr	r1, [pc, #160]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a3e2:	4b27      	ldr	r3, [pc, #156]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e6:	4a26      	ldr	r2, [pc, #152]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a3e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a3ee:	4b24      	ldr	r3, [pc, #144]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a3f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3f2:	4b24      	ldr	r3, [pc, #144]	; (800a484 <RCCEx_PLL3_Config+0x160>)
 800a3f4:	4013      	ands	r3, r2
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	69d2      	ldr	r2, [r2, #28]
 800a3fa:	00d2      	lsls	r2, r2, #3
 800a3fc:	4920      	ldr	r1, [pc, #128]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a3fe:	4313      	orrs	r3, r2
 800a400:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a402:	4b1f      	ldr	r3, [pc, #124]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a406:	4a1e      	ldr	r2, [pc, #120]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a40c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d106      	bne.n	800a422 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a414:	4b1a      	ldr	r3, [pc, #104]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a418:	4a19      	ldr	r2, [pc, #100]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a41a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a41e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a420:	e00f      	b.n	800a442 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	2b01      	cmp	r3, #1
 800a426:	d106      	bne.n	800a436 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a428:	4b15      	ldr	r3, [pc, #84]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a42c:	4a14      	ldr	r2, [pc, #80]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a42e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a432:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a434:	e005      	b.n	800a442 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a436:	4b12      	ldr	r3, [pc, #72]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a43a:	4a11      	ldr	r2, [pc, #68]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a43c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a440:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a442:	4b0f      	ldr	r3, [pc, #60]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a0e      	ldr	r2, [pc, #56]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a44c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a44e:	f7f8 fdbb 	bl	8002fc8 <HAL_GetTick>
 800a452:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a454:	e008      	b.n	800a468 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a456:	f7f8 fdb7 	bl	8002fc8 <HAL_GetTick>
 800a45a:	4602      	mov	r2, r0
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	1ad3      	subs	r3, r2, r3
 800a460:	2b02      	cmp	r3, #2
 800a462:	d901      	bls.n	800a468 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a464:	2303      	movs	r3, #3
 800a466:	e006      	b.n	800a476 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a468:	4b05      	ldr	r3, [pc, #20]	; (800a480 <RCCEx_PLL3_Config+0x15c>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a470:	2b00      	cmp	r3, #0
 800a472:	d0f0      	beq.n	800a456 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a474:	7bfb      	ldrb	r3, [r7, #15]
}
 800a476:	4618      	mov	r0, r3
 800a478:	3710      	adds	r7, #16
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	58024400 	.word	0x58024400
 800a484:	ffff0007 	.word	0xffff0007

0800a488 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b08a      	sub	sp, #40	; 0x28
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d101      	bne.n	800a49a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800a496:	2301      	movs	r3, #1
 800a498:	e1fb      	b.n	800a892 <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d113      	bne.n	800a4cc <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a96      	ldr	r2, [pc, #600]	; (800a704 <HAL_SAI_Init+0x27c>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d004      	beq.n	800a4b8 <HAL_SAI_Init+0x30>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a95      	ldr	r2, [pc, #596]	; (800a708 <HAL_SAI_Init+0x280>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d107      	bne.n	800a4c8 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d103      	bne.n	800a4c8 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d001      	beq.n	800a4cc <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	e1e2      	b.n	800a892 <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a8c      	ldr	r2, [pc, #560]	; (800a704 <HAL_SAI_Init+0x27c>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d004      	beq.n	800a4e0 <HAL_SAI_Init+0x58>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a8c      	ldr	r2, [pc, #560]	; (800a70c <HAL_SAI_Init+0x284>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d102      	bne.n	800a4e6 <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 800a4e0:	4b8b      	ldr	r3, [pc, #556]	; (800a710 <HAL_SAI_Init+0x288>)
 800a4e2:	61bb      	str	r3, [r7, #24]
 800a4e4:	e00e      	b.n	800a504 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a87      	ldr	r2, [pc, #540]	; (800a708 <HAL_SAI_Init+0x280>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d004      	beq.n	800a4fa <HAL_SAI_Init+0x72>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a87      	ldr	r2, [pc, #540]	; (800a714 <HAL_SAI_Init+0x28c>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d102      	bne.n	800a500 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 800a4fa:	4b87      	ldr	r3, [pc, #540]	; (800a718 <HAL_SAI_Init+0x290>)
 800a4fc:	61bb      	str	r3, [r7, #24]
 800a4fe:	e001      	b.n	800a504 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800a500:	2301      	movs	r3, #1
 800a502:	e1c6      	b.n	800a892 <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d106      	bne.n	800a51e <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f7f8 fb65 	bl	8002be8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 f9c6 	bl	800a8b0 <SAI_Disable>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d001      	beq.n	800a52e <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	e1b1      	b.n	800a892 <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2202      	movs	r2, #2
 800a532:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	2b02      	cmp	r3, #2
 800a53c:	d00c      	beq.n	800a558 <HAL_SAI_Init+0xd0>
 800a53e:	2b02      	cmp	r3, #2
 800a540:	d80d      	bhi.n	800a55e <HAL_SAI_Init+0xd6>
 800a542:	2b00      	cmp	r3, #0
 800a544:	d002      	beq.n	800a54c <HAL_SAI_Init+0xc4>
 800a546:	2b01      	cmp	r3, #1
 800a548:	d003      	beq.n	800a552 <HAL_SAI_Init+0xca>
 800a54a:	e008      	b.n	800a55e <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800a54c:	2300      	movs	r3, #0
 800a54e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a550:	e008      	b.n	800a564 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a552:	2310      	movs	r3, #16
 800a554:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a556:	e005      	b.n	800a564 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a558:	2320      	movs	r3, #32
 800a55a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a55c:	e002      	b.n	800a564 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 800a55e:	2300      	movs	r3, #0
 800a560:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a562:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	2b05      	cmp	r3, #5
 800a56a:	d822      	bhi.n	800a5b2 <HAL_SAI_Init+0x12a>
 800a56c:	a201      	add	r2, pc, #4	; (adr r2, 800a574 <HAL_SAI_Init+0xec>)
 800a56e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a572:	bf00      	nop
 800a574:	0800a58d 	.word	0x0800a58d
 800a578:	0800a593 	.word	0x0800a593
 800a57c:	0800a59b 	.word	0x0800a59b
 800a580:	0800a5b3 	.word	0x0800a5b3
 800a584:	0800a5b3 	.word	0x0800a5b3
 800a588:	0800a5a3 	.word	0x0800a5a3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800a58c:	2300      	movs	r3, #0
 800a58e:	61fb      	str	r3, [r7, #28]
      break;
 800a590:	e012      	b.n	800a5b8 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a596:	61fb      	str	r3, [r7, #28]
      break;
 800a598:	e00e      	b.n	800a5b8 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a59a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a59e:	61fb      	str	r3, [r7, #28]
      break;
 800a5a0:	e00a      	b.n	800a5b8 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a5a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a5a6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800a5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5aa:	f043 0303 	orr.w	r3, r3, #3
 800a5ae:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a5b0:	e002      	b.n	800a5b8 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	61fb      	str	r3, [r7, #28]
      break;
 800a5b6:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5bc:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a1b      	ldr	r3, [r3, #32]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	f000 8084 	beq.w	800a6d0 <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a4c      	ldr	r2, [pc, #304]	; (800a704 <HAL_SAI_Init+0x27c>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d004      	beq.n	800a5e0 <HAL_SAI_Init+0x158>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a4c      	ldr	r2, [pc, #304]	; (800a70c <HAL_SAI_Init+0x284>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d104      	bne.n	800a5ea <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a5e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a5e4:	f7fe fdb8 	bl	8009158 <HAL_RCCEx_GetPeriphCLKFreq>
 800a5e8:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4a46      	ldr	r2, [pc, #280]	; (800a708 <HAL_SAI_Init+0x280>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d104      	bne.n	800a5fe <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800a5f4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a5f8:	f7fe fdae 	bl	8009158 <HAL_RCCEx_GetPeriphCLKFreq>
 800a5fc:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4a44      	ldr	r2, [pc, #272]	; (800a714 <HAL_SAI_Init+0x28c>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d104      	bne.n	800a612 <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800a608:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a60c:	f7fe fda4 	bl	8009158 <HAL_RCCEx_GetPeriphCLKFreq>
 800a610:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	699b      	ldr	r3, [r3, #24]
 800a616:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a61a:	d120      	bne.n	800a65e <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a620:	2b04      	cmp	r3, #4
 800a622:	d102      	bne.n	800a62a <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800a624:	2340      	movs	r3, #64	; 0x40
 800a626:	60fb      	str	r3, [r7, #12]
 800a628:	e00a      	b.n	800a640 <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a62e:	2b08      	cmp	r3, #8
 800a630:	d103      	bne.n	800a63a <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800a632:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a636:	60fb      	str	r3, [r7, #12]
 800a638:	e002      	b.n	800a640 <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a63e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800a640:	697a      	ldr	r2, [r7, #20]
 800a642:	4613      	mov	r3, r2
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	4413      	add	r3, r2
 800a648:	005b      	lsls	r3, r3, #1
 800a64a:	4619      	mov	r1, r3
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6a1b      	ldr	r3, [r3, #32]
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	fb02 f303 	mul.w	r3, r2, r3
 800a656:	fbb1 f3f3 	udiv	r3, r1, r3
 800a65a:	613b      	str	r3, [r7, #16]
 800a65c:	e017      	b.n	800a68e <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a662:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a666:	d101      	bne.n	800a66c <HAL_SAI_Init+0x1e4>
 800a668:	2302      	movs	r3, #2
 800a66a:	e000      	b.n	800a66e <HAL_SAI_Init+0x1e6>
 800a66c:	2301      	movs	r3, #1
 800a66e:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800a670:	697a      	ldr	r2, [r7, #20]
 800a672:	4613      	mov	r3, r2
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	4413      	add	r3, r2
 800a678:	005b      	lsls	r3, r3, #1
 800a67a:	4619      	mov	r1, r3
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a1b      	ldr	r3, [r3, #32]
 800a680:	68ba      	ldr	r2, [r7, #8]
 800a682:	fb02 f303 	mul.w	r3, r2, r3
 800a686:	021b      	lsls	r3, r3, #8
 800a688:	fbb1 f3f3 	udiv	r3, r1, r3
 800a68c:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	4a22      	ldr	r2, [pc, #136]	; (800a71c <HAL_SAI_Init+0x294>)
 800a692:	fba2 2303 	umull	r2, r3, r2, r3
 800a696:	08da      	lsrs	r2, r3, #3
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800a69c:	6939      	ldr	r1, [r7, #16]
 800a69e:	4b1f      	ldr	r3, [pc, #124]	; (800a71c <HAL_SAI_Init+0x294>)
 800a6a0:	fba3 2301 	umull	r2, r3, r3, r1
 800a6a4:	08da      	lsrs	r2, r3, #3
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	4413      	add	r3, r2
 800a6ac:	005b      	lsls	r3, r3, #1
 800a6ae:	1aca      	subs	r2, r1, r3
 800a6b0:	2a08      	cmp	r2, #8
 800a6b2:	d904      	bls.n	800a6be <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b8:	1c5a      	adds	r2, r3, #1
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6c2:	2b04      	cmp	r3, #4
 800a6c4:	d104      	bne.n	800a6d0 <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ca:	085a      	lsrs	r2, r3, #1
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d003      	beq.n	800a6e0 <HAL_SAI_Init+0x258>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	2b02      	cmp	r3, #2
 800a6de:	d109      	bne.n	800a6f4 <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d101      	bne.n	800a6ec <HAL_SAI_Init+0x264>
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	e001      	b.n	800a6f0 <HAL_SAI_Init+0x268>
 800a6ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6f0:	623b      	str	r3, [r7, #32]
 800a6f2:	e017      	b.n	800a724 <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d111      	bne.n	800a720 <HAL_SAI_Init+0x298>
 800a6fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a700:	e00f      	b.n	800a722 <HAL_SAI_Init+0x29a>
 800a702:	bf00      	nop
 800a704:	40015804 	.word	0x40015804
 800a708:	58005404 	.word	0x58005404
 800a70c:	40015824 	.word	0x40015824
 800a710:	40015800 	.word	0x40015800
 800a714:	58005424 	.word	0x58005424
 800a718:	58005400 	.word	0x58005400
 800a71c:	cccccccd 	.word	0xcccccccd
 800a720:	2300      	movs	r3, #0
 800a722:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	6819      	ldr	r1, [r3, #0]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	4b5b      	ldr	r3, [pc, #364]	; (800a89c <HAL_SAI_Init+0x414>)
 800a730:	400b      	ands	r3, r1
 800a732:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	6819      	ldr	r1, [r3, #0]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	685a      	ldr	r2, [r3, #4]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a742:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a748:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a74e:	431a      	orrs	r2, r3
 800a750:	6a3b      	ldr	r3, [r7, #32]
 800a752:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 800a75c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	695b      	ldr	r3, [r3, #20]
 800a762:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a768:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76e:	051b      	lsls	r3, r3, #20
 800a770:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a776:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	691b      	ldr	r3, [r3, #16]
 800a77c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	430a      	orrs	r2, r1
 800a784:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	6859      	ldr	r1, [r3, #4]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	4b43      	ldr	r3, [pc, #268]	; (800a8a0 <HAL_SAI_Init+0x418>)
 800a792:	400b      	ands	r3, r1
 800a794:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	6859      	ldr	r1, [r3, #4]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	69da      	ldr	r2, [r3, #28]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7a4:	431a      	orrs	r2, r3
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7aa:	431a      	orrs	r2, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	430a      	orrs	r2, r1
 800a7b2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	6899      	ldr	r1, [r3, #8]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	4b39      	ldr	r3, [pc, #228]	; (800a8a4 <HAL_SAI_Init+0x41c>)
 800a7c0:	400b      	ands	r3, r1
 800a7c2:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	6899      	ldr	r1, [r3, #8]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ce:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a7d4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800a7da:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800a7e0:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7e6:	3b01      	subs	r3, #1
 800a7e8:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a7ea:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	430a      	orrs	r2, r1
 800a7f2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	68d9      	ldr	r1, [r3, #12]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a802:	400b      	ands	r3, r1
 800a804:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68d9      	ldr	r1, [r3, #12]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a814:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a81a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a81c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a822:	3b01      	subs	r3, #1
 800a824:	021b      	lsls	r3, r3, #8
 800a826:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	430a      	orrs	r2, r1
 800a82e:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a1c      	ldr	r2, [pc, #112]	; (800a8a8 <HAL_SAI_Init+0x420>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d004      	beq.n	800a844 <HAL_SAI_Init+0x3bc>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a1b      	ldr	r2, [pc, #108]	; (800a8ac <HAL_SAI_Init+0x424>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d119      	bne.n	800a878 <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a848:	f023 0201 	bic.w	r2, r3, #1
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a856:	2b01      	cmp	r3, #1
 800a858:	d10e      	bne.n	800a878 <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a862:	3b01      	subs	r3, #1
 800a864:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a866:	431a      	orrs	r2, r3
 800a868:	69bb      	ldr	r3, [r7, #24]
 800a86a:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800a86c:	69bb      	ldr	r3, [r7, #24]
 800a86e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a870:	f043 0201 	orr.w	r2, r3, #1
 800a874:	69bb      	ldr	r3, [r7, #24]
 800a876:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2201      	movs	r2, #1
 800a884:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800a890:	2300      	movs	r3, #0
}
 800a892:	4618      	mov	r0, r3
 800a894:	3728      	adds	r7, #40	; 0x28
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	f005c010 	.word	0xf005c010
 800a8a0:	ffff1ff0 	.word	0xffff1ff0
 800a8a4:	fff88000 	.word	0xfff88000
 800a8a8:	40015804 	.word	0x40015804
 800a8ac:	58005404 	.word	0x58005404

0800a8b0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a8b8:	4b18      	ldr	r3, [pc, #96]	; (800a91c <SAI_Disable+0x6c>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a18      	ldr	r2, [pc, #96]	; (800a920 <SAI_Disable+0x70>)
 800a8be:	fba2 2303 	umull	r2, r3, r2, r3
 800a8c2:	0b1b      	lsrs	r3, r3, #12
 800a8c4:	009b      	lsls	r3, r3, #2
 800a8c6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a8da:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d10a      	bne.n	800a8f8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800a8f2:	2303      	movs	r3, #3
 800a8f4:	72fb      	strb	r3, [r7, #11]
      break;
 800a8f6:	e009      	b.n	800a90c <SAI_Disable+0x5c>
    }
    count--;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	3b01      	subs	r3, #1
 800a8fc:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d1e7      	bne.n	800a8dc <SAI_Disable+0x2c>

  return status;
 800a90c:	7afb      	ldrb	r3, [r7, #11]
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3714      	adds	r7, #20
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	24000000 	.word	0x24000000
 800a920:	95cbec1b 	.word	0x95cbec1b

0800a924 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b08a      	sub	sp, #40	; 0x28
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d101      	bne.n	800a936 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a932:	2301      	movs	r3, #1
 800a934:	e075      	b.n	800aa22 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d105      	bne.n	800a94e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2200      	movs	r2, #0
 800a946:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f7f7 ff0f 	bl	800276c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2204      	movs	r2, #4
 800a952:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 f868 	bl	800aa2c <HAL_SD_InitCard>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d001      	beq.n	800a966 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a962:	2301      	movs	r3, #1
 800a964:	e05d      	b.n	800aa22 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a966:	f107 0308 	add.w	r3, r7, #8
 800a96a:	4619      	mov	r1, r3
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 fa97 	bl	800aea0 <HAL_SD_GetCardStatus>
 800a972:	4603      	mov	r3, r0
 800a974:	2b00      	cmp	r3, #0
 800a976:	d001      	beq.n	800a97c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800a978:	2301      	movs	r3, #1
 800a97a:	e052      	b.n	800aa22 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800a97c:	7e3b      	ldrb	r3, [r7, #24]
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a982:	7e7b      	ldrb	r3, [r7, #25]
 800a984:	b2db      	uxtb	r3, r3
 800a986:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d10a      	bne.n	800a9a6 <HAL_SD_Init+0x82>
 800a990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a992:	2b00      	cmp	r3, #0
 800a994:	d102      	bne.n	800a99c <HAL_SD_Init+0x78>
 800a996:	6a3b      	ldr	r3, [r7, #32]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d004      	beq.n	800a9a6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a9a2:	659a      	str	r2, [r3, #88]	; 0x58
 800a9a4:	e00b      	b.n	800a9be <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d104      	bne.n	800a9b8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a9b4:	659a      	str	r2, [r3, #88]	; 0x58
 800a9b6:	e002      	b.n	800a9be <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	68db      	ldr	r3, [r3, #12]
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 fb29 	bl	800b01c <HAL_SD_ConfigWideBusOperation>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d001      	beq.n	800a9d4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	e026      	b.n	800aa22 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800a9d4:	f7f8 faf8 	bl	8002fc8 <HAL_GetTick>
 800a9d8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a9da:	e011      	b.n	800aa00 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a9dc:	f7f8 faf4 	bl	8002fc8 <HAL_GetTick>
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	69fb      	ldr	r3, [r7, #28]
 800a9e4:	1ad3      	subs	r3, r2, r3
 800a9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ea:	d109      	bne.n	800aa00 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a9f2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800a9fc:	2303      	movs	r3, #3
 800a9fe:	e010      	b.n	800aa22 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 fc1d 	bl	800b240 <HAL_SD_GetCardState>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b04      	cmp	r3, #4
 800aa0a:	d1e7      	bne.n	800a9dc <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2200      	movs	r2, #0
 800aa16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800aa20:	2300      	movs	r3, #0
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3728      	adds	r7, #40	; 0x28
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
	...

0800aa2c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800aa2c:	b590      	push	{r4, r7, lr}
 800aa2e:	b08d      	sub	sp, #52	; 0x34
 800aa30:	af02      	add	r7, sp, #8
 800aa32:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 800aa34:	2300      	movs	r3, #0
 800aa36:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800aa40:	2300      	movs	r3, #0
 800aa42:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800aa44:	2300      	movs	r3, #0
 800aa46:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800aa48:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800aa4c:	f7fe fb84 	bl	8009158 <HAL_RCCEx_GetPeriphCLKFreq>
 800aa50:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800aa52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d109      	bne.n	800aa6c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800aa66:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e06a      	b.n	800ab42 <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800aa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6e:	0a1b      	lsrs	r3, r3, #8
 800aa70:	4a36      	ldr	r2, [pc, #216]	; (800ab4c <HAL_SD_InitCard+0x120>)
 800aa72:	fba2 2303 	umull	r2, r3, r2, r3
 800aa76:	091b      	lsrs	r3, r3, #4
 800aa78:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681c      	ldr	r4, [r3, #0]
 800aa7e:	466a      	mov	r2, sp
 800aa80:	f107 0318 	add.w	r3, r7, #24
 800aa84:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aa88:	e882 0003 	stmia.w	r2, {r0, r1}
 800aa8c:	f107 030c 	add.w	r3, r7, #12
 800aa90:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aa92:	4620      	mov	r0, r4
 800aa94:	f002 ff38 	bl	800d908 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f002 ff6a 	bl	800d976 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	005b      	lsls	r3, r3, #1
 800aaa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaa8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800aaae:	4a28      	ldr	r2, [pc, #160]	; (800ab50 <HAL_SD_InitCard+0x124>)
 800aab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aab6:	3301      	adds	r3, #1
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7f8 fa91 	bl	8002fe0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f000 fcac 	bl	800b41c <SD_PowerON>
 800aac4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aac6:	6a3b      	ldr	r3, [r7, #32]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d00b      	beq.n	800aae4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aad8:	6a3b      	ldr	r3, [r7, #32]
 800aada:	431a      	orrs	r2, r3
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800aae0:	2301      	movs	r3, #1
 800aae2:	e02e      	b.n	800ab42 <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 fbcb 	bl	800b280 <SD_InitCard>
 800aaea:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aaec:	6a3b      	ldr	r3, [r7, #32]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d00b      	beq.n	800ab0a <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aafe:	6a3b      	ldr	r3, [r7, #32]
 800ab00:	431a      	orrs	r2, r3
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ab06:	2301      	movs	r3, #1
 800ab08:	e01b      	b.n	800ab42 <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ab12:	4618      	mov	r0, r3
 800ab14:	f002 ffc4 	bl	800daa0 <SDMMC_CmdBlockLength>
 800ab18:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ab1a:	6a3b      	ldr	r3, [r7, #32]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d00f      	beq.n	800ab40 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a0b      	ldr	r2, [pc, #44]	; (800ab54 <HAL_SD_InitCard+0x128>)
 800ab26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab2c:	6a3b      	ldr	r3, [r7, #32]
 800ab2e:	431a      	orrs	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2201      	movs	r2, #1
 800ab38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	e000      	b.n	800ab42 <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 800ab40:	2300      	movs	r3, #0
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	372c      	adds	r7, #44	; 0x2c
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd90      	pop	{r4, r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	014f8b59 	.word	0x014f8b59
 800ab50:	00012110 	.word	0x00012110
 800ab54:	1fe00fff 	.word	0x1fe00fff

0800ab58 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab66:	0f9b      	lsrs	r3, r3, #30
 800ab68:	b2da      	uxtb	r2, r3
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab72:	0e9b      	lsrs	r3, r3, #26
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	f003 030f 	and.w	r3, r3, #15
 800ab7a:	b2da      	uxtb	r2, r3
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab84:	0e1b      	lsrs	r3, r3, #24
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	f003 0303 	and.w	r3, r3, #3
 800ab8c:	b2da      	uxtb	r2, r3
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab96:	0c1b      	lsrs	r3, r3, #16
 800ab98:	b2da      	uxtb	r2, r3
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aba2:	0a1b      	lsrs	r3, r3, #8
 800aba4:	b2da      	uxtb	r2, r3
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abae:	b2da      	uxtb	r2, r3
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abb8:	0d1b      	lsrs	r3, r3, #20
 800abba:	b29a      	uxth	r2, r3
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abc4:	0c1b      	lsrs	r3, r3, #16
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	f003 030f 	and.w	r3, r3, #15
 800abcc:	b2da      	uxtb	r2, r3
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abd6:	0bdb      	lsrs	r3, r3, #15
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	f003 0301 	and.w	r3, r3, #1
 800abde:	b2da      	uxtb	r2, r3
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abe8:	0b9b      	lsrs	r3, r3, #14
 800abea:	b2db      	uxtb	r3, r3
 800abec:	f003 0301 	and.w	r3, r3, #1
 800abf0:	b2da      	uxtb	r2, r3
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abfa:	0b5b      	lsrs	r3, r3, #13
 800abfc:	b2db      	uxtb	r3, r3
 800abfe:	f003 0301 	and.w	r3, r3, #1
 800ac02:	b2da      	uxtb	r2, r3
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac0c:	0b1b      	lsrs	r3, r3, #12
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	f003 0301 	and.w	r3, r3, #1
 800ac14:	b2da      	uxtb	r2, r3
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d163      	bne.n	800acf0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac2c:	009a      	lsls	r2, r3, #2
 800ac2e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ac32:	4013      	ands	r3, r2
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800ac38:	0f92      	lsrs	r2, r2, #30
 800ac3a:	431a      	orrs	r2, r3
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac44:	0edb      	lsrs	r3, r3, #27
 800ac46:	b2db      	uxtb	r3, r3
 800ac48:	f003 0307 	and.w	r3, r3, #7
 800ac4c:	b2da      	uxtb	r2, r3
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac56:	0e1b      	lsrs	r3, r3, #24
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	f003 0307 	and.w	r3, r3, #7
 800ac5e:	b2da      	uxtb	r2, r3
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac68:	0d5b      	lsrs	r3, r3, #21
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	f003 0307 	and.w	r3, r3, #7
 800ac70:	b2da      	uxtb	r2, r3
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac7a:	0c9b      	lsrs	r3, r3, #18
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	f003 0307 	and.w	r3, r3, #7
 800ac82:	b2da      	uxtb	r2, r3
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac8c:	0bdb      	lsrs	r3, r3, #15
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	f003 0307 	and.w	r3, r3, #7
 800ac94:	b2da      	uxtb	r2, r3
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	1c5a      	adds	r2, r3, #1
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	7e1b      	ldrb	r3, [r3, #24]
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	f003 0307 	and.w	r3, r3, #7
 800acae:	3302      	adds	r3, #2
 800acb0:	2201      	movs	r2, #1
 800acb2:	fa02 f303 	lsl.w	r3, r2, r3
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800acba:	fb02 f203 	mul.w	r2, r2, r3
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	7a1b      	ldrb	r3, [r3, #8]
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	f003 030f 	and.w	r3, r3, #15
 800accc:	2201      	movs	r2, #1
 800acce:	409a      	lsls	r2, r3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800acdc:	0a52      	lsrs	r2, r2, #9
 800acde:	fb02 f203 	mul.w	r2, r2, r3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800acec:	655a      	str	r2, [r3, #84]	; 0x54
 800acee:	e031      	b.n	800ad54 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d11d      	bne.n	800ad34 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acfc:	041b      	lsls	r3, r3, #16
 800acfe:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad06:	0c1b      	lsrs	r3, r3, #16
 800ad08:	431a      	orrs	r2, r3
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	3301      	adds	r3, #1
 800ad14:	029a      	lsls	r2, r3, #10
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad28:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	655a      	str	r2, [r3, #84]	; 0x54
 800ad32:	e00f      	b.n	800ad54 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4a58      	ldr	r2, [pc, #352]	; (800ae9c <HAL_SD_GetCardCSD+0x344>)
 800ad3a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad40:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800ad50:	2301      	movs	r3, #1
 800ad52:	e09d      	b.n	800ae90 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad58:	0b9b      	lsrs	r3, r3, #14
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	f003 0301 	and.w	r3, r3, #1
 800ad60:	b2da      	uxtb	r2, r3
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad6a:	09db      	lsrs	r3, r3, #7
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad72:	b2da      	uxtb	r2, r3
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad82:	b2da      	uxtb	r2, r3
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad8c:	0fdb      	lsrs	r3, r3, #31
 800ad8e:	b2da      	uxtb	r2, r3
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad98:	0f5b      	lsrs	r3, r3, #29
 800ad9a:	b2db      	uxtb	r3, r3
 800ad9c:	f003 0303 	and.w	r3, r3, #3
 800ada0:	b2da      	uxtb	r2, r3
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adaa:	0e9b      	lsrs	r3, r3, #26
 800adac:	b2db      	uxtb	r3, r3
 800adae:	f003 0307 	and.w	r3, r3, #7
 800adb2:	b2da      	uxtb	r2, r3
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adbc:	0d9b      	lsrs	r3, r3, #22
 800adbe:	b2db      	uxtb	r3, r3
 800adc0:	f003 030f 	and.w	r3, r3, #15
 800adc4:	b2da      	uxtb	r2, r3
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adce:	0d5b      	lsrs	r3, r3, #21
 800add0:	b2db      	uxtb	r3, r3
 800add2:	f003 0301 	and.w	r3, r3, #1
 800add6:	b2da      	uxtb	r2, r3
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	2200      	movs	r2, #0
 800ade2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adea:	0c1b      	lsrs	r3, r3, #16
 800adec:	b2db      	uxtb	r3, r3
 800adee:	f003 0301 	and.w	r3, r3, #1
 800adf2:	b2da      	uxtb	r2, r3
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adfe:	0bdb      	lsrs	r3, r3, #15
 800ae00:	b2db      	uxtb	r3, r3
 800ae02:	f003 0301 	and.w	r3, r3, #1
 800ae06:	b2da      	uxtb	r2, r3
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae12:	0b9b      	lsrs	r3, r3, #14
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	f003 0301 	and.w	r3, r3, #1
 800ae1a:	b2da      	uxtb	r2, r3
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae26:	0b5b      	lsrs	r3, r3, #13
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	f003 0301 	and.w	r3, r3, #1
 800ae2e:	b2da      	uxtb	r2, r3
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae3a:	0b1b      	lsrs	r3, r3, #12
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	f003 0301 	and.w	r3, r3, #1
 800ae42:	b2da      	uxtb	r2, r3
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae4e:	0a9b      	lsrs	r3, r3, #10
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	f003 0303 	and.w	r3, r3, #3
 800ae56:	b2da      	uxtb	r2, r3
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae62:	0a1b      	lsrs	r3, r3, #8
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	f003 0303 	and.w	r3, r3, #3
 800ae6a:	b2da      	uxtb	r2, r3
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae76:	085b      	lsrs	r3, r3, #1
 800ae78:	b2db      	uxtb	r3, r3
 800ae7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae7e:	b2da      	uxtb	r2, r3
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	370c      	adds	r7, #12
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr
 800ae9c:	1fe00fff 	.word	0x1fe00fff

0800aea0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b094      	sub	sp, #80	; 0x50
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	2b03      	cmp	r3, #3
 800aeba:	d101      	bne.n	800aec0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800aebc:	2301      	movs	r3, #1
 800aebe:	e0a7      	b.n	800b010 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800aec0:	f107 0308 	add.w	r3, r7, #8
 800aec4:	4619      	mov	r1, r3
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 fb36 	bl	800b538 <SD_SendSDStatus>
 800aecc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800aece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d011      	beq.n	800aef8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a4f      	ldr	r2, [pc, #316]	; (800b018 <HAL_SD_GetCardStatus+0x178>)
 800aeda:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aee2:	431a      	orrs	r2, r3
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2201      	movs	r2, #1
 800aeec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800aef0:	2301      	movs	r3, #1
 800aef2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800aef6:	e070      	b.n	800afda <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	099b      	lsrs	r3, r3, #6
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	f003 0303 	and.w	r3, r3, #3
 800af02:	b2da      	uxtb	r2, r3
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	095b      	lsrs	r3, r3, #5
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	f003 0301 	and.w	r3, r3, #1
 800af12:	b2da      	uxtb	r2, r3
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	0a1b      	lsrs	r3, r3, #8
 800af1c:	b29b      	uxth	r3, r3
 800af1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800af22:	b29a      	uxth	r2, r3
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	0e1b      	lsrs	r3, r3, #24
 800af28:	b29b      	uxth	r3, r3
 800af2a:	4313      	orrs	r3, r2
 800af2c:	b29a      	uxth	r2, r3
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	061a      	lsls	r2, r3, #24
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	021b      	lsls	r3, r3, #8
 800af3a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800af3e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	0a1b      	lsrs	r3, r3, #8
 800af44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800af48:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	0e1b      	lsrs	r3, r3, #24
 800af4e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	b2da      	uxtb	r2, r3
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	0a1b      	lsrs	r3, r3, #8
 800af60:	b2da      	uxtb	r2, r3
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	0d1b      	lsrs	r3, r3, #20
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	f003 030f 	and.w	r3, r3, #15
 800af70:	b2da      	uxtb	r2, r3
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	0c1b      	lsrs	r3, r3, #16
 800af7a:	b29b      	uxth	r3, r3
 800af7c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800af80:	b29a      	uxth	r2, r3
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	b29b      	uxth	r3, r3
 800af86:	b2db      	uxtb	r3, r3
 800af88:	b29b      	uxth	r3, r3
 800af8a:	4313      	orrs	r3, r2
 800af8c:	b29a      	uxth	r2, r3
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	0a9b      	lsrs	r3, r3, #10
 800af96:	b2db      	uxtb	r3, r3
 800af98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af9c:	b2da      	uxtb	r2, r3
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	0a1b      	lsrs	r3, r3, #8
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	f003 0303 	and.w	r3, r3, #3
 800afac:	b2da      	uxtb	r2, r3
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	091b      	lsrs	r3, r3, #4
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	f003 030f 	and.w	r3, r3, #15
 800afbc:	b2da      	uxtb	r2, r3
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	f003 030f 	and.w	r3, r3, #15
 800afca:	b2da      	uxtb	r2, r3
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800afd0:	69bb      	ldr	r3, [r7, #24]
 800afd2:	0e1b      	lsrs	r3, r3, #24
 800afd4:	b2da      	uxtb	r2, r3
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f44f 7100 	mov.w	r1, #512	; 0x200
 800afe2:	4618      	mov	r0, r3
 800afe4:	f002 fd5c 	bl	800daa0 <SDMMC_CmdBlockLength>
 800afe8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800afea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afec:	2b00      	cmp	r3, #0
 800afee:	d00d      	beq.n	800b00c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4a08      	ldr	r2, [pc, #32]	; (800b018 <HAL_SD_GetCardStatus+0x178>)
 800aff6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800affc:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2201      	movs	r2, #1
 800b002:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800b006:	2301      	movs	r3, #1
 800b008:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800b00c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800b010:	4618      	mov	r0, r3
 800b012:	3750      	adds	r7, #80	; 0x50
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}
 800b018:	1fe00fff 	.word	0x1fe00fff

0800b01c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b01c:	b590      	push	{r4, r7, lr}
 800b01e:	b08d      	sub	sp, #52	; 0x34
 800b020:	af02      	add	r7, sp, #8
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 800b026:	2300      	movs	r3, #0
 800b028:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2203      	movs	r2, #3
 800b034:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b03c:	2b03      	cmp	r3, #3
 800b03e:	d02e      	beq.n	800b09e <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b046:	d106      	bne.n	800b056 <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b04c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	635a      	str	r2, [r3, #52]	; 0x34
 800b054:	e029      	b.n	800b0aa <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b05c:	d10a      	bne.n	800b074 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 fb62 	bl	800b728 <SD_WideBus_Enable>
 800b064:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b06a:	69fb      	ldr	r3, [r7, #28]
 800b06c:	431a      	orrs	r2, r3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	635a      	str	r2, [r3, #52]	; 0x34
 800b072:	e01a      	b.n	800b0aa <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d10a      	bne.n	800b090 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 fb9f 	bl	800b7be <SD_WideBus_Disable>
 800b080:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b086:	69fb      	ldr	r3, [r7, #28]
 800b088:	431a      	orrs	r2, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	635a      	str	r2, [r3, #52]	; 0x34
 800b08e:	e00c      	b.n	800b0aa <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b094:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	635a      	str	r2, [r3, #52]	; 0x34
 800b09c:	e005      	b.n	800b0aa <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0a2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d007      	beq.n	800b0c2 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a5e      	ldr	r2, [pc, #376]	; (800b230 <HAL_SD_ConfigWideBusOperation+0x214>)
 800b0b8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b0c0:	e094      	b.n	800b1ec <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800b0c2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800b0c6:	f7fe f847 	bl	8009158 <HAL_RCCEx_GetPeriphCLKFreq>
 800b0ca:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 800b0cc:	6a3b      	ldr	r3, [r7, #32]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	f000 8083 	beq.w	800b1da <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	691b      	ldr	r3, [r3, #16]
 800b0e8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	695a      	ldr	r2, [r3, #20]
 800b0ee:	6a3b      	ldr	r3, [r7, #32]
 800b0f0:	4950      	ldr	r1, [pc, #320]	; (800b234 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b0f2:	fba1 1303 	umull	r1, r3, r1, r3
 800b0f6:	0e1b      	lsrs	r3, r3, #24
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d303      	bcc.n	800b104 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	695b      	ldr	r3, [r3, #20]
 800b100:	61bb      	str	r3, [r7, #24]
 800b102:	e05a      	b.n	800b1ba <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b10c:	d103      	bne.n	800b116 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	695b      	ldr	r3, [r3, #20]
 800b112:	61bb      	str	r3, [r7, #24]
 800b114:	e051      	b.n	800b1ba <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b11a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b11e:	d126      	bne.n	800b16e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	695b      	ldr	r3, [r3, #20]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d10e      	bne.n	800b146 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800b128:	6a3b      	ldr	r3, [r7, #32]
 800b12a:	4a43      	ldr	r2, [pc, #268]	; (800b238 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d906      	bls.n	800b13e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800b130:	6a3b      	ldr	r3, [r7, #32]
 800b132:	4a40      	ldr	r2, [pc, #256]	; (800b234 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b134:	fba2 2303 	umull	r2, r3, r2, r3
 800b138:	0e5b      	lsrs	r3, r3, #25
 800b13a:	61bb      	str	r3, [r7, #24]
 800b13c:	e03d      	b.n	800b1ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	695b      	ldr	r3, [r3, #20]
 800b142:	61bb      	str	r3, [r7, #24]
 800b144:	e039      	b.n	800b1ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	695b      	ldr	r3, [r3, #20]
 800b14a:	005b      	lsls	r3, r3, #1
 800b14c:	6a3a      	ldr	r2, [r7, #32]
 800b14e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b152:	4a39      	ldr	r2, [pc, #228]	; (800b238 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d906      	bls.n	800b166 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800b158:	6a3b      	ldr	r3, [r7, #32]
 800b15a:	4a36      	ldr	r2, [pc, #216]	; (800b234 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b15c:	fba2 2303 	umull	r2, r3, r2, r3
 800b160:	0e5b      	lsrs	r3, r3, #25
 800b162:	61bb      	str	r3, [r7, #24]
 800b164:	e029      	b.n	800b1ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	695b      	ldr	r3, [r3, #20]
 800b16a:	61bb      	str	r3, [r7, #24]
 800b16c:	e025      	b.n	800b1ba <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	695b      	ldr	r3, [r3, #20]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d10e      	bne.n	800b194 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800b176:	6a3b      	ldr	r3, [r7, #32]
 800b178:	4a30      	ldr	r2, [pc, #192]	; (800b23c <HAL_SD_ConfigWideBusOperation+0x220>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d906      	bls.n	800b18c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800b17e:	6a3b      	ldr	r3, [r7, #32]
 800b180:	4a2c      	ldr	r2, [pc, #176]	; (800b234 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b182:	fba2 2303 	umull	r2, r3, r2, r3
 800b186:	0e1b      	lsrs	r3, r3, #24
 800b188:	61bb      	str	r3, [r7, #24]
 800b18a:	e016      	b.n	800b1ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	695b      	ldr	r3, [r3, #20]
 800b190:	61bb      	str	r3, [r7, #24]
 800b192:	e012      	b.n	800b1ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	695b      	ldr	r3, [r3, #20]
 800b198:	005b      	lsls	r3, r3, #1
 800b19a:	6a3a      	ldr	r2, [r7, #32]
 800b19c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1a0:	4a26      	ldr	r2, [pc, #152]	; (800b23c <HAL_SD_ConfigWideBusOperation+0x220>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d906      	bls.n	800b1b4 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800b1a6:	6a3b      	ldr	r3, [r7, #32]
 800b1a8:	4a22      	ldr	r2, [pc, #136]	; (800b234 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b1aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b1ae:	0e1b      	lsrs	r3, r3, #24
 800b1b0:	61bb      	str	r3, [r7, #24]
 800b1b2:	e002      	b.n	800b1ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	695b      	ldr	r3, [r3, #20]
 800b1b8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681c      	ldr	r4, [r3, #0]
 800b1be:	466a      	mov	r2, sp
 800b1c0:	f107 0314 	add.w	r3, r7, #20
 800b1c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b1c8:	e882 0003 	stmia.w	r2, {r0, r1}
 800b1cc:	f107 0308 	add.w	r3, r7, #8
 800b1d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	f002 fb98 	bl	800d908 <SDMMC_Init>
 800b1d8:	e008      	b.n	800b1ec <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f002 fc53 	bl	800daa0 <SDMMC_CmdBlockLength>
 800b1fa:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b1fc:	69fb      	ldr	r3, [r7, #28]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d00c      	beq.n	800b21c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a0a      	ldr	r2, [pc, #40]	; (800b230 <HAL_SD_ConfigWideBusOperation+0x214>)
 800b208:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	431a      	orrs	r2, r3
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800b216:	2301      	movs	r3, #1
 800b218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2201      	movs	r2, #1
 800b220:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800b224:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b228:	4618      	mov	r0, r3
 800b22a:	372c      	adds	r7, #44	; 0x2c
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd90      	pop	{r4, r7, pc}
 800b230:	1fe00fff 	.word	0x1fe00fff
 800b234:	55e63b89 	.word	0x55e63b89
 800b238:	02faf080 	.word	0x02faf080
 800b23c:	017d7840 	.word	0x017d7840

0800b240 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b086      	sub	sp, #24
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b248:	2300      	movs	r3, #0
 800b24a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b24c:	f107 030c 	add.w	r3, r7, #12
 800b250:	4619      	mov	r1, r3
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 fa40 	bl	800b6d8 <SD_SendStatus>
 800b258:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d005      	beq.n	800b26c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	431a      	orrs	r2, r3
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	0a5b      	lsrs	r3, r3, #9
 800b270:	f003 030f 	and.w	r3, r3, #15
 800b274:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b276:	693b      	ldr	r3, [r7, #16]
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3718      	adds	r7, #24
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b090      	sub	sp, #64	; 0x40
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800b288:	2300      	movs	r3, #0
 800b28a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800b28c:	f7f7 fe9c 	bl	8002fc8 <HAL_GetTick>
 800b290:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4618      	mov	r0, r3
 800b298:	f002 fb7e 	bl	800d998 <SDMMC_GetPowerState>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d102      	bne.n	800b2a8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b2a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b2a6:	e0b5      	b.n	800b414 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ac:	2b03      	cmp	r3, #3
 800b2ae:	d02e      	beq.n	800b30e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f002 fcff 	bl	800dcb8 <SDMMC_CmdSendCID>
 800b2ba:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800b2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d001      	beq.n	800b2c6 <SD_InitCard+0x46>
    {
      return errorstate;
 800b2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c4:	e0a6      	b.n	800b414 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2100      	movs	r1, #0
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f002 fba8 	bl	800da22 <SDMMC_GetResponse>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2104      	movs	r1, #4
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f002 fb9f 	bl	800da22 <SDMMC_GetResponse>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	2108      	movs	r1, #8
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f002 fb96 	bl	800da22 <SDMMC_GetResponse>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	210c      	movs	r1, #12
 800b302:	4618      	mov	r0, r3
 800b304:	f002 fb8d 	bl	800da22 <SDMMC_GetResponse>
 800b308:	4602      	mov	r2, r0
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b312:	2b03      	cmp	r3, #3
 800b314:	d01d      	beq.n	800b352 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800b316:	e019      	b.n	800b34c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f107 020a 	add.w	r2, r7, #10
 800b320:	4611      	mov	r1, r2
 800b322:	4618      	mov	r0, r3
 800b324:	f002 fd07 	bl	800dd36 <SDMMC_CmdSetRelAdd>
 800b328:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800b32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d001      	beq.n	800b334 <SD_InitCard+0xb4>
      {
        return errorstate;
 800b330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b332:	e06f      	b.n	800b414 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800b334:	f7f7 fe48 	bl	8002fc8 <HAL_GetTick>
 800b338:	4602      	mov	r2, r0
 800b33a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b33c:	1ad3      	subs	r3, r2, r3
 800b33e:	f241 3287 	movw	r2, #4999	; 0x1387
 800b342:	4293      	cmp	r3, r2
 800b344:	d902      	bls.n	800b34c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800b346:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b34a:	e063      	b.n	800b414 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800b34c:	897b      	ldrh	r3, [r7, #10]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d0e2      	beq.n	800b318 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b356:	2b03      	cmp	r3, #3
 800b358:	d036      	beq.n	800b3c8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b35a:	897b      	ldrh	r3, [r7, #10]
 800b35c:	461a      	mov	r2, r3
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681a      	ldr	r2, [r3, #0]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b36a:	041b      	lsls	r3, r3, #16
 800b36c:	4619      	mov	r1, r3
 800b36e:	4610      	mov	r0, r2
 800b370:	f002 fcc1 	bl	800dcf6 <SDMMC_CmdSendCSD>
 800b374:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800b376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d001      	beq.n	800b380 <SD_InitCard+0x100>
    {
      return errorstate;
 800b37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37e:	e049      	b.n	800b414 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	2100      	movs	r1, #0
 800b386:	4618      	mov	r0, r3
 800b388:	f002 fb4b 	bl	800da22 <SDMMC_GetResponse>
 800b38c:	4602      	mov	r2, r0
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	2104      	movs	r1, #4
 800b398:	4618      	mov	r0, r3
 800b39a:	f002 fb42 	bl	800da22 <SDMMC_GetResponse>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2108      	movs	r1, #8
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f002 fb39 	bl	800da22 <SDMMC_GetResponse>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	210c      	movs	r1, #12
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f002 fb30 	bl	800da22 <SDMMC_GetResponse>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	2104      	movs	r1, #4
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f002 fb27 	bl	800da22 <SDMMC_GetResponse>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	0d1a      	lsrs	r2, r3, #20
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b3dc:	f107 030c 	add.w	r3, r7, #12
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f7ff fbb8 	bl	800ab58 <HAL_SD_GetCardCSD>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d002      	beq.n	800b3f4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b3ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b3f2:	e00f      	b.n	800b414 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3fc:	041b      	lsls	r3, r3, #16
 800b3fe:	4619      	mov	r1, r3
 800b400:	4610      	mov	r0, r2
 800b402:	f002 fb70 	bl	800dae6 <SDMMC_CmdSelDesel>
 800b406:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800b408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d001      	beq.n	800b412 <SD_InitCard+0x192>
  {
    return errorstate;
 800b40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b410:	e000      	b.n	800b414 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b412:	2300      	movs	r3, #0
}
 800b414:	4618      	mov	r0, r3
 800b416:	3740      	adds	r7, #64	; 0x40
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b086      	sub	sp, #24
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b424:	2300      	movs	r3, #0
 800b426:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800b428:	2300      	movs	r3, #0
 800b42a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800b42c:	2300      	movs	r3, #0
 800b42e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4618      	mov	r0, r3
 800b436:	f002 fb79 	bl	800db2c <SDMMC_CmdGoIdleState>
 800b43a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d001      	beq.n	800b446 <SD_PowerON+0x2a>
  {
    return errorstate;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	e072      	b.n	800b52c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4618      	mov	r0, r3
 800b44c:	f002 fb8c 	bl	800db68 <SDMMC_CmdOperCond>
 800b450:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b458:	d10d      	bne.n	800b476 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2200      	movs	r2, #0
 800b45e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4618      	mov	r0, r3
 800b466:	f002 fb61 	bl	800db2c <SDMMC_CmdGoIdleState>
 800b46a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d004      	beq.n	800b47c <SD_PowerON+0x60>
    {
      return errorstate;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	e05a      	b.n	800b52c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2201      	movs	r2, #1
 800b47a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b480:	2b01      	cmp	r3, #1
 800b482:	d137      	bne.n	800b4f4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	2100      	movs	r1, #0
 800b48a:	4618      	mov	r0, r3
 800b48c:	f002 fb8c 	bl	800dba8 <SDMMC_CmdAppCommand>
 800b490:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d02d      	beq.n	800b4f4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b498:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b49c:	e046      	b.n	800b52c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f002 fb7f 	bl	800dba8 <SDMMC_CmdAppCommand>
 800b4aa:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d001      	beq.n	800b4b6 <SD_PowerON+0x9a>
    {
      return errorstate;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	e03a      	b.n	800b52c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	491e      	ldr	r1, [pc, #120]	; (800b534 <SD_PowerON+0x118>)
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f002 fb96 	bl	800dbee <SDMMC_CmdAppOperCommand>
 800b4c2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d002      	beq.n	800b4d0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b4ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b4ce:	e02d      	b.n	800b52c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f002 faa3 	bl	800da22 <SDMMC_GetResponse>
 800b4dc:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	0fdb      	lsrs	r3, r3, #31
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d101      	bne.n	800b4ea <SD_PowerON+0xce>
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e000      	b.n	800b4ec <SD_PowerON+0xd0>
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	613b      	str	r3, [r7, #16]

    count++;
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d802      	bhi.n	800b504 <SD_PowerON+0xe8>
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d0cc      	beq.n	800b49e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d902      	bls.n	800b514 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b50e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b512:	e00b      	b.n	800b52c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2200      	movs	r2, #0
 800b518:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b520:	2b00      	cmp	r3, #0
 800b522:	d002      	beq.n	800b52a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2201      	movs	r2, #1
 800b528:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800b52a:	2300      	movs	r3, #0
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3718      	adds	r7, #24
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}
 800b534:	c1100000 	.word	0xc1100000

0800b538 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b08c      	sub	sp, #48	; 0x30
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b542:	f7f7 fd41 	bl	8002fc8 <HAL_GetTick>
 800b546:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2100      	movs	r1, #0
 800b552:	4618      	mov	r0, r3
 800b554:	f002 fa65 	bl	800da22 <SDMMC_GetResponse>
 800b558:	4603      	mov	r3, r0
 800b55a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b55e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b562:	d102      	bne.n	800b56a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b564:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b568:	e0b0      	b.n	800b6cc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	2140      	movs	r1, #64	; 0x40
 800b570:	4618      	mov	r0, r3
 800b572:	f002 fa95 	bl	800daa0 <SDMMC_CmdBlockLength>
 800b576:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b578:	6a3b      	ldr	r3, [r7, #32]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d005      	beq.n	800b58a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b586:	6a3b      	ldr	r3, [r7, #32]
 800b588:	e0a0      	b.n	800b6cc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681a      	ldr	r2, [r3, #0]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b592:	041b      	lsls	r3, r3, #16
 800b594:	4619      	mov	r1, r3
 800b596:	4610      	mov	r0, r2
 800b598:	f002 fb06 	bl	800dba8 <SDMMC_CmdAppCommand>
 800b59c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b59e:	6a3b      	ldr	r3, [r7, #32]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d005      	beq.n	800b5b0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b5ac:	6a3b      	ldr	r3, [r7, #32]
 800b5ae:	e08d      	b.n	800b6cc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b5b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b5b4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800b5b6:	2340      	movs	r3, #64	; 0x40
 800b5b8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800b5ba:	2360      	movs	r3, #96	; 0x60
 800b5bc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b5be:	2302      	movs	r3, #2
 800b5c0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f107 0208 	add.w	r2, r7, #8
 800b5d2:	4611      	mov	r1, r2
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f002 fa37 	bl	800da48 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f002 fbee 	bl	800ddc0 <SDMMC_CmdStatusRegister>
 800b5e4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b5e6:	6a3b      	ldr	r3, [r7, #32]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d02b      	beq.n	800b644 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b5f4:	6a3b      	ldr	r3, [r7, #32]
 800b5f6:	e069      	b.n	800b6cc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b602:	2b00      	cmp	r3, #0
 800b604:	d013      	beq.n	800b62e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800b606:	2300      	movs	r3, #0
 800b608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b60a:	e00d      	b.n	800b628 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4618      	mov	r0, r3
 800b612:	f002 f9a3 	bl	800d95c <SDMMC_ReadFIFO>
 800b616:	4602      	mov	r2, r0
 800b618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61a:	601a      	str	r2, [r3, #0]
        pData++;
 800b61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61e:	3304      	adds	r3, #4
 800b620:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800b622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b624:	3301      	adds	r3, #1
 800b626:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62a:	2b07      	cmp	r3, #7
 800b62c:	d9ee      	bls.n	800b60c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b62e:	f7f7 fccb 	bl	8002fc8 <HAL_GetTick>
 800b632:	4602      	mov	r2, r0
 800b634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b636:	1ad3      	subs	r3, r2, r3
 800b638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b63c:	d102      	bne.n	800b644 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b63e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b642:	e043      	b.n	800b6cc <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b64a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d0d2      	beq.n	800b5f8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b658:	f003 0308 	and.w	r3, r3, #8
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d001      	beq.n	800b664 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b660:	2308      	movs	r3, #8
 800b662:	e033      	b.n	800b6cc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b66a:	f003 0302 	and.w	r3, r3, #2
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d001      	beq.n	800b676 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b672:	2302      	movs	r3, #2
 800b674:	e02a      	b.n	800b6cc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b67c:	f003 0320 	and.w	r3, r3, #32
 800b680:	2b00      	cmp	r3, #0
 800b682:	d017      	beq.n	800b6b4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b684:	2320      	movs	r3, #32
 800b686:	e021      	b.n	800b6cc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4618      	mov	r0, r3
 800b68e:	f002 f965 	bl	800d95c <SDMMC_ReadFIFO>
 800b692:	4602      	mov	r2, r0
 800b694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b696:	601a      	str	r2, [r3, #0]
    pData++;
 800b698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69a:	3304      	adds	r3, #4
 800b69c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b69e:	f7f7 fc93 	bl	8002fc8 <HAL_GetTick>
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a6:	1ad3      	subs	r3, r2, r3
 800b6a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ac:	d102      	bne.n	800b6b4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b6ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b6b2:	e00b      	b.n	800b6cc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d1e2      	bne.n	800b688 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4a03      	ldr	r2, [pc, #12]	; (800b6d4 <SD_SendSDStatus+0x19c>)
 800b6c8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800b6ca:	2300      	movs	r3, #0
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3730      	adds	r7, #48	; 0x30
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}
 800b6d4:	18000f3a 	.word	0x18000f3a

0800b6d8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d102      	bne.n	800b6ee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b6e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b6ec:	e018      	b.n	800b720 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6f6:	041b      	lsls	r3, r3, #16
 800b6f8:	4619      	mov	r1, r3
 800b6fa:	4610      	mov	r0, r2
 800b6fc:	f002 fb3d 	bl	800dd7a <SDMMC_CmdSendStatus>
 800b700:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d001      	beq.n	800b70c <SD_SendStatus+0x34>
  {
    return errorstate;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	e009      	b.n	800b720 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	2100      	movs	r1, #0
 800b712:	4618      	mov	r0, r3
 800b714:	f002 f985 	bl	800da22 <SDMMC_GetResponse>
 800b718:	4602      	mov	r2, r0
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b71e:	2300      	movs	r3, #0
}
 800b720:	4618      	mov	r0, r3
 800b722:	3710      	adds	r7, #16
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b086      	sub	sp, #24
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b730:	2300      	movs	r3, #0
 800b732:	60fb      	str	r3, [r7, #12]
 800b734:	2300      	movs	r3, #0
 800b736:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	2100      	movs	r1, #0
 800b73e:	4618      	mov	r0, r3
 800b740:	f002 f96f 	bl	800da22 <SDMMC_GetResponse>
 800b744:	4603      	mov	r3, r0
 800b746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b74a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b74e:	d102      	bne.n	800b756 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b750:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b754:	e02f      	b.n	800b7b6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b756:	f107 030c 	add.w	r3, r7, #12
 800b75a:	4619      	mov	r1, r3
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f000 f879 	bl	800b854 <SD_FindSCR>
 800b762:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d001      	beq.n	800b76e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	e023      	b.n	800b7b6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b774:	2b00      	cmp	r3, #0
 800b776:	d01c      	beq.n	800b7b2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b780:	041b      	lsls	r3, r3, #16
 800b782:	4619      	mov	r1, r3
 800b784:	4610      	mov	r0, r2
 800b786:	f002 fa0f 	bl	800dba8 <SDMMC_CmdAppCommand>
 800b78a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d001      	beq.n	800b796 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	e00f      	b.n	800b7b6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2102      	movs	r1, #2
 800b79c:	4618      	mov	r0, r3
 800b79e:	f002 fa46 	bl	800dc2e <SDMMC_CmdBusWidth>
 800b7a2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d001      	beq.n	800b7ae <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	e003      	b.n	800b7b6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	e001      	b.n	800b7b6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b7b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3718      	adds	r7, #24
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}

0800b7be <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b7be:	b580      	push	{r7, lr}
 800b7c0:	b086      	sub	sp, #24
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	60fb      	str	r3, [r7, #12]
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f002 f924 	bl	800da22 <SDMMC_GetResponse>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b7e4:	d102      	bne.n	800b7ec <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b7e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b7ea:	e02f      	b.n	800b84c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b7ec:	f107 030c 	add.w	r3, r7, #12
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f000 f82e 	bl	800b854 <SD_FindSCR>
 800b7f8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d001      	beq.n	800b804 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	e023      	b.n	800b84c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d01c      	beq.n	800b848 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681a      	ldr	r2, [r3, #0]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b816:	041b      	lsls	r3, r3, #16
 800b818:	4619      	mov	r1, r3
 800b81a:	4610      	mov	r0, r2
 800b81c:	f002 f9c4 	bl	800dba8 <SDMMC_CmdAppCommand>
 800b820:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d001      	beq.n	800b82c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	e00f      	b.n	800b84c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2100      	movs	r1, #0
 800b832:	4618      	mov	r0, r3
 800b834:	f002 f9fb 	bl	800dc2e <SDMMC_CmdBusWidth>
 800b838:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d001      	beq.n	800b844 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	e003      	b.n	800b84c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b844:	2300      	movs	r3, #0
 800b846:	e001      	b.n	800b84c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b848:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3718      	adds	r7, #24
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b08e      	sub	sp, #56	; 0x38
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b85e:	f7f7 fbb3 	bl	8002fc8 <HAL_GetTick>
 800b862:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b864:	2300      	movs	r3, #0
 800b866:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b868:	2300      	movs	r3, #0
 800b86a:	60bb      	str	r3, [r7, #8]
 800b86c:	2300      	movs	r3, #0
 800b86e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	2108      	movs	r1, #8
 800b87a:	4618      	mov	r0, r3
 800b87c:	f002 f910 	bl	800daa0 <SDMMC_CmdBlockLength>
 800b880:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b884:	2b00      	cmp	r3, #0
 800b886:	d001      	beq.n	800b88c <SD_FindSCR+0x38>
  {
    return errorstate;
 800b888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88a:	e0ad      	b.n	800b9e8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b894:	041b      	lsls	r3, r3, #16
 800b896:	4619      	mov	r1, r3
 800b898:	4610      	mov	r0, r2
 800b89a:	f002 f985 	bl	800dba8 <SDMMC_CmdAppCommand>
 800b89e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d001      	beq.n	800b8aa <SD_FindSCR+0x56>
  {
    return errorstate;
 800b8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a8:	e09e      	b.n	800b9e8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b8aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ae:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b8b0:	2308      	movs	r3, #8
 800b8b2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b8b4:	2330      	movs	r3, #48	; 0x30
 800b8b6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b8b8:	2302      	movs	r3, #2
 800b8ba:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f107 0210 	add.w	r2, r7, #16
 800b8cc:	4611      	mov	r1, r2
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f002 f8ba 	bl	800da48 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f002 f9cb 	bl	800dc74 <SDMMC_CmdSendSCR>
 800b8de:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d027      	beq.n	800b936 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e8:	e07e      	b.n	800b9e8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d113      	bne.n	800b920 <SD_FindSCR+0xcc>
 800b8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d110      	bne.n	800b920 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4618      	mov	r0, r3
 800b904:	f002 f82a 	bl	800d95c <SDMMC_ReadFIFO>
 800b908:	4603      	mov	r3, r0
 800b90a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4618      	mov	r0, r3
 800b912:	f002 f823 	bl	800d95c <SDMMC_ReadFIFO>
 800b916:	4603      	mov	r3, r0
 800b918:	60fb      	str	r3, [r7, #12]
      index++;
 800b91a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b91c:	3301      	adds	r3, #1
 800b91e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b920:	f7f7 fb52 	bl	8002fc8 <HAL_GetTick>
 800b924:	4602      	mov	r2, r0
 800b926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b928:	1ad3      	subs	r3, r2, r3
 800b92a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b92e:	d102      	bne.n	800b936 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b930:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b934:	e058      	b.n	800b9e8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b93c:	f240 532a 	movw	r3, #1322	; 0x52a
 800b940:	4013      	ands	r3, r2
 800b942:	2b00      	cmp	r3, #0
 800b944:	d0d1      	beq.n	800b8ea <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b94c:	f003 0308 	and.w	r3, r3, #8
 800b950:	2b00      	cmp	r3, #0
 800b952:	d005      	beq.n	800b960 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2208      	movs	r2, #8
 800b95a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b95c:	2308      	movs	r3, #8
 800b95e:	e043      	b.n	800b9e8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b966:	f003 0302 	and.w	r3, r3, #2
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d005      	beq.n	800b97a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2202      	movs	r2, #2
 800b974:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b976:	2302      	movs	r3, #2
 800b978:	e036      	b.n	800b9e8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b980:	f003 0320 	and.w	r3, r3, #32
 800b984:	2b00      	cmp	r3, #0
 800b986:	d005      	beq.n	800b994 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	2220      	movs	r2, #32
 800b98e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b990:	2320      	movs	r3, #32
 800b992:	e029      	b.n	800b9e8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4a15      	ldr	r2, [pc, #84]	; (800b9f0 <SD_FindSCR+0x19c>)
 800b99a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	061a      	lsls	r2, r3, #24
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	021b      	lsls	r3, r3, #8
 800b9a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b9a8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	0a1b      	lsrs	r3, r3, #8
 800b9ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b9b2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	0e1b      	lsrs	r3, r3, #24
 800b9b8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9bc:	601a      	str	r2, [r3, #0]
    scr++;
 800b9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9c0:	3304      	adds	r3, #4
 800b9c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	061a      	lsls	r2, r3, #24
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	021b      	lsls	r3, r3, #8
 800b9cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b9d0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	0a1b      	lsrs	r3, r3, #8
 800b9d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b9da:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	0e1b      	lsrs	r3, r3, #24
 800b9e0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b9e6:	2300      	movs	r3, #0
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3738      	adds	r7, #56	; 0x38
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}
 800b9f0:	18000f3a 	.word	0x18000f3a

0800b9f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d101      	bne.n	800ba06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ba02:	2301      	movs	r3, #1
 800ba04:	e049      	b.n	800ba9a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d106      	bne.n	800ba20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2200      	movs	r2, #0
 800ba16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f7f6 ff32 	bl	8002884 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2202      	movs	r2, #2
 800ba24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	3304      	adds	r3, #4
 800ba30:	4619      	mov	r1, r3
 800ba32:	4610      	mov	r0, r2
 800ba34:	f000 f94a 	bl	800bccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2201      	movs	r2, #1
 800ba44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2201      	movs	r2, #1
 800ba54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2201      	movs	r2, #1
 800ba64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2201      	movs	r2, #1
 800ba74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2201      	movs	r2, #1
 800ba94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba98:	2300      	movs	r3, #0
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3708      	adds	r7, #8
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
	...

0800baa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	60f8      	str	r0, [r7, #12]
 800baac:	60b9      	str	r1, [r7, #8]
 800baae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bab0:	2300      	movs	r3, #0
 800bab2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800baba:	2b01      	cmp	r3, #1
 800babc:	d101      	bne.n	800bac2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800babe:	2302      	movs	r3, #2
 800bac0:	e0ff      	b.n	800bcc2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2201      	movs	r2, #1
 800bac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2b14      	cmp	r3, #20
 800bace:	f200 80f0 	bhi.w	800bcb2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bad2:	a201      	add	r2, pc, #4	; (adr r2, 800bad8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad8:	0800bb2d 	.word	0x0800bb2d
 800badc:	0800bcb3 	.word	0x0800bcb3
 800bae0:	0800bcb3 	.word	0x0800bcb3
 800bae4:	0800bcb3 	.word	0x0800bcb3
 800bae8:	0800bb6d 	.word	0x0800bb6d
 800baec:	0800bcb3 	.word	0x0800bcb3
 800baf0:	0800bcb3 	.word	0x0800bcb3
 800baf4:	0800bcb3 	.word	0x0800bcb3
 800baf8:	0800bbaf 	.word	0x0800bbaf
 800bafc:	0800bcb3 	.word	0x0800bcb3
 800bb00:	0800bcb3 	.word	0x0800bcb3
 800bb04:	0800bcb3 	.word	0x0800bcb3
 800bb08:	0800bbef 	.word	0x0800bbef
 800bb0c:	0800bcb3 	.word	0x0800bcb3
 800bb10:	0800bcb3 	.word	0x0800bcb3
 800bb14:	0800bcb3 	.word	0x0800bcb3
 800bb18:	0800bc31 	.word	0x0800bc31
 800bb1c:	0800bcb3 	.word	0x0800bcb3
 800bb20:	0800bcb3 	.word	0x0800bcb3
 800bb24:	0800bcb3 	.word	0x0800bcb3
 800bb28:	0800bc71 	.word	0x0800bc71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	68b9      	ldr	r1, [r7, #8]
 800bb32:	4618      	mov	r0, r3
 800bb34:	f000 f970 	bl	800be18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	699a      	ldr	r2, [r3, #24]
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f042 0208 	orr.w	r2, r2, #8
 800bb46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	699a      	ldr	r2, [r3, #24]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f022 0204 	bic.w	r2, r2, #4
 800bb56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	6999      	ldr	r1, [r3, #24]
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	691a      	ldr	r2, [r3, #16]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	430a      	orrs	r2, r1
 800bb68:	619a      	str	r2, [r3, #24]
      break;
 800bb6a:	e0a5      	b.n	800bcb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	68b9      	ldr	r1, [r7, #8]
 800bb72:	4618      	mov	r0, r3
 800bb74:	f000 f9e0 	bl	800bf38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	699a      	ldr	r2, [r3, #24]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	699a      	ldr	r2, [r3, #24]
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	6999      	ldr	r1, [r3, #24]
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	691b      	ldr	r3, [r3, #16]
 800bba2:	021a      	lsls	r2, r3, #8
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	430a      	orrs	r2, r1
 800bbaa:	619a      	str	r2, [r3, #24]
      break;
 800bbac:	e084      	b.n	800bcb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	68b9      	ldr	r1, [r7, #8]
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f000 fa49 	bl	800c04c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	69da      	ldr	r2, [r3, #28]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f042 0208 	orr.w	r2, r2, #8
 800bbc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	69da      	ldr	r2, [r3, #28]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f022 0204 	bic.w	r2, r2, #4
 800bbd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	69d9      	ldr	r1, [r3, #28]
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	691a      	ldr	r2, [r3, #16]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	430a      	orrs	r2, r1
 800bbea:	61da      	str	r2, [r3, #28]
      break;
 800bbec:	e064      	b.n	800bcb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	68b9      	ldr	r1, [r7, #8]
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f000 fab1 	bl	800c15c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	69da      	ldr	r2, [r3, #28]
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	69da      	ldr	r2, [r3, #28]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	69d9      	ldr	r1, [r3, #28]
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	691b      	ldr	r3, [r3, #16]
 800bc24:	021a      	lsls	r2, r3, #8
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	430a      	orrs	r2, r1
 800bc2c:	61da      	str	r2, [r3, #28]
      break;
 800bc2e:	e043      	b.n	800bcb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	68b9      	ldr	r1, [r7, #8]
 800bc36:	4618      	mov	r0, r3
 800bc38:	f000 fafa 	bl	800c230 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f042 0208 	orr.w	r2, r2, #8
 800bc4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f022 0204 	bic.w	r2, r2, #4
 800bc5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	691a      	ldr	r2, [r3, #16]
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	430a      	orrs	r2, r1
 800bc6c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bc6e:	e023      	b.n	800bcb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	68b9      	ldr	r1, [r7, #8]
 800bc76:	4618      	mov	r0, r3
 800bc78:	f000 fb3e 	bl	800c2f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	691b      	ldr	r3, [r3, #16]
 800bca6:	021a      	lsls	r2, r3, #8
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	430a      	orrs	r2, r1
 800bcae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bcb0:	e002      	b.n	800bcb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	75fb      	strb	r3, [r7, #23]
      break;
 800bcb6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bcc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3718      	adds	r7, #24
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop

0800bccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b085      	sub	sp, #20
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	4a44      	ldr	r2, [pc, #272]	; (800bdf0 <TIM_Base_SetConfig+0x124>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d013      	beq.n	800bd0c <TIM_Base_SetConfig+0x40>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcea:	d00f      	beq.n	800bd0c <TIM_Base_SetConfig+0x40>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	4a41      	ldr	r2, [pc, #260]	; (800bdf4 <TIM_Base_SetConfig+0x128>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d00b      	beq.n	800bd0c <TIM_Base_SetConfig+0x40>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	4a40      	ldr	r2, [pc, #256]	; (800bdf8 <TIM_Base_SetConfig+0x12c>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d007      	beq.n	800bd0c <TIM_Base_SetConfig+0x40>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	4a3f      	ldr	r2, [pc, #252]	; (800bdfc <TIM_Base_SetConfig+0x130>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d003      	beq.n	800bd0c <TIM_Base_SetConfig+0x40>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	4a3e      	ldr	r2, [pc, #248]	; (800be00 <TIM_Base_SetConfig+0x134>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d108      	bne.n	800bd1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	685b      	ldr	r3, [r3, #4]
 800bd18:	68fa      	ldr	r2, [r7, #12]
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	4a33      	ldr	r2, [pc, #204]	; (800bdf0 <TIM_Base_SetConfig+0x124>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d027      	beq.n	800bd76 <TIM_Base_SetConfig+0xaa>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd2c:	d023      	beq.n	800bd76 <TIM_Base_SetConfig+0xaa>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	4a30      	ldr	r2, [pc, #192]	; (800bdf4 <TIM_Base_SetConfig+0x128>)
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d01f      	beq.n	800bd76 <TIM_Base_SetConfig+0xaa>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	4a2f      	ldr	r2, [pc, #188]	; (800bdf8 <TIM_Base_SetConfig+0x12c>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d01b      	beq.n	800bd76 <TIM_Base_SetConfig+0xaa>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	4a2e      	ldr	r2, [pc, #184]	; (800bdfc <TIM_Base_SetConfig+0x130>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d017      	beq.n	800bd76 <TIM_Base_SetConfig+0xaa>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	4a2d      	ldr	r2, [pc, #180]	; (800be00 <TIM_Base_SetConfig+0x134>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d013      	beq.n	800bd76 <TIM_Base_SetConfig+0xaa>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	4a2c      	ldr	r2, [pc, #176]	; (800be04 <TIM_Base_SetConfig+0x138>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d00f      	beq.n	800bd76 <TIM_Base_SetConfig+0xaa>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	4a2b      	ldr	r2, [pc, #172]	; (800be08 <TIM_Base_SetConfig+0x13c>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d00b      	beq.n	800bd76 <TIM_Base_SetConfig+0xaa>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	4a2a      	ldr	r2, [pc, #168]	; (800be0c <TIM_Base_SetConfig+0x140>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d007      	beq.n	800bd76 <TIM_Base_SetConfig+0xaa>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	4a29      	ldr	r2, [pc, #164]	; (800be10 <TIM_Base_SetConfig+0x144>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d003      	beq.n	800bd76 <TIM_Base_SetConfig+0xaa>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	4a28      	ldr	r2, [pc, #160]	; (800be14 <TIM_Base_SetConfig+0x148>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d108      	bne.n	800bd88 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	68fa      	ldr	r2, [r7, #12]
 800bd84:	4313      	orrs	r3, r2
 800bd86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	695b      	ldr	r3, [r3, #20]
 800bd92:	4313      	orrs	r3, r2
 800bd94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	68fa      	ldr	r2, [r7, #12]
 800bd9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	689a      	ldr	r2, [r3, #8]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	681a      	ldr	r2, [r3, #0]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	4a10      	ldr	r2, [pc, #64]	; (800bdf0 <TIM_Base_SetConfig+0x124>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d00f      	beq.n	800bdd4 <TIM_Base_SetConfig+0x108>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	4a12      	ldr	r2, [pc, #72]	; (800be00 <TIM_Base_SetConfig+0x134>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d00b      	beq.n	800bdd4 <TIM_Base_SetConfig+0x108>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	4a11      	ldr	r2, [pc, #68]	; (800be04 <TIM_Base_SetConfig+0x138>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d007      	beq.n	800bdd4 <TIM_Base_SetConfig+0x108>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	4a10      	ldr	r2, [pc, #64]	; (800be08 <TIM_Base_SetConfig+0x13c>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d003      	beq.n	800bdd4 <TIM_Base_SetConfig+0x108>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	4a0f      	ldr	r2, [pc, #60]	; (800be0c <TIM_Base_SetConfig+0x140>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d103      	bne.n	800bddc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	691a      	ldr	r2, [r3, #16]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2201      	movs	r2, #1
 800bde0:	615a      	str	r2, [r3, #20]
}
 800bde2:	bf00      	nop
 800bde4:	3714      	adds	r7, #20
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr
 800bdee:	bf00      	nop
 800bdf0:	40010000 	.word	0x40010000
 800bdf4:	40000400 	.word	0x40000400
 800bdf8:	40000800 	.word	0x40000800
 800bdfc:	40000c00 	.word	0x40000c00
 800be00:	40010400 	.word	0x40010400
 800be04:	40014000 	.word	0x40014000
 800be08:	40014400 	.word	0x40014400
 800be0c:	40014800 	.word	0x40014800
 800be10:	4000e000 	.word	0x4000e000
 800be14:	4000e400 	.word	0x4000e400

0800be18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be18:	b480      	push	{r7}
 800be1a:	b087      	sub	sp, #28
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6a1b      	ldr	r3, [r3, #32]
 800be26:	f023 0201 	bic.w	r2, r3, #1
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6a1b      	ldr	r3, [r3, #32]
 800be32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	699b      	ldr	r3, [r3, #24]
 800be3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800be40:	68fa      	ldr	r2, [r7, #12]
 800be42:	4b37      	ldr	r3, [pc, #220]	; (800bf20 <TIM_OC1_SetConfig+0x108>)
 800be44:	4013      	ands	r3, r2
 800be46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f023 0303 	bic.w	r3, r3, #3
 800be4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	68fa      	ldr	r2, [r7, #12]
 800be56:	4313      	orrs	r3, r2
 800be58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	f023 0302 	bic.w	r3, r3, #2
 800be60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	689b      	ldr	r3, [r3, #8]
 800be66:	697a      	ldr	r2, [r7, #20]
 800be68:	4313      	orrs	r3, r2
 800be6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	4a2d      	ldr	r2, [pc, #180]	; (800bf24 <TIM_OC1_SetConfig+0x10c>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d00f      	beq.n	800be94 <TIM_OC1_SetConfig+0x7c>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	4a2c      	ldr	r2, [pc, #176]	; (800bf28 <TIM_OC1_SetConfig+0x110>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d00b      	beq.n	800be94 <TIM_OC1_SetConfig+0x7c>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	4a2b      	ldr	r2, [pc, #172]	; (800bf2c <TIM_OC1_SetConfig+0x114>)
 800be80:	4293      	cmp	r3, r2
 800be82:	d007      	beq.n	800be94 <TIM_OC1_SetConfig+0x7c>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	4a2a      	ldr	r2, [pc, #168]	; (800bf30 <TIM_OC1_SetConfig+0x118>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d003      	beq.n	800be94 <TIM_OC1_SetConfig+0x7c>
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	4a29      	ldr	r2, [pc, #164]	; (800bf34 <TIM_OC1_SetConfig+0x11c>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d10c      	bne.n	800beae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	f023 0308 	bic.w	r3, r3, #8
 800be9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	68db      	ldr	r3, [r3, #12]
 800bea0:	697a      	ldr	r2, [r7, #20]
 800bea2:	4313      	orrs	r3, r2
 800bea4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	f023 0304 	bic.w	r3, r3, #4
 800beac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	4a1c      	ldr	r2, [pc, #112]	; (800bf24 <TIM_OC1_SetConfig+0x10c>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d00f      	beq.n	800bed6 <TIM_OC1_SetConfig+0xbe>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	4a1b      	ldr	r2, [pc, #108]	; (800bf28 <TIM_OC1_SetConfig+0x110>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d00b      	beq.n	800bed6 <TIM_OC1_SetConfig+0xbe>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	4a1a      	ldr	r2, [pc, #104]	; (800bf2c <TIM_OC1_SetConfig+0x114>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d007      	beq.n	800bed6 <TIM_OC1_SetConfig+0xbe>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	4a19      	ldr	r2, [pc, #100]	; (800bf30 <TIM_OC1_SetConfig+0x118>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d003      	beq.n	800bed6 <TIM_OC1_SetConfig+0xbe>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	4a18      	ldr	r2, [pc, #96]	; (800bf34 <TIM_OC1_SetConfig+0x11c>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d111      	bne.n	800befa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bedc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	695b      	ldr	r3, [r3, #20]
 800beea:	693a      	ldr	r2, [r7, #16]
 800beec:	4313      	orrs	r3, r2
 800beee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	699b      	ldr	r3, [r3, #24]
 800bef4:	693a      	ldr	r2, [r7, #16]
 800bef6:	4313      	orrs	r3, r2
 800bef8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	693a      	ldr	r2, [r7, #16]
 800befe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	68fa      	ldr	r2, [r7, #12]
 800bf04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	685a      	ldr	r2, [r3, #4]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	697a      	ldr	r2, [r7, #20]
 800bf12:	621a      	str	r2, [r3, #32]
}
 800bf14:	bf00      	nop
 800bf16:	371c      	adds	r7, #28
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr
 800bf20:	fffeff8f 	.word	0xfffeff8f
 800bf24:	40010000 	.word	0x40010000
 800bf28:	40010400 	.word	0x40010400
 800bf2c:	40014000 	.word	0x40014000
 800bf30:	40014400 	.word	0x40014400
 800bf34:	40014800 	.word	0x40014800

0800bf38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b087      	sub	sp, #28
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6a1b      	ldr	r3, [r3, #32]
 800bf46:	f023 0210 	bic.w	r2, r3, #16
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6a1b      	ldr	r3, [r3, #32]
 800bf52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	699b      	ldr	r3, [r3, #24]
 800bf5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bf60:	68fa      	ldr	r2, [r7, #12]
 800bf62:	4b34      	ldr	r3, [pc, #208]	; (800c034 <TIM_OC2_SetConfig+0xfc>)
 800bf64:	4013      	ands	r3, r2
 800bf66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	021b      	lsls	r3, r3, #8
 800bf76:	68fa      	ldr	r2, [r7, #12]
 800bf78:	4313      	orrs	r3, r2
 800bf7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	f023 0320 	bic.w	r3, r3, #32
 800bf82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	011b      	lsls	r3, r3, #4
 800bf8a:	697a      	ldr	r2, [r7, #20]
 800bf8c:	4313      	orrs	r3, r2
 800bf8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	4a29      	ldr	r2, [pc, #164]	; (800c038 <TIM_OC2_SetConfig+0x100>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d003      	beq.n	800bfa0 <TIM_OC2_SetConfig+0x68>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	4a28      	ldr	r2, [pc, #160]	; (800c03c <TIM_OC2_SetConfig+0x104>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d10d      	bne.n	800bfbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	011b      	lsls	r3, r3, #4
 800bfae:	697a      	ldr	r2, [r7, #20]
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	4a1e      	ldr	r2, [pc, #120]	; (800c038 <TIM_OC2_SetConfig+0x100>)
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d00f      	beq.n	800bfe4 <TIM_OC2_SetConfig+0xac>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	4a1d      	ldr	r2, [pc, #116]	; (800c03c <TIM_OC2_SetConfig+0x104>)
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	d00b      	beq.n	800bfe4 <TIM_OC2_SetConfig+0xac>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	4a1c      	ldr	r2, [pc, #112]	; (800c040 <TIM_OC2_SetConfig+0x108>)
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d007      	beq.n	800bfe4 <TIM_OC2_SetConfig+0xac>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4a1b      	ldr	r2, [pc, #108]	; (800c044 <TIM_OC2_SetConfig+0x10c>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d003      	beq.n	800bfe4 <TIM_OC2_SetConfig+0xac>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	4a1a      	ldr	r2, [pc, #104]	; (800c048 <TIM_OC2_SetConfig+0x110>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d113      	bne.n	800c00c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bfea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bff2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	695b      	ldr	r3, [r3, #20]
 800bff8:	009b      	lsls	r3, r3, #2
 800bffa:	693a      	ldr	r2, [r7, #16]
 800bffc:	4313      	orrs	r3, r2
 800bffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	699b      	ldr	r3, [r3, #24]
 800c004:	009b      	lsls	r3, r3, #2
 800c006:	693a      	ldr	r2, [r7, #16]
 800c008:	4313      	orrs	r3, r2
 800c00a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	693a      	ldr	r2, [r7, #16]
 800c010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	68fa      	ldr	r2, [r7, #12]
 800c016:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	685a      	ldr	r2, [r3, #4]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	697a      	ldr	r2, [r7, #20]
 800c024:	621a      	str	r2, [r3, #32]
}
 800c026:	bf00      	nop
 800c028:	371c      	adds	r7, #28
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop
 800c034:	feff8fff 	.word	0xfeff8fff
 800c038:	40010000 	.word	0x40010000
 800c03c:	40010400 	.word	0x40010400
 800c040:	40014000 	.word	0x40014000
 800c044:	40014400 	.word	0x40014400
 800c048:	40014800 	.word	0x40014800

0800c04c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b087      	sub	sp, #28
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6a1b      	ldr	r3, [r3, #32]
 800c05a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6a1b      	ldr	r3, [r3, #32]
 800c066:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	69db      	ldr	r3, [r3, #28]
 800c072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c074:	68fa      	ldr	r2, [r7, #12]
 800c076:	4b33      	ldr	r3, [pc, #204]	; (800c144 <TIM_OC3_SetConfig+0xf8>)
 800c078:	4013      	ands	r3, r2
 800c07a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f023 0303 	bic.w	r3, r3, #3
 800c082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	68fa      	ldr	r2, [r7, #12]
 800c08a:	4313      	orrs	r3, r2
 800c08c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	689b      	ldr	r3, [r3, #8]
 800c09a:	021b      	lsls	r3, r3, #8
 800c09c:	697a      	ldr	r2, [r7, #20]
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	4a28      	ldr	r2, [pc, #160]	; (800c148 <TIM_OC3_SetConfig+0xfc>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d003      	beq.n	800c0b2 <TIM_OC3_SetConfig+0x66>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	4a27      	ldr	r2, [pc, #156]	; (800c14c <TIM_OC3_SetConfig+0x100>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d10d      	bne.n	800c0ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c0b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	68db      	ldr	r3, [r3, #12]
 800c0be:	021b      	lsls	r3, r3, #8
 800c0c0:	697a      	ldr	r2, [r7, #20]
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c0cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	4a1d      	ldr	r2, [pc, #116]	; (800c148 <TIM_OC3_SetConfig+0xfc>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d00f      	beq.n	800c0f6 <TIM_OC3_SetConfig+0xaa>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	4a1c      	ldr	r2, [pc, #112]	; (800c14c <TIM_OC3_SetConfig+0x100>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d00b      	beq.n	800c0f6 <TIM_OC3_SetConfig+0xaa>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	4a1b      	ldr	r2, [pc, #108]	; (800c150 <TIM_OC3_SetConfig+0x104>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d007      	beq.n	800c0f6 <TIM_OC3_SetConfig+0xaa>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	4a1a      	ldr	r2, [pc, #104]	; (800c154 <TIM_OC3_SetConfig+0x108>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d003      	beq.n	800c0f6 <TIM_OC3_SetConfig+0xaa>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	4a19      	ldr	r2, [pc, #100]	; (800c158 <TIM_OC3_SetConfig+0x10c>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d113      	bne.n	800c11e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c0fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c104:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	695b      	ldr	r3, [r3, #20]
 800c10a:	011b      	lsls	r3, r3, #4
 800c10c:	693a      	ldr	r2, [r7, #16]
 800c10e:	4313      	orrs	r3, r2
 800c110:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	699b      	ldr	r3, [r3, #24]
 800c116:	011b      	lsls	r3, r3, #4
 800c118:	693a      	ldr	r2, [r7, #16]
 800c11a:	4313      	orrs	r3, r2
 800c11c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	693a      	ldr	r2, [r7, #16]
 800c122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	68fa      	ldr	r2, [r7, #12]
 800c128:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	685a      	ldr	r2, [r3, #4]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	697a      	ldr	r2, [r7, #20]
 800c136:	621a      	str	r2, [r3, #32]
}
 800c138:	bf00      	nop
 800c13a:	371c      	adds	r7, #28
 800c13c:	46bd      	mov	sp, r7
 800c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c142:	4770      	bx	lr
 800c144:	fffeff8f 	.word	0xfffeff8f
 800c148:	40010000 	.word	0x40010000
 800c14c:	40010400 	.word	0x40010400
 800c150:	40014000 	.word	0x40014000
 800c154:	40014400 	.word	0x40014400
 800c158:	40014800 	.word	0x40014800

0800c15c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b087      	sub	sp, #28
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6a1b      	ldr	r3, [r3, #32]
 800c16a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6a1b      	ldr	r3, [r3, #32]
 800c176:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	69db      	ldr	r3, [r3, #28]
 800c182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c184:	68fa      	ldr	r2, [r7, #12]
 800c186:	4b24      	ldr	r3, [pc, #144]	; (800c218 <TIM_OC4_SetConfig+0xbc>)
 800c188:	4013      	ands	r3, r2
 800c18a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	021b      	lsls	r3, r3, #8
 800c19a:	68fa      	ldr	r2, [r7, #12]
 800c19c:	4313      	orrs	r3, r2
 800c19e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c1a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	689b      	ldr	r3, [r3, #8]
 800c1ac:	031b      	lsls	r3, r3, #12
 800c1ae:	693a      	ldr	r2, [r7, #16]
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	4a19      	ldr	r2, [pc, #100]	; (800c21c <TIM_OC4_SetConfig+0xc0>)
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d00f      	beq.n	800c1dc <TIM_OC4_SetConfig+0x80>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	4a18      	ldr	r2, [pc, #96]	; (800c220 <TIM_OC4_SetConfig+0xc4>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d00b      	beq.n	800c1dc <TIM_OC4_SetConfig+0x80>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	4a17      	ldr	r2, [pc, #92]	; (800c224 <TIM_OC4_SetConfig+0xc8>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d007      	beq.n	800c1dc <TIM_OC4_SetConfig+0x80>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	4a16      	ldr	r2, [pc, #88]	; (800c228 <TIM_OC4_SetConfig+0xcc>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d003      	beq.n	800c1dc <TIM_OC4_SetConfig+0x80>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	4a15      	ldr	r2, [pc, #84]	; (800c22c <TIM_OC4_SetConfig+0xd0>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d109      	bne.n	800c1f0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c1e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	695b      	ldr	r3, [r3, #20]
 800c1e8:	019b      	lsls	r3, r3, #6
 800c1ea:	697a      	ldr	r2, [r7, #20]
 800c1ec:	4313      	orrs	r3, r2
 800c1ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	697a      	ldr	r2, [r7, #20]
 800c1f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	68fa      	ldr	r2, [r7, #12]
 800c1fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	685a      	ldr	r2, [r3, #4]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	693a      	ldr	r2, [r7, #16]
 800c208:	621a      	str	r2, [r3, #32]
}
 800c20a:	bf00      	nop
 800c20c:	371c      	adds	r7, #28
 800c20e:	46bd      	mov	sp, r7
 800c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c214:	4770      	bx	lr
 800c216:	bf00      	nop
 800c218:	feff8fff 	.word	0xfeff8fff
 800c21c:	40010000 	.word	0x40010000
 800c220:	40010400 	.word	0x40010400
 800c224:	40014000 	.word	0x40014000
 800c228:	40014400 	.word	0x40014400
 800c22c:	40014800 	.word	0x40014800

0800c230 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c230:	b480      	push	{r7}
 800c232:	b087      	sub	sp, #28
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6a1b      	ldr	r3, [r3, #32]
 800c23e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6a1b      	ldr	r3, [r3, #32]
 800c24a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	685b      	ldr	r3, [r3, #4]
 800c250:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c258:	68fa      	ldr	r2, [r7, #12]
 800c25a:	4b21      	ldr	r3, [pc, #132]	; (800c2e0 <TIM_OC5_SetConfig+0xb0>)
 800c25c:	4013      	ands	r3, r2
 800c25e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	68fa      	ldr	r2, [r7, #12]
 800c266:	4313      	orrs	r3, r2
 800c268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c270:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	041b      	lsls	r3, r3, #16
 800c278:	693a      	ldr	r2, [r7, #16]
 800c27a:	4313      	orrs	r3, r2
 800c27c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	4a18      	ldr	r2, [pc, #96]	; (800c2e4 <TIM_OC5_SetConfig+0xb4>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d00f      	beq.n	800c2a6 <TIM_OC5_SetConfig+0x76>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	4a17      	ldr	r2, [pc, #92]	; (800c2e8 <TIM_OC5_SetConfig+0xb8>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d00b      	beq.n	800c2a6 <TIM_OC5_SetConfig+0x76>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	4a16      	ldr	r2, [pc, #88]	; (800c2ec <TIM_OC5_SetConfig+0xbc>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d007      	beq.n	800c2a6 <TIM_OC5_SetConfig+0x76>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	4a15      	ldr	r2, [pc, #84]	; (800c2f0 <TIM_OC5_SetConfig+0xc0>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d003      	beq.n	800c2a6 <TIM_OC5_SetConfig+0x76>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	4a14      	ldr	r2, [pc, #80]	; (800c2f4 <TIM_OC5_SetConfig+0xc4>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d109      	bne.n	800c2ba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c2ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	695b      	ldr	r3, [r3, #20]
 800c2b2:	021b      	lsls	r3, r3, #8
 800c2b4:	697a      	ldr	r2, [r7, #20]
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	697a      	ldr	r2, [r7, #20]
 800c2be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	68fa      	ldr	r2, [r7, #12]
 800c2c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	685a      	ldr	r2, [r3, #4]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	693a      	ldr	r2, [r7, #16]
 800c2d2:	621a      	str	r2, [r3, #32]
}
 800c2d4:	bf00      	nop
 800c2d6:	371c      	adds	r7, #28
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2de:	4770      	bx	lr
 800c2e0:	fffeff8f 	.word	0xfffeff8f
 800c2e4:	40010000 	.word	0x40010000
 800c2e8:	40010400 	.word	0x40010400
 800c2ec:	40014000 	.word	0x40014000
 800c2f0:	40014400 	.word	0x40014400
 800c2f4:	40014800 	.word	0x40014800

0800c2f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b087      	sub	sp, #28
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
 800c300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6a1b      	ldr	r3, [r3, #32]
 800c306:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6a1b      	ldr	r3, [r3, #32]
 800c312:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c31e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c320:	68fa      	ldr	r2, [r7, #12]
 800c322:	4b22      	ldr	r3, [pc, #136]	; (800c3ac <TIM_OC6_SetConfig+0xb4>)
 800c324:	4013      	ands	r3, r2
 800c326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	021b      	lsls	r3, r3, #8
 800c32e:	68fa      	ldr	r2, [r7, #12]
 800c330:	4313      	orrs	r3, r2
 800c332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c33a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	689b      	ldr	r3, [r3, #8]
 800c340:	051b      	lsls	r3, r3, #20
 800c342:	693a      	ldr	r2, [r7, #16]
 800c344:	4313      	orrs	r3, r2
 800c346:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	4a19      	ldr	r2, [pc, #100]	; (800c3b0 <TIM_OC6_SetConfig+0xb8>)
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d00f      	beq.n	800c370 <TIM_OC6_SetConfig+0x78>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	4a18      	ldr	r2, [pc, #96]	; (800c3b4 <TIM_OC6_SetConfig+0xbc>)
 800c354:	4293      	cmp	r3, r2
 800c356:	d00b      	beq.n	800c370 <TIM_OC6_SetConfig+0x78>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	4a17      	ldr	r2, [pc, #92]	; (800c3b8 <TIM_OC6_SetConfig+0xc0>)
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d007      	beq.n	800c370 <TIM_OC6_SetConfig+0x78>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	4a16      	ldr	r2, [pc, #88]	; (800c3bc <TIM_OC6_SetConfig+0xc4>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d003      	beq.n	800c370 <TIM_OC6_SetConfig+0x78>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	4a15      	ldr	r2, [pc, #84]	; (800c3c0 <TIM_OC6_SetConfig+0xc8>)
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d109      	bne.n	800c384 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c376:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	695b      	ldr	r3, [r3, #20]
 800c37c:	029b      	lsls	r3, r3, #10
 800c37e:	697a      	ldr	r2, [r7, #20]
 800c380:	4313      	orrs	r3, r2
 800c382:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	697a      	ldr	r2, [r7, #20]
 800c388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	68fa      	ldr	r2, [r7, #12]
 800c38e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	685a      	ldr	r2, [r3, #4]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	693a      	ldr	r2, [r7, #16]
 800c39c:	621a      	str	r2, [r3, #32]
}
 800c39e:	bf00      	nop
 800c3a0:	371c      	adds	r7, #28
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a8:	4770      	bx	lr
 800c3aa:	bf00      	nop
 800c3ac:	feff8fff 	.word	0xfeff8fff
 800c3b0:	40010000 	.word	0x40010000
 800c3b4:	40010400 	.word	0x40010400
 800c3b8:	40014000 	.word	0x40014000
 800c3bc:	40014400 	.word	0x40014400
 800c3c0:	40014800 	.word	0x40014800

0800c3c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b085      	sub	sp, #20
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d101      	bne.n	800c3dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c3d8:	2302      	movs	r3, #2
 800c3da:	e077      	b.n	800c4cc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2201      	movs	r2, #1
 800c3e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2202      	movs	r2, #2
 800c3e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	689b      	ldr	r3, [r3, #8]
 800c3fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a35      	ldr	r2, [pc, #212]	; (800c4d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d004      	beq.n	800c410 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4a34      	ldr	r2, [pc, #208]	; (800c4dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d108      	bne.n	800c422 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c416:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	68fa      	ldr	r2, [r7, #12]
 800c41e:	4313      	orrs	r3, r2
 800c420:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c428:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	68fa      	ldr	r2, [r7, #12]
 800c430:	4313      	orrs	r3, r2
 800c432:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	68fa      	ldr	r2, [r7, #12]
 800c43a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4a25      	ldr	r2, [pc, #148]	; (800c4d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d02c      	beq.n	800c4a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c44e:	d027      	beq.n	800c4a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a22      	ldr	r2, [pc, #136]	; (800c4e0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d022      	beq.n	800c4a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	4a21      	ldr	r2, [pc, #132]	; (800c4e4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c460:	4293      	cmp	r3, r2
 800c462:	d01d      	beq.n	800c4a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	4a1f      	ldr	r2, [pc, #124]	; (800c4e8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d018      	beq.n	800c4a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	4a1a      	ldr	r2, [pc, #104]	; (800c4dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c474:	4293      	cmp	r3, r2
 800c476:	d013      	beq.n	800c4a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	4a1b      	ldr	r2, [pc, #108]	; (800c4ec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d00e      	beq.n	800c4a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	4a1a      	ldr	r2, [pc, #104]	; (800c4f0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d009      	beq.n	800c4a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4a18      	ldr	r2, [pc, #96]	; (800c4f4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d004      	beq.n	800c4a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	4a17      	ldr	r2, [pc, #92]	; (800c4f8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d10c      	bne.n	800c4ba <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	68ba      	ldr	r2, [r7, #8]
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	68ba      	ldr	r2, [r7, #8]
 800c4b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2201      	movs	r2, #1
 800c4be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c4ca:	2300      	movs	r3, #0
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3714      	adds	r7, #20
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr
 800c4d8:	40010000 	.word	0x40010000
 800c4dc:	40010400 	.word	0x40010400
 800c4e0:	40000400 	.word	0x40000400
 800c4e4:	40000800 	.word	0x40000800
 800c4e8:	40000c00 	.word	0x40000c00
 800c4ec:	40001800 	.word	0x40001800
 800c4f0:	40014000 	.word	0x40014000
 800c4f4:	4000e000 	.word	0x4000e000
 800c4f8:	4000e400 	.word	0x4000e400

0800c4fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b085      	sub	sp, #20
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c506:	2300      	movs	r3, #0
 800c508:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c510:	2b01      	cmp	r3, #1
 800c512:	d101      	bne.n	800c518 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c514:	2302      	movs	r3, #2
 800c516:	e087      	b.n	800c628 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2201      	movs	r2, #1
 800c51c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	68db      	ldr	r3, [r3, #12]
 800c52a:	4313      	orrs	r3, r2
 800c52c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	689b      	ldr	r3, [r3, #8]
 800c538:	4313      	orrs	r3, r2
 800c53a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	685b      	ldr	r3, [r3, #4]
 800c546:	4313      	orrs	r3, r2
 800c548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	4313      	orrs	r3, r2
 800c556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	691b      	ldr	r3, [r3, #16]
 800c562:	4313      	orrs	r3, r2
 800c564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	695b      	ldr	r3, [r3, #20]
 800c570:	4313      	orrs	r3, r2
 800c572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c57e:	4313      	orrs	r3, r2
 800c580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	699b      	ldr	r3, [r3, #24]
 800c58c:	041b      	lsls	r3, r3, #16
 800c58e:	4313      	orrs	r3, r2
 800c590:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4a27      	ldr	r2, [pc, #156]	; (800c634 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c598:	4293      	cmp	r3, r2
 800c59a:	d004      	beq.n	800c5a6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a25      	ldr	r2, [pc, #148]	; (800c638 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d106      	bne.n	800c5b4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	69db      	ldr	r3, [r3, #28]
 800c5b0:	4313      	orrs	r3, r2
 800c5b2:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4a1e      	ldr	r2, [pc, #120]	; (800c634 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d004      	beq.n	800c5c8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	4a1d      	ldr	r2, [pc, #116]	; (800c638 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d126      	bne.n	800c616 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5d2:	051b      	lsls	r3, r3, #20
 800c5d4:	4313      	orrs	r3, r2
 800c5d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	6a1b      	ldr	r3, [r3, #32]
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4a0e      	ldr	r2, [pc, #56]	; (800c634 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d004      	beq.n	800c608 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	4a0d      	ldr	r2, [pc, #52]	; (800c638 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c604:	4293      	cmp	r3, r2
 800c606:	d106      	bne.n	800c616 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c612:	4313      	orrs	r3, r2
 800c614:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	68fa      	ldr	r2, [r7, #12]
 800c61c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2200      	movs	r2, #0
 800c622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c626:	2300      	movs	r3, #0
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3714      	adds	r7, #20
 800c62c:	46bd      	mov	sp, r7
 800c62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c632:	4770      	bx	lr
 800c634:	40010000 	.word	0x40010000
 800c638:	40010400 	.word	0x40010400

0800c63c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b082      	sub	sp, #8
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d101      	bne.n	800c64e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c64a:	2301      	movs	r3, #1
 800c64c:	e042      	b.n	800c6d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c654:	2b00      	cmp	r3, #0
 800c656:	d106      	bne.n	800c666 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2200      	movs	r2, #0
 800c65c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f7f6 fa0f 	bl	8002a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2224      	movs	r2, #36	; 0x24
 800c66a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	681a      	ldr	r2, [r3, #0]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f022 0201 	bic.w	r2, r2, #1
 800c67c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f000 f82c 	bl	800c6dc <UART_SetConfig>
 800c684:	4603      	mov	r3, r0
 800c686:	2b01      	cmp	r3, #1
 800c688:	d101      	bne.n	800c68e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c68a:	2301      	movs	r3, #1
 800c68c:	e022      	b.n	800c6d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c692:	2b00      	cmp	r3, #0
 800c694:	d002      	beq.n	800c69c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 fe7e 	bl	800d398 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	685a      	ldr	r2, [r3, #4]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c6aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	689a      	ldr	r2, [r3, #8]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c6ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	681a      	ldr	r2, [r3, #0]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f042 0201 	orr.w	r2, r2, #1
 800c6ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f000 ff05 	bl	800d4dc <UART_CheckIdleState>
 800c6d2:	4603      	mov	r3, r0
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3708      	adds	r7, #8
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c6dc:	b5b0      	push	{r4, r5, r7, lr}
 800c6de:	b08e      	sub	sp, #56	; 0x38
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	689a      	ldr	r2, [r3, #8]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	691b      	ldr	r3, [r3, #16]
 800c6f2:	431a      	orrs	r2, r3
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	695b      	ldr	r3, [r3, #20]
 800c6f8:	431a      	orrs	r2, r3
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	69db      	ldr	r3, [r3, #28]
 800c6fe:	4313      	orrs	r3, r2
 800c700:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	681a      	ldr	r2, [r3, #0]
 800c708:	4bbf      	ldr	r3, [pc, #764]	; (800ca08 <UART_SetConfig+0x32c>)
 800c70a:	4013      	ands	r3, r2
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	6812      	ldr	r2, [r2, #0]
 800c710:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c712:	430b      	orrs	r3, r1
 800c714:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	68da      	ldr	r2, [r3, #12]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	430a      	orrs	r2, r1
 800c72a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	699b      	ldr	r3, [r3, #24]
 800c730:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	4ab5      	ldr	r2, [pc, #724]	; (800ca0c <UART_SetConfig+0x330>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d004      	beq.n	800c746 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6a1b      	ldr	r3, [r3, #32]
 800c740:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c742:	4313      	orrs	r3, r2
 800c744:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	689a      	ldr	r2, [r3, #8]
 800c74c:	4bb0      	ldr	r3, [pc, #704]	; (800ca10 <UART_SetConfig+0x334>)
 800c74e:	4013      	ands	r3, r2
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	6812      	ldr	r2, [r2, #0]
 800c754:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c756:	430b      	orrs	r3, r1
 800c758:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c760:	f023 010f 	bic.w	r1, r3, #15
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	430a      	orrs	r2, r1
 800c76e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4aa7      	ldr	r2, [pc, #668]	; (800ca14 <UART_SetConfig+0x338>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d176      	bne.n	800c868 <UART_SetConfig+0x18c>
 800c77a:	4ba7      	ldr	r3, [pc, #668]	; (800ca18 <UART_SetConfig+0x33c>)
 800c77c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c77e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c782:	2b28      	cmp	r3, #40	; 0x28
 800c784:	d86c      	bhi.n	800c860 <UART_SetConfig+0x184>
 800c786:	a201      	add	r2, pc, #4	; (adr r2, 800c78c <UART_SetConfig+0xb0>)
 800c788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c78c:	0800c831 	.word	0x0800c831
 800c790:	0800c861 	.word	0x0800c861
 800c794:	0800c861 	.word	0x0800c861
 800c798:	0800c861 	.word	0x0800c861
 800c79c:	0800c861 	.word	0x0800c861
 800c7a0:	0800c861 	.word	0x0800c861
 800c7a4:	0800c861 	.word	0x0800c861
 800c7a8:	0800c861 	.word	0x0800c861
 800c7ac:	0800c839 	.word	0x0800c839
 800c7b0:	0800c861 	.word	0x0800c861
 800c7b4:	0800c861 	.word	0x0800c861
 800c7b8:	0800c861 	.word	0x0800c861
 800c7bc:	0800c861 	.word	0x0800c861
 800c7c0:	0800c861 	.word	0x0800c861
 800c7c4:	0800c861 	.word	0x0800c861
 800c7c8:	0800c861 	.word	0x0800c861
 800c7cc:	0800c841 	.word	0x0800c841
 800c7d0:	0800c861 	.word	0x0800c861
 800c7d4:	0800c861 	.word	0x0800c861
 800c7d8:	0800c861 	.word	0x0800c861
 800c7dc:	0800c861 	.word	0x0800c861
 800c7e0:	0800c861 	.word	0x0800c861
 800c7e4:	0800c861 	.word	0x0800c861
 800c7e8:	0800c861 	.word	0x0800c861
 800c7ec:	0800c849 	.word	0x0800c849
 800c7f0:	0800c861 	.word	0x0800c861
 800c7f4:	0800c861 	.word	0x0800c861
 800c7f8:	0800c861 	.word	0x0800c861
 800c7fc:	0800c861 	.word	0x0800c861
 800c800:	0800c861 	.word	0x0800c861
 800c804:	0800c861 	.word	0x0800c861
 800c808:	0800c861 	.word	0x0800c861
 800c80c:	0800c851 	.word	0x0800c851
 800c810:	0800c861 	.word	0x0800c861
 800c814:	0800c861 	.word	0x0800c861
 800c818:	0800c861 	.word	0x0800c861
 800c81c:	0800c861 	.word	0x0800c861
 800c820:	0800c861 	.word	0x0800c861
 800c824:	0800c861 	.word	0x0800c861
 800c828:	0800c861 	.word	0x0800c861
 800c82c:	0800c859 	.word	0x0800c859
 800c830:	2301      	movs	r3, #1
 800c832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c836:	e326      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c838:	2304      	movs	r3, #4
 800c83a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c83e:	e322      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c840:	2308      	movs	r3, #8
 800c842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c846:	e31e      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c848:	2310      	movs	r3, #16
 800c84a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c84e:	e31a      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c850:	2320      	movs	r3, #32
 800c852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c856:	e316      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c858:	2340      	movs	r3, #64	; 0x40
 800c85a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c85e:	e312      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c860:	2380      	movs	r3, #128	; 0x80
 800c862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c866:	e30e      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4a6b      	ldr	r2, [pc, #428]	; (800ca1c <UART_SetConfig+0x340>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d130      	bne.n	800c8d4 <UART_SetConfig+0x1f8>
 800c872:	4b69      	ldr	r3, [pc, #420]	; (800ca18 <UART_SetConfig+0x33c>)
 800c874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c876:	f003 0307 	and.w	r3, r3, #7
 800c87a:	2b05      	cmp	r3, #5
 800c87c:	d826      	bhi.n	800c8cc <UART_SetConfig+0x1f0>
 800c87e:	a201      	add	r2, pc, #4	; (adr r2, 800c884 <UART_SetConfig+0x1a8>)
 800c880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c884:	0800c89d 	.word	0x0800c89d
 800c888:	0800c8a5 	.word	0x0800c8a5
 800c88c:	0800c8ad 	.word	0x0800c8ad
 800c890:	0800c8b5 	.word	0x0800c8b5
 800c894:	0800c8bd 	.word	0x0800c8bd
 800c898:	0800c8c5 	.word	0x0800c8c5
 800c89c:	2300      	movs	r3, #0
 800c89e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8a2:	e2f0      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c8a4:	2304      	movs	r3, #4
 800c8a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8aa:	e2ec      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c8ac:	2308      	movs	r3, #8
 800c8ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8b2:	e2e8      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c8b4:	2310      	movs	r3, #16
 800c8b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8ba:	e2e4      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c8bc:	2320      	movs	r3, #32
 800c8be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8c2:	e2e0      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c8c4:	2340      	movs	r3, #64	; 0x40
 800c8c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8ca:	e2dc      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c8cc:	2380      	movs	r3, #128	; 0x80
 800c8ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8d2:	e2d8      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4a51      	ldr	r2, [pc, #324]	; (800ca20 <UART_SetConfig+0x344>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d130      	bne.n	800c940 <UART_SetConfig+0x264>
 800c8de:	4b4e      	ldr	r3, [pc, #312]	; (800ca18 <UART_SetConfig+0x33c>)
 800c8e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8e2:	f003 0307 	and.w	r3, r3, #7
 800c8e6:	2b05      	cmp	r3, #5
 800c8e8:	d826      	bhi.n	800c938 <UART_SetConfig+0x25c>
 800c8ea:	a201      	add	r2, pc, #4	; (adr r2, 800c8f0 <UART_SetConfig+0x214>)
 800c8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8f0:	0800c909 	.word	0x0800c909
 800c8f4:	0800c911 	.word	0x0800c911
 800c8f8:	0800c919 	.word	0x0800c919
 800c8fc:	0800c921 	.word	0x0800c921
 800c900:	0800c929 	.word	0x0800c929
 800c904:	0800c931 	.word	0x0800c931
 800c908:	2300      	movs	r3, #0
 800c90a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c90e:	e2ba      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c910:	2304      	movs	r3, #4
 800c912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c916:	e2b6      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c918:	2308      	movs	r3, #8
 800c91a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c91e:	e2b2      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c920:	2310      	movs	r3, #16
 800c922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c926:	e2ae      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c928:	2320      	movs	r3, #32
 800c92a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c92e:	e2aa      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c930:	2340      	movs	r3, #64	; 0x40
 800c932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c936:	e2a6      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c938:	2380      	movs	r3, #128	; 0x80
 800c93a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c93e:	e2a2      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	4a37      	ldr	r2, [pc, #220]	; (800ca24 <UART_SetConfig+0x348>)
 800c946:	4293      	cmp	r3, r2
 800c948:	d130      	bne.n	800c9ac <UART_SetConfig+0x2d0>
 800c94a:	4b33      	ldr	r3, [pc, #204]	; (800ca18 <UART_SetConfig+0x33c>)
 800c94c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c94e:	f003 0307 	and.w	r3, r3, #7
 800c952:	2b05      	cmp	r3, #5
 800c954:	d826      	bhi.n	800c9a4 <UART_SetConfig+0x2c8>
 800c956:	a201      	add	r2, pc, #4	; (adr r2, 800c95c <UART_SetConfig+0x280>)
 800c958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c95c:	0800c975 	.word	0x0800c975
 800c960:	0800c97d 	.word	0x0800c97d
 800c964:	0800c985 	.word	0x0800c985
 800c968:	0800c98d 	.word	0x0800c98d
 800c96c:	0800c995 	.word	0x0800c995
 800c970:	0800c99d 	.word	0x0800c99d
 800c974:	2300      	movs	r3, #0
 800c976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c97a:	e284      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c97c:	2304      	movs	r3, #4
 800c97e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c982:	e280      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c984:	2308      	movs	r3, #8
 800c986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c98a:	e27c      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c98c:	2310      	movs	r3, #16
 800c98e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c992:	e278      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c994:	2320      	movs	r3, #32
 800c996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c99a:	e274      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c99c:	2340      	movs	r3, #64	; 0x40
 800c99e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9a2:	e270      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c9a4:	2380      	movs	r3, #128	; 0x80
 800c9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9aa:	e26c      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4a1d      	ldr	r2, [pc, #116]	; (800ca28 <UART_SetConfig+0x34c>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d142      	bne.n	800ca3c <UART_SetConfig+0x360>
 800c9b6:	4b18      	ldr	r3, [pc, #96]	; (800ca18 <UART_SetConfig+0x33c>)
 800c9b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9ba:	f003 0307 	and.w	r3, r3, #7
 800c9be:	2b05      	cmp	r3, #5
 800c9c0:	d838      	bhi.n	800ca34 <UART_SetConfig+0x358>
 800c9c2:	a201      	add	r2, pc, #4	; (adr r2, 800c9c8 <UART_SetConfig+0x2ec>)
 800c9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9c8:	0800c9e1 	.word	0x0800c9e1
 800c9cc:	0800c9e9 	.word	0x0800c9e9
 800c9d0:	0800c9f1 	.word	0x0800c9f1
 800c9d4:	0800c9f9 	.word	0x0800c9f9
 800c9d8:	0800ca01 	.word	0x0800ca01
 800c9dc:	0800ca2d 	.word	0x0800ca2d
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9e6:	e24e      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c9e8:	2304      	movs	r3, #4
 800c9ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ee:	e24a      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c9f0:	2308      	movs	r3, #8
 800c9f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9f6:	e246      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800c9f8:	2310      	movs	r3, #16
 800c9fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9fe:	e242      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800ca00:	2320      	movs	r3, #32
 800ca02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca06:	e23e      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800ca08:	cfff69f3 	.word	0xcfff69f3
 800ca0c:	58000c00 	.word	0x58000c00
 800ca10:	11fff4ff 	.word	0x11fff4ff
 800ca14:	40011000 	.word	0x40011000
 800ca18:	58024400 	.word	0x58024400
 800ca1c:	40004400 	.word	0x40004400
 800ca20:	40004800 	.word	0x40004800
 800ca24:	40004c00 	.word	0x40004c00
 800ca28:	40005000 	.word	0x40005000
 800ca2c:	2340      	movs	r3, #64	; 0x40
 800ca2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca32:	e228      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800ca34:	2380      	movs	r3, #128	; 0x80
 800ca36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca3a:	e224      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4ab1      	ldr	r2, [pc, #708]	; (800cd08 <UART_SetConfig+0x62c>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d176      	bne.n	800cb34 <UART_SetConfig+0x458>
 800ca46:	4bb1      	ldr	r3, [pc, #708]	; (800cd0c <UART_SetConfig+0x630>)
 800ca48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ca4e:	2b28      	cmp	r3, #40	; 0x28
 800ca50:	d86c      	bhi.n	800cb2c <UART_SetConfig+0x450>
 800ca52:	a201      	add	r2, pc, #4	; (adr r2, 800ca58 <UART_SetConfig+0x37c>)
 800ca54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca58:	0800cafd 	.word	0x0800cafd
 800ca5c:	0800cb2d 	.word	0x0800cb2d
 800ca60:	0800cb2d 	.word	0x0800cb2d
 800ca64:	0800cb2d 	.word	0x0800cb2d
 800ca68:	0800cb2d 	.word	0x0800cb2d
 800ca6c:	0800cb2d 	.word	0x0800cb2d
 800ca70:	0800cb2d 	.word	0x0800cb2d
 800ca74:	0800cb2d 	.word	0x0800cb2d
 800ca78:	0800cb05 	.word	0x0800cb05
 800ca7c:	0800cb2d 	.word	0x0800cb2d
 800ca80:	0800cb2d 	.word	0x0800cb2d
 800ca84:	0800cb2d 	.word	0x0800cb2d
 800ca88:	0800cb2d 	.word	0x0800cb2d
 800ca8c:	0800cb2d 	.word	0x0800cb2d
 800ca90:	0800cb2d 	.word	0x0800cb2d
 800ca94:	0800cb2d 	.word	0x0800cb2d
 800ca98:	0800cb0d 	.word	0x0800cb0d
 800ca9c:	0800cb2d 	.word	0x0800cb2d
 800caa0:	0800cb2d 	.word	0x0800cb2d
 800caa4:	0800cb2d 	.word	0x0800cb2d
 800caa8:	0800cb2d 	.word	0x0800cb2d
 800caac:	0800cb2d 	.word	0x0800cb2d
 800cab0:	0800cb2d 	.word	0x0800cb2d
 800cab4:	0800cb2d 	.word	0x0800cb2d
 800cab8:	0800cb15 	.word	0x0800cb15
 800cabc:	0800cb2d 	.word	0x0800cb2d
 800cac0:	0800cb2d 	.word	0x0800cb2d
 800cac4:	0800cb2d 	.word	0x0800cb2d
 800cac8:	0800cb2d 	.word	0x0800cb2d
 800cacc:	0800cb2d 	.word	0x0800cb2d
 800cad0:	0800cb2d 	.word	0x0800cb2d
 800cad4:	0800cb2d 	.word	0x0800cb2d
 800cad8:	0800cb1d 	.word	0x0800cb1d
 800cadc:	0800cb2d 	.word	0x0800cb2d
 800cae0:	0800cb2d 	.word	0x0800cb2d
 800cae4:	0800cb2d 	.word	0x0800cb2d
 800cae8:	0800cb2d 	.word	0x0800cb2d
 800caec:	0800cb2d 	.word	0x0800cb2d
 800caf0:	0800cb2d 	.word	0x0800cb2d
 800caf4:	0800cb2d 	.word	0x0800cb2d
 800caf8:	0800cb25 	.word	0x0800cb25
 800cafc:	2301      	movs	r3, #1
 800cafe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb02:	e1c0      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cb04:	2304      	movs	r3, #4
 800cb06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb0a:	e1bc      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cb0c:	2308      	movs	r3, #8
 800cb0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb12:	e1b8      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cb14:	2310      	movs	r3, #16
 800cb16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb1a:	e1b4      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cb1c:	2320      	movs	r3, #32
 800cb1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb22:	e1b0      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cb24:	2340      	movs	r3, #64	; 0x40
 800cb26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb2a:	e1ac      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cb2c:	2380      	movs	r3, #128	; 0x80
 800cb2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb32:	e1a8      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4a75      	ldr	r2, [pc, #468]	; (800cd10 <UART_SetConfig+0x634>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d130      	bne.n	800cba0 <UART_SetConfig+0x4c4>
 800cb3e:	4b73      	ldr	r3, [pc, #460]	; (800cd0c <UART_SetConfig+0x630>)
 800cb40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb42:	f003 0307 	and.w	r3, r3, #7
 800cb46:	2b05      	cmp	r3, #5
 800cb48:	d826      	bhi.n	800cb98 <UART_SetConfig+0x4bc>
 800cb4a:	a201      	add	r2, pc, #4	; (adr r2, 800cb50 <UART_SetConfig+0x474>)
 800cb4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb50:	0800cb69 	.word	0x0800cb69
 800cb54:	0800cb71 	.word	0x0800cb71
 800cb58:	0800cb79 	.word	0x0800cb79
 800cb5c:	0800cb81 	.word	0x0800cb81
 800cb60:	0800cb89 	.word	0x0800cb89
 800cb64:	0800cb91 	.word	0x0800cb91
 800cb68:	2300      	movs	r3, #0
 800cb6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb6e:	e18a      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cb70:	2304      	movs	r3, #4
 800cb72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb76:	e186      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cb78:	2308      	movs	r3, #8
 800cb7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb7e:	e182      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cb80:	2310      	movs	r3, #16
 800cb82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb86:	e17e      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cb88:	2320      	movs	r3, #32
 800cb8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb8e:	e17a      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cb90:	2340      	movs	r3, #64	; 0x40
 800cb92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb96:	e176      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cb98:	2380      	movs	r3, #128	; 0x80
 800cb9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb9e:	e172      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4a5b      	ldr	r2, [pc, #364]	; (800cd14 <UART_SetConfig+0x638>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d130      	bne.n	800cc0c <UART_SetConfig+0x530>
 800cbaa:	4b58      	ldr	r3, [pc, #352]	; (800cd0c <UART_SetConfig+0x630>)
 800cbac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbae:	f003 0307 	and.w	r3, r3, #7
 800cbb2:	2b05      	cmp	r3, #5
 800cbb4:	d826      	bhi.n	800cc04 <UART_SetConfig+0x528>
 800cbb6:	a201      	add	r2, pc, #4	; (adr r2, 800cbbc <UART_SetConfig+0x4e0>)
 800cbb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbbc:	0800cbd5 	.word	0x0800cbd5
 800cbc0:	0800cbdd 	.word	0x0800cbdd
 800cbc4:	0800cbe5 	.word	0x0800cbe5
 800cbc8:	0800cbed 	.word	0x0800cbed
 800cbcc:	0800cbf5 	.word	0x0800cbf5
 800cbd0:	0800cbfd 	.word	0x0800cbfd
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbda:	e154      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cbdc:	2304      	movs	r3, #4
 800cbde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbe2:	e150      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cbe4:	2308      	movs	r3, #8
 800cbe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbea:	e14c      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cbec:	2310      	movs	r3, #16
 800cbee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbf2:	e148      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cbf4:	2320      	movs	r3, #32
 800cbf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbfa:	e144      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cbfc:	2340      	movs	r3, #64	; 0x40
 800cbfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc02:	e140      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cc04:	2380      	movs	r3, #128	; 0x80
 800cc06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc0a:	e13c      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4a41      	ldr	r2, [pc, #260]	; (800cd18 <UART_SetConfig+0x63c>)
 800cc12:	4293      	cmp	r3, r2
 800cc14:	f040 8082 	bne.w	800cd1c <UART_SetConfig+0x640>
 800cc18:	4b3c      	ldr	r3, [pc, #240]	; (800cd0c <UART_SetConfig+0x630>)
 800cc1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cc20:	2b28      	cmp	r3, #40	; 0x28
 800cc22:	d86d      	bhi.n	800cd00 <UART_SetConfig+0x624>
 800cc24:	a201      	add	r2, pc, #4	; (adr r2, 800cc2c <UART_SetConfig+0x550>)
 800cc26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc2a:	bf00      	nop
 800cc2c:	0800ccd1 	.word	0x0800ccd1
 800cc30:	0800cd01 	.word	0x0800cd01
 800cc34:	0800cd01 	.word	0x0800cd01
 800cc38:	0800cd01 	.word	0x0800cd01
 800cc3c:	0800cd01 	.word	0x0800cd01
 800cc40:	0800cd01 	.word	0x0800cd01
 800cc44:	0800cd01 	.word	0x0800cd01
 800cc48:	0800cd01 	.word	0x0800cd01
 800cc4c:	0800ccd9 	.word	0x0800ccd9
 800cc50:	0800cd01 	.word	0x0800cd01
 800cc54:	0800cd01 	.word	0x0800cd01
 800cc58:	0800cd01 	.word	0x0800cd01
 800cc5c:	0800cd01 	.word	0x0800cd01
 800cc60:	0800cd01 	.word	0x0800cd01
 800cc64:	0800cd01 	.word	0x0800cd01
 800cc68:	0800cd01 	.word	0x0800cd01
 800cc6c:	0800cce1 	.word	0x0800cce1
 800cc70:	0800cd01 	.word	0x0800cd01
 800cc74:	0800cd01 	.word	0x0800cd01
 800cc78:	0800cd01 	.word	0x0800cd01
 800cc7c:	0800cd01 	.word	0x0800cd01
 800cc80:	0800cd01 	.word	0x0800cd01
 800cc84:	0800cd01 	.word	0x0800cd01
 800cc88:	0800cd01 	.word	0x0800cd01
 800cc8c:	0800cce9 	.word	0x0800cce9
 800cc90:	0800cd01 	.word	0x0800cd01
 800cc94:	0800cd01 	.word	0x0800cd01
 800cc98:	0800cd01 	.word	0x0800cd01
 800cc9c:	0800cd01 	.word	0x0800cd01
 800cca0:	0800cd01 	.word	0x0800cd01
 800cca4:	0800cd01 	.word	0x0800cd01
 800cca8:	0800cd01 	.word	0x0800cd01
 800ccac:	0800ccf1 	.word	0x0800ccf1
 800ccb0:	0800cd01 	.word	0x0800cd01
 800ccb4:	0800cd01 	.word	0x0800cd01
 800ccb8:	0800cd01 	.word	0x0800cd01
 800ccbc:	0800cd01 	.word	0x0800cd01
 800ccc0:	0800cd01 	.word	0x0800cd01
 800ccc4:	0800cd01 	.word	0x0800cd01
 800ccc8:	0800cd01 	.word	0x0800cd01
 800cccc:	0800ccf9 	.word	0x0800ccf9
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccd6:	e0d6      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800ccd8:	2304      	movs	r3, #4
 800ccda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccde:	e0d2      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cce0:	2308      	movs	r3, #8
 800cce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cce6:	e0ce      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cce8:	2310      	movs	r3, #16
 800ccea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccee:	e0ca      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800ccf0:	2320      	movs	r3, #32
 800ccf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccf6:	e0c6      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800ccf8:	2340      	movs	r3, #64	; 0x40
 800ccfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccfe:	e0c2      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cd00:	2380      	movs	r3, #128	; 0x80
 800cd02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd06:	e0be      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cd08:	40011400 	.word	0x40011400
 800cd0c:	58024400 	.word	0x58024400
 800cd10:	40007800 	.word	0x40007800
 800cd14:	40007c00 	.word	0x40007c00
 800cd18:	40011800 	.word	0x40011800
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4aad      	ldr	r2, [pc, #692]	; (800cfd8 <UART_SetConfig+0x8fc>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d176      	bne.n	800ce14 <UART_SetConfig+0x738>
 800cd26:	4bad      	ldr	r3, [pc, #692]	; (800cfdc <UART_SetConfig+0x900>)
 800cd28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cd2e:	2b28      	cmp	r3, #40	; 0x28
 800cd30:	d86c      	bhi.n	800ce0c <UART_SetConfig+0x730>
 800cd32:	a201      	add	r2, pc, #4	; (adr r2, 800cd38 <UART_SetConfig+0x65c>)
 800cd34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd38:	0800cddd 	.word	0x0800cddd
 800cd3c:	0800ce0d 	.word	0x0800ce0d
 800cd40:	0800ce0d 	.word	0x0800ce0d
 800cd44:	0800ce0d 	.word	0x0800ce0d
 800cd48:	0800ce0d 	.word	0x0800ce0d
 800cd4c:	0800ce0d 	.word	0x0800ce0d
 800cd50:	0800ce0d 	.word	0x0800ce0d
 800cd54:	0800ce0d 	.word	0x0800ce0d
 800cd58:	0800cde5 	.word	0x0800cde5
 800cd5c:	0800ce0d 	.word	0x0800ce0d
 800cd60:	0800ce0d 	.word	0x0800ce0d
 800cd64:	0800ce0d 	.word	0x0800ce0d
 800cd68:	0800ce0d 	.word	0x0800ce0d
 800cd6c:	0800ce0d 	.word	0x0800ce0d
 800cd70:	0800ce0d 	.word	0x0800ce0d
 800cd74:	0800ce0d 	.word	0x0800ce0d
 800cd78:	0800cded 	.word	0x0800cded
 800cd7c:	0800ce0d 	.word	0x0800ce0d
 800cd80:	0800ce0d 	.word	0x0800ce0d
 800cd84:	0800ce0d 	.word	0x0800ce0d
 800cd88:	0800ce0d 	.word	0x0800ce0d
 800cd8c:	0800ce0d 	.word	0x0800ce0d
 800cd90:	0800ce0d 	.word	0x0800ce0d
 800cd94:	0800ce0d 	.word	0x0800ce0d
 800cd98:	0800cdf5 	.word	0x0800cdf5
 800cd9c:	0800ce0d 	.word	0x0800ce0d
 800cda0:	0800ce0d 	.word	0x0800ce0d
 800cda4:	0800ce0d 	.word	0x0800ce0d
 800cda8:	0800ce0d 	.word	0x0800ce0d
 800cdac:	0800ce0d 	.word	0x0800ce0d
 800cdb0:	0800ce0d 	.word	0x0800ce0d
 800cdb4:	0800ce0d 	.word	0x0800ce0d
 800cdb8:	0800cdfd 	.word	0x0800cdfd
 800cdbc:	0800ce0d 	.word	0x0800ce0d
 800cdc0:	0800ce0d 	.word	0x0800ce0d
 800cdc4:	0800ce0d 	.word	0x0800ce0d
 800cdc8:	0800ce0d 	.word	0x0800ce0d
 800cdcc:	0800ce0d 	.word	0x0800ce0d
 800cdd0:	0800ce0d 	.word	0x0800ce0d
 800cdd4:	0800ce0d 	.word	0x0800ce0d
 800cdd8:	0800ce05 	.word	0x0800ce05
 800cddc:	2301      	movs	r3, #1
 800cdde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cde2:	e050      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cde4:	2304      	movs	r3, #4
 800cde6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdea:	e04c      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cdec:	2308      	movs	r3, #8
 800cdee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdf2:	e048      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cdf4:	2310      	movs	r3, #16
 800cdf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdfa:	e044      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800cdfc:	2320      	movs	r3, #32
 800cdfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce02:	e040      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800ce04:	2340      	movs	r3, #64	; 0x40
 800ce06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce0a:	e03c      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800ce0c:	2380      	movs	r3, #128	; 0x80
 800ce0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce12:	e038      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	4a71      	ldr	r2, [pc, #452]	; (800cfe0 <UART_SetConfig+0x904>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d130      	bne.n	800ce80 <UART_SetConfig+0x7a4>
 800ce1e:	4b6f      	ldr	r3, [pc, #444]	; (800cfdc <UART_SetConfig+0x900>)
 800ce20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce22:	f003 0307 	and.w	r3, r3, #7
 800ce26:	2b05      	cmp	r3, #5
 800ce28:	d826      	bhi.n	800ce78 <UART_SetConfig+0x79c>
 800ce2a:	a201      	add	r2, pc, #4	; (adr r2, 800ce30 <UART_SetConfig+0x754>)
 800ce2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce30:	0800ce49 	.word	0x0800ce49
 800ce34:	0800ce51 	.word	0x0800ce51
 800ce38:	0800ce59 	.word	0x0800ce59
 800ce3c:	0800ce61 	.word	0x0800ce61
 800ce40:	0800ce69 	.word	0x0800ce69
 800ce44:	0800ce71 	.word	0x0800ce71
 800ce48:	2302      	movs	r3, #2
 800ce4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce4e:	e01a      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800ce50:	2304      	movs	r3, #4
 800ce52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce56:	e016      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800ce58:	2308      	movs	r3, #8
 800ce5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce5e:	e012      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800ce60:	2310      	movs	r3, #16
 800ce62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce66:	e00e      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800ce68:	2320      	movs	r3, #32
 800ce6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce6e:	e00a      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800ce70:	2340      	movs	r3, #64	; 0x40
 800ce72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce76:	e006      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800ce78:	2380      	movs	r3, #128	; 0x80
 800ce7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce7e:	e002      	b.n	800ce86 <UART_SetConfig+0x7aa>
 800ce80:	2380      	movs	r3, #128	; 0x80
 800ce82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	4a55      	ldr	r2, [pc, #340]	; (800cfe0 <UART_SetConfig+0x904>)
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	f040 80f0 	bne.w	800d072 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ce92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ce96:	2b20      	cmp	r3, #32
 800ce98:	dc46      	bgt.n	800cf28 <UART_SetConfig+0x84c>
 800ce9a:	2b02      	cmp	r3, #2
 800ce9c:	db75      	blt.n	800cf8a <UART_SetConfig+0x8ae>
 800ce9e:	3b02      	subs	r3, #2
 800cea0:	2b1e      	cmp	r3, #30
 800cea2:	d872      	bhi.n	800cf8a <UART_SetConfig+0x8ae>
 800cea4:	a201      	add	r2, pc, #4	; (adr r2, 800ceac <UART_SetConfig+0x7d0>)
 800cea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceaa:	bf00      	nop
 800ceac:	0800cf2f 	.word	0x0800cf2f
 800ceb0:	0800cf8b 	.word	0x0800cf8b
 800ceb4:	0800cf37 	.word	0x0800cf37
 800ceb8:	0800cf8b 	.word	0x0800cf8b
 800cebc:	0800cf8b 	.word	0x0800cf8b
 800cec0:	0800cf8b 	.word	0x0800cf8b
 800cec4:	0800cf47 	.word	0x0800cf47
 800cec8:	0800cf8b 	.word	0x0800cf8b
 800cecc:	0800cf8b 	.word	0x0800cf8b
 800ced0:	0800cf8b 	.word	0x0800cf8b
 800ced4:	0800cf8b 	.word	0x0800cf8b
 800ced8:	0800cf8b 	.word	0x0800cf8b
 800cedc:	0800cf8b 	.word	0x0800cf8b
 800cee0:	0800cf8b 	.word	0x0800cf8b
 800cee4:	0800cf57 	.word	0x0800cf57
 800cee8:	0800cf8b 	.word	0x0800cf8b
 800ceec:	0800cf8b 	.word	0x0800cf8b
 800cef0:	0800cf8b 	.word	0x0800cf8b
 800cef4:	0800cf8b 	.word	0x0800cf8b
 800cef8:	0800cf8b 	.word	0x0800cf8b
 800cefc:	0800cf8b 	.word	0x0800cf8b
 800cf00:	0800cf8b 	.word	0x0800cf8b
 800cf04:	0800cf8b 	.word	0x0800cf8b
 800cf08:	0800cf8b 	.word	0x0800cf8b
 800cf0c:	0800cf8b 	.word	0x0800cf8b
 800cf10:	0800cf8b 	.word	0x0800cf8b
 800cf14:	0800cf8b 	.word	0x0800cf8b
 800cf18:	0800cf8b 	.word	0x0800cf8b
 800cf1c:	0800cf8b 	.word	0x0800cf8b
 800cf20:	0800cf8b 	.word	0x0800cf8b
 800cf24:	0800cf7d 	.word	0x0800cf7d
 800cf28:	2b40      	cmp	r3, #64	; 0x40
 800cf2a:	d02a      	beq.n	800cf82 <UART_SetConfig+0x8a6>
 800cf2c:	e02d      	b.n	800cf8a <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cf2e:	f7fc fd37 	bl	80099a0 <HAL_RCCEx_GetD3PCLK1Freq>
 800cf32:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cf34:	e02f      	b.n	800cf96 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf36:	f107 0314 	add.w	r3, r7, #20
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7fc fd46 	bl	80099cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cf40:	69bb      	ldr	r3, [r7, #24]
 800cf42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf44:	e027      	b.n	800cf96 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf46:	f107 0308 	add.w	r3, r7, #8
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f7fc fe92 	bl	8009c74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf54:	e01f      	b.n	800cf96 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf56:	4b21      	ldr	r3, [pc, #132]	; (800cfdc <UART_SetConfig+0x900>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f003 0320 	and.w	r3, r3, #32
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d009      	beq.n	800cf76 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cf62:	4b1e      	ldr	r3, [pc, #120]	; (800cfdc <UART_SetConfig+0x900>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	08db      	lsrs	r3, r3, #3
 800cf68:	f003 0303 	and.w	r3, r3, #3
 800cf6c:	4a1d      	ldr	r2, [pc, #116]	; (800cfe4 <UART_SetConfig+0x908>)
 800cf6e:	fa22 f303 	lsr.w	r3, r2, r3
 800cf72:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cf74:	e00f      	b.n	800cf96 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800cf76:	4b1b      	ldr	r3, [pc, #108]	; (800cfe4 <UART_SetConfig+0x908>)
 800cf78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf7a:	e00c      	b.n	800cf96 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cf7c:	4b1a      	ldr	r3, [pc, #104]	; (800cfe8 <UART_SetConfig+0x90c>)
 800cf7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf80:	e009      	b.n	800cf96 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf88:	e005      	b.n	800cf96 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cf8e:	2301      	movs	r3, #1
 800cf90:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cf94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cf96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	f000 81e6 	beq.w	800d36a <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfa2:	4a12      	ldr	r2, [pc, #72]	; (800cfec <UART_SetConfig+0x910>)
 800cfa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfa8:	461a      	mov	r2, r3
 800cfaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfac:	fbb3 f3f2 	udiv	r3, r3, r2
 800cfb0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	685a      	ldr	r2, [r3, #4]
 800cfb6:	4613      	mov	r3, r2
 800cfb8:	005b      	lsls	r3, r3, #1
 800cfba:	4413      	add	r3, r2
 800cfbc:	6a3a      	ldr	r2, [r7, #32]
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d305      	bcc.n	800cfce <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	685b      	ldr	r3, [r3, #4]
 800cfc6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cfc8:	6a3a      	ldr	r2, [r7, #32]
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d910      	bls.n	800cff0 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800cfce:	2301      	movs	r3, #1
 800cfd0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cfd4:	e1c9      	b.n	800d36a <UART_SetConfig+0xc8e>
 800cfd6:	bf00      	nop
 800cfd8:	40011c00 	.word	0x40011c00
 800cfdc:	58024400 	.word	0x58024400
 800cfe0:	58000c00 	.word	0x58000c00
 800cfe4:	03d09000 	.word	0x03d09000
 800cfe8:	003d0900 	.word	0x003d0900
 800cfec:	0800e3cc 	.word	0x0800e3cc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff2:	4618      	mov	r0, r3
 800cff4:	f04f 0100 	mov.w	r1, #0
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cffc:	4ac1      	ldr	r2, [pc, #772]	; (800d304 <UART_SetConfig+0xc28>)
 800cffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d002:	b29a      	uxth	r2, r3
 800d004:	f04f 0300 	mov.w	r3, #0
 800d008:	f7f3 f980 	bl	800030c <__aeabi_uldivmod>
 800d00c:	4602      	mov	r2, r0
 800d00e:	460b      	mov	r3, r1
 800d010:	4610      	mov	r0, r2
 800d012:	4619      	mov	r1, r3
 800d014:	f04f 0200 	mov.w	r2, #0
 800d018:	f04f 0300 	mov.w	r3, #0
 800d01c:	020b      	lsls	r3, r1, #8
 800d01e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d022:	0202      	lsls	r2, r0, #8
 800d024:	6879      	ldr	r1, [r7, #4]
 800d026:	6849      	ldr	r1, [r1, #4]
 800d028:	0849      	lsrs	r1, r1, #1
 800d02a:	4608      	mov	r0, r1
 800d02c:	f04f 0100 	mov.w	r1, #0
 800d030:	1814      	adds	r4, r2, r0
 800d032:	eb43 0501 	adc.w	r5, r3, r1
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	685b      	ldr	r3, [r3, #4]
 800d03a:	461a      	mov	r2, r3
 800d03c:	f04f 0300 	mov.w	r3, #0
 800d040:	4620      	mov	r0, r4
 800d042:	4629      	mov	r1, r5
 800d044:	f7f3 f962 	bl	800030c <__aeabi_uldivmod>
 800d048:	4602      	mov	r2, r0
 800d04a:	460b      	mov	r3, r1
 800d04c:	4613      	mov	r3, r2
 800d04e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d052:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d056:	d308      	bcc.n	800d06a <UART_SetConfig+0x98e>
 800d058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d05e:	d204      	bcs.n	800d06a <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d066:	60da      	str	r2, [r3, #12]
 800d068:	e17f      	b.n	800d36a <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800d06a:	2301      	movs	r3, #1
 800d06c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d070:	e17b      	b.n	800d36a <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	69db      	ldr	r3, [r3, #28]
 800d076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d07a:	f040 80bd 	bne.w	800d1f8 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800d07e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d082:	2b20      	cmp	r3, #32
 800d084:	dc48      	bgt.n	800d118 <UART_SetConfig+0xa3c>
 800d086:	2b00      	cmp	r3, #0
 800d088:	db7b      	blt.n	800d182 <UART_SetConfig+0xaa6>
 800d08a:	2b20      	cmp	r3, #32
 800d08c:	d879      	bhi.n	800d182 <UART_SetConfig+0xaa6>
 800d08e:	a201      	add	r2, pc, #4	; (adr r2, 800d094 <UART_SetConfig+0x9b8>)
 800d090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d094:	0800d11f 	.word	0x0800d11f
 800d098:	0800d127 	.word	0x0800d127
 800d09c:	0800d183 	.word	0x0800d183
 800d0a0:	0800d183 	.word	0x0800d183
 800d0a4:	0800d12f 	.word	0x0800d12f
 800d0a8:	0800d183 	.word	0x0800d183
 800d0ac:	0800d183 	.word	0x0800d183
 800d0b0:	0800d183 	.word	0x0800d183
 800d0b4:	0800d13f 	.word	0x0800d13f
 800d0b8:	0800d183 	.word	0x0800d183
 800d0bc:	0800d183 	.word	0x0800d183
 800d0c0:	0800d183 	.word	0x0800d183
 800d0c4:	0800d183 	.word	0x0800d183
 800d0c8:	0800d183 	.word	0x0800d183
 800d0cc:	0800d183 	.word	0x0800d183
 800d0d0:	0800d183 	.word	0x0800d183
 800d0d4:	0800d14f 	.word	0x0800d14f
 800d0d8:	0800d183 	.word	0x0800d183
 800d0dc:	0800d183 	.word	0x0800d183
 800d0e0:	0800d183 	.word	0x0800d183
 800d0e4:	0800d183 	.word	0x0800d183
 800d0e8:	0800d183 	.word	0x0800d183
 800d0ec:	0800d183 	.word	0x0800d183
 800d0f0:	0800d183 	.word	0x0800d183
 800d0f4:	0800d183 	.word	0x0800d183
 800d0f8:	0800d183 	.word	0x0800d183
 800d0fc:	0800d183 	.word	0x0800d183
 800d100:	0800d183 	.word	0x0800d183
 800d104:	0800d183 	.word	0x0800d183
 800d108:	0800d183 	.word	0x0800d183
 800d10c:	0800d183 	.word	0x0800d183
 800d110:	0800d183 	.word	0x0800d183
 800d114:	0800d175 	.word	0x0800d175
 800d118:	2b40      	cmp	r3, #64	; 0x40
 800d11a:	d02e      	beq.n	800d17a <UART_SetConfig+0xa9e>
 800d11c:	e031      	b.n	800d182 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d11e:	f7fb f8f5 	bl	800830c <HAL_RCC_GetPCLK1Freq>
 800d122:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d124:	e033      	b.n	800d18e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d126:	f7fb f907 	bl	8008338 <HAL_RCC_GetPCLK2Freq>
 800d12a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d12c:	e02f      	b.n	800d18e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d12e:	f107 0314 	add.w	r3, r7, #20
 800d132:	4618      	mov	r0, r3
 800d134:	f7fc fc4a 	bl	80099cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d138:	69bb      	ldr	r3, [r7, #24]
 800d13a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d13c:	e027      	b.n	800d18e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d13e:	f107 0308 	add.w	r3, r7, #8
 800d142:	4618      	mov	r0, r3
 800d144:	f7fc fd96 	bl	8009c74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d14c:	e01f      	b.n	800d18e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d14e:	4b6e      	ldr	r3, [pc, #440]	; (800d308 <UART_SetConfig+0xc2c>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	f003 0320 	and.w	r3, r3, #32
 800d156:	2b00      	cmp	r3, #0
 800d158:	d009      	beq.n	800d16e <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d15a:	4b6b      	ldr	r3, [pc, #428]	; (800d308 <UART_SetConfig+0xc2c>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	08db      	lsrs	r3, r3, #3
 800d160:	f003 0303 	and.w	r3, r3, #3
 800d164:	4a69      	ldr	r2, [pc, #420]	; (800d30c <UART_SetConfig+0xc30>)
 800d166:	fa22 f303 	lsr.w	r3, r2, r3
 800d16a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d16c:	e00f      	b.n	800d18e <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800d16e:	4b67      	ldr	r3, [pc, #412]	; (800d30c <UART_SetConfig+0xc30>)
 800d170:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d172:	e00c      	b.n	800d18e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d174:	4b66      	ldr	r3, [pc, #408]	; (800d310 <UART_SetConfig+0xc34>)
 800d176:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d178:	e009      	b.n	800d18e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d17a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d17e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d180:	e005      	b.n	800d18e <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800d182:	2300      	movs	r3, #0
 800d184:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d186:	2301      	movs	r3, #1
 800d188:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d18c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d190:	2b00      	cmp	r3, #0
 800d192:	f000 80ea 	beq.w	800d36a <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d19a:	4a5a      	ldr	r2, [pc, #360]	; (800d304 <UART_SetConfig+0xc28>)
 800d19c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d1a8:	005a      	lsls	r2, r3, #1
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	685b      	ldr	r3, [r3, #4]
 800d1ae:	085b      	lsrs	r3, r3, #1
 800d1b0:	441a      	add	r2, r3
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	685b      	ldr	r3, [r3, #4]
 800d1b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1ba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1be:	2b0f      	cmp	r3, #15
 800d1c0:	d916      	bls.n	800d1f0 <UART_SetConfig+0xb14>
 800d1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1c8:	d212      	bcs.n	800d1f0 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1cc:	b29b      	uxth	r3, r3
 800d1ce:	f023 030f 	bic.w	r3, r3, #15
 800d1d2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d6:	085b      	lsrs	r3, r3, #1
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	f003 0307 	and.w	r3, r3, #7
 800d1de:	b29a      	uxth	r2, r3
 800d1e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d1e2:	4313      	orrs	r3, r2
 800d1e4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d1ec:	60da      	str	r2, [r3, #12]
 800d1ee:	e0bc      	b.n	800d36a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d1f6:	e0b8      	b.n	800d36a <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d1f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d1fc:	2b20      	cmp	r3, #32
 800d1fe:	dc4b      	bgt.n	800d298 <UART_SetConfig+0xbbc>
 800d200:	2b00      	cmp	r3, #0
 800d202:	f2c0 8087 	blt.w	800d314 <UART_SetConfig+0xc38>
 800d206:	2b20      	cmp	r3, #32
 800d208:	f200 8084 	bhi.w	800d314 <UART_SetConfig+0xc38>
 800d20c:	a201      	add	r2, pc, #4	; (adr r2, 800d214 <UART_SetConfig+0xb38>)
 800d20e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d212:	bf00      	nop
 800d214:	0800d29f 	.word	0x0800d29f
 800d218:	0800d2a7 	.word	0x0800d2a7
 800d21c:	0800d315 	.word	0x0800d315
 800d220:	0800d315 	.word	0x0800d315
 800d224:	0800d2af 	.word	0x0800d2af
 800d228:	0800d315 	.word	0x0800d315
 800d22c:	0800d315 	.word	0x0800d315
 800d230:	0800d315 	.word	0x0800d315
 800d234:	0800d2bf 	.word	0x0800d2bf
 800d238:	0800d315 	.word	0x0800d315
 800d23c:	0800d315 	.word	0x0800d315
 800d240:	0800d315 	.word	0x0800d315
 800d244:	0800d315 	.word	0x0800d315
 800d248:	0800d315 	.word	0x0800d315
 800d24c:	0800d315 	.word	0x0800d315
 800d250:	0800d315 	.word	0x0800d315
 800d254:	0800d2cf 	.word	0x0800d2cf
 800d258:	0800d315 	.word	0x0800d315
 800d25c:	0800d315 	.word	0x0800d315
 800d260:	0800d315 	.word	0x0800d315
 800d264:	0800d315 	.word	0x0800d315
 800d268:	0800d315 	.word	0x0800d315
 800d26c:	0800d315 	.word	0x0800d315
 800d270:	0800d315 	.word	0x0800d315
 800d274:	0800d315 	.word	0x0800d315
 800d278:	0800d315 	.word	0x0800d315
 800d27c:	0800d315 	.word	0x0800d315
 800d280:	0800d315 	.word	0x0800d315
 800d284:	0800d315 	.word	0x0800d315
 800d288:	0800d315 	.word	0x0800d315
 800d28c:	0800d315 	.word	0x0800d315
 800d290:	0800d315 	.word	0x0800d315
 800d294:	0800d2f5 	.word	0x0800d2f5
 800d298:	2b40      	cmp	r3, #64	; 0x40
 800d29a:	d02e      	beq.n	800d2fa <UART_SetConfig+0xc1e>
 800d29c:	e03a      	b.n	800d314 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d29e:	f7fb f835 	bl	800830c <HAL_RCC_GetPCLK1Freq>
 800d2a2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d2a4:	e03c      	b.n	800d320 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d2a6:	f7fb f847 	bl	8008338 <HAL_RCC_GetPCLK2Freq>
 800d2aa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d2ac:	e038      	b.n	800d320 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2ae:	f107 0314 	add.w	r3, r7, #20
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7fc fb8a 	bl	80099cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d2b8:	69bb      	ldr	r3, [r7, #24]
 800d2ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2bc:	e030      	b.n	800d320 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d2be:	f107 0308 	add.w	r3, r7, #8
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f7fc fcd6 	bl	8009c74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2cc:	e028      	b.n	800d320 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d2ce:	4b0e      	ldr	r3, [pc, #56]	; (800d308 <UART_SetConfig+0xc2c>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	f003 0320 	and.w	r3, r3, #32
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d009      	beq.n	800d2ee <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d2da:	4b0b      	ldr	r3, [pc, #44]	; (800d308 <UART_SetConfig+0xc2c>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	08db      	lsrs	r3, r3, #3
 800d2e0:	f003 0303 	and.w	r3, r3, #3
 800d2e4:	4a09      	ldr	r2, [pc, #36]	; (800d30c <UART_SetConfig+0xc30>)
 800d2e6:	fa22 f303 	lsr.w	r3, r2, r3
 800d2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d2ec:	e018      	b.n	800d320 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800d2ee:	4b07      	ldr	r3, [pc, #28]	; (800d30c <UART_SetConfig+0xc30>)
 800d2f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2f2:	e015      	b.n	800d320 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d2f4:	4b06      	ldr	r3, [pc, #24]	; (800d310 <UART_SetConfig+0xc34>)
 800d2f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2f8:	e012      	b.n	800d320 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d2fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d2fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d300:	e00e      	b.n	800d320 <UART_SetConfig+0xc44>
 800d302:	bf00      	nop
 800d304:	0800e3cc 	.word	0x0800e3cc
 800d308:	58024400 	.word	0x58024400
 800d30c:	03d09000 	.word	0x03d09000
 800d310:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800d314:	2300      	movs	r3, #0
 800d316:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d318:	2301      	movs	r3, #1
 800d31a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d31e:	bf00      	nop
    }

    if (pclk != 0U)
 800d320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d322:	2b00      	cmp	r3, #0
 800d324:	d021      	beq.n	800d36a <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d32a:	4a1a      	ldr	r2, [pc, #104]	; (800d394 <UART_SetConfig+0xcb8>)
 800d32c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d330:	461a      	mov	r2, r3
 800d332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d334:	fbb3 f2f2 	udiv	r2, r3, r2
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	685b      	ldr	r3, [r3, #4]
 800d33c:	085b      	lsrs	r3, r3, #1
 800d33e:	441a      	add	r2, r3
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	fbb2 f3f3 	udiv	r3, r2, r3
 800d348:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d34c:	2b0f      	cmp	r3, #15
 800d34e:	d909      	bls.n	800d364 <UART_SetConfig+0xc88>
 800d350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d356:	d205      	bcs.n	800d364 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d35a:	b29a      	uxth	r2, r3
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	60da      	str	r2, [r3, #12]
 800d362:	e002      	b.n	800d36a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800d364:	2301      	movs	r3, #1
 800d366:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2201      	movs	r2, #1
 800d36e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2201      	movs	r2, #1
 800d376:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2200      	movs	r2, #0
 800d37e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2200      	movs	r2, #0
 800d384:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d386:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	3738      	adds	r7, #56	; 0x38
 800d38e:	46bd      	mov	sp, r7
 800d390:	bdb0      	pop	{r4, r5, r7, pc}
 800d392:	bf00      	nop
 800d394:	0800e3cc 	.word	0x0800e3cc

0800d398 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d398:	b480      	push	{r7}
 800d39a:	b083      	sub	sp, #12
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3a4:	f003 0301 	and.w	r3, r3, #1
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d00a      	beq.n	800d3c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	430a      	orrs	r2, r1
 800d3c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3c6:	f003 0302 	and.w	r3, r3, #2
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d00a      	beq.n	800d3e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	430a      	orrs	r2, r1
 800d3e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3e8:	f003 0304 	and.w	r3, r3, #4
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d00a      	beq.n	800d406 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	685b      	ldr	r3, [r3, #4]
 800d3f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	430a      	orrs	r2, r1
 800d404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d40a:	f003 0308 	and.w	r3, r3, #8
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d00a      	beq.n	800d428 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	430a      	orrs	r2, r1
 800d426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d42c:	f003 0310 	and.w	r3, r3, #16
 800d430:	2b00      	cmp	r3, #0
 800d432:	d00a      	beq.n	800d44a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	689b      	ldr	r3, [r3, #8]
 800d43a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	430a      	orrs	r2, r1
 800d448:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d44e:	f003 0320 	and.w	r3, r3, #32
 800d452:	2b00      	cmp	r3, #0
 800d454:	d00a      	beq.n	800d46c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	689b      	ldr	r3, [r3, #8]
 800d45c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	430a      	orrs	r2, r1
 800d46a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d474:	2b00      	cmp	r3, #0
 800d476:	d01a      	beq.n	800d4ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	430a      	orrs	r2, r1
 800d48c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d496:	d10a      	bne.n	800d4ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	685b      	ldr	r3, [r3, #4]
 800d49e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	430a      	orrs	r2, r1
 800d4ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00a      	beq.n	800d4d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	685b      	ldr	r3, [r3, #4]
 800d4c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	430a      	orrs	r2, r1
 800d4ce:	605a      	str	r2, [r3, #4]
  }
}
 800d4d0:	bf00      	nop
 800d4d2:	370c      	adds	r7, #12
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr

0800d4dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b086      	sub	sp, #24
 800d4e0:	af02      	add	r7, sp, #8
 800d4e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d4ec:	f7f5 fd6c 	bl	8002fc8 <HAL_GetTick>
 800d4f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f003 0308 	and.w	r3, r3, #8
 800d4fc:	2b08      	cmp	r3, #8
 800d4fe:	d10e      	bne.n	800d51e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d500:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d504:	9300      	str	r3, [sp, #0]
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	2200      	movs	r2, #0
 800d50a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f000 f82f 	bl	800d572 <UART_WaitOnFlagUntilTimeout>
 800d514:	4603      	mov	r3, r0
 800d516:	2b00      	cmp	r3, #0
 800d518:	d001      	beq.n	800d51e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d51a:	2303      	movs	r3, #3
 800d51c:	e025      	b.n	800d56a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	f003 0304 	and.w	r3, r3, #4
 800d528:	2b04      	cmp	r3, #4
 800d52a:	d10e      	bne.n	800d54a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d52c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d530:	9300      	str	r3, [sp, #0]
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	2200      	movs	r2, #0
 800d536:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f000 f819 	bl	800d572 <UART_WaitOnFlagUntilTimeout>
 800d540:	4603      	mov	r3, r0
 800d542:	2b00      	cmp	r3, #0
 800d544:	d001      	beq.n	800d54a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d546:	2303      	movs	r3, #3
 800d548:	e00f      	b.n	800d56a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2220      	movs	r2, #32
 800d54e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2220      	movs	r2, #32
 800d556:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2200      	movs	r2, #0
 800d55e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2200      	movs	r2, #0
 800d564:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d568:	2300      	movs	r3, #0
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3710      	adds	r7, #16
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}

0800d572 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d572:	b580      	push	{r7, lr}
 800d574:	b09c      	sub	sp, #112	; 0x70
 800d576:	af00      	add	r7, sp, #0
 800d578:	60f8      	str	r0, [r7, #12]
 800d57a:	60b9      	str	r1, [r7, #8]
 800d57c:	603b      	str	r3, [r7, #0]
 800d57e:	4613      	mov	r3, r2
 800d580:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d582:	e0a9      	b.n	800d6d8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d584:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d58a:	f000 80a5 	beq.w	800d6d8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d58e:	f7f5 fd1b 	bl	8002fc8 <HAL_GetTick>
 800d592:	4602      	mov	r2, r0
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	1ad3      	subs	r3, r2, r3
 800d598:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d302      	bcc.n	800d5a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800d59e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d140      	bne.n	800d626 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5ac:	e853 3f00 	ldrex	r3, [r3]
 800d5b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d5b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d5b8:	667b      	str	r3, [r7, #100]	; 0x64
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	461a      	mov	r2, r3
 800d5c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d5c4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d5c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d5ca:	e841 2300 	strex	r3, r2, [r1]
 800d5ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d5d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d1e6      	bne.n	800d5a4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	3308      	adds	r3, #8
 800d5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5e0:	e853 3f00 	ldrex	r3, [r3]
 800d5e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5e8:	f023 0301 	bic.w	r3, r3, #1
 800d5ec:	663b      	str	r3, [r7, #96]	; 0x60
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	3308      	adds	r3, #8
 800d5f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d5f6:	64ba      	str	r2, [r7, #72]	; 0x48
 800d5f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d5fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5fe:	e841 2300 	strex	r3, r2, [r1]
 800d602:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d606:	2b00      	cmp	r3, #0
 800d608:	d1e5      	bne.n	800d5d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2220      	movs	r2, #32
 800d60e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	2220      	movs	r2, #32
 800d616:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	2200      	movs	r2, #0
 800d61e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d622:	2303      	movs	r3, #3
 800d624:	e069      	b.n	800d6fa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f003 0304 	and.w	r3, r3, #4
 800d630:	2b00      	cmp	r3, #0
 800d632:	d051      	beq.n	800d6d8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	69db      	ldr	r3, [r3, #28]
 800d63a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d63e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d642:	d149      	bne.n	800d6d8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d64c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d656:	e853 3f00 	ldrex	r3, [r3]
 800d65a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d65e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d662:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	461a      	mov	r2, r3
 800d66a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d66c:	637b      	str	r3, [r7, #52]	; 0x34
 800d66e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d670:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d672:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d674:	e841 2300 	strex	r3, r2, [r1]
 800d678:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d1e6      	bne.n	800d64e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	3308      	adds	r3, #8
 800d686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	e853 3f00 	ldrex	r3, [r3]
 800d68e:	613b      	str	r3, [r7, #16]
   return(result);
 800d690:	693b      	ldr	r3, [r7, #16]
 800d692:	f023 0301 	bic.w	r3, r3, #1
 800d696:	66bb      	str	r3, [r7, #104]	; 0x68
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	3308      	adds	r3, #8
 800d69e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d6a0:	623a      	str	r2, [r7, #32]
 800d6a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6a4:	69f9      	ldr	r1, [r7, #28]
 800d6a6:	6a3a      	ldr	r2, [r7, #32]
 800d6a8:	e841 2300 	strex	r3, r2, [r1]
 800d6ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800d6ae:	69bb      	ldr	r3, [r7, #24]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d1e5      	bne.n	800d680 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	2220      	movs	r2, #32
 800d6b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	2220      	movs	r2, #32
 800d6c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	2220      	movs	r2, #32
 800d6c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d6d4:	2303      	movs	r3, #3
 800d6d6:	e010      	b.n	800d6fa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	69da      	ldr	r2, [r3, #28]
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	4013      	ands	r3, r2
 800d6e2:	68ba      	ldr	r2, [r7, #8]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	bf0c      	ite	eq
 800d6e8:	2301      	moveq	r3, #1
 800d6ea:	2300      	movne	r3, #0
 800d6ec:	b2db      	uxtb	r3, r3
 800d6ee:	461a      	mov	r2, r3
 800d6f0:	79fb      	ldrb	r3, [r7, #7]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	f43f af46 	beq.w	800d584 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d6f8:	2300      	movs	r3, #0
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3770      	adds	r7, #112	; 0x70
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}

0800d702 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d702:	b480      	push	{r7}
 800d704:	b085      	sub	sp, #20
 800d706:	af00      	add	r7, sp, #0
 800d708:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d710:	2b01      	cmp	r3, #1
 800d712:	d101      	bne.n	800d718 <HAL_UARTEx_DisableFifoMode+0x16>
 800d714:	2302      	movs	r3, #2
 800d716:	e027      	b.n	800d768 <HAL_UARTEx_DisableFifoMode+0x66>
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2201      	movs	r2, #1
 800d71c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2224      	movs	r2, #36	; 0x24
 800d724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	681a      	ldr	r2, [r3, #0]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f022 0201 	bic.w	r2, r2, #1
 800d73e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d746:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2200      	movs	r2, #0
 800d74c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	68fa      	ldr	r2, [r7, #12]
 800d754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2220      	movs	r2, #32
 800d75a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2200      	movs	r2, #0
 800d762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d766:	2300      	movs	r3, #0
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3714      	adds	r7, #20
 800d76c:	46bd      	mov	sp, r7
 800d76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d772:	4770      	bx	lr

0800d774 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b084      	sub	sp, #16
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d784:	2b01      	cmp	r3, #1
 800d786:	d101      	bne.n	800d78c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d788:	2302      	movs	r3, #2
 800d78a:	e02d      	b.n	800d7e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2201      	movs	r2, #1
 800d790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2224      	movs	r2, #36	; 0x24
 800d798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	681a      	ldr	r2, [r3, #0]
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f022 0201 	bic.w	r2, r2, #1
 800d7b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	689b      	ldr	r3, [r3, #8]
 800d7ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	683a      	ldr	r2, [r7, #0]
 800d7c4:	430a      	orrs	r2, r1
 800d7c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f000 f84f 	bl	800d86c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	68fa      	ldr	r2, [r7, #12]
 800d7d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2220      	movs	r2, #32
 800d7da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d7e6:	2300      	movs	r3, #0
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3710      	adds	r7, #16
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}

0800d7f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b084      	sub	sp, #16
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d800:	2b01      	cmp	r3, #1
 800d802:	d101      	bne.n	800d808 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d804:	2302      	movs	r3, #2
 800d806:	e02d      	b.n	800d864 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2201      	movs	r2, #1
 800d80c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2224      	movs	r2, #36	; 0x24
 800d814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	681a      	ldr	r2, [r3, #0]
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	f022 0201 	bic.w	r2, r2, #1
 800d82e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	689b      	ldr	r3, [r3, #8]
 800d836:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	683a      	ldr	r2, [r7, #0]
 800d840:	430a      	orrs	r2, r1
 800d842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f000 f811 	bl	800d86c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	68fa      	ldr	r2, [r7, #12]
 800d850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2220      	movs	r2, #32
 800d856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2200      	movs	r2, #0
 800d85e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d862:	2300      	movs	r3, #0
}
 800d864:	4618      	mov	r0, r3
 800d866:	3710      	adds	r7, #16
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d86c:	b480      	push	{r7}
 800d86e:	b085      	sub	sp, #20
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d108      	bne.n	800d88e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2201      	movs	r2, #1
 800d880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2201      	movs	r2, #1
 800d888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d88c:	e031      	b.n	800d8f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d88e:	2310      	movs	r3, #16
 800d890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d892:	2310      	movs	r3, #16
 800d894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	689b      	ldr	r3, [r3, #8]
 800d89c:	0e5b      	lsrs	r3, r3, #25
 800d89e:	b2db      	uxtb	r3, r3
 800d8a0:	f003 0307 	and.w	r3, r3, #7
 800d8a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	689b      	ldr	r3, [r3, #8]
 800d8ac:	0f5b      	lsrs	r3, r3, #29
 800d8ae:	b2db      	uxtb	r3, r3
 800d8b0:	f003 0307 	and.w	r3, r3, #7
 800d8b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d8b6:	7bbb      	ldrb	r3, [r7, #14]
 800d8b8:	7b3a      	ldrb	r2, [r7, #12]
 800d8ba:	4911      	ldr	r1, [pc, #68]	; (800d900 <UARTEx_SetNbDataToProcess+0x94>)
 800d8bc:	5c8a      	ldrb	r2, [r1, r2]
 800d8be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d8c2:	7b3a      	ldrb	r2, [r7, #12]
 800d8c4:	490f      	ldr	r1, [pc, #60]	; (800d904 <UARTEx_SetNbDataToProcess+0x98>)
 800d8c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d8c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d8cc:	b29a      	uxth	r2, r3
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d8d4:	7bfb      	ldrb	r3, [r7, #15]
 800d8d6:	7b7a      	ldrb	r2, [r7, #13]
 800d8d8:	4909      	ldr	r1, [pc, #36]	; (800d900 <UARTEx_SetNbDataToProcess+0x94>)
 800d8da:	5c8a      	ldrb	r2, [r1, r2]
 800d8dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d8e0:	7b7a      	ldrb	r2, [r7, #13]
 800d8e2:	4908      	ldr	r1, [pc, #32]	; (800d904 <UARTEx_SetNbDataToProcess+0x98>)
 800d8e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d8e6:	fb93 f3f2 	sdiv	r3, r3, r2
 800d8ea:	b29a      	uxth	r2, r3
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d8f2:	bf00      	nop
 800d8f4:	3714      	adds	r7, #20
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fc:	4770      	bx	lr
 800d8fe:	bf00      	nop
 800d900:	0800e3e4 	.word	0x0800e3e4
 800d904:	0800e3ec 	.word	0x0800e3ec

0800d908 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d908:	b084      	sub	sp, #16
 800d90a:	b480      	push	{r7}
 800d90c:	b085      	sub	sp, #20
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]
 800d912:	f107 001c 	add.w	r0, r7, #28
 800d916:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d91a:	2300      	movs	r3, #0
 800d91c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800d91e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800d920:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800d922:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800d924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800d926:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800d928:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800d92a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800d92e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800d930:	68fa      	ldr	r2, [r7, #12]
 800d932:	4313      	orrs	r3, r2
 800d934:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	685a      	ldr	r2, [r3, #4]
 800d93a:	4b07      	ldr	r3, [pc, #28]	; (800d958 <SDMMC_Init+0x50>)
 800d93c:	4013      	ands	r3, r2
 800d93e:	68fa      	ldr	r2, [r7, #12]
 800d940:	431a      	orrs	r2, r3
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d946:	2300      	movs	r3, #0
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3714      	adds	r7, #20
 800d94c:	46bd      	mov	sp, r7
 800d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d952:	b004      	add	sp, #16
 800d954:	4770      	bx	lr
 800d956:	bf00      	nop
 800d958:	ffc02c00 	.word	0xffc02c00

0800d95c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d95c:	b480      	push	{r7}
 800d95e:	b083      	sub	sp, #12
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	370c      	adds	r7, #12
 800d96e:	46bd      	mov	sp, r7
 800d970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d974:	4770      	bx	lr

0800d976 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d976:	b480      	push	{r7}
 800d978:	b083      	sub	sp, #12
 800d97a:	af00      	add	r7, sp, #0
 800d97c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f043 0203 	orr.w	r2, r3, #3
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d98a:	2300      	movs	r3, #0
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	370c      	adds	r7, #12
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr

0800d998 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d998:	b480      	push	{r7}
 800d99a:	b083      	sub	sp, #12
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	f003 0303 	and.w	r3, r3, #3
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	370c      	adds	r7, #12
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr

0800d9b4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b085      	sub	sp, #20
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	681a      	ldr	r2, [r3, #0]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d9d2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800d9d8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800d9de:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d9e0:	68fa      	ldr	r2, [r7, #12]
 800d9e2:	4313      	orrs	r3, r2
 800d9e4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	68da      	ldr	r2, [r3, #12]
 800d9ea:	4b06      	ldr	r3, [pc, #24]	; (800da04 <SDMMC_SendCommand+0x50>)
 800d9ec:	4013      	ands	r3, r2
 800d9ee:	68fa      	ldr	r2, [r7, #12]
 800d9f0:	431a      	orrs	r2, r3
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d9f6:	2300      	movs	r3, #0
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3714      	adds	r7, #20
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr
 800da04:	fffee0c0 	.word	0xfffee0c0

0800da08 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800da08:	b480      	push	{r7}
 800da0a:	b083      	sub	sp, #12
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	691b      	ldr	r3, [r3, #16]
 800da14:	b2db      	uxtb	r3, r3
}
 800da16:	4618      	mov	r0, r3
 800da18:	370c      	adds	r7, #12
 800da1a:	46bd      	mov	sp, r7
 800da1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da20:	4770      	bx	lr

0800da22 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800da22:	b480      	push	{r7}
 800da24:	b085      	sub	sp, #20
 800da26:	af00      	add	r7, sp, #0
 800da28:	6078      	str	r0, [r7, #4]
 800da2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	3314      	adds	r3, #20
 800da30:	461a      	mov	r2, r3
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	4413      	add	r3, r2
 800da36:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	681b      	ldr	r3, [r3, #0]
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3714      	adds	r7, #20
 800da40:	46bd      	mov	sp, r7
 800da42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da46:	4770      	bx	lr

0800da48 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800da48:	b480      	push	{r7}
 800da4a:	b085      	sub	sp, #20
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800da52:	2300      	movs	r3, #0
 800da54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	681a      	ldr	r2, [r3, #0]
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	685a      	ldr	r2, [r3, #4]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800da6e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800da74:	431a      	orrs	r2, r3
                       Data->DPSM);
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800da7a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800da7c:	68fa      	ldr	r2, [r7, #12]
 800da7e:	4313      	orrs	r3, r2
 800da80:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	431a      	orrs	r2, r3
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800da92:	2300      	movs	r3, #0

}
 800da94:	4618      	mov	r0, r3
 800da96:	3714      	adds	r7, #20
 800da98:	46bd      	mov	sp, r7
 800da9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9e:	4770      	bx	lr

0800daa0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b088      	sub	sp, #32
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800daae:	2310      	movs	r3, #16
 800dab0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dab6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dab8:	2300      	movs	r3, #0
 800daba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dabc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dac0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dac2:	f107 0308 	add.w	r3, r7, #8
 800dac6:	4619      	mov	r1, r3
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f7ff ff73 	bl	800d9b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800dace:	f241 3288 	movw	r2, #5000	; 0x1388
 800dad2:	2110      	movs	r1, #16
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f000 f995 	bl	800de04 <SDMMC_GetCmdResp1>
 800dada:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dadc:	69fb      	ldr	r3, [r7, #28]
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3720      	adds	r7, #32
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}

0800dae6 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b088      	sub	sp, #32
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]
 800daee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800daf4:	2307      	movs	r3, #7
 800daf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800daf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dafc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dafe:	2300      	movs	r3, #0
 800db00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db08:	f107 0308 	add.w	r3, r7, #8
 800db0c:	4619      	mov	r1, r3
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f7ff ff50 	bl	800d9b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800db14:	f241 3288 	movw	r2, #5000	; 0x1388
 800db18:	2107      	movs	r1, #7
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f000 f972 	bl	800de04 <SDMMC_GetCmdResp1>
 800db20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db22:	69fb      	ldr	r3, [r7, #28]
}
 800db24:	4618      	mov	r0, r3
 800db26:	3720      	adds	r7, #32
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}

0800db2c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b088      	sub	sp, #32
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800db34:	2300      	movs	r3, #0
 800db36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800db38:	2300      	movs	r3, #0
 800db3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800db3c:	2300      	movs	r3, #0
 800db3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db40:	2300      	movs	r3, #0
 800db42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db4a:	f107 0308 	add.w	r3, r7, #8
 800db4e:	4619      	mov	r1, r3
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f7ff ff2f 	bl	800d9b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f000 fb96 	bl	800e288 <SDMMC_GetCmdError>
 800db5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db5e:	69fb      	ldr	r3, [r7, #28]
}
 800db60:	4618      	mov	r0, r3
 800db62:	3720      	adds	r7, #32
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b088      	sub	sp, #32
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800db70:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800db74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800db76:	2308      	movs	r3, #8
 800db78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db80:	2300      	movs	r3, #0
 800db82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db8a:	f107 0308 	add.w	r3, r7, #8
 800db8e:	4619      	mov	r1, r3
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f7ff ff0f 	bl	800d9b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f000 fb28 	bl	800e1ec <SDMMC_GetCmdResp7>
 800db9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db9e:	69fb      	ldr	r3, [r7, #28]
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3720      	adds	r7, #32
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}

0800dba8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b088      	sub	sp, #32
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800dbb6:	2337      	movs	r3, #55	; 0x37
 800dbb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dbba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dbbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dbc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbca:	f107 0308 	add.w	r3, r7, #8
 800dbce:	4619      	mov	r1, r3
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f7ff feef 	bl	800d9b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800dbd6:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbda:	2137      	movs	r1, #55	; 0x37
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f000 f911 	bl	800de04 <SDMMC_GetCmdResp1>
 800dbe2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbe4:	69fb      	ldr	r3, [r7, #28]
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	3720      	adds	r7, #32
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}

0800dbee <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dbee:	b580      	push	{r7, lr}
 800dbf0:	b088      	sub	sp, #32
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	6078      	str	r0, [r7, #4]
 800dbf6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800dbfc:	2329      	movs	r3, #41	; 0x29
 800dbfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc00:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc06:	2300      	movs	r3, #0
 800dc08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc10:	f107 0308 	add.w	r3, r7, #8
 800dc14:	4619      	mov	r1, r3
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f7ff fecc 	bl	800d9b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f000 fa2d 	bl	800e07c <SDMMC_GetCmdResp3>
 800dc22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc24:	69fb      	ldr	r3, [r7, #28]
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	3720      	adds	r7, #32
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}

0800dc2e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800dc2e:	b580      	push	{r7, lr}
 800dc30:	b088      	sub	sp, #32
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	6078      	str	r0, [r7, #4]
 800dc36:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800dc3c:	2306      	movs	r3, #6
 800dc3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc46:	2300      	movs	r3, #0
 800dc48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc50:	f107 0308 	add.w	r3, r7, #8
 800dc54:	4619      	mov	r1, r3
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f7ff feac 	bl	800d9b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800dc5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc60:	2106      	movs	r1, #6
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f000 f8ce 	bl	800de04 <SDMMC_GetCmdResp1>
 800dc68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc6a:	69fb      	ldr	r3, [r7, #28]
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3720      	adds	r7, #32
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b088      	sub	sp, #32
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800dc80:	2333      	movs	r3, #51	; 0x33
 800dc82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc84:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc94:	f107 0308 	add.w	r3, r7, #8
 800dc98:	4619      	mov	r1, r3
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f7ff fe8a 	bl	800d9b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800dca0:	f241 3288 	movw	r2, #5000	; 0x1388
 800dca4:	2133      	movs	r1, #51	; 0x33
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f000 f8ac 	bl	800de04 <SDMMC_GetCmdResp1>
 800dcac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcae:	69fb      	ldr	r3, [r7, #28]
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3720      	adds	r7, #32
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b088      	sub	sp, #32
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800dcc4:	2302      	movs	r3, #2
 800dcc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800dcc8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800dccc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dcd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dcd6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dcd8:	f107 0308 	add.w	r3, r7, #8
 800dcdc:	4619      	mov	r1, r3
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f7ff fe68 	bl	800d9b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f000 f97f 	bl	800dfe8 <SDMMC_GetCmdResp2>
 800dcea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcec:	69fb      	ldr	r3, [r7, #28]
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3720      	adds	r7, #32
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}

0800dcf6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dcf6:	b580      	push	{r7, lr}
 800dcf8:	b088      	sub	sp, #32
 800dcfa:	af00      	add	r7, sp, #0
 800dcfc:	6078      	str	r0, [r7, #4]
 800dcfe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800dd04:	2309      	movs	r3, #9
 800dd06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800dd08:	f44f 7340 	mov.w	r3, #768	; 0x300
 800dd0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd18:	f107 0308 	add.w	r3, r7, #8
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f7ff fe48 	bl	800d9b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f000 f95f 	bl	800dfe8 <SDMMC_GetCmdResp2>
 800dd2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd2c:	69fb      	ldr	r3, [r7, #28]
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3720      	adds	r7, #32
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}

0800dd36 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800dd36:	b580      	push	{r7, lr}
 800dd38:	b088      	sub	sp, #32
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	6078      	str	r0, [r7, #4]
 800dd3e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800dd40:	2300      	movs	r3, #0
 800dd42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800dd44:	2303      	movs	r3, #3
 800dd46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd48:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd58:	f107 0308 	add.w	r3, r7, #8
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f7ff fe28 	bl	800d9b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800dd64:	683a      	ldr	r2, [r7, #0]
 800dd66:	2103      	movs	r1, #3
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f000 f9c7 	bl	800e0fc <SDMMC_GetCmdResp6>
 800dd6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd70:	69fb      	ldr	r3, [r7, #28]
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3720      	adds	r7, #32
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}

0800dd7a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dd7a:	b580      	push	{r7, lr}
 800dd7c:	b088      	sub	sp, #32
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	6078      	str	r0, [r7, #4]
 800dd82:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800dd88:	230d      	movs	r3, #13
 800dd8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd92:	2300      	movs	r3, #0
 800dd94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd9c:	f107 0308 	add.w	r3, r7, #8
 800dda0:	4619      	mov	r1, r3
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f7ff fe06 	bl	800d9b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800dda8:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddac:	210d      	movs	r1, #13
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f000 f828 	bl	800de04 <SDMMC_GetCmdResp1>
 800ddb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddb6:	69fb      	ldr	r3, [r7, #28]
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	3720      	adds	r7, #32
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}

0800ddc0 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b088      	sub	sp, #32
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800ddcc:	230d      	movs	r3, #13
 800ddce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ddd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ddd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ddda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ddde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dde0:	f107 0308 	add.w	r3, r7, #8
 800dde4:	4619      	mov	r1, r3
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f7ff fde4 	bl	800d9b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800ddec:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddf0:	210d      	movs	r1, #13
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f000 f806 	bl	800de04 <SDMMC_GetCmdResp1>
 800ddf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddfa:	69fb      	ldr	r3, [r7, #28]
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3720      	adds	r7, #32
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b088      	sub	sp, #32
 800de08:	af00      	add	r7, sp, #0
 800de0a:	60f8      	str	r0, [r7, #12]
 800de0c:	460b      	mov	r3, r1
 800de0e:	607a      	str	r2, [r7, #4]
 800de10:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800de12:	4b70      	ldr	r3, [pc, #448]	; (800dfd4 <SDMMC_GetCmdResp1+0x1d0>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	4a70      	ldr	r2, [pc, #448]	; (800dfd8 <SDMMC_GetCmdResp1+0x1d4>)
 800de18:	fba2 2303 	umull	r2, r3, r2, r3
 800de1c:	0a5a      	lsrs	r2, r3, #9
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	fb02 f303 	mul.w	r3, r2, r3
 800de24:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800de26:	69fb      	ldr	r3, [r7, #28]
 800de28:	1e5a      	subs	r2, r3, #1
 800de2a:	61fa      	str	r2, [r7, #28]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d102      	bne.n	800de36 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800de30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800de34:	e0c9      	b.n	800dfca <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de3a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800de3c:	69ba      	ldr	r2, [r7, #24]
 800de3e:	4b67      	ldr	r3, [pc, #412]	; (800dfdc <SDMMC_GetCmdResp1+0x1d8>)
 800de40:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800de42:	2b00      	cmp	r3, #0
 800de44:	d0ef      	beq.n	800de26 <SDMMC_GetCmdResp1+0x22>
 800de46:	69bb      	ldr	r3, [r7, #24]
 800de48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d1ea      	bne.n	800de26 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de54:	f003 0304 	and.w	r3, r3, #4
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d004      	beq.n	800de66 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2204      	movs	r2, #4
 800de60:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800de62:	2304      	movs	r3, #4
 800de64:	e0b1      	b.n	800dfca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de6a:	f003 0301 	and.w	r3, r3, #1
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d004      	beq.n	800de7c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2201      	movs	r2, #1
 800de76:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de78:	2301      	movs	r3, #1
 800de7a:	e0a6      	b.n	800dfca <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	4a58      	ldr	r2, [pc, #352]	; (800dfe0 <SDMMC_GetCmdResp1+0x1dc>)
 800de80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800de82:	68f8      	ldr	r0, [r7, #12]
 800de84:	f7ff fdc0 	bl	800da08 <SDMMC_GetCommandResponse>
 800de88:	4603      	mov	r3, r0
 800de8a:	461a      	mov	r2, r3
 800de8c:	7afb      	ldrb	r3, [r7, #11]
 800de8e:	4293      	cmp	r3, r2
 800de90:	d001      	beq.n	800de96 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de92:	2301      	movs	r3, #1
 800de94:	e099      	b.n	800dfca <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800de96:	2100      	movs	r1, #0
 800de98:	68f8      	ldr	r0, [r7, #12]
 800de9a:	f7ff fdc2 	bl	800da22 <SDMMC_GetResponse>
 800de9e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800dea0:	697a      	ldr	r2, [r7, #20]
 800dea2:	4b50      	ldr	r3, [pc, #320]	; (800dfe4 <SDMMC_GetCmdResp1+0x1e0>)
 800dea4:	4013      	ands	r3, r2
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d101      	bne.n	800deae <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800deaa:	2300      	movs	r3, #0
 800deac:	e08d      	b.n	800dfca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	da02      	bge.n	800deba <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800deb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800deb8:	e087      	b.n	800dfca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d001      	beq.n	800dec8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dec4:	2340      	movs	r3, #64	; 0x40
 800dec6:	e080      	b.n	800dfca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d001      	beq.n	800ded6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ded2:	2380      	movs	r3, #128	; 0x80
 800ded4:	e079      	b.n	800dfca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d002      	beq.n	800dee6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dee0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dee4:	e071      	b.n	800dfca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800deec:	2b00      	cmp	r3, #0
 800deee:	d002      	beq.n	800def6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800def0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800def4:	e069      	b.n	800dfca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800defc:	2b00      	cmp	r3, #0
 800defe:	d002      	beq.n	800df06 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800df00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df04:	e061      	b.n	800dfca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d002      	beq.n	800df16 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800df10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800df14:	e059      	b.n	800dfca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d002      	beq.n	800df26 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800df20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df24:	e051      	b.n	800dfca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d002      	beq.n	800df36 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800df30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800df34:	e049      	b.n	800dfca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d002      	beq.n	800df46 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800df40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800df44:	e041      	b.n	800dfca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d002      	beq.n	800df56 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800df50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df54:	e039      	b.n	800dfca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d002      	beq.n	800df66 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800df60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800df64:	e031      	b.n	800dfca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d002      	beq.n	800df76 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800df70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800df74:	e029      	b.n	800dfca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d002      	beq.n	800df86 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800df80:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800df84:	e021      	b.n	800dfca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d002      	beq.n	800df96 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800df90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800df94:	e019      	b.n	800dfca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d002      	beq.n	800dfa6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800dfa0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800dfa4:	e011      	b.n	800dfca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d002      	beq.n	800dfb6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800dfb0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800dfb4:	e009      	b.n	800dfca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	f003 0308 	and.w	r3, r3, #8
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d002      	beq.n	800dfc6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800dfc0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800dfc4:	e001      	b.n	800dfca <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dfc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3720      	adds	r7, #32
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}
 800dfd2:	bf00      	nop
 800dfd4:	24000000 	.word	0x24000000
 800dfd8:	10624dd3 	.word	0x10624dd3
 800dfdc:	00200045 	.word	0x00200045
 800dfe0:	002000c5 	.word	0x002000c5
 800dfe4:	fdffe008 	.word	0xfdffe008

0800dfe8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800dfe8:	b480      	push	{r7}
 800dfea:	b085      	sub	sp, #20
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800dff0:	4b1f      	ldr	r3, [pc, #124]	; (800e070 <SDMMC_GetCmdResp2+0x88>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	4a1f      	ldr	r2, [pc, #124]	; (800e074 <SDMMC_GetCmdResp2+0x8c>)
 800dff6:	fba2 2303 	umull	r2, r3, r2, r3
 800dffa:	0a5b      	lsrs	r3, r3, #9
 800dffc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e000:	fb02 f303 	mul.w	r3, r2, r3
 800e004:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	1e5a      	subs	r2, r3, #1
 800e00a:	60fa      	str	r2, [r7, #12]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d102      	bne.n	800e016 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e010:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e014:	e026      	b.n	800e064 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e01a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e022:	2b00      	cmp	r3, #0
 800e024:	d0ef      	beq.n	800e006 <SDMMC_GetCmdResp2+0x1e>
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d1ea      	bne.n	800e006 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e034:	f003 0304 	and.w	r3, r3, #4
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d004      	beq.n	800e046 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2204      	movs	r2, #4
 800e040:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e042:	2304      	movs	r3, #4
 800e044:	e00e      	b.n	800e064 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e04a:	f003 0301 	and.w	r3, r3, #1
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d004      	beq.n	800e05c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2201      	movs	r2, #1
 800e056:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e058:	2301      	movs	r3, #1
 800e05a:	e003      	b.n	800e064 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	4a06      	ldr	r2, [pc, #24]	; (800e078 <SDMMC_GetCmdResp2+0x90>)
 800e060:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e062:	2300      	movs	r3, #0
}
 800e064:	4618      	mov	r0, r3
 800e066:	3714      	adds	r7, #20
 800e068:	46bd      	mov	sp, r7
 800e06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06e:	4770      	bx	lr
 800e070:	24000000 	.word	0x24000000
 800e074:	10624dd3 	.word	0x10624dd3
 800e078:	002000c5 	.word	0x002000c5

0800e07c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e07c:	b480      	push	{r7}
 800e07e:	b085      	sub	sp, #20
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e084:	4b1a      	ldr	r3, [pc, #104]	; (800e0f0 <SDMMC_GetCmdResp3+0x74>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	4a1a      	ldr	r2, [pc, #104]	; (800e0f4 <SDMMC_GetCmdResp3+0x78>)
 800e08a:	fba2 2303 	umull	r2, r3, r2, r3
 800e08e:	0a5b      	lsrs	r3, r3, #9
 800e090:	f241 3288 	movw	r2, #5000	; 0x1388
 800e094:	fb02 f303 	mul.w	r3, r2, r3
 800e098:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	1e5a      	subs	r2, r3, #1
 800e09e:	60fa      	str	r2, [r7, #12]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d102      	bne.n	800e0aa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e0a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e0a8:	e01b      	b.n	800e0e2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0ae:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d0ef      	beq.n	800e09a <SDMMC_GetCmdResp3+0x1e>
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d1ea      	bne.n	800e09a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0c8:	f003 0304 	and.w	r3, r3, #4
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d004      	beq.n	800e0da <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2204      	movs	r2, #4
 800e0d4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e0d6:	2304      	movs	r3, #4
 800e0d8:	e003      	b.n	800e0e2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	4a06      	ldr	r2, [pc, #24]	; (800e0f8 <SDMMC_GetCmdResp3+0x7c>)
 800e0de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e0e0:	2300      	movs	r3, #0
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3714      	adds	r7, #20
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ec:	4770      	bx	lr
 800e0ee:	bf00      	nop
 800e0f0:	24000000 	.word	0x24000000
 800e0f4:	10624dd3 	.word	0x10624dd3
 800e0f8:	002000c5 	.word	0x002000c5

0800e0fc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b088      	sub	sp, #32
 800e100:	af00      	add	r7, sp, #0
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	460b      	mov	r3, r1
 800e106:	607a      	str	r2, [r7, #4]
 800e108:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e10a:	4b35      	ldr	r3, [pc, #212]	; (800e1e0 <SDMMC_GetCmdResp6+0xe4>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	4a35      	ldr	r2, [pc, #212]	; (800e1e4 <SDMMC_GetCmdResp6+0xe8>)
 800e110:	fba2 2303 	umull	r2, r3, r2, r3
 800e114:	0a5b      	lsrs	r3, r3, #9
 800e116:	f241 3288 	movw	r2, #5000	; 0x1388
 800e11a:	fb02 f303 	mul.w	r3, r2, r3
 800e11e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e120:	69fb      	ldr	r3, [r7, #28]
 800e122:	1e5a      	subs	r2, r3, #1
 800e124:	61fa      	str	r2, [r7, #28]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d102      	bne.n	800e130 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e12a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e12e:	e052      	b.n	800e1d6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e134:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e136:	69bb      	ldr	r3, [r7, #24]
 800e138:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d0ef      	beq.n	800e120 <SDMMC_GetCmdResp6+0x24>
 800e140:	69bb      	ldr	r3, [r7, #24]
 800e142:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e146:	2b00      	cmp	r3, #0
 800e148:	d1ea      	bne.n	800e120 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e14e:	f003 0304 	and.w	r3, r3, #4
 800e152:	2b00      	cmp	r3, #0
 800e154:	d004      	beq.n	800e160 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	2204      	movs	r2, #4
 800e15a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e15c:	2304      	movs	r3, #4
 800e15e:	e03a      	b.n	800e1d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e164:	f003 0301 	and.w	r3, r3, #1
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d004      	beq.n	800e176 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2201      	movs	r2, #1
 800e170:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e172:	2301      	movs	r3, #1
 800e174:	e02f      	b.n	800e1d6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e176:	68f8      	ldr	r0, [r7, #12]
 800e178:	f7ff fc46 	bl	800da08 <SDMMC_GetCommandResponse>
 800e17c:	4603      	mov	r3, r0
 800e17e:	461a      	mov	r2, r3
 800e180:	7afb      	ldrb	r3, [r7, #11]
 800e182:	4293      	cmp	r3, r2
 800e184:	d001      	beq.n	800e18a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e186:	2301      	movs	r3, #1
 800e188:	e025      	b.n	800e1d6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	4a16      	ldr	r2, [pc, #88]	; (800e1e8 <SDMMC_GetCmdResp6+0xec>)
 800e18e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e190:	2100      	movs	r1, #0
 800e192:	68f8      	ldr	r0, [r7, #12]
 800e194:	f7ff fc45 	bl	800da22 <SDMMC_GetResponse>
 800e198:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d106      	bne.n	800e1b2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	0c1b      	lsrs	r3, r3, #16
 800e1a8:	b29a      	uxth	r2, r3
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	e011      	b.n	800e1d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d002      	beq.n	800e1c2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e1bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e1c0:	e009      	b.n	800e1d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d002      	beq.n	800e1d2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e1cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e1d0:	e001      	b.n	800e1d6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e1d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3720      	adds	r7, #32
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}
 800e1de:	bf00      	nop
 800e1e0:	24000000 	.word	0x24000000
 800e1e4:	10624dd3 	.word	0x10624dd3
 800e1e8:	002000c5 	.word	0x002000c5

0800e1ec <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b085      	sub	sp, #20
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e1f4:	4b22      	ldr	r3, [pc, #136]	; (800e280 <SDMMC_GetCmdResp7+0x94>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	4a22      	ldr	r2, [pc, #136]	; (800e284 <SDMMC_GetCmdResp7+0x98>)
 800e1fa:	fba2 2303 	umull	r2, r3, r2, r3
 800e1fe:	0a5b      	lsrs	r3, r3, #9
 800e200:	f241 3288 	movw	r2, #5000	; 0x1388
 800e204:	fb02 f303 	mul.w	r3, r2, r3
 800e208:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	1e5a      	subs	r2, r3, #1
 800e20e:	60fa      	str	r2, [r7, #12]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d102      	bne.n	800e21a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e214:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e218:	e02c      	b.n	800e274 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e21e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e226:	2b00      	cmp	r3, #0
 800e228:	d0ef      	beq.n	800e20a <SDMMC_GetCmdResp7+0x1e>
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e230:	2b00      	cmp	r3, #0
 800e232:	d1ea      	bne.n	800e20a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e238:	f003 0304 	and.w	r3, r3, #4
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d004      	beq.n	800e24a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2204      	movs	r2, #4
 800e244:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e246:	2304      	movs	r3, #4
 800e248:	e014      	b.n	800e274 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e24e:	f003 0301 	and.w	r3, r3, #1
 800e252:	2b00      	cmp	r3, #0
 800e254:	d004      	beq.n	800e260 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2201      	movs	r2, #1
 800e25a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e25c:	2301      	movs	r3, #1
 800e25e:	e009      	b.n	800e274 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d002      	beq.n	800e272 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2240      	movs	r2, #64	; 0x40
 800e270:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e272:	2300      	movs	r3, #0

}
 800e274:	4618      	mov	r0, r3
 800e276:	3714      	adds	r7, #20
 800e278:	46bd      	mov	sp, r7
 800e27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27e:	4770      	bx	lr
 800e280:	24000000 	.word	0x24000000
 800e284:	10624dd3 	.word	0x10624dd3

0800e288 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e288:	b480      	push	{r7}
 800e28a:	b085      	sub	sp, #20
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e290:	4b11      	ldr	r3, [pc, #68]	; (800e2d8 <SDMMC_GetCmdError+0x50>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	4a11      	ldr	r2, [pc, #68]	; (800e2dc <SDMMC_GetCmdError+0x54>)
 800e296:	fba2 2303 	umull	r2, r3, r2, r3
 800e29a:	0a5b      	lsrs	r3, r3, #9
 800e29c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2a0:	fb02 f303 	mul.w	r3, r2, r3
 800e2a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	1e5a      	subs	r2, r3, #1
 800e2aa:	60fa      	str	r2, [r7, #12]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d102      	bne.n	800e2b6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e2b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e2b4:	e009      	b.n	800e2ca <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d0f1      	beq.n	800e2a6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	4a06      	ldr	r2, [pc, #24]	; (800e2e0 <SDMMC_GetCmdError+0x58>)
 800e2c6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800e2c8:	2300      	movs	r3, #0
}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	3714      	adds	r7, #20
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d4:	4770      	bx	lr
 800e2d6:	bf00      	nop
 800e2d8:	24000000 	.word	0x24000000
 800e2dc:	10624dd3 	.word	0x10624dd3
 800e2e0:	002000c5 	.word	0x002000c5

0800e2e4 <__libc_init_array>:
 800e2e4:	b570      	push	{r4, r5, r6, lr}
 800e2e6:	4d0d      	ldr	r5, [pc, #52]	; (800e31c <__libc_init_array+0x38>)
 800e2e8:	4c0d      	ldr	r4, [pc, #52]	; (800e320 <__libc_init_array+0x3c>)
 800e2ea:	1b64      	subs	r4, r4, r5
 800e2ec:	10a4      	asrs	r4, r4, #2
 800e2ee:	2600      	movs	r6, #0
 800e2f0:	42a6      	cmp	r6, r4
 800e2f2:	d109      	bne.n	800e308 <__libc_init_array+0x24>
 800e2f4:	4d0b      	ldr	r5, [pc, #44]	; (800e324 <__libc_init_array+0x40>)
 800e2f6:	4c0c      	ldr	r4, [pc, #48]	; (800e328 <__libc_init_array+0x44>)
 800e2f8:	f000 f82e 	bl	800e358 <_init>
 800e2fc:	1b64      	subs	r4, r4, r5
 800e2fe:	10a4      	asrs	r4, r4, #2
 800e300:	2600      	movs	r6, #0
 800e302:	42a6      	cmp	r6, r4
 800e304:	d105      	bne.n	800e312 <__libc_init_array+0x2e>
 800e306:	bd70      	pop	{r4, r5, r6, pc}
 800e308:	f855 3b04 	ldr.w	r3, [r5], #4
 800e30c:	4798      	blx	r3
 800e30e:	3601      	adds	r6, #1
 800e310:	e7ee      	b.n	800e2f0 <__libc_init_array+0xc>
 800e312:	f855 3b04 	ldr.w	r3, [r5], #4
 800e316:	4798      	blx	r3
 800e318:	3601      	adds	r6, #1
 800e31a:	e7f2      	b.n	800e302 <__libc_init_array+0x1e>
 800e31c:	0800e3fc 	.word	0x0800e3fc
 800e320:	0800e3fc 	.word	0x0800e3fc
 800e324:	0800e3fc 	.word	0x0800e3fc
 800e328:	0800e400 	.word	0x0800e400

0800e32c <memcpy>:
 800e32c:	440a      	add	r2, r1
 800e32e:	4291      	cmp	r1, r2
 800e330:	f100 33ff 	add.w	r3, r0, #4294967295
 800e334:	d100      	bne.n	800e338 <memcpy+0xc>
 800e336:	4770      	bx	lr
 800e338:	b510      	push	{r4, lr}
 800e33a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e33e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e342:	4291      	cmp	r1, r2
 800e344:	d1f9      	bne.n	800e33a <memcpy+0xe>
 800e346:	bd10      	pop	{r4, pc}

0800e348 <memset>:
 800e348:	4402      	add	r2, r0
 800e34a:	4603      	mov	r3, r0
 800e34c:	4293      	cmp	r3, r2
 800e34e:	d100      	bne.n	800e352 <memset+0xa>
 800e350:	4770      	bx	lr
 800e352:	f803 1b01 	strb.w	r1, [r3], #1
 800e356:	e7f9      	b.n	800e34c <memset+0x4>

0800e358 <_init>:
 800e358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e35a:	bf00      	nop
 800e35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e35e:	bc08      	pop	{r3}
 800e360:	469e      	mov	lr, r3
 800e362:	4770      	bx	lr

0800e364 <_fini>:
 800e364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e366:	bf00      	nop
 800e368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e36a:	bc08      	pop	{r3}
 800e36c:	469e      	mov	lr, r3
 800e36e:	4770      	bx	lr
